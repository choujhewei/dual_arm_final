
dual_arm_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cda0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d8  0800cf70  0800cf70  0000df70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d748  0800d748  0000f1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d748  0800d748  0000e748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d750  0800d750  0000f1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d750  0800d750  0000e750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d754  0800d754  0000e754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800d758  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d88  200001d4  0800d92c  0000f1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f5c  0800d92c  0000ff5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014826  00000000  00000000  0000f204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038b3  00000000  00000000  00023a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  000272e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000db8  00000000  00000000  00028498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000261fd  00000000  00000000  00029250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018f53  00000000  00000000  0004f44d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1561  00000000  00000000  000683a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00149901  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e30  00000000  00000000  00149944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0014f774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cf58 	.word	0x0800cf58

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800cf58 	.word	0x0800cf58

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001066:	463b      	mov	r3, r7
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001072:	4b21      	ldr	r3, [pc, #132]	@ (80010f8 <MX_ADC1_Init+0x98>)
 8001074:	4a21      	ldr	r2, [pc, #132]	@ (80010fc <MX_ADC1_Init+0x9c>)
 8001076:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001078:	4b1f      	ldr	r3, [pc, #124]	@ (80010f8 <MX_ADC1_Init+0x98>)
 800107a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800107e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001080:	4b1d      	ldr	r3, [pc, #116]	@ (80010f8 <MX_ADC1_Init+0x98>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001086:	4b1c      	ldr	r3, [pc, #112]	@ (80010f8 <MX_ADC1_Init+0x98>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800108c:	4b1a      	ldr	r3, [pc, #104]	@ (80010f8 <MX_ADC1_Init+0x98>)
 800108e:	2200      	movs	r2, #0
 8001090:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001092:	4b19      	ldr	r3, [pc, #100]	@ (80010f8 <MX_ADC1_Init+0x98>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800109a:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <MX_ADC1_Init+0x98>)
 800109c:	2200      	movs	r2, #0
 800109e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a0:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010a2:	4a17      	ldr	r2, [pc, #92]	@ (8001100 <MX_ADC1_Init+0xa0>)
 80010a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a6:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010ac:	4b12      	ldr	r3, [pc, #72]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b2:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ba:	4b0f      	ldr	r3, [pc, #60]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010bc:	2201      	movs	r2, #1
 80010be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c0:	480d      	ldr	r0, [pc, #52]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010c2:	f003 f8ed 	bl	80042a0 <HAL_ADC_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010cc:	f001 f9c8 	bl	8002460 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010d0:	230a      	movs	r3, #10
 80010d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010d4:	2301      	movs	r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010dc:	463b      	mov	r3, r7
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010e2:	f003 f921 	bl	8004328 <HAL_ADC_ConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010ec:	f001 f9b8 	bl	8002460 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	200001f0 	.word	0x200001f0
 80010fc:	40012000 	.word	0x40012000
 8001100:	0f000001 	.word	0x0f000001

08001104 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800110a:	463b      	mov	r3, r7
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001116:	4b21      	ldr	r3, [pc, #132]	@ (800119c <MX_ADC2_Init+0x98>)
 8001118:	4a21      	ldr	r2, [pc, #132]	@ (80011a0 <MX_ADC2_Init+0x9c>)
 800111a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800111c:	4b1f      	ldr	r3, [pc, #124]	@ (800119c <MX_ADC2_Init+0x98>)
 800111e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001122:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001124:	4b1d      	ldr	r3, [pc, #116]	@ (800119c <MX_ADC2_Init+0x98>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800112a:	4b1c      	ldr	r3, [pc, #112]	@ (800119c <MX_ADC2_Init+0x98>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001130:	4b1a      	ldr	r3, [pc, #104]	@ (800119c <MX_ADC2_Init+0x98>)
 8001132:	2200      	movs	r2, #0
 8001134:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001136:	4b19      	ldr	r3, [pc, #100]	@ (800119c <MX_ADC2_Init+0x98>)
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800113e:	4b17      	ldr	r3, [pc, #92]	@ (800119c <MX_ADC2_Init+0x98>)
 8001140:	2200      	movs	r2, #0
 8001142:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001144:	4b15      	ldr	r3, [pc, #84]	@ (800119c <MX_ADC2_Init+0x98>)
 8001146:	4a17      	ldr	r2, [pc, #92]	@ (80011a4 <MX_ADC2_Init+0xa0>)
 8001148:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800114a:	4b14      	ldr	r3, [pc, #80]	@ (800119c <MX_ADC2_Init+0x98>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001150:	4b12      	ldr	r3, [pc, #72]	@ (800119c <MX_ADC2_Init+0x98>)
 8001152:	2201      	movs	r2, #1
 8001154:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001156:	4b11      	ldr	r3, [pc, #68]	@ (800119c <MX_ADC2_Init+0x98>)
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800115e:	4b0f      	ldr	r3, [pc, #60]	@ (800119c <MX_ADC2_Init+0x98>)
 8001160:	2201      	movs	r2, #1
 8001162:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001164:	480d      	ldr	r0, [pc, #52]	@ (800119c <MX_ADC2_Init+0x98>)
 8001166:	f003 f89b 	bl	80042a0 <HAL_ADC_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001170:	f001 f976 	bl	8002460 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001174:	230b      	movs	r3, #11
 8001176:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001180:	463b      	mov	r3, r7
 8001182:	4619      	mov	r1, r3
 8001184:	4805      	ldr	r0, [pc, #20]	@ (800119c <MX_ADC2_Init+0x98>)
 8001186:	f003 f8cf 	bl	8004328 <HAL_ADC_ConfigChannel>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001190:	f001 f966 	bl	8002460 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000238 	.word	0x20000238
 80011a0:	40012100 	.word	0x40012100
 80011a4:	0f000001 	.word	0x0f000001

080011a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08c      	sub	sp, #48	@ 0x30
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a2e      	ldr	r2, [pc, #184]	@ (8001280 <HAL_ADC_MspInit+0xd8>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d128      	bne.n	800121c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
 80011ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d2:	4a2c      	ldr	r2, [pc, #176]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 80011d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011da:	4b2a      	ldr	r3, [pc, #168]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011e2:	61bb      	str	r3, [r7, #24]
 80011e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	4b26      	ldr	r3, [pc, #152]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a25      	ldr	r2, [pc, #148]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 80011f0:	f043 0304 	orr.w	r3, r3, #4
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b23      	ldr	r3, [pc, #140]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0304 	and.w	r3, r3, #4
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001202:	2301      	movs	r3, #1
 8001204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001206:	2303      	movs	r3, #3
 8001208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4619      	mov	r1, r3
 8001214:	481c      	ldr	r0, [pc, #112]	@ (8001288 <HAL_ADC_MspInit+0xe0>)
 8001216:	f003 ffc9 	bl	80051ac <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800121a:	e02c      	b.n	8001276 <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a1a      	ldr	r2, [pc, #104]	@ (800128c <HAL_ADC_MspInit+0xe4>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d127      	bne.n	8001276 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122e:	4a15      	ldr	r2, [pc, #84]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 8001230:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001234:	6453      	str	r3, [r2, #68]	@ 0x44
 8001236:	4b13      	ldr	r3, [pc, #76]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	4a0e      	ldr	r2, [pc, #56]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	6313      	str	r3, [r2, #48]	@ 0x30
 8001252:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800125e:	2302      	movs	r3, #2
 8001260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001262:	2303      	movs	r3, #3
 8001264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126a:	f107 031c 	add.w	r3, r7, #28
 800126e:	4619      	mov	r1, r3
 8001270:	4805      	ldr	r0, [pc, #20]	@ (8001288 <HAL_ADC_MspInit+0xe0>)
 8001272:	f003 ff9b 	bl	80051ac <HAL_GPIO_Init>
}
 8001276:	bf00      	nop
 8001278:	3730      	adds	r7, #48	@ 0x30
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40012000 	.word	0x40012000
 8001284:	40023800 	.word	0x40023800
 8001288:	40020800 	.word	0x40020800
 800128c:	40012100 	.word	0x40012100

08001290 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	4b1b      	ldr	r3, [pc, #108]	@ (8001308 <MX_DMA_Init+0x78>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	4a1a      	ldr	r2, [pc, #104]	@ (8001308 <MX_DMA_Init+0x78>)
 80012a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a6:	4b18      	ldr	r3, [pc, #96]	@ (8001308 <MX_DMA_Init+0x78>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <MX_DMA_Init+0x78>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	4a13      	ldr	r2, [pc, #76]	@ (8001308 <MX_DMA_Init+0x78>)
 80012bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c2:	4b11      	ldr	r3, [pc, #68]	@ (8001308 <MX_DMA_Init+0x78>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	200b      	movs	r0, #11
 80012d4:	f003 fb31 	bl	800493a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80012d8:	200b      	movs	r0, #11
 80012da:	f003 fb4a 	bl	8004972 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	200d      	movs	r0, #13
 80012e4:	f003 fb29 	bl	800493a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80012e8:	200d      	movs	r0, #13
 80012ea:	f003 fb42 	bl	8004972 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	2039      	movs	r0, #57	@ 0x39
 80012f4:	f003 fb21 	bl	800493a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80012f8:	2039      	movs	r0, #57	@ 0x39
 80012fa:	f003 fb3a 	bl	8004972 <HAL_NVIC_EnableIRQ>

}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800

0800130c <DWT_Init>:

#include "dwt_util.h"
#include "stm32f4xx_hal.h"

void DWT_Init(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8001310:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <DWT_Init+0x38>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d105      	bne.n	8001328 <DWT_Init+0x1c>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800131c:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <DWT_Init+0x38>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	4a08      	ldr	r2, [pc, #32]	@ (8001344 <DWT_Init+0x38>)
 8001322:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001326:	60d3      	str	r3, [r2, #12]
    }
    DWT->CYCCNT = 0;
 8001328:	4b07      	ldr	r3, [pc, #28]	@ (8001348 <DWT_Init+0x3c>)
 800132a:	2200      	movs	r2, #0
 800132c:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <DWT_Init+0x3c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a05      	ldr	r2, [pc, #20]	@ (8001348 <DWT_Init+0x3c>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6013      	str	r3, [r2, #0]
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000edf0 	.word	0xe000edf0
 8001348:	e0001000 	.word	0xe0001000

0800134c <bus_for_id>:
DynamixelBus_t Dynamixel_Handle_R;
DynamixelBus_t Dynamixel_Handle_L;

static DynamixelBus_t* g_active_bus = NULL;

static inline DynamixelBus_t* bus_for_id(uint8_t id){
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
    if (id >= DXL_RIGHT_ID_MIN && id <= DXL_RIGHT_ID_MAX) return &Dynamixel_Handle_R; // UART4
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d004      	beq.n	8001366 <bus_for_id+0x1a>
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	2b07      	cmp	r3, #7
 8001360:	d801      	bhi.n	8001366 <bus_for_id+0x1a>
 8001362:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <bus_for_id+0x38>)
 8001364:	e008      	b.n	8001378 <bus_for_id+0x2c>
    if (id >= DXL_LEFT_ID_MIN  && id <= DXL_LEFT_ID_MAX)  return &Dynamixel_Handle_L; // UART5
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	2b07      	cmp	r3, #7
 800136a:	d904      	bls.n	8001376 <bus_for_id+0x2a>
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	2b0e      	cmp	r3, #14
 8001370:	d801      	bhi.n	8001376 <bus_for_id+0x2a>
 8001372:	4b05      	ldr	r3, [pc, #20]	@ (8001388 <bus_for_id+0x3c>)
 8001374:	e000      	b.n	8001378 <bus_for_id+0x2c>
    return &Dynamixel_Handle_R; // 超出範圍時的預設（你也可改成 assert 或回傳 NULL）
 8001376:	4b03      	ldr	r3, [pc, #12]	@ (8001384 <bus_for_id+0x38>)
}
 8001378:	4618      	mov	r0, r3
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	20000280 	.word	0x20000280
 8001388:	2000028c 	.word	0x2000028c

0800138c <bus_begin>:

static void bus_begin(DynamixelBus_t* b, UART_HandleTypeDef* uart, GPIO_TypeDef* dir_port, uint16_t pin){
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
 8001398:	807b      	strh	r3, [r7, #2]
    b->huart   = uart;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	68ba      	ldr	r2, [r7, #8]
 800139e:	601a      	str	r2, [r3, #0]
    b->dir_port= dir_port;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	605a      	str	r2, [r3, #4]
    b->dir_pin = pin;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	887a      	ldrh	r2, [r7, #2]
 80013aa:	811a      	strh	r2, [r3, #8]
    b->dma_rx_complete_flag = false;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2200      	movs	r2, #0
 80013b0:	729a      	strb	r2, [r3, #10]
    HAL_GPIO_WritePin(dir_port, pin, GPIO_PIN_RESET);
 80013b2:	887b      	ldrh	r3, [r7, #2]
 80013b4:	2200      	movs	r2, #0
 80013b6:	4619      	mov	r1, r3
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f004 f88b 	bl	80054d4 <HAL_GPIO_WritePin>
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <Dynamixel_begin_right>:

void Dynamixel_begin_right(UART_HandleTypeDef* uart, GPIO_TypeDef* dir_port, uint16_t pin){ bus_begin(&Dynamixel_Handle_R, uart, dir_port, pin); }
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	4613      	mov	r3, r2
 80013d4:	80fb      	strh	r3, [r7, #6]
 80013d6:	88fb      	ldrh	r3, [r7, #6]
 80013d8:	68ba      	ldr	r2, [r7, #8]
 80013da:	68f9      	ldr	r1, [r7, #12]
 80013dc:	4803      	ldr	r0, [pc, #12]	@ (80013ec <Dynamixel_begin_right+0x24>)
 80013de:	f7ff ffd5 	bl	800138c <bus_begin>
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000280 	.word	0x20000280

080013f0 <Dynamixel_begin_left>:
void Dynamixel_begin_left (UART_HandleTypeDef* uart, GPIO_TypeDef* dir_port, uint16_t pin){ bus_begin(&Dynamixel_Handle_L, uart, dir_port, pin); }
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	4613      	mov	r3, r2
 80013fc:	80fb      	strh	r3, [r7, #6]
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	68ba      	ldr	r2, [r7, #8]
 8001402:	68f9      	ldr	r1, [r7, #12]
 8001404:	4803      	ldr	r0, [pc, #12]	@ (8001414 <Dynamixel_begin_left+0x24>)
 8001406:	f7ff ffc1 	bl	800138c <bus_begin>
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2000028c 	.word	0x2000028c

08001418 <Dynamixel_onDmaRxComplete>:

void Dynamixel_onDmaRxComplete(UART_HandleTypeDef *huart){
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
    if (Dynamixel_Handle_R.huart && huart->Instance == Dynamixel_Handle_R.huart->Instance) {
 8001420:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <Dynamixel_onDmaRxComplete+0x50>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00a      	beq.n	800143e <Dynamixel_onDmaRxComplete+0x26>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b0e      	ldr	r3, [pc, #56]	@ (8001468 <Dynamixel_onDmaRxComplete+0x50>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d103      	bne.n	800143e <Dynamixel_onDmaRxComplete+0x26>
        Dynamixel_Handle_R.dma_rx_complete_flag = true;
 8001436:	4b0c      	ldr	r3, [pc, #48]	@ (8001468 <Dynamixel_onDmaRxComplete+0x50>)
 8001438:	2201      	movs	r2, #1
 800143a:	729a      	strb	r2, [r3, #10]
    } else if (Dynamixel_Handle_L.huart && huart->Instance == Dynamixel_Handle_L.huart->Instance) {
        Dynamixel_Handle_L.dma_rx_complete_flag = true;
    }
}
 800143c:	e00d      	b.n	800145a <Dynamixel_onDmaRxComplete+0x42>
    } else if (Dynamixel_Handle_L.huart && huart->Instance == Dynamixel_Handle_L.huart->Instance) {
 800143e:	4b0b      	ldr	r3, [pc, #44]	@ (800146c <Dynamixel_onDmaRxComplete+0x54>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <Dynamixel_onDmaRxComplete+0x42>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	4b08      	ldr	r3, [pc, #32]	@ (800146c <Dynamixel_onDmaRxComplete+0x54>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	429a      	cmp	r2, r3
 8001452:	d102      	bne.n	800145a <Dynamixel_onDmaRxComplete+0x42>
        Dynamixel_Handle_L.dma_rx_complete_flag = true;
 8001454:	4b05      	ldr	r3, [pc, #20]	@ (800146c <Dynamixel_onDmaRxComplete+0x54>)
 8001456:	2201      	movs	r2, #1
 8001458:	729a      	strb	r2, [r3, #10]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000280 	.word	0x20000280
 800146c:	2000028c 	.word	0x2000028c

08001470 <setDirPin>:

static inline void setDirPin(DynamixelBus_t* b, bool is_tx){
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(b->dir_port, b->dir_pin, is_tx ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6858      	ldr	r0, [r3, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	891b      	ldrh	r3, [r3, #8]
 8001484:	78fa      	ldrb	r2, [r7, #3]
 8001486:	4619      	mov	r1, r3
 8001488:	f004 f824 	bl	80054d4 <HAL_GPIO_WritePin>
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <Dynamixel_transmitPacket>:
        HAL_GPIO_WritePin(g_active_bus->dir_port, g_active_bus->dir_pin,
                          is_tx ? GPIO_PIN_SET : GPIO_PIN_RESET);
    }
}

void Dynamixel_transmitPacket(uint8_t id, uint8_t instruction, const uint8_t* params, uint16_t param_len) {
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b0cf      	sub	sp, #316	@ 0x13c
 8001498:	af00      	add	r7, sp, #0
 800149a:	4604      	mov	r4, r0
 800149c:	4608      	mov	r0, r1
 800149e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80014a2:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 80014a6:	600a      	str	r2, [r1, #0]
 80014a8:	4619      	mov	r1, r3
 80014aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80014ae:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80014b2:	4622      	mov	r2, r4
 80014b4:	701a      	strb	r2, [r3, #0]
 80014b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80014ba:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80014be:	4602      	mov	r2, r0
 80014c0:	701a      	strb	r2, [r3, #0]
 80014c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80014c6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80014ca:	460a      	mov	r2, r1
 80014cc:	801a      	strh	r2, [r3, #0]
    uint8_t packet[300];
    if (param_len > sizeof(packet) - 14) return;
 80014ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80014d2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	f5b3 7f8f 	cmp.w	r3, #286	@ 0x11e
 80014dc:	f200 80bf 	bhi.w	800165e <Dynamixel_transmitPacket+0x1ca>
    g_active_bus = bus_for_id(id);
 80014e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80014e4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff ff2e 	bl	800134c <bus_for_id>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4a5d      	ldr	r2, [pc, #372]	@ (8001668 <Dynamixel_transmitPacket+0x1d4>)
 80014f4:	6013      	str	r3, [r2, #0]
    uint16_t len = param_len + 10;
 80014f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80014fa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	330a      	adds	r3, #10
 8001502:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
    packet[0]=0xFF; packet[1]=0xFF; packet[2]=0xFD; packet[3]=0x00;
 8001506:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800150a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800150e:	22ff      	movs	r2, #255	@ 0xff
 8001510:	701a      	strb	r2, [r3, #0]
 8001512:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001516:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800151a:	22ff      	movs	r2, #255	@ 0xff
 800151c:	705a      	strb	r2, [r3, #1]
 800151e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001522:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001526:	22fd      	movs	r2, #253	@ 0xfd
 8001528:	709a      	strb	r2, [r3, #2]
 800152a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800152e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001532:	2200      	movs	r2, #0
 8001534:	70da      	strb	r2, [r3, #3]
    packet[4]=id;
 8001536:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800153a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800153e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8001542:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8001546:	7812      	ldrb	r2, [r2, #0]
 8001548:	711a      	strb	r2, [r3, #4]
    packet[5]=(param_len+3)&0xFF;
 800154a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800154e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	3303      	adds	r3, #3
 8001558:	b2da      	uxtb	r2, r3
 800155a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800155e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001562:	715a      	strb	r2, [r3, #5]
    packet[6]=((param_len+3)>>8)&0xFF;
 8001564:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001568:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	3303      	adds	r3, #3
 8001570:	121b      	asrs	r3, r3, #8
 8001572:	b2da      	uxtb	r2, r3
 8001574:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001578:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800157c:	719a      	strb	r2, [r3, #6]
    packet[7]=instruction;
 800157e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001582:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001586:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800158a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800158e:	7812      	ldrb	r2, [r2, #0]
 8001590:	71da      	strb	r2, [r3, #7]
    if(param_len>0 && params) memcpy(&packet[8],params,param_len);
 8001592:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001596:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d017      	beq.n	80015d0 <Dynamixel_transmitPacket+0x13c>
 80015a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80015a4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d010      	beq.n	80015d0 <Dynamixel_transmitPacket+0x13c>
 80015ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80015b2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80015b6:	8819      	ldrh	r1, [r3, #0]
 80015b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80015bc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80015c0:	f107 0208 	add.w	r2, r7, #8
 80015c4:	f102 0008 	add.w	r0, r2, #8
 80015c8:	460a      	mov	r2, r1
 80015ca:	6819      	ldr	r1, [r3, #0]
 80015cc:	f009 f813 	bl	800a5f6 <memcpy>
    uint16_t crc=update_crc(0,packet,len-2);
 80015d0:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 80015d4:	3b02      	subs	r3, #2
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	f107 0308 	add.w	r3, r7, #8
 80015dc:	4619      	mov	r1, r3
 80015de:	2000      	movs	r0, #0
 80015e0:	f000 fbba 	bl	8001d58 <update_crc>
 80015e4:	4603      	mov	r3, r0
 80015e6:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
    packet[len-2]=crc&0xFF;
 80015ea:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 80015ee:	3b02      	subs	r3, #2
 80015f0:	f8b7 2134 	ldrh.w	r2, [r7, #308]	@ 0x134
 80015f4:	b2d1      	uxtb	r1, r2
 80015f6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80015fa:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80015fe:	54d1      	strb	r1, [r2, r3]
    packet[len-1]=(crc>>8)&0xFF;
 8001600:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8001604:	0a1b      	lsrs	r3, r3, #8
 8001606:	b29a      	uxth	r2, r3
 8001608:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 800160c:	3b01      	subs	r3, #1
 800160e:	b2d1      	uxtb	r1, r2
 8001610:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8001614:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8001618:	54d1      	strb	r1, [r2, r3]
    setDirPin(g_active_bus, true);
 800161a:	4b13      	ldr	r3, [pc, #76]	@ (8001668 <Dynamixel_transmitPacket+0x1d4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2101      	movs	r1, #1
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff25 	bl	8001470 <setDirPin>
    HAL_UART_Transmit(g_active_bus->huart, packet, len, HAL_MAX_DELAY);
 8001626:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <Dynamixel_transmitPacket+0x1d4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6818      	ldr	r0, [r3, #0]
 800162c:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 8001630:	f107 0108 	add.w	r1, r7, #8
 8001634:	f04f 33ff 	mov.w	r3, #4294967295
 8001638:	f005 fc7a 	bl	8006f30 <HAL_UART_Transmit>
    while (__HAL_UART_GET_FLAG(g_active_bus->huart, UART_FLAG_TC) == RESET);
 800163c:	bf00      	nop
 800163e:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <Dynamixel_transmitPacket+0x1d4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800164c:	2b40      	cmp	r3, #64	@ 0x40
 800164e:	d1f6      	bne.n	800163e <Dynamixel_transmitPacket+0x1aa>
    setDirPin(g_active_bus, false);
 8001650:	4b05      	ldr	r3, [pc, #20]	@ (8001668 <Dynamixel_transmitPacket+0x1d4>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff ff0a 	bl	8001470 <setDirPin>
 800165c:	e000      	b.n	8001660 <Dynamixel_transmitPacket+0x1cc>
    if (param_len > sizeof(packet) - 14) return;
 800165e:	bf00      	nop
}
 8001660:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8001664:	46bd      	mov	sp, r7
 8001666:	bd90      	pop	{r4, r7, pc}
 8001668:	20000298 	.word	0x20000298

0800166c <Dynamixel_receiveStatusPacket>:

bool Dynamixel_receiveStatusPacket(uint8_t* buf, uint16_t size, uint32_t tmo){
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	460b      	mov	r3, r1
 8001676:	607a      	str	r2, [r7, #4]
 8001678:	817b      	strh	r3, [r7, #10]
    if (!g_active_bus) return false;
 800167a:	4b34      	ldr	r3, [pc, #208]	@ (800174c <Dynamixel_receiveStatusPacket+0xe0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <Dynamixel_receiveStatusPacket+0x1a>
 8001682:	2300      	movs	r3, #0
 8001684:	e05e      	b.n	8001744 <Dynamixel_receiveStatusPacket+0xd8>
    g_active_bus->dma_rx_complete_flag = false;
 8001686:	4b31      	ldr	r3, [pc, #196]	@ (800174c <Dynamixel_receiveStatusPacket+0xe0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2200      	movs	r2, #0
 800168c:	729a      	strb	r2, [r3, #10]

    if (HAL_UART_GetState(g_active_bus->huart) != HAL_UART_STATE_READY)
 800168e:	4b2f      	ldr	r3, [pc, #188]	@ (800174c <Dynamixel_receiveStatusPacket+0xe0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f006 f913 	bl	80078c0 <HAL_UART_GetState>
 800169a:	4603      	mov	r3, r0
 800169c:	2b20      	cmp	r3, #32
 800169e:	d005      	beq.n	80016ac <Dynamixel_receiveStatusPacket+0x40>
        HAL_UART_Abort_IT(g_active_bus->huart);
 80016a0:	4b2a      	ldr	r3, [pc, #168]	@ (800174c <Dynamixel_receiveStatusPacket+0xe0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f005 fd18 	bl	80070dc <HAL_UART_Abort_IT>

    if (HAL_UART_Receive_DMA(g_active_bus->huart, buf, size) != HAL_OK) return false;
 80016ac:	4b27      	ldr	r3, [pc, #156]	@ (800174c <Dynamixel_receiveStatusPacket+0xe0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	897a      	ldrh	r2, [r7, #10]
 80016b4:	68f9      	ldr	r1, [r7, #12]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f005 fcea 	bl	8007090 <HAL_UART_Receive_DMA>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <Dynamixel_receiveStatusPacket+0x5a>
 80016c2:	2300      	movs	r3, #0
 80016c4:	e03e      	b.n	8001744 <Dynamixel_receiveStatusPacket+0xd8>

    uint32_t st = HAL_GetTick();
 80016c6:	f002 fdbb 	bl	8004240 <HAL_GetTick>
 80016ca:	6178      	str	r0, [r7, #20]
    while (!g_active_bus->dma_rx_complete_flag && (HAL_GetTick() - st < tmo));
 80016cc:	bf00      	nop
 80016ce:	4b1f      	ldr	r3, [pc, #124]	@ (800174c <Dynamixel_receiveStatusPacket+0xe0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	7a9b      	ldrb	r3, [r3, #10]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	f083 0301 	eor.w	r3, r3, #1
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d007      	beq.n	80016f0 <Dynamixel_receiveStatusPacket+0x84>
 80016e0:	f002 fdae 	bl	8004240 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d8ee      	bhi.n	80016ce <Dynamixel_receiveStatusPacket+0x62>
    if (!g_active_bus->dma_rx_complete_flag){
 80016f0:	4b16      	ldr	r3, [pc, #88]	@ (800174c <Dynamixel_receiveStatusPacket+0xe0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	7a9b      	ldrb	r3, [r3, #10]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	f083 0301 	eor.w	r3, r3, #1
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d007      	beq.n	8001712 <Dynamixel_receiveStatusPacket+0xa6>
        HAL_UART_Abort_IT(g_active_bus->huart);
 8001702:	4b12      	ldr	r3, [pc, #72]	@ (800174c <Dynamixel_receiveStatusPacket+0xe0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f005 fce7 	bl	80070dc <HAL_UART_Abort_IT>
        return false;
 800170e:	2300      	movs	r3, #0
 8001710:	e018      	b.n	8001744 <Dynamixel_receiveStatusPacket+0xd8>
    }
    return (buf[0]==0xFF && buf[1]==0xFF && buf[2]==0xFD && buf[8]==0x00);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2bff      	cmp	r3, #255	@ 0xff
 8001718:	d110      	bne.n	800173c <Dynamixel_receiveStatusPacket+0xd0>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	3301      	adds	r3, #1
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2bff      	cmp	r3, #255	@ 0xff
 8001722:	d10b      	bne.n	800173c <Dynamixel_receiveStatusPacket+0xd0>
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	3302      	adds	r3, #2
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2bfd      	cmp	r3, #253	@ 0xfd
 800172c:	d106      	bne.n	800173c <Dynamixel_receiveStatusPacket+0xd0>
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	3308      	adds	r3, #8
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <Dynamixel_receiveStatusPacket+0xd0>
 8001738:	2301      	movs	r3, #1
 800173a:	e000      	b.n	800173e <Dynamixel_receiveStatusPacket+0xd2>
 800173c:	2300      	movs	r3, #0
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	b2db      	uxtb	r3, r3
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000298 	.word	0x20000298

08001750 <Dynamixel_write>:
        if(b[4]==id && b[8]==0x00){*val=b[9];return true;}
    }
    return false;
}

void Dynamixel_write(uint8_t id,uint16_t addr,const uint8_t* d,uint16_t len){
 8001750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001754:	b089      	sub	sp, #36	@ 0x24
 8001756:	af00      	add	r7, sp, #0
 8001758:	60ba      	str	r2, [r7, #8]
 800175a:	461a      	mov	r2, r3
 800175c:	4603      	mov	r3, r0
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	460b      	mov	r3, r1
 8001762:	81bb      	strh	r3, [r7, #12]
 8001764:	4613      	mov	r3, r2
 8001766:	80fb      	strh	r3, [r7, #6]
 8001768:	466b      	mov	r3, sp
 800176a:	461e      	mov	r6, r3
    const uint8_t INST_WRITE=0x03;
 800176c:	2303      	movs	r3, #3
 800176e:	77fb      	strb	r3, [r7, #31]
    uint8_t p[len+2];p[0]=addr&0xFF;p[1]=(addr>>8)&0xFF;
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	1c99      	adds	r1, r3, #2
 8001774:	1e4b      	subs	r3, r1, #1
 8001776:	61bb      	str	r3, [r7, #24]
 8001778:	460a      	mov	r2, r1
 800177a:	2300      	movs	r3, #0
 800177c:	4690      	mov	r8, r2
 800177e:	4699      	mov	r9, r3
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800178c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001790:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001794:	460a      	mov	r2, r1
 8001796:	2300      	movs	r3, #0
 8001798:	4614      	mov	r4, r2
 800179a:	461d      	mov	r5, r3
 800179c:	f04f 0200 	mov.w	r2, #0
 80017a0:	f04f 0300 	mov.w	r3, #0
 80017a4:	00eb      	lsls	r3, r5, #3
 80017a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017aa:	00e2      	lsls	r2, r4, #3
 80017ac:	460b      	mov	r3, r1
 80017ae:	3307      	adds	r3, #7
 80017b0:	08db      	lsrs	r3, r3, #3
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	ebad 0d03 	sub.w	sp, sp, r3
 80017b8:	466b      	mov	r3, sp
 80017ba:	3300      	adds	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	89bb      	ldrh	r3, [r7, #12]
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	701a      	strb	r2, [r3, #0]
 80017c6:	89bb      	ldrh	r3, [r7, #12]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	705a      	strb	r2, [r3, #1]
    memcpy(&p[2],d,len);
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	3302      	adds	r3, #2
 80017d6:	88fa      	ldrh	r2, [r7, #6]
 80017d8:	68b9      	ldr	r1, [r7, #8]
 80017da:	4618      	mov	r0, r3
 80017dc:	f008 ff0b 	bl	800a5f6 <memcpy>
    Dynamixel_transmitPacket(id,INST_WRITE,p,len+2);
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	3302      	adds	r3, #2
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	7ff9      	ldrb	r1, [r7, #31]
 80017e8:	7bf8      	ldrb	r0, [r7, #15]
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	f7ff fe52 	bl	8001494 <Dynamixel_transmitPacket>
 80017f0:	46b5      	mov	sp, r6
}
 80017f2:	bf00      	nop
 80017f4:	3724      	adds	r7, #36	@ 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080017fc <Dynamixel_setOperatingMode>:

void Dynamixel_torqueOn(uint8_t id){uint8_t d=1;Dynamixel_write(id,64,&d,1);}
void Dynamixel_setOperatingMode(uint8_t id,uint8_t m){Dynamixel_write(id,11,&m,1);}
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	460a      	mov	r2, r1
 8001806:	71fb      	strb	r3, [r7, #7]
 8001808:	4613      	mov	r3, r2
 800180a:	71bb      	strb	r3, [r7, #6]
 800180c:	1dba      	adds	r2, r7, #6
 800180e:	79f8      	ldrb	r0, [r7, #7]
 8001810:	2301      	movs	r3, #1
 8001812:	210b      	movs	r1, #11
 8001814:	f7ff ff9c 	bl	8001750 <Dynamixel_write>
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <Dynamixel_SyncWrite>:
    if(Dynamixel_receiveStatusPacket(r,15,100))
        return (int32_t)(r[9]|(r[10]<<8)|(r[11]<<16)|(r[12]<<24));
    return -1;
}

void Dynamixel_SyncWrite(uint16_t address, uint16_t data_len, const uint8_t* ids, uint8_t id_count, const uint8_t* all_data){
 8001820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001824:	b099      	sub	sp, #100	@ 0x64
 8001826:	af00      	add	r7, sp, #0
 8001828:	613a      	str	r2, [r7, #16]
 800182a:	461a      	mov	r2, r3
 800182c:	4603      	mov	r3, r0
 800182e:	82fb      	strh	r3, [r7, #22]
 8001830:	460b      	mov	r3, r1
 8001832:	82bb      	strh	r3, [r7, #20]
 8001834:	4613      	mov	r3, r2
 8001836:	73fb      	strb	r3, [r7, #15]
    const uint8_t INST_SYNC_WRITE=0x83;
 8001838:	2383      	movs	r3, #131	@ 0x83
 800183a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

    uint8_t idsR[14], idsL[14]; uint8_t nR=0, nL=0;
 800183e:	2300      	movs	r3, #0
 8001840:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001844:	2300      	movs	r3, #0
 8001846:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    for (uint8_t i = 0; i < id_count; i++) {
 800184a:	2300      	movs	r3, #0
 800184c:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
 8001850:	e041      	b.n	80018d6 <Dynamixel_SyncWrite+0xb6>
        if (ids[i] >= DXL_RIGHT_ID_MIN && ids[i] <= DXL_RIGHT_ID_MAX) {
 8001852:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4413      	add	r3, r2
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d017      	beq.n	8001890 <Dynamixel_SyncWrite+0x70>
 8001860:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4413      	add	r3, r2
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b07      	cmp	r3, #7
 800186c:	d810      	bhi.n	8001890 <Dynamixel_SyncWrite+0x70>
            idsR[nR++] = ids[i];
 800186e:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	441a      	add	r2, r3
 8001876:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800187a:	1c59      	adds	r1, r3, #1
 800187c:	f887 105f 	strb.w	r1, [r7, #95]	@ 0x5f
 8001880:	7812      	ldrb	r2, [r2, #0]
 8001882:	3358      	adds	r3, #88	@ 0x58
 8001884:	f107 0108 	add.w	r1, r7, #8
 8001888:	440b      	add	r3, r1
 800188a:	f803 2c34 	strb.w	r2, [r3, #-52]
 800188e:	e01d      	b.n	80018cc <Dynamixel_SyncWrite+0xac>
        } else if (ids[i] >= DXL_LEFT_ID_MIN && ids[i] <= DXL_LEFT_ID_MAX) {
 8001890:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4413      	add	r3, r2
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b07      	cmp	r3, #7
 800189c:	d916      	bls.n	80018cc <Dynamixel_SyncWrite+0xac>
 800189e:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4413      	add	r3, r2
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b0e      	cmp	r3, #14
 80018aa:	d80f      	bhi.n	80018cc <Dynamixel_SyncWrite+0xac>
            idsL[nL++] = ids[i];
 80018ac:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	441a      	add	r2, r3
 80018b4:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80018b8:	1c59      	adds	r1, r3, #1
 80018ba:	f887 105e 	strb.w	r1, [r7, #94]	@ 0x5e
 80018be:	7812      	ldrb	r2, [r2, #0]
 80018c0:	3358      	adds	r3, #88	@ 0x58
 80018c2:	f107 0108 	add.w	r1, r7, #8
 80018c6:	440b      	add	r3, r1
 80018c8:	f803 2c44 	strb.w	r2, [r3, #-68]
    for (uint8_t i = 0; i < id_count; i++) {
 80018cc:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 80018d0:	3301      	adds	r3, #1
 80018d2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
 80018d6:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d3b8      	bcc.n	8001852 <Dynamixel_SyncWrite+0x32>
        }
    }

    if (nR){
 80018e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 809e 	beq.w	8001a26 <Dynamixel_SyncWrite+0x206>
 80018ea:	466b      	mov	r3, sp
 80018ec:	461e      	mov	r6, r3
        g_active_bus = &Dynamixel_Handle_R;
 80018ee:	4ba0      	ldr	r3, [pc, #640]	@ (8001b70 <Dynamixel_SyncWrite+0x350>)
 80018f0:	4aa0      	ldr	r2, [pc, #640]	@ (8001b74 <Dynamixel_SyncWrite+0x354>)
 80018f2:	601a      	str	r2, [r3, #0]
        uint16_t plen = 4 + (data_len+1)*nR;
 80018f4:	8abb      	ldrh	r3, [r7, #20]
 80018f6:	3301      	adds	r3, #1
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80018fe:	b29b      	uxth	r3, r3
 8001900:	fb12 f303 	smulbb	r3, r2, r3
 8001904:	b29b      	uxth	r3, r3
 8001906:	3304      	adds	r3, #4
 8001908:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
        uint8_t p[4 + (data_len+1)*14];
 800190c:	8abb      	ldrh	r3, [r7, #20]
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	4613      	mov	r3, r2
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	1a9b      	subs	r3, r3, r2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	1d19      	adds	r1, r3, #4
 800191a:	1e4b      	subs	r3, r1, #1
 800191c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800191e:	460a      	mov	r2, r1
 8001920:	2300      	movs	r3, #0
 8001922:	603a      	str	r2, [r7, #0]
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	00c3      	lsls	r3, r0, #3
 8001932:	6838      	ldr	r0, [r7, #0]
 8001934:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001938:	6838      	ldr	r0, [r7, #0]
 800193a:	00c2      	lsls	r2, r0, #3
 800193c:	460a      	mov	r2, r1
 800193e:	2300      	movs	r3, #0
 8001940:	4692      	mov	sl, r2
 8001942:	469b      	mov	fp, r3
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001950:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001954:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001958:	460b      	mov	r3, r1
 800195a:	3307      	adds	r3, #7
 800195c:	08db      	lsrs	r3, r3, #3
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	ebad 0d03 	sub.w	sp, sp, r3
 8001964:	466b      	mov	r3, sp
 8001966:	3300      	adds	r3, #0
 8001968:	64bb      	str	r3, [r7, #72]	@ 0x48
        p[0]=address&0xFF; p[1]=(address>>8)&0xFF; p[2]=data_len&0xFF; p[3]=(data_len>>8)&0xFF;
 800196a:	8afb      	ldrh	r3, [r7, #22]
 800196c:	b2da      	uxtb	r2, r3
 800196e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001970:	701a      	strb	r2, [r3, #0]
 8001972:	8afb      	ldrh	r3, [r7, #22]
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	b29b      	uxth	r3, r3
 8001978:	b2da      	uxtb	r2, r3
 800197a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800197c:	705a      	strb	r2, [r3, #1]
 800197e:	8abb      	ldrh	r3, [r7, #20]
 8001980:	b2da      	uxtb	r2, r3
 8001982:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001984:	709a      	strb	r2, [r3, #2]
 8001986:	8abb      	ldrh	r3, [r7, #20]
 8001988:	0a1b      	lsrs	r3, r3, #8
 800198a:	b29b      	uxth	r3, r3
 800198c:	b2da      	uxtb	r2, r3
 800198e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001990:	70da      	strb	r2, [r3, #3]
        uint16_t pos=4;
 8001992:	2304      	movs	r3, #4
 8001994:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
        for (uint8_t k=0;k<nR;k++){ p[pos++]=idsR[k]; memcpy(&p[pos], &all_data[(idsR[k]-1)*data_len], data_len); pos+=data_len; }
 8001998:	2300      	movs	r3, #0
 800199a:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
 800199e:	e033      	b.n	8001a08 <Dynamixel_SyncWrite+0x1e8>
 80019a0:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 80019a4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80019a8:	1c59      	adds	r1, r3, #1
 80019aa:	f8a7 105a 	strh.w	r1, [r7, #90]	@ 0x5a
 80019ae:	4619      	mov	r1, r3
 80019b0:	f102 0358 	add.w	r3, r2, #88	@ 0x58
 80019b4:	f107 0208 	add.w	r2, r7, #8
 80019b8:	4413      	add	r3, r2
 80019ba:	f813 2c34 	ldrb.w	r2, [r3, #-52]
 80019be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019c0:	545a      	strb	r2, [r3, r1]
 80019c2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80019c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80019c8:	18d0      	adds	r0, r2, r3
 80019ca:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80019ce:	3358      	adds	r3, #88	@ 0x58
 80019d0:	f107 0208 	add.w	r2, r7, #8
 80019d4:	4413      	add	r3, r2
 80019d6:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80019da:	3b01      	subs	r3, #1
 80019dc:	8aba      	ldrh	r2, [r7, #20]
 80019de:	fb02 f303 	mul.w	r3, r2, r3
 80019e2:	461a      	mov	r2, r3
 80019e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80019e8:	4413      	add	r3, r2
 80019ea:	8aba      	ldrh	r2, [r7, #20]
 80019ec:	4619      	mov	r1, r3
 80019ee:	f008 fe02 	bl	800a5f6 <memcpy>
 80019f2:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 80019f6:	8abb      	ldrh	r3, [r7, #20]
 80019f8:	4413      	add	r3, r2
 80019fa:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80019fe:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8001a02:	3301      	adds	r3, #1
 8001a04:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
 8001a08:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 8001a0c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d3c5      	bcc.n	80019a0 <Dynamixel_SyncWrite+0x180>
        Dynamixel_transmitPacket(0xFE, INST_SYNC_WRITE, p, plen);
 8001a14:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001a18:	f897 1054 	ldrb.w	r1, [r7, #84]	@ 0x54
 8001a1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001a1e:	20fe      	movs	r0, #254	@ 0xfe
 8001a20:	f7ff fd38 	bl	8001494 <Dynamixel_transmitPacket>
 8001a24:	46b5      	mov	sp, r6
    }
    if (nL){
 8001a26:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 809b 	beq.w	8001b66 <Dynamixel_SyncWrite+0x346>
 8001a30:	466b      	mov	r3, sp
 8001a32:	461e      	mov	r6, r3
        g_active_bus = &Dynamixel_Handle_L;
 8001a34:	4b4e      	ldr	r3, [pc, #312]	@ (8001b70 <Dynamixel_SyncWrite+0x350>)
 8001a36:	4a50      	ldr	r2, [pc, #320]	@ (8001b78 <Dynamixel_SyncWrite+0x358>)
 8001a38:	601a      	str	r2, [r3, #0]
        uint16_t plen = 4 + (data_len+1)*nL;
 8001a3a:	8abb      	ldrh	r3, [r7, #20]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	fb12 f303 	smulbb	r3, r2, r3
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        uint8_t p[4 + (data_len+1)*14];
 8001a52:	8abb      	ldrh	r3, [r7, #20]
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	4613      	mov	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	1a9b      	subs	r3, r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	1d19      	adds	r1, r3, #4
 8001a60:	1e4b      	subs	r3, r1, #1
 8001a62:	643b      	str	r3, [r7, #64]	@ 0x40
 8001a64:	460a      	mov	r2, r1
 8001a66:	2300      	movs	r3, #0
 8001a68:	4690      	mov	r8, r2
 8001a6a:	4699      	mov	r9, r3
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a80:	460a      	mov	r2, r1
 8001a82:	2300      	movs	r3, #0
 8001a84:	4614      	mov	r4, r2
 8001a86:	461d      	mov	r5, r3
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	00eb      	lsls	r3, r5, #3
 8001a92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a96:	00e2      	lsls	r2, r4, #3
 8001a98:	460b      	mov	r3, r1
 8001a9a:	3307      	adds	r3, #7
 8001a9c:	08db      	lsrs	r3, r3, #3
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	ebad 0d03 	sub.w	sp, sp, r3
 8001aa4:	466b      	mov	r3, sp
 8001aa6:	3300      	adds	r3, #0
 8001aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        p[0]=address&0xFF; p[1]=(address>>8)&0xFF; p[2]=data_len&0xFF; p[3]=(data_len>>8)&0xFF;
 8001aaa:	8afb      	ldrh	r3, [r7, #22]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ab0:	701a      	strb	r2, [r3, #0]
 8001ab2:	8afb      	ldrh	r3, [r7, #22]
 8001ab4:	0a1b      	lsrs	r3, r3, #8
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001abc:	705a      	strb	r2, [r3, #1]
 8001abe:	8abb      	ldrh	r3, [r7, #20]
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ac4:	709a      	strb	r2, [r3, #2]
 8001ac6:	8abb      	ldrh	r3, [r7, #20]
 8001ac8:	0a1b      	lsrs	r3, r3, #8
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ad0:	70da      	strb	r2, [r3, #3]
        uint16_t pos=4;
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
        for (uint8_t k=0;k<nL;k++){ p[pos++]=idsL[k]; memcpy(&p[pos], &all_data[(idsL[k]-1)*data_len], data_len); pos+=data_len; }
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 8001ade:	e033      	b.n	8001b48 <Dynamixel_SyncWrite+0x328>
 8001ae0:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8001ae4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001ae8:	1c59      	adds	r1, r3, #1
 8001aea:	f8a7 1056 	strh.w	r1, [r7, #86]	@ 0x56
 8001aee:	4619      	mov	r1, r3
 8001af0:	f102 0358 	add.w	r3, r2, #88	@ 0x58
 8001af4:	f107 0208 	add.w	r2, r7, #8
 8001af8:	4413      	add	r3, r2
 8001afa:	f813 2c44 	ldrb.w	r2, [r3, #-68]
 8001afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b00:	545a      	strb	r2, [r3, r1]
 8001b02:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001b06:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b08:	18d0      	adds	r0, r2, r3
 8001b0a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001b0e:	3358      	adds	r3, #88	@ 0x58
 8001b10:	f107 0208 	add.w	r2, r7, #8
 8001b14:	4413      	add	r3, r2
 8001b16:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	8aba      	ldrh	r2, [r7, #20]
 8001b1e:	fb02 f303 	mul.w	r3, r2, r3
 8001b22:	461a      	mov	r2, r3
 8001b24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b28:	4413      	add	r3, r2
 8001b2a:	8aba      	ldrh	r2, [r7, #20]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f008 fd62 	bl	800a5f6 <memcpy>
 8001b32:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8001b36:	8abb      	ldrh	r3, [r7, #20]
 8001b38:	4413      	add	r3, r2
 8001b3a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8001b3e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001b42:	3301      	adds	r3, #1
 8001b44:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 8001b48:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8001b4c:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d3c5      	bcc.n	8001ae0 <Dynamixel_SyncWrite+0x2c0>
        Dynamixel_transmitPacket(0xFE, INST_SYNC_WRITE, p, plen);
 8001b54:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001b58:	f897 1054 	ldrb.w	r1, [r7, #84]	@ 0x54
 8001b5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b5e:	20fe      	movs	r0, #254	@ 0xfe
 8001b60:	f7ff fc98 	bl	8001494 <Dynamixel_transmitPacket>
 8001b64:	46b5      	mov	sp, r6
    }
}
 8001b66:	bf00      	nop
 8001b68:	3764      	adds	r7, #100	@ 0x64
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b70:	20000298 	.word	0x20000298
 8001b74:	20000280 	.word	0x20000280
 8001b78:	2000028c 	.word	0x2000028c

08001b7c <Dynamixel_SyncRead>:

void Dynamixel_SyncRead(uint16_t address, uint16_t data_len, const uint8_t* ids, uint8_t id_count){
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b098      	sub	sp, #96	@ 0x60
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60ba      	str	r2, [r7, #8]
 8001b84:	461a      	mov	r2, r3
 8001b86:	4603      	mov	r3, r0
 8001b88:	81fb      	strh	r3, [r7, #14]
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	81bb      	strh	r3, [r7, #12]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	71fb      	strb	r3, [r7, #7]
    const uint8_t INST_SYNC_READ=0x82;
 8001b92:	2382      	movs	r3, #130	@ 0x82
 8001b94:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a

    uint8_t idsR[14], idsL[14]; uint8_t nR=0, nL=0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    for (uint8_t i = 0; i < id_count; i++) {
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
 8001baa:	e03d      	b.n	8001c28 <Dynamixel_SyncRead+0xac>
        if (ids[i] >= DXL_RIGHT_ID_MIN && ids[i] <= DXL_RIGHT_ID_MAX) {
 8001bac:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d015      	beq.n	8001be6 <Dynamixel_SyncRead+0x6a>
 8001bba:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b07      	cmp	r3, #7
 8001bc6:	d80e      	bhi.n	8001be6 <Dynamixel_SyncRead+0x6a>
            idsR[nR++] = ids[i];
 8001bc8:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	441a      	add	r2, r3
 8001bd0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001bd4:	1c59      	adds	r1, r3, #1
 8001bd6:	f887 105f 	strb.w	r1, [r7, #95]	@ 0x5f
 8001bda:	7812      	ldrb	r2, [r2, #0]
 8001bdc:	3360      	adds	r3, #96	@ 0x60
 8001bde:	443b      	add	r3, r7
 8001be0:	f803 2c18 	strb.w	r2, [r3, #-24]
 8001be4:	e01b      	b.n	8001c1e <Dynamixel_SyncRead+0xa2>
        } else if (ids[i] >= DXL_LEFT_ID_MIN && ids[i] <= DXL_LEFT_ID_MAX) {
 8001be6:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	4413      	add	r3, r2
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b07      	cmp	r3, #7
 8001bf2:	d914      	bls.n	8001c1e <Dynamixel_SyncRead+0xa2>
 8001bf4:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001bf8:	68ba      	ldr	r2, [r7, #8]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b0e      	cmp	r3, #14
 8001c00:	d80d      	bhi.n	8001c1e <Dynamixel_SyncRead+0xa2>
            idsL[nL++] = ids[i];
 8001c02:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	441a      	add	r2, r3
 8001c0a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8001c0e:	1c59      	adds	r1, r3, #1
 8001c10:	f887 105e 	strb.w	r1, [r7, #94]	@ 0x5e
 8001c14:	7812      	ldrb	r2, [r2, #0]
 8001c16:	3360      	adds	r3, #96	@ 0x60
 8001c18:	443b      	add	r3, r7
 8001c1a:	f803 2c28 	strb.w	r2, [r3, #-40]
    for (uint8_t i = 0; i < id_count; i++) {
 8001c1e:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001c22:	3301      	adds	r3, #1
 8001c24:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
 8001c28:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d3bc      	bcc.n	8001bac <Dynamixel_SyncRead+0x30>
        }
    }

    if (nR){
 8001c32:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d041      	beq.n	8001cbe <Dynamixel_SyncRead+0x142>
        g_active_bus = &Dynamixel_Handle_R;
 8001c3a:	4b44      	ldr	r3, [pc, #272]	@ (8001d4c <Dynamixel_SyncRead+0x1d0>)
 8001c3c:	4a44      	ldr	r2, [pc, #272]	@ (8001d50 <Dynamixel_SyncRead+0x1d4>)
 8001c3e:	601a      	str	r2, [r3, #0]
        uint16_t plen=4+nR;
 8001c40:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	3304      	adds	r3, #4
 8001c48:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
        uint8_t p[4+14];
        p[0]=address&0xFF; p[1]=(address>>8)&0xFF; p[2]=data_len&0xFF; p[3]=(data_len>>8)&0xFF;
 8001c4c:	89fb      	ldrh	r3, [r7, #14]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001c54:	89fb      	ldrh	r3, [r7, #14]
 8001c56:	0a1b      	lsrs	r3, r3, #8
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001c60:	89bb      	ldrh	r3, [r7, #12]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001c68:	89bb      	ldrh	r3, [r7, #12]
 8001c6a:	0a1b      	lsrs	r3, r3, #8
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        for (uint8_t i=0;i<nR;i++) p[4+i]=idsR[i];
 8001c74:	2300      	movs	r3, #0
 8001c76:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
 8001c7a:	e011      	b.n	8001ca0 <Dynamixel_SyncRead+0x124>
 8001c7c:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8001c80:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8001c84:	3304      	adds	r3, #4
 8001c86:	3260      	adds	r2, #96	@ 0x60
 8001c88:	443a      	add	r2, r7
 8001c8a:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001c8e:	3360      	adds	r3, #96	@ 0x60
 8001c90:	443b      	add	r3, r7
 8001c92:	f803 2c3c 	strb.w	r2, [r3, #-60]
 8001c96:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
 8001ca0:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8001ca4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d3e7      	bcc.n	8001c7c <Dynamixel_SyncRead+0x100>
        Dynamixel_transmitPacket(0xFE, INST_SYNC_READ, p, plen);
 8001cac:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001cb0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001cb4:	f897 105a 	ldrb.w	r1, [r7, #90]	@ 0x5a
 8001cb8:	20fe      	movs	r0, #254	@ 0xfe
 8001cba:	f7ff fbeb 	bl	8001494 <Dynamixel_transmitPacket>
    }
    if (nL){
 8001cbe:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d03d      	beq.n	8001d42 <Dynamixel_SyncRead+0x1c6>
        g_active_bus = &Dynamixel_Handle_L;
 8001cc6:	4b21      	ldr	r3, [pc, #132]	@ (8001d4c <Dynamixel_SyncRead+0x1d0>)
 8001cc8:	4a22      	ldr	r2, [pc, #136]	@ (8001d54 <Dynamixel_SyncRead+0x1d8>)
 8001cca:	601a      	str	r2, [r3, #0]
        uint16_t plen=4+nL;
 8001ccc:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	3304      	adds	r3, #4
 8001cd4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
        uint8_t p[4+14];
        p[0]=address&0xFF; p[1]=(address>>8)&0xFF; p[2]=data_len&0xFF; p[3]=(data_len>>8)&0xFF;
 8001cd8:	89fb      	ldrh	r3, [r7, #14]
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	743b      	strb	r3, [r7, #16]
 8001cde:	89fb      	ldrh	r3, [r7, #14]
 8001ce0:	0a1b      	lsrs	r3, r3, #8
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	747b      	strb	r3, [r7, #17]
 8001ce8:	89bb      	ldrh	r3, [r7, #12]
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	74bb      	strb	r3, [r7, #18]
 8001cee:	89bb      	ldrh	r3, [r7, #12]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	74fb      	strb	r3, [r7, #19]
        for (uint8_t i=0;i<nL;i++) p[4+i]=idsL[i];
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8001cfe:	e011      	b.n	8001d24 <Dynamixel_SyncRead+0x1a8>
 8001d00:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8001d04:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001d08:	3304      	adds	r3, #4
 8001d0a:	3260      	adds	r2, #96	@ 0x60
 8001d0c:	443a      	add	r2, r7
 8001d0e:	f812 2c28 	ldrb.w	r2, [r2, #-40]
 8001d12:	3360      	adds	r3, #96	@ 0x60
 8001d14:	443b      	add	r3, r7
 8001d16:	f803 2c50 	strb.w	r2, [r3, #-80]
 8001d1a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001d1e:	3301      	adds	r3, #1
 8001d20:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8001d24:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8001d28:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d3e7      	bcc.n	8001d00 <Dynamixel_SyncRead+0x184>
        Dynamixel_transmitPacket(0xFE, INST_SYNC_READ, p, plen);
 8001d30:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001d34:	f107 0210 	add.w	r2, r7, #16
 8001d38:	f897 105a 	ldrb.w	r1, [r7, #90]	@ 0x5a
 8001d3c:	20fe      	movs	r0, #254	@ 0xfe
 8001d3e:	f7ff fba9 	bl	8001494 <Dynamixel_transmitPacket>
    }
}
 8001d42:	bf00      	nop
 8001d44:	3760      	adds	r7, #96	@ 0x60
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000298 	.word	0x20000298
 8001d50:	20000280 	.word	0x20000280
 8001d54:	2000028c 	.word	0x2000028c

08001d58 <update_crc>:

unsigned short update_crc(unsigned short c,unsigned char *d,unsigned short s){
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	6039      	str	r1, [r7, #0]
 8001d62:	80fb      	strh	r3, [r7, #6]
 8001d64:	4613      	mov	r3, r2
 8001d66:	80bb      	strh	r3, [r7, #4]
            0x03A6, 0x03AC, 0x83A9, 0x03B8, 0x83BD, 0x83B7, 0x03B2, 0x0390, 0x8395, 0x839F, 0x039A, 0x838B, 0x038E, 0x0384, 0x8381, 0x0280, 0x8285, 0x828F,
            0x028A, 0x829B, 0x029E, 0x0294, 0x8291, 0x82B3, 0x02B6, 0x02BC, 0x82B9, 0x02A8, 0x82AD, 0x82A7, 0x02A2, 0x82E3, 0x02E6, 0x02EC, 0x82E9, 0x02F8,
            0x82FD, 0x82F7, 0x02F2, 0x02D0, 0x82D5, 0x82DF, 0x02DA, 0x82CB, 0x02CE, 0x02C4, 0x82C1, 0x8243, 0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257,
            0x0252, 0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231, 0x8213,
            0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202};
    for(unsigned short j=0;j<s;j++){unsigned short i=((c>>8)^d[j])&0xFF;c=(c<<8)^t[i];}
 8001d68:	2300      	movs	r3, #0
 8001d6a:	81fb      	strh	r3, [r7, #14]
 8001d6c:	e019      	b.n	8001da2 <update_crc+0x4a>
 8001d6e:	88fb      	ldrh	r3, [r7, #6]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	89fa      	ldrh	r2, [r7, #14]
 8001d76:	6839      	ldr	r1, [r7, #0]
 8001d78:	440a      	add	r2, r1
 8001d7a:	7812      	ldrb	r2, [r2, #0]
 8001d7c:	4053      	eors	r3, r2
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	81bb      	strh	r3, [r7, #12]
 8001d84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	b21a      	sxth	r2, r3
 8001d8c:	89bb      	ldrh	r3, [r7, #12]
 8001d8e:	490a      	ldr	r1, [pc, #40]	@ (8001db8 <update_crc+0x60>)
 8001d90:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001d94:	b21b      	sxth	r3, r3
 8001d96:	4053      	eors	r3, r2
 8001d98:	b21b      	sxth	r3, r3
 8001d9a:	80fb      	strh	r3, [r7, #6]
 8001d9c:	89fb      	ldrh	r3, [r7, #14]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	81fb      	strh	r3, [r7, #14]
 8001da2:	89fa      	ldrh	r2, [r7, #14]
 8001da4:	88bb      	ldrh	r3, [r7, #4]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d3e1      	bcc.n	8001d6e <update_crc+0x16>
    return c;
 8001daa:	88fb      	ldrh	r3, [r7, #6]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	0800d0f8 	.word	0x0800d0f8

08001dbc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08a      	sub	sp, #40	@ 0x28
 8001dc0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	60da      	str	r2, [r3, #12]
 8001dd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	4b31      	ldr	r3, [pc, #196]	@ (8001e9c <MX_GPIO_Init+0xe0>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	4a30      	ldr	r2, [pc, #192]	@ (8001e9c <MX_GPIO_Init+0xe0>)
 8001ddc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de2:	4b2e      	ldr	r3, [pc, #184]	@ (8001e9c <MX_GPIO_Init+0xe0>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e9c <MX_GPIO_Init+0xe0>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	4a29      	ldr	r2, [pc, #164]	@ (8001e9c <MX_GPIO_Init+0xe0>)
 8001df8:	f043 0304 	orr.w	r3, r3, #4
 8001dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dfe:	4b27      	ldr	r3, [pc, #156]	@ (8001e9c <MX_GPIO_Init+0xe0>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	4b23      	ldr	r3, [pc, #140]	@ (8001e9c <MX_GPIO_Init+0xe0>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	4a22      	ldr	r2, [pc, #136]	@ (8001e9c <MX_GPIO_Init+0xe0>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1a:	4b20      	ldr	r3, [pc, #128]	@ (8001e9c <MX_GPIO_Init+0xe0>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	607b      	str	r3, [r7, #4]
 8001e2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001e9c <MX_GPIO_Init+0xe0>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	4a1b      	ldr	r2, [pc, #108]	@ (8001e9c <MX_GPIO_Init+0xe0>)
 8001e30:	f043 0308 	orr.w	r3, r3, #8
 8001e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e36:	4b19      	ldr	r3, [pc, #100]	@ (8001e9c <MX_GPIO_Init+0xe0>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2110      	movs	r1, #16
 8001e46:	4816      	ldr	r0, [pc, #88]	@ (8001ea0 <MX_GPIO_Init+0xe4>)
 8001e48:	f003 fb44 	bl	80054d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e52:	4814      	ldr	r0, [pc, #80]	@ (8001ea4 <MX_GPIO_Init+0xe8>)
 8001e54:	f003 fb3e 	bl	80054d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e58:	2310      	movs	r3, #16
 8001e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	480c      	ldr	r0, [pc, #48]	@ (8001ea0 <MX_GPIO_Init+0xe4>)
 8001e70:	f003 f99c 	bl	80051ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001e74:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e82:	2300      	movs	r3, #0
 8001e84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e86:	f107 0314 	add.w	r3, r7, #20
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4805      	ldr	r0, [pc, #20]	@ (8001ea4 <MX_GPIO_Init+0xe8>)
 8001e8e:	f003 f98d 	bl	80051ac <HAL_GPIO_Init>

}
 8001e92:	bf00      	nop
 8001e94:	3728      	adds	r7, #40	@ 0x28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40020000 	.word	0x40020000
 8001ea4:	40020800 	.word	0x40020800

08001ea8 <GripStop_Init>:
                   uint8_t debounce_cnt_req,
                   float max_speed_dps,
                   float ema_alpha,
                   float tol_deg,
                   uint32_t timeout_ms)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08a      	sub	sp, #40	@ 0x28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6278      	str	r0, [r7, #36]	@ 0x24
 8001eb0:	6239      	str	r1, [r7, #32]
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	ed87 0a06 	vstr	s0, [r7, #24]
 8001eb8:	edc7 0a05 	vstr	s1, [r7, #20]
 8001ebc:	ed87 1a04 	vstr	s2, [r7, #16]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	edc7 1a03 	vstr	s3, [r7, #12]
 8001ec6:	ed87 2a02 	vstr	s4, [r7, #8]
 8001eca:	edc7 2a01 	vstr	s5, [r7, #4]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	77fb      	strb	r3, [r7, #31]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	77bb      	strb	r3, [r7, #30]
  g->servo             = servo;
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed8:	6a3a      	ldr	r2, [r7, #32]
 8001eda:	601a      	str	r2, [r3, #0]
  g->side              = side;
 8001edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ede:	7ffa      	ldrb	r2, [r7, #31]
 8001ee0:	711a      	strb	r2, [r3, #4]
  g->start_deg         = start_deg;
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	60da      	str	r2, [r3, #12]
  g->target_deg        = target_deg;
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	611a      	str	r2, [r3, #16]
  g->press_thresh_raw  = press_thresh_raw;
 8001eee:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ef6:	ee17 3a90 	vmov	r3, s15
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efe:	80da      	strh	r2, [r3, #6]
  g->debounce_cnt_req  = (debounce_cnt_req == 0) ? 1 : debounce_cnt_req;
 8001f00:	7fbb      	ldrb	r3, [r7, #30]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <GripStop_Init+0x62>
 8001f06:	7fba      	ldrb	r2, [r7, #30]
 8001f08:	e000      	b.n	8001f0c <GripStop_Init+0x64>
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0e:	721a      	strb	r2, [r3, #8]
  g->max_speed_dps     = (max_speed_dps < 1.0f) ? 1.0f : max_speed_dps;
 8001f10:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f20:	d502      	bpl.n	8001f28 <GripStop_Init+0x80>
 8001f22:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001f26:	e000      	b.n	8001f2a <GripStop_Init+0x82>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f2c:	6153      	str	r3, [r2, #20]
  g->ema_alpha         = (ema_alpha < 0.f) ? 0.f : (ema_alpha > 1.f ? 1.f : ema_alpha);
 8001f2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3a:	d502      	bpl.n	8001f42 <GripStop_Init+0x9a>
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	e00c      	b.n	8001f5c <GripStop_Init+0xb4>
 8001f42:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f52:	dd02      	ble.n	8001f5a <GripStop_Init+0xb2>
 8001f54:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001f58:	e000      	b.n	8001f5c <GripStop_Init+0xb4>
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f5e:	6193      	str	r3, [r2, #24]
  g->tol_deg           = (tol_deg < 0.1f) ? 0.1f : tol_deg;
 8001f60:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f64:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001fd8 <GripStop_Init+0x130>
 8001f68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f70:	d501      	bpl.n	8001f76 <GripStop_Init+0xce>
 8001f72:	4b1a      	ldr	r3, [pc, #104]	@ (8001fdc <GripStop_Init+0x134>)
 8001f74:	e000      	b.n	8001f78 <GripStop_Init+0xd0>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f7a:	61d3      	str	r3, [r2, #28]
  g->timeout_ms        = timeout_ms;
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f80:	621a      	str	r2, [r3, #32]

  g->hold_deg          = start_deg;
 8001f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	625a      	str	r2, [r3, #36]	@ 0x24
  g->last_pressure_pct = 0.f;
 8001f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	629a      	str	r2, [r3, #40]	@ 0x28

  g->stopped = 0;
 8001f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  g->deb_cnt = 0;
 8001f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  g->state   = GRIP_RUNNING;
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

  Servo_SetMaxSpeedDps(g->servo, g->max_speed_dps);
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fae:	edd3 7a05 	vldr	s15, [r3, #20]
 8001fb2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	f001 f9f4 	bl	80033a4 <Servo_SetMaxSpeedDps>
  Servo_SetEmaAlpha   (g->servo, g->ema_alpha);
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc2:	edd3 7a06 	vldr	s15, [r3, #24]
 8001fc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001fca:	4610      	mov	r0, r2
 8001fcc:	f001 fa18 	bl	8003400 <Servo_SetEmaAlpha>
}
 8001fd0:	bf00      	nop
 8001fd2:	3728      	adds	r7, #40	@ 0x28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	3dcccccd 	.word	0x3dcccccd
 8001fdc:	3dcccccd 	.word	0x3dcccccd

08001fe0 <GripStop_Start>:

void GripStop_Start(GripStop* g)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  if (!g || !g->servo) return;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d042      	beq.n	8002074 <GripStop_Start+0x94>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d03e      	beq.n	8002074 <GripStop_Start+0x94>

  (void)Servo_MoveToBlocking(g->servo, g->start_deg, g->tol_deg,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	edd3 7a03 	vldr	s15, [r3, #12]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	ed93 7a07 	vldr	s14, [r3, #28]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	edd3 6a05 	vldr	s13, [r3, #20]
                             g->max_speed_dps, g->timeout_ms ? g->timeout_ms : 5000);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
  (void)Servo_MoveToBlocking(g->servo, g->start_deg, g->tol_deg,
 8002010:	2b00      	cmp	r3, #0
 8002012:	d002      	beq.n	800201a <GripStop_Start+0x3a>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	e001      	b.n	800201e <GripStop_Start+0x3e>
 800201a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800201e:	4619      	mov	r1, r3
 8002020:	eeb0 1a66 	vmov.f32	s2, s13
 8002024:	eef0 0a47 	vmov.f32	s1, s14
 8002028:	eeb0 0a67 	vmov.f32	s0, s15
 800202c:	4610      	mov	r0, r2
 800202e:	f001 facf 	bl	80035d0 <Servo_MoveToBlocking>

  Servo_SetMaxSpeedDps(g->servo, g->max_speed_dps);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	edd3 7a05 	vldr	s15, [r3, #20]
 800203c:	eeb0 0a67 	vmov.f32	s0, s15
 8002040:	4610      	mov	r0, r2
 8002042:	f001 f9af 	bl	80033a4 <Servo_SetMaxSpeedDps>
  Servo_SetTargetDegrees(g->servo, g->target_deg);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002050:	eeb0 0a67 	vmov.f32	s0, s15
 8002054:	4610      	mov	r0, r2
 8002056:	f001 f985 	bl	8003364 <Servo_SetTargetDegrees>

  g->stopped = 0;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  g->deb_cnt = 0;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  g->state   = GRIP_RUNNING;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 8002072:	e000      	b.n	8002076 <GripStop_Start+0x96>
  if (!g || !g->servo) return;
 8002074:	bf00      	nop
}
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <LinkComm_Init>:
uint8_t rx_char;
uint8_t rx_buffer[RX_BUFFER_SIZE];
uint16_t last_rx_index = 0;
volatile bool data_ready = false;

void LinkComm_Init(UART_HandleTypeDef* huart) {
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
    link_uart = huart;
 8002084:	4a0f      	ldr	r2, [pc, #60]	@ (80020c4 <LinkComm_Init+0x48>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_DMA(link_uart, rx_buffer, RX_BUFFER_SIZE);
 800208a:	4b0e      	ldr	r3, [pc, #56]	@ (80020c4 <LinkComm_Init+0x48>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002092:	490d      	ldr	r1, [pc, #52]	@ (80020c8 <LinkComm_Init+0x4c>)
 8002094:	4618      	mov	r0, r3
 8002096:	f004 fffb 	bl	8007090 <HAL_UART_Receive_DMA>
    __HAL_UART_ENABLE_IT(link_uart, UART_IT_IDLE);
 800209a:	4b0a      	ldr	r3, [pc, #40]	@ (80020c4 <LinkComm_Init+0x48>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	4b08      	ldr	r3, [pc, #32]	@ (80020c4 <LinkComm_Init+0x48>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0210 	orr.w	r2, r2, #16
 80020ac:	60da      	str	r2, [r3, #12]
    HAL_UART_Receive_IT(link_uart, &rx_char, 1);
 80020ae:	4b05      	ldr	r3, [pc, #20]	@ (80020c4 <LinkComm_Init+0x48>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2201      	movs	r2, #1
 80020b4:	4905      	ldr	r1, [pc, #20]	@ (80020cc <LinkComm_Init+0x50>)
 80020b6:	4618      	mov	r0, r3
 80020b8:	f004 ffc5 	bl	8007046 <HAL_UART_Receive_IT>
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	2000029c 	.word	0x2000029c
 80020c8:	200002a4 	.word	0x200002a4
 80020cc:	200002a0 	.word	0x200002a0

080020d0 <LinkComm_Task>:

void LinkComm_Task(void) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
    if (data_ready) {
 80020d4:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <LinkComm_Task+0x2c>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00b      	beq.n	80020f6 <LinkComm_Task+0x26>
        data_ready = false;
 80020de:	4b07      	ldr	r3, [pc, #28]	@ (80020fc <LinkComm_Task+0x2c>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
        parse_and_control((char*)rx_buffer);
 80020e4:	4806      	ldr	r0, [pc, #24]	@ (8002100 <LinkComm_Task+0x30>)
 80020e6:	f000 fbe7 	bl	80028b8 <parse_and_control>
        memset(rx_buffer, 0, sizeof(rx_buffer));
 80020ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020ee:	2100      	movs	r1, #0
 80020f0:	4803      	ldr	r0, [pc, #12]	@ (8002100 <LinkComm_Task+0x30>)
 80020f2:	f008 f9b7 	bl	800a464 <memset>
    }
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000aa6 	.word	0x20000aa6
 8002100:	200002a4 	.word	0x200002a4

08002104 <print_to_link>:

void print_to_link(const char *fmt, ...) {
 8002104:	b40f      	push	{r0, r1, r2, r3}
 8002106:	b590      	push	{r4, r7, lr}
 8002108:	b0c3      	sub	sp, #268	@ 0x10c
 800210a:	af00      	add	r7, sp, #0
    char buff[256];
    va_list args;
    va_start(args, fmt);
 800210c:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 8002110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002114:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002118:	601a      	str	r2, [r3, #0]
    vsnprintf(buff, sizeof(buff), fmt, args);
 800211a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800211e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002122:	f107 0008 	add.w	r0, r7, #8
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800212c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002130:	f008 f8f6 	bl	800a320 <vsniprintf>
    HAL_UART_Transmit(link_uart, (uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
 8002134:	4b0b      	ldr	r3, [pc, #44]	@ (8002164 <print_to_link+0x60>)
 8002136:	681c      	ldr	r4, [r3, #0]
 8002138:	f107 0308 	add.w	r3, r7, #8
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe f8b7 	bl	80002b0 <strlen>
 8002142:	4603      	mov	r3, r0
 8002144:	b29a      	uxth	r2, r3
 8002146:	f107 0108 	add.w	r1, r7, #8
 800214a:	f04f 33ff 	mov.w	r3, #4294967295
 800214e:	4620      	mov	r0, r4
 8002150:	f004 feee 	bl	8006f30 <HAL_UART_Transmit>
    va_end(args);
}
 8002154:	bf00      	nop
 8002156:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 800215a:	46bd      	mov	sp, r7
 800215c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002160:	b004      	add	sp, #16
 8002162:	4770      	bx	lr
 8002164:	2000029c 	.word	0x2000029c

08002168 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == link_uart->Instance) {
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b20      	ldr	r3, [pc, #128]	@ (80021f8 <HAL_UART_RxCpltCallback+0x90>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d12a      	bne.n	80021d4 <HAL_UART_RxCpltCallback+0x6c>
        uint8_t rx_data = rx_char;
 800217e:	4b1f      	ldr	r3, [pc, #124]	@ (80021fc <HAL_UART_RxCpltCallback+0x94>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	73fb      	strb	r3, [r7, #15]
        if (rx_data == '!' || last_rx_index >= RX_BUFFER_SIZE - 1) {
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	2b21      	cmp	r3, #33	@ 0x21
 8002188:	d005      	beq.n	8002196 <HAL_UART_RxCpltCallback+0x2e>
 800218a:	4b1d      	ldr	r3, [pc, #116]	@ (8002200 <HAL_UART_RxCpltCallback+0x98>)
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8002192:	4293      	cmp	r3, r2
 8002194:	d90c      	bls.n	80021b0 <HAL_UART_RxCpltCallback+0x48>
            rx_buffer[last_rx_index] = '\0';
 8002196:	4b1a      	ldr	r3, [pc, #104]	@ (8002200 <HAL_UART_RxCpltCallback+0x98>)
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	4b19      	ldr	r3, [pc, #100]	@ (8002204 <HAL_UART_RxCpltCallback+0x9c>)
 800219e:	2100      	movs	r1, #0
 80021a0:	5499      	strb	r1, [r3, r2]
            last_rx_index = 0;
 80021a2:	4b17      	ldr	r3, [pc, #92]	@ (8002200 <HAL_UART_RxCpltCallback+0x98>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	801a      	strh	r2, [r3, #0]
            data_ready = true;
 80021a8:	4b17      	ldr	r3, [pc, #92]	@ (8002208 <HAL_UART_RxCpltCallback+0xa0>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	701a      	strb	r2, [r3, #0]
 80021ae:	e009      	b.n	80021c4 <HAL_UART_RxCpltCallback+0x5c>
        } else {
            rx_buffer[last_rx_index++] = rx_data;
 80021b0:	4b13      	ldr	r3, [pc, #76]	@ (8002200 <HAL_UART_RxCpltCallback+0x98>)
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	1c5a      	adds	r2, r3, #1
 80021b6:	b291      	uxth	r1, r2
 80021b8:	4a11      	ldr	r2, [pc, #68]	@ (8002200 <HAL_UART_RxCpltCallback+0x98>)
 80021ba:	8011      	strh	r1, [r2, #0]
 80021bc:	4619      	mov	r1, r3
 80021be:	4a11      	ldr	r2, [pc, #68]	@ (8002204 <HAL_UART_RxCpltCallback+0x9c>)
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	5453      	strb	r3, [r2, r1]
        }
        HAL_UART_Receive_IT(link_uart, &rx_char, 1);
 80021c4:	4b0c      	ldr	r3, [pc, #48]	@ (80021f8 <HAL_UART_RxCpltCallback+0x90>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2201      	movs	r2, #1
 80021ca:	490c      	ldr	r1, [pc, #48]	@ (80021fc <HAL_UART_RxCpltCallback+0x94>)
 80021cc:	4618      	mov	r0, r3
 80021ce:	f004 ff3a 	bl	8007046 <HAL_UART_Receive_IT>
    } else if (huart->Instance == UART4 || huart->Instance == UART5) {
        Dynamixel_onDmaRxComplete(huart);
    }
}
 80021d2:	e00c      	b.n	80021ee <HAL_UART_RxCpltCallback+0x86>
    } else if (huart->Instance == UART4 || huart->Instance == UART5) {
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a0c      	ldr	r2, [pc, #48]	@ (800220c <HAL_UART_RxCpltCallback+0xa4>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d004      	beq.n	80021e8 <HAL_UART_RxCpltCallback+0x80>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002210 <HAL_UART_RxCpltCallback+0xa8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d102      	bne.n	80021ee <HAL_UART_RxCpltCallback+0x86>
        Dynamixel_onDmaRxComplete(huart);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff f915 	bl	8001418 <Dynamixel_onDmaRxComplete>
}
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	2000029c 	.word	0x2000029c
 80021fc:	200002a0 	.word	0x200002a0
 8002200:	20000aa4 	.word	0x20000aa4
 8002204:	200002a4 	.word	0x200002a4
 8002208:	20000aa6 	.word	0x20000aa6
 800220c:	40004c00 	.word	0x40004c00
 8002210:	40005000 	.word	0x40005000

08002214 <HAL_UART_IDLE_Callback>:

void HAL_UART_IDLE_Callback(UART_HandleTypeDef *huart) {
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == link_uart->Instance) {
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b23      	ldr	r3, [pc, #140]	@ (80022b0 <HAL_UART_IDLE_Callback+0x9c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d13d      	bne.n	80022a6 <HAL_UART_IDLE_Callback+0x92>
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800222a:	2300      	movs	r3, #0
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	68bb      	ldr	r3, [r7, #8]
        uint16_t current_pos = RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	b29b      	uxth	r3, r3
 800224a:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800224e:	81fb      	strh	r3, [r7, #14]
        uint16_t data_len = (current_pos >= last_rx_index) ?
 8002250:	4b18      	ldr	r3, [pc, #96]	@ (80022b4 <HAL_UART_IDLE_Callback+0xa0>)
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	89fa      	ldrh	r2, [r7, #14]
 8002256:	429a      	cmp	r2, r3
 8002258:	d305      	bcc.n	8002266 <HAL_UART_IDLE_Callback+0x52>
                             (current_pos - last_rx_index) :
 800225a:	4b16      	ldr	r3, [pc, #88]	@ (80022b4 <HAL_UART_IDLE_Callback+0xa0>)
 800225c:	881b      	ldrh	r3, [r3, #0]
        uint16_t data_len = (current_pos >= last_rx_index) ?
 800225e:	89fa      	ldrh	r2, [r7, #14]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	b29b      	uxth	r3, r3
 8002264:	e007      	b.n	8002276 <HAL_UART_IDLE_Callback+0x62>
                             (RX_BUFFER_SIZE - last_rx_index + current_pos);
 8002266:	4b13      	ldr	r3, [pc, #76]	@ (80022b4 <HAL_UART_IDLE_Callback+0xa0>)
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	89fa      	ldrh	r2, [r7, #14]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	b29b      	uxth	r3, r3
        uint16_t data_len = (current_pos >= last_rx_index) ?
 8002270:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002274:	b29b      	uxth	r3, r3
 8002276:	81bb      	strh	r3, [r7, #12]
        if (data_len > 0) {
 8002278:	89bb      	ldrh	r3, [r7, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d010      	beq.n	80022a0 <HAL_UART_IDLE_Callback+0x8c>
            memcpy(rx_buffer, &rx_buffer[last_rx_index], data_len);
 800227e:	4b0d      	ldr	r3, [pc, #52]	@ (80022b4 <HAL_UART_IDLE_Callback+0xa0>)
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	4b0c      	ldr	r3, [pc, #48]	@ (80022b8 <HAL_UART_IDLE_Callback+0xa4>)
 8002286:	4413      	add	r3, r2
 8002288:	89ba      	ldrh	r2, [r7, #12]
 800228a:	4619      	mov	r1, r3
 800228c:	480a      	ldr	r0, [pc, #40]	@ (80022b8 <HAL_UART_IDLE_Callback+0xa4>)
 800228e:	f008 f9b2 	bl	800a5f6 <memcpy>
            rx_buffer[data_len] = '\0';
 8002292:	89bb      	ldrh	r3, [r7, #12]
 8002294:	4a08      	ldr	r2, [pc, #32]	@ (80022b8 <HAL_UART_IDLE_Callback+0xa4>)
 8002296:	2100      	movs	r1, #0
 8002298:	54d1      	strb	r1, [r2, r3]
            data_ready = true;
 800229a:	4b08      	ldr	r3, [pc, #32]	@ (80022bc <HAL_UART_IDLE_Callback+0xa8>)
 800229c:	2201      	movs	r2, #1
 800229e:	701a      	strb	r2, [r3, #0]
        }
        last_rx_index = current_pos;
 80022a0:	4a04      	ldr	r2, [pc, #16]	@ (80022b4 <HAL_UART_IDLE_Callback+0xa0>)
 80022a2:	89fb      	ldrh	r3, [r7, #14]
 80022a4:	8013      	strh	r3, [r2, #0]
    }
}
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	2000029c 	.word	0x2000029c
 80022b4:	20000aa4 	.word	0x20000aa4
 80022b8:	200002a4 	.word	0x200002a4
 80022bc:	20000aa6 	.word	0x20000aa6

080022c0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80022c8:	1d39      	adds	r1, r7, #4
 80022ca:	f04f 33ff 	mov.w	r3, #4294967295
 80022ce:	2201      	movs	r2, #1
 80022d0:	4803      	ldr	r0, [pc, #12]	@ (80022e0 <__io_putchar+0x20>)
 80022d2:	f004 fe2d 	bl	8006f30 <HAL_UART_Transmit>
  return ch;
 80022d6:	687b      	ldr	r3, [r7, #4]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20000c5c 	.word	0x20000c5c

080022e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022e8:	f001 ff44 	bl	8004174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022ec:	f000 f846 	bl	800237c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022f0:	f7ff fd64 	bl	8001dbc <MX_GPIO_Init>
  MX_DMA_Init();
 80022f4:	f7fe ffcc 	bl	8001290 <MX_DMA_Init>
  MX_UART4_Init();
 80022f8:	f001 fcae 	bl	8003c58 <MX_UART4_Init>
  MX_USART2_UART_Init();
 80022fc:	f001 fd00 	bl	8003d00 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8002300:	f001 fd28 	bl	8003d54 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8002304:	f7fe feac 	bl	8001060 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002308:	f7fe fefc 	bl	8001104 <MX_ADC2_Init>
  MX_TIM3_Init();
 800230c:	f001 fbc4 	bl	8003a98 <MX_TIM3_Init>
  MX_UART5_Init();
 8002310:	f001 fccc 	bl	8003cac <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  #if defined(USE_MY_DWT)
  DWT_Init();
 8002314:	f7fe fffa 	bl	800130c <DWT_Init>
  #endif

  Dynamixel_begin_right(&huart4, GPIOA, GPIO_PIN_4);
 8002318:	2210      	movs	r2, #16
 800231a:	4911      	ldr	r1, [pc, #68]	@ (8002360 <main+0x7c>)
 800231c:	4811      	ldr	r0, [pc, #68]	@ (8002364 <main+0x80>)
 800231e:	f7ff f853 	bl	80013c8 <Dynamixel_begin_right>
  Dynamixel_begin_left (&huart5, GPIOC, GPIO_PIN_11);
 8002322:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002326:	4910      	ldr	r1, [pc, #64]	@ (8002368 <main+0x84>)
 8002328:	4810      	ldr	r0, [pc, #64]	@ (800236c <main+0x88>)
 800232a:	f7ff f861 	bl	80013f0 <Dynamixel_begin_left>
  LinkComm_Init(&huart6);
 800232e:	4810      	ldr	r0, [pc, #64]	@ (8002370 <main+0x8c>)
 8002330:	f7ff fea4 	bl	800207c <LinkComm_Init>
  init_dynamixels();
 8002334:	f000 f89a 	bl	800246c <init_dynamixels>

  #if DO_INIT_HOME
  print_to_link("Ready. Init homing...\r\n");
 8002338:	480e      	ldr	r0, [pc, #56]	@ (8002374 <main+0x90>)
 800233a:	f7ff fee3 	bl	8002104 <print_to_link>
  init_move_all_to_180();
 800233e:	f000 fd21 	bl	8002d84 <init_move_all_to_180>
  print_to_link("Init done.\r\n");
 8002342:	480d      	ldr	r0, [pc, #52]	@ (8002378 <main+0x94>)
 8002344:	f7ff fede 	bl	8002104 <print_to_link>
  #endif

  ServoSystem_Init();
 8002348:	f001 f998 	bl	800367c <ServoSystem_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	LinkComm_Task();
 800234c:	f7ff fec0 	bl	80020d0 <LinkComm_Task>
    update_all_motors();
 8002350:	f000 fd9e 	bl	8002e90 <update_all_motors>
//    sample_and_print();
//    GripStop_Update(&g1);
//    GripStop_Update(&g2);
    HAL_Delay(2);
 8002354:	2002      	movs	r0, #2
 8002356:	f001 ff7f 	bl	8004258 <HAL_Delay>
	LinkComm_Task();
 800235a:	bf00      	nop
 800235c:	e7f6      	b.n	800234c <main+0x68>
 800235e:	bf00      	nop
 8002360:	40020000 	.word	0x40020000
 8002364:	20000bcc 	.word	0x20000bcc
 8002368:	40020800 	.word	0x40020800
 800236c:	20000c14 	.word	0x20000c14
 8002370:	20000ca4 	.word	0x20000ca4
 8002374:	0800cf70 	.word	0x0800cf70
 8002378:	0800cf88 	.word	0x0800cf88

0800237c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b094      	sub	sp, #80	@ 0x50
 8002380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002382:	f107 031c 	add.w	r3, r7, #28
 8002386:	2234      	movs	r2, #52	@ 0x34
 8002388:	2100      	movs	r1, #0
 800238a:	4618      	mov	r0, r3
 800238c:	f008 f86a 	bl	800a464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002390:	f107 0308 	add.w	r3, r7, #8
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023a0:	2300      	movs	r3, #0
 80023a2:	607b      	str	r3, [r7, #4]
 80023a4:	4b2c      	ldr	r3, [pc, #176]	@ (8002458 <SystemClock_Config+0xdc>)
 80023a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002458 <SystemClock_Config+0xdc>)
 80023aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80023b0:	4b29      	ldr	r3, [pc, #164]	@ (8002458 <SystemClock_Config+0xdc>)
 80023b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023bc:	2300      	movs	r3, #0
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	4b26      	ldr	r3, [pc, #152]	@ (800245c <SystemClock_Config+0xe0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a25      	ldr	r2, [pc, #148]	@ (800245c <SystemClock_Config+0xe0>)
 80023c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	4b23      	ldr	r3, [pc, #140]	@ (800245c <SystemClock_Config+0xe0>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023d4:	603b      	str	r3, [r7, #0]
 80023d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023d8:	2301      	movs	r3, #1
 80023da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80023dc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80023e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023e2:	2302      	movs	r3, #2
 80023e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80023ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80023ec:	2304      	movs	r3, #4
 80023ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80023f0:	23b4      	movs	r3, #180	@ 0xb4
 80023f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023f4:	2302      	movs	r3, #2
 80023f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80023f8:	2302      	movs	r3, #2
 80023fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80023fc:	2302      	movs	r3, #2
 80023fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002400:	f107 031c 	add.w	r3, r7, #28
 8002404:	4618      	mov	r0, r3
 8002406:	f003 fc19 	bl	8005c3c <HAL_RCC_OscConfig>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002410:	f000 f826 	bl	8002460 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002414:	f003 f878 	bl	8005508 <HAL_PWREx_EnableOverDrive>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800241e:	f000 f81f 	bl	8002460 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002422:	230f      	movs	r3, #15
 8002424:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002426:	2302      	movs	r3, #2
 8002428:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800242e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002432:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002434:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002438:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800243a:	f107 0308 	add.w	r3, r7, #8
 800243e:	2105      	movs	r1, #5
 8002440:	4618      	mov	r0, r3
 8002442:	f003 f8b1 	bl	80055a8 <HAL_RCC_ClockConfig>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800244c:	f000 f808 	bl	8002460 <Error_Handler>
  }
}
 8002450:	bf00      	nop
 8002452:	3750      	adds	r7, #80	@ 0x50
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40023800 	.word	0x40023800
 800245c:	40007000 	.word	0x40007000

08002460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002464:	b672      	cpsid	i
}
 8002466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002468:	bf00      	nop
 800246a:	e7fd      	b.n	8002468 <Error_Handler+0x8>

0800246c <init_dynamixels>:
extern const uint8_t DXL_ID_LIST[];
extern const float VEL_DPS[];
#define DXL_ID_CNT 7
static float g_target_deg[DXL_ID_CNT];

void init_dynamixels(void) {
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < DXL_ID_CNT; i++) {
 8002472:	2300      	movs	r3, #0
 8002474:	73fb      	strb	r3, [r7, #15]
 8002476:	e050      	b.n	800251a <init_dynamixels+0xae>
         uint8_t current_id = DXL_ID_LIST[i];
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	4a2c      	ldr	r2, [pc, #176]	@ (800252c <init_dynamixels+0xc0>)
 800247c:	5cd3      	ldrb	r3, [r2, r3]
 800247e:	737b      	strb	r3, [r7, #13]
         Dynamixel_write(current_id, 64, (uint8_t[]){0}, 1);
 8002480:	2300      	movs	r3, #0
 8002482:	733b      	strb	r3, [r7, #12]
 8002484:	f107 020c 	add.w	r2, r7, #12
 8002488:	7b78      	ldrb	r0, [r7, #13]
 800248a:	2301      	movs	r3, #1
 800248c:	2140      	movs	r1, #64	@ 0x40
 800248e:	f7ff f95f 	bl	8001750 <Dynamixel_write>
         HAL_Delay(50);
 8002492:	2032      	movs	r0, #50	@ 0x32
 8002494:	f001 fee0 	bl	8004258 <HAL_Delay>
         Dynamixel_setOperatingMode(current_id, 3);
 8002498:	7b7b      	ldrb	r3, [r7, #13]
 800249a:	2103      	movs	r1, #3
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff f9ad 	bl	80017fc <Dynamixel_setOperatingMode>
         HAL_Delay(50);
 80024a2:	2032      	movs	r0, #50	@ 0x32
 80024a4:	f001 fed8 	bl	8004258 <HAL_Delay>
         uint16_t P = 1500, I = 60, D = 140;
 80024a8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80024ac:	817b      	strh	r3, [r7, #10]
 80024ae:	233c      	movs	r3, #60	@ 0x3c
 80024b0:	813b      	strh	r3, [r7, #8]
 80024b2:	238c      	movs	r3, #140	@ 0x8c
 80024b4:	80fb      	strh	r3, [r7, #6]
         Dynamixel_write(2, 84, (uint8_t*)&P, 2);
 80024b6:	f107 020a 	add.w	r2, r7, #10
 80024ba:	2302      	movs	r3, #2
 80024bc:	2154      	movs	r1, #84	@ 0x54
 80024be:	2002      	movs	r0, #2
 80024c0:	f7ff f946 	bl	8001750 <Dynamixel_write>
         Dynamixel_write(2, 82, (uint8_t*)&I, 2);
 80024c4:	f107 0208 	add.w	r2, r7, #8
 80024c8:	2302      	movs	r3, #2
 80024ca:	2152      	movs	r1, #82	@ 0x52
 80024cc:	2002      	movs	r0, #2
 80024ce:	f7ff f93f 	bl	8001750 <Dynamixel_write>
         Dynamixel_write(2, 80, (uint8_t*)&D, 2);
 80024d2:	1dba      	adds	r2, r7, #6
 80024d4:	2302      	movs	r3, #2
 80024d6:	2150      	movs	r1, #80	@ 0x50
 80024d8:	2002      	movs	r0, #2
 80024da:	f7ff f939 	bl	8001750 <Dynamixel_write>
         Dynamixel_write(current_id, 64, (uint8_t[]){1}, 1);
 80024de:	2301      	movs	r3, #1
 80024e0:	713b      	strb	r3, [r7, #4]
 80024e2:	1d3a      	adds	r2, r7, #4
 80024e4:	7b78      	ldrb	r0, [r7, #13]
 80024e6:	2301      	movs	r3, #1
 80024e8:	2140      	movs	r1, #64	@ 0x40
 80024ea:	f7ff f931 	bl	8001750 <Dynamixel_write>
         HAL_Delay(300);
 80024ee:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80024f2:	f001 feb1 	bl	8004258 <HAL_Delay>
         for (uint8_t i = 0; i < DXL_ID_CNT; ++i) {
 80024f6:	2300      	movs	r3, #0
 80024f8:	73bb      	strb	r3, [r7, #14]
 80024fa:	e008      	b.n	800250e <init_dynamixels+0xa2>
             g_target_deg[i] = 180.0f;
 80024fc:	7bbb      	ldrb	r3, [r7, #14]
 80024fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002530 <init_dynamixels+0xc4>)
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	4a0b      	ldr	r2, [pc, #44]	@ (8002534 <init_dynamixels+0xc8>)
 8002506:	601a      	str	r2, [r3, #0]
         for (uint8_t i = 0; i < DXL_ID_CNT; ++i) {
 8002508:	7bbb      	ldrb	r3, [r7, #14]
 800250a:	3301      	adds	r3, #1
 800250c:	73bb      	strb	r3, [r7, #14]
 800250e:	7bbb      	ldrb	r3, [r7, #14]
 8002510:	2b06      	cmp	r3, #6
 8002512:	d9f3      	bls.n	80024fc <init_dynamixels+0x90>
    for (uint8_t i = 0; i < DXL_ID_CNT; i++) {
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	3301      	adds	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
 800251a:	7bfb      	ldrb	r3, [r7, #15]
 800251c:	2b06      	cmp	r3, #6
 800251e:	d9ab      	bls.n	8002478 <init_dynamixels+0xc>
         }
    }
}
 8002520:	bf00      	nop
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	0800d2f8 	.word	0x0800d2f8
 8002530:	20000aa8 	.word	0x20000aa8
 8002534:	43340000 	.word	0x43340000

08002538 <cnt_to_deg360>:

float cnt_to_deg360(int32_t pos_cnt) {
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
	return (float)pos_cnt / 4096.0f * 360.0f;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	ee07 3a90 	vmov	s15, r3
 8002546:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800254a:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8002568 <cnt_to_deg360+0x30>
 800254e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002552:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800256c <cnt_to_deg360+0x34>
 8002556:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800255a:	eeb0 0a67 	vmov.f32	s0, s15
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	45800000 	.word	0x45800000
 800256c:	43b40000 	.word	0x43b40000

08002570 <deg0to360_to_cnt>:

int32_t deg0to360_to_cnt(float deg) {
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	ed87 0a01 	vstr	s0, [r7, #4]
	return (int32_t)(deg / 360.0f * 4096.0f);
 800257a:	ed97 7a01 	vldr	s14, [r7, #4]
 800257e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80025a4 <deg0to360_to_cnt+0x34>
 8002582:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002586:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80025a8 <deg0to360_to_cnt+0x38>
 800258a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800258e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002592:	ee17 3a90 	vmov	r3, s15
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	43b40000 	.word	0x43b40000
 80025a8:	45800000 	.word	0x45800000

080025ac <wrap360>:

static inline float wrap360(float deg) {
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	ed87 0a01 	vstr	s0, [r7, #4]
  while (deg < 0.0f)   deg += 360.0f;
 80025b6:	e007      	b.n	80025c8 <wrap360+0x1c>
 80025b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80025bc:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002610 <wrap360+0x64>
 80025c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025c4:	edc7 7a01 	vstr	s15, [r7, #4]
 80025c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80025cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d4:	d4f0      	bmi.n	80025b8 <wrap360+0xc>
  while (deg >= 360.0f) deg -= 360.0f;
 80025d6:	e007      	b.n	80025e8 <wrap360+0x3c>
 80025d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80025dc:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8002610 <wrap360+0x64>
 80025e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80025e4:	edc7 7a01 	vstr	s15, [r7, #4]
 80025e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80025ec:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002610 <wrap360+0x64>
 80025f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f8:	daee      	bge.n	80025d8 <wrap360+0x2c>
  return deg;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	ee07 3a90 	vmov	s15, r3
}
 8002600:	eeb0 0a67 	vmov.f32	s0, s15
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	43b40000 	.word	0x43b40000

08002614 <pv_raw_from_deg_s>:

uint32_t pv_raw_from_deg_s(float deg_per_sec) {
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	ed87 0a01 	vstr	s0, [r7, #4]
    return (uint32_t)(deg_per_sec / 0.229f / 360.0f * 60.0f);
 800261e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002622:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8002650 <pv_raw_from_deg_s+0x3c>
 8002626:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800262a:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8002654 <pv_raw_from_deg_s+0x40>
 800262e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002632:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002658 <pv_raw_from_deg_s+0x44>
 8002636:	ee67 7a87 	vmul.f32	s15, s15, s14
 800263a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800263e:	ee17 3a90 	vmov	r3, s15
}
 8002642:	4618      	mov	r0, r3
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	3e6a7efa 	.word	0x3e6a7efa
 8002654:	43b40000 	.word	0x43b40000
 8002658:	42700000 	.word	0x42700000

0800265c <idx_of_id>:

int8_t idx_of_id(uint8_t id) {
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < DXL_ID_CNT; i++){
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	e00c      	b.n	8002686 <idx_of_id+0x2a>
		if(DXL_ID_LIST[i] == id) return i;
 800266c:	4a0b      	ldr	r2, [pc, #44]	@ (800269c <idx_of_id+0x40>)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	4413      	add	r3, r2
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	79fa      	ldrb	r2, [r7, #7]
 8002676:	429a      	cmp	r2, r3
 8002678:	d102      	bne.n	8002680 <idx_of_id+0x24>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	b25b      	sxtb	r3, r3
 800267e:	e007      	b.n	8002690 <idx_of_id+0x34>
	for(int i = 0; i < DXL_ID_CNT; i++){
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	3301      	adds	r3, #1
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2b06      	cmp	r3, #6
 800268a:	ddef      	ble.n	800266c <idx_of_id+0x10>
	}
	return -1;
 800268c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002690:	4618      	mov	r0, r3
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	0800d2f8 	.word	0x0800d2f8

080026a0 <live_slowdown_until_reached>:

bool live_slowdown_until_reached(uint8_t target_count, const uint8_t* target_ids, const float* target_degs, uint32_t timeout) {
 80026a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026a2:	b099      	sub	sp, #100	@ 0x64
 80026a4:	af02      	add	r7, sp, #8
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	607a      	str	r2, [r7, #4]
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	4603      	mov	r3, r0
 80026ae:	73fb      	strb	r3, [r7, #15]
    uint32_t start_time = HAL_GetTick();
 80026b0:	f001 fdc6 	bl	8004240 <HAL_GetTick>
 80026b4:	6538      	str	r0, [r7, #80]	@ 0x50
    bool all_reached = false;
 80026b6:	2300      	movs	r3, #0
 80026b8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    const uint16_t ADDR_PRESENT_POSITION = 132;
 80026bc:	2384      	movs	r3, #132	@ 0x84
 80026be:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    const uint16_t POS_DATA_LEN = 4;
 80026c2:	2304      	movs	r3, #4
 80026c4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    int32_t current_positions[DXL_ID_CNT] = {0};
 80026c8:	f107 0320 	add.w	r3, r7, #32
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
 80026d6:	611a      	str	r2, [r3, #16]
 80026d8:	615a      	str	r2, [r3, #20]
 80026da:	619a      	str	r2, [r3, #24]

    printf(".--------------------------\r\n");
 80026dc:	486f      	ldr	r0, [pc, #444]	@ (800289c <live_slowdown_until_reached+0x1fc>)
 80026de:	f007 fd83 	bl	800a1e8 <puts>
    while (HAL_GetTick() - start_time < timeout) {
 80026e2:	e0ca      	b.n	800287a <live_slowdown_until_reached+0x1da>
        Dynamixel_SyncRead(ADDR_PRESENT_POSITION, POS_DATA_LEN, target_ids, target_count);
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
 80026e6:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 80026ea:	f8b7 004e 	ldrh.w	r0, [r7, #78]	@ 0x4e
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	f7ff fa44 	bl	8001b7c <Dynamixel_SyncRead>

        for (uint8_t i = 0; i < target_count; i++) {
 80026f4:	2300      	movs	r3, #0
 80026f6:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 80026fa:	e03a      	b.n	8002772 <live_slowdown_until_reached+0xd2>
            uint8_t packet_buffer[15];
            current_positions[i] = -1;
 80026fc:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	3358      	adds	r3, #88	@ 0x58
 8002704:	443b      	add	r3, r7
 8002706:	f04f 32ff 	mov.w	r2, #4294967295
 800270a:	f843 2c38 	str.w	r2, [r3, #-56]
            if (Dynamixel_receiveStatusPacket(packet_buffer, 15, 30)) {
 800270e:	f107 0310 	add.w	r3, r7, #16
 8002712:	221e      	movs	r2, #30
 8002714:	210f      	movs	r1, #15
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe ffa8 	bl	800166c <Dynamixel_receiveStatusPacket>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d022      	beq.n	8002768 <live_slowdown_until_reached+0xc8>
                uint8_t response_id = packet_buffer[4];
 8002722:	7d3b      	ldrb	r3, [r7, #20]
 8002724:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                int8_t response_idx = idx_of_id(response_id);
 8002728:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ff95 	bl	800265c <idx_of_id>
 8002732:	4603      	mov	r3, r0
 8002734:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
                if(response_idx != -1){
 8002738:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002740:	d012      	beq.n	8002768 <live_slowdown_until_reached+0xc8>
                     current_positions[response_idx] =
                        (int32_t)(packet_buffer[9] | (packet_buffer[10] << 8) |
 8002742:	7e7b      	ldrb	r3, [r7, #25]
 8002744:	461a      	mov	r2, r3
 8002746:	7ebb      	ldrb	r3, [r7, #26]
 8002748:	021b      	lsls	r3, r3, #8
 800274a:	431a      	orrs	r2, r3
                                  (packet_buffer[11] << 16) | (packet_buffer[12] << 24));
 800274c:	7efb      	ldrb	r3, [r7, #27]
 800274e:	041b      	lsls	r3, r3, #16
                        (int32_t)(packet_buffer[9] | (packet_buffer[10] << 8) |
 8002750:	ea42 0103 	orr.w	r1, r2, r3
                                  (packet_buffer[11] << 16) | (packet_buffer[12] << 24));
 8002754:	7f3b      	ldrb	r3, [r7, #28]
 8002756:	061a      	lsls	r2, r3, #24
                     current_positions[response_idx] =
 8002758:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
                                  (packet_buffer[11] << 16) | (packet_buffer[12] << 24));
 800275c:	430a      	orrs	r2, r1
                     current_positions[response_idx] =
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	3358      	adds	r3, #88	@ 0x58
 8002762:	443b      	add	r3, r7
 8002764:	f843 2c38 	str.w	r2, [r3, #-56]
        for (uint8_t i = 0; i < target_count; i++) {
 8002768:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800276c:	3301      	adds	r3, #1
 800276e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8002772:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	429a      	cmp	r2, r3
 800277a:	d3bf      	bcc.n	80026fc <live_slowdown_until_reached+0x5c>
                }
            }
        }

        all_reached = true;
 800277c:	2301      	movs	r3, #1
 800277e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        printf("Looping (t=%ld):", (long)(HAL_GetTick() - start_time));
 8002782:	f001 fd5d 	bl	8004240 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	4619      	mov	r1, r3
 800278e:	4844      	ldr	r0, [pc, #272]	@ (80028a0 <live_slowdown_until_reached+0x200>)
 8002790:	f007 fcc2 	bl	800a118 <iprintf>
        for (uint8_t i = 0; i < target_count; i++) {
 8002794:	2300      	movs	r3, #0
 8002796:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 800279a:	e05a      	b.n	8002852 <live_slowdown_until_reached+0x1b2>
            uint8_t id = target_ids[i];
 800279c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	4413      	add	r3, r2
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            if (current_positions[i] == -1) {
 80027aa:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	3358      	adds	r3, #88	@ 0x58
 80027b2:	443b      	add	r3, r7
 80027b4:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80027b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027bc:	d109      	bne.n	80027d2 <live_slowdown_until_reached+0x132>
                printf(" [ID %d Read FAILED!]", id);
 80027be:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80027c2:	4619      	mov	r1, r3
 80027c4:	4837      	ldr	r0, [pc, #220]	@ (80028a4 <live_slowdown_until_reached+0x204>)
 80027c6:	f007 fca7 	bl	800a118 <iprintf>
                all_reached = false;
 80027ca:	2300      	movs	r3, #0
 80027cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80027d0:	e03a      	b.n	8002848 <live_slowdown_until_reached+0x1a8>
            } else {
                float current_deg = cnt_to_deg360(current_positions[i]);
 80027d2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	3358      	adds	r3, #88	@ 0x58
 80027da:	443b      	add	r3, r7
 80027dc:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fea9 	bl	8002538 <cnt_to_deg360>
 80027e6:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
                float error_deg = target_degs[i] - current_deg;
 80027ea:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	4413      	add	r3, r2
 80027f4:	ed93 7a00 	vldr	s14, [r3]
 80027f8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80027fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002800:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
                printf(" [ID %d: %.1f, E:%.1f]", id, current_deg, error_deg);
 8002804:	f897 604b 	ldrb.w	r6, [r7, #75]	@ 0x4b
 8002808:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800280a:	f7fd febd 	bl	8000588 <__aeabi_f2d>
 800280e:	4604      	mov	r4, r0
 8002810:	460d      	mov	r5, r1
 8002812:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002814:	f7fd feb8 	bl	8000588 <__aeabi_f2d>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	e9cd 2300 	strd	r2, r3, [sp]
 8002820:	4622      	mov	r2, r4
 8002822:	462b      	mov	r3, r5
 8002824:	4631      	mov	r1, r6
 8002826:	4820      	ldr	r0, [pc, #128]	@ (80028a8 <live_slowdown_until_reached+0x208>)
 8002828:	f007 fc76 	bl	800a118 <iprintf>
                if (fabs(error_deg) > 1.5f) {
 800282c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002830:	eef0 7ae7 	vabs.f32	s15, s15
 8002834:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8002838:	eef4 7ac7 	vcmpe.f32	s15, s14
 800283c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002840:	dd02      	ble.n	8002848 <live_slowdown_until_reached+0x1a8>
                    all_reached = false;
 8002842:	2300      	movs	r3, #0
 8002844:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        for (uint8_t i = 0; i < target_count; i++) {
 8002848:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800284c:	3301      	adds	r3, #1
 800284e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 8002852:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	429a      	cmp	r2, r3
 800285a:	d39f      	bcc.n	800279c <live_slowdown_until_reached+0xfc>
                }
            }
        }
        printf(" \r\n");
 800285c:	4813      	ldr	r0, [pc, #76]	@ (80028ac <live_slowdown_until_reached+0x20c>)
 800285e:	f007 fcc3 	bl	800a1e8 <puts>

        if (all_reached) {
 8002862:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002866:	2b00      	cmp	r3, #0
 8002868:	d004      	beq.n	8002874 <live_slowdown_until_reached+0x1d4>
            printf(".--- MOTORS REACHED ---\r\n");
 800286a:	4811      	ldr	r0, [pc, #68]	@ (80028b0 <live_slowdown_until_reached+0x210>)
 800286c:	f007 fcbc 	bl	800a1e8 <puts>
            return true;
 8002870:	2301      	movs	r3, #1
 8002872:	e00f      	b.n	8002894 <live_slowdown_until_reached+0x1f4>
        }
        HAL_Delay(80);
 8002874:	2050      	movs	r0, #80	@ 0x50
 8002876:	f001 fcef 	bl	8004258 <HAL_Delay>
    while (HAL_GetTick() - start_time < timeout) {
 800287a:	f001 fce1 	bl	8004240 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	f63f af2c 	bhi.w	80026e4 <live_slowdown_until_reached+0x44>
    }
    printf(".--- WAIT TIMEOUT ---\r\n");
 800288c:	4809      	ldr	r0, [pc, #36]	@ (80028b4 <live_slowdown_until_reached+0x214>)
 800288e:	f007 fcab 	bl	800a1e8 <puts>
    return false;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	375c      	adds	r7, #92	@ 0x5c
 8002898:	46bd      	mov	sp, r7
 800289a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800289c:	0800cf98 	.word	0x0800cf98
 80028a0:	0800cfb8 	.word	0x0800cfb8
 80028a4:	0800cfcc 	.word	0x0800cfcc
 80028a8:	0800cfe4 	.word	0x0800cfe4
 80028ac:	0800cffc 	.word	0x0800cffc
 80028b0:	0800d000 	.word	0x0800d000
 80028b4:	0800d01c 	.word	0x0800d01c

080028b8 <parse_and_control>:

void parse_and_control(char* input) {
 80028b8:	b590      	push	{r4, r7, lr}
 80028ba:	b0d1      	sub	sp, #324	@ 0x144
 80028bc:	af02      	add	r7, sp, #8
 80028be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80028c2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80028c6:	6018      	str	r0, [r3, #0]
    char *p = input;
 80028c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80028cc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    bool processed_any = false;
 80028d6:	2300      	movs	r3, #0
 80028d8:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133

    while (1) {
        char *start = strchr(p, '[');
 80028dc:	215b      	movs	r1, #91	@ 0x5b
 80028de:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80028e2:	f007 fdc7 	bl	800a474 <strchr>
 80028e6:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
        if (!start) break;
 80028ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 81fb 	beq.w	8002cea <parse_and_control+0x432>
        char *end   = strchr(start, ']');
 80028f4:	215d      	movs	r1, #93	@ 0x5d
 80028f6:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80028fa:	f007 fdbb 	bl	800a474 <strchr>
 80028fe:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
        if (!end) break;
 8002902:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 81f1 	beq.w	8002cee <parse_and_control+0x436>

        char seg[160];
        size_t len = (size_t)(end - start - 1);
 800290c:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8002910:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	3b01      	subs	r3, #1
 8002918:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
        if (len >= sizeof(seg)) len = sizeof(seg) - 1;
 800291c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002920:	2b9f      	cmp	r3, #159	@ 0x9f
 8002922:	d902      	bls.n	800292a <parse_and_control+0x72>
 8002924:	239f      	movs	r3, #159	@ 0x9f
 8002926:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
        memcpy(seg, start + 1, len);
 800292a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800292e:	1c59      	adds	r1, r3, #1
 8002930:	f107 0308 	add.w	r3, r7, #8
 8002934:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8002938:	4618      	mov	r0, r3
 800293a:	f007 fe5c 	bl	800a5f6 <memcpy>
        seg[len] = '\0';
 800293e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002942:	f5a3 7298 	sub.w	r2, r3, #304	@ 0x130
 8002946:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800294a:	4413      	add	r3, r2
 800294c:	2200      	movs	r2, #0
 800294e:	701a      	strb	r2, [r3, #0]

        char *saveptr = NULL;
 8002950:	2300      	movs	r3, #0
 8002952:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        char *tok = strtok_r(seg, ",", &saveptr);
 8002956:	f107 02ec 	add.w	r2, r7, #236	@ 0xec
 800295a:	f107 0308 	add.w	r3, r7, #8
 800295e:	49a6      	ldr	r1, [pc, #664]	@ (8002bf8 <parse_and_control+0x340>)
 8002960:	4618      	mov	r0, r3
 8002962:	f007 fdce 	bl	800a502 <strtok_r>
 8002966:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
        if (!tok) { p = end + 1; continue; }
 800296a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10a      	bne.n	8002988 <parse_and_control+0xd0>
 8002972:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002976:	3301      	adds	r3, #1
 8002978:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800297c:	e1bd      	b.n	8002cfa <parse_and_control+0x442>
        while (*tok == ' ' || *tok == '\t' || *tok == '\r' || *tok == '\n')
            ++tok;
 800297e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002982:	3301      	adds	r3, #1
 8002984:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        while (*tok == ' ' || *tok == '\t' || *tok == '\r' || *tok == '\n')
 8002988:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b20      	cmp	r3, #32
 8002990:	d0f5      	beq.n	800297e <parse_and_control+0xc6>
 8002992:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b09      	cmp	r3, #9
 800299a:	d0f0      	beq.n	800297e <parse_and_control+0xc6>
 800299c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b0d      	cmp	r3, #13
 80029a4:	d0eb      	beq.n	800297e <parse_and_control+0xc6>
 80029a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b0a      	cmp	r3, #10
 80029ae:	d0e6      	beq.n	800297e <parse_and_control+0xc6>
        char hand = (char)tolower((unsigned char)tok[0]);
 80029b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 80029ba:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80029be:	3301      	adds	r3, #1
 80029c0:	4a8e      	ldr	r2, [pc, #568]	@ (8002bfc <parse_and_control+0x344>)
 80029c2:	4413      	add	r3, r2
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d103      	bne.n	80029d6 <parse_and_control+0x11e>
 80029ce:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80029d2:	3320      	adds	r3, #32
 80029d4:	e001      	b.n	80029da <parse_and_control+0x122>
 80029d6:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80029da:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106
        bool is_right = (hand == 'r');
 80029de:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 80029e2:	2b72      	cmp	r3, #114	@ 0x72
 80029e4:	bf0c      	ite	eq
 80029e6:	2301      	moveq	r3, #1
 80029e8:	2300      	movne	r3, #0
 80029ea:	f887 3105 	strb.w	r3, [r7, #261]	@ 0x105

        uint8_t ids[7];
        float   ang_rl[7];
        uint8_t n = 0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        for (uint8_t j = 0; j < 7; j++) {
 80029f4:	2300      	movs	r3, #0
 80029f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80029fa:	e0e4      	b.n	8002bc6 <parse_and_control+0x30e>
            tok = strtok_r(NULL, ",", &saveptr);
 80029fc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002a00:	461a      	mov	r2, r3
 8002a02:	497d      	ldr	r1, [pc, #500]	@ (8002bf8 <parse_and_control+0x340>)
 8002a04:	2000      	movs	r0, #0
 8002a06:	f007 fd7c 	bl	800a502 <strtok_r>
 8002a0a:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
            if (!tok) break;
 8002a0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 80dd 	beq.w	8002bd2 <parse_and_control+0x31a>
            while (*tok==' ' || *tok=='\t' || *tok=='\r' || *tok=='\n') ++tok;
 8002a18:	e004      	b.n	8002a24 <parse_and_control+0x16c>
 8002a1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002a1e:	3301      	adds	r3, #1
 8002a20:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002a24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b20      	cmp	r3, #32
 8002a2c:	d0f5      	beq.n	8002a1a <parse_and_control+0x162>
 8002a2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b09      	cmp	r3, #9
 8002a36:	d0f0      	beq.n	8002a1a <parse_and_control+0x162>
 8002a38:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b0d      	cmp	r3, #13
 8002a40:	d0eb      	beq.n	8002a1a <parse_and_control+0x162>
 8002a42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b0a      	cmp	r3, #10
 8002a4a:	d0e6      	beq.n	8002a1a <parse_and_control+0x162>
            char *endp = tok + strlen(tok);
 8002a4c:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8002a50:	f7fd fc2e 	bl	80002b0 <strlen>
 8002a54:	4602      	mov	r2, r0
 8002a56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
            while (endp > tok && (endp[-1]==' ' || endp[-1]=='\t' || endp[-1]=='\r' || endp[-1]=='\n'))
 8002a60:	e008      	b.n	8002a74 <parse_and_control+0x1bc>
                *--endp = '\0';
 8002a62:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a66:	3b01      	subs	r3, #1
 8002a68:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002a6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
            while (endp > tok && (endp[-1]==' ' || endp[-1]=='\t' || endp[-1]=='\r' || endp[-1]=='\n'))
 8002a74:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8002a78:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d917      	bls.n	8002ab0 <parse_and_control+0x1f8>
 8002a80:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a84:	3b01      	subs	r3, #1
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b20      	cmp	r3, #32
 8002a8a:	d0ea      	beq.n	8002a62 <parse_and_control+0x1aa>
 8002a8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a90:	3b01      	subs	r3, #1
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b09      	cmp	r3, #9
 8002a96:	d0e4      	beq.n	8002a62 <parse_and_control+0x1aa>
 8002a98:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b0d      	cmp	r3, #13
 8002aa2:	d0de      	beq.n	8002a62 <parse_and_control+0x1aa>
 8002aa4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b0a      	cmp	r3, #10
 8002aae:	d0d8      	beq.n	8002a62 <parse_and_control+0x1aa>
            if (tok[0]=='x' || tok[0]=='X') continue;
 8002ab0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b78      	cmp	r3, #120	@ 0x78
 8002ab8:	d07d      	beq.n	8002bb6 <parse_and_control+0x2fe>
 8002aba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b58      	cmp	r3, #88	@ 0x58
 8002ac2:	d078      	beq.n	8002bb6 <parse_and_control+0x2fe>
            bool has_digit = false;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            for (char *pchk = tok; *pchk; ++pchk) {
 8002aca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002ace:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002ad2:	e012      	b.n	8002afa <parse_and_control+0x242>
                if (*pchk >= '0' && *pchk <= '9') { has_digit = true; break; }
 8002ad4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b2f      	cmp	r3, #47	@ 0x2f
 8002adc:	d908      	bls.n	8002af0 <parse_and_control+0x238>
 8002ade:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b39      	cmp	r3, #57	@ 0x39
 8002ae6:	d803      	bhi.n	8002af0 <parse_and_control+0x238>
 8002ae8:	2301      	movs	r3, #1
 8002aea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8002aee:	e009      	b.n	8002b04 <parse_and_control+0x24c>
            for (char *pchk = tok; *pchk; ++pchk) {
 8002af0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002af4:	3301      	adds	r3, #1
 8002af6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002afa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1e7      	bne.n	8002ad4 <parse_and_control+0x21c>
            }
            if (!has_digit) continue;
 8002b04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002b08:	f083 0301 	eor.w	r3, r3, #1
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d153      	bne.n	8002bba <parse_and_control+0x302>

            float a = (float)atof(tok);
 8002b12:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8002b16:	f005 fdbf 	bl	8008698 <atof>
 8002b1a:	ec53 2b10 	vmov	r2, r3, d0
 8002b1e:	4610      	mov	r0, r2
 8002b20:	4619      	mov	r1, r3
 8002b22:	f7fe f881 	bl	8000c28 <__aeabi_d2f>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            if (a < -180.0f) a = -180.0f;
 8002b2c:	edd7 7a45 	vldr	s15, [r7, #276]	@ 0x114
 8002b30:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8002c00 <parse_and_control+0x348>
 8002b34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b3c:	d502      	bpl.n	8002b44 <parse_and_control+0x28c>
 8002b3e:	4b31      	ldr	r3, [pc, #196]	@ (8002c04 <parse_and_control+0x34c>)
 8002b40:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            if (a >  180.0f) a =  180.0f;
 8002b44:	edd7 7a45 	vldr	s15, [r7, #276]	@ 0x114
 8002b48:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8002c0c <parse_and_control+0x354>
 8002b4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b54:	dd02      	ble.n	8002b5c <parse_and_control+0x2a4>
 8002b56:	4b2c      	ldr	r3, [pc, #176]	@ (8002c08 <parse_and_control+0x350>)
 8002b58:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            uint8_t baseL = 1 + 7;
 8002b5c:	2308      	movs	r3, #8
 8002b5e:	f887 3104 	strb.w	r3, [r7, #260]	@ 0x104
            uint8_t id = is_right ? (j + 1) : (baseL + j);
 8002b62:	f897 3105 	ldrb.w	r3, [r7, #261]	@ 0x105
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d004      	beq.n	8002b74 <parse_and_control+0x2bc>
 8002b6a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8002b6e:	3301      	adds	r3, #1
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	e005      	b.n	8002b80 <parse_and_control+0x2c8>
 8002b74:	f897 2104 	ldrb.w	r2, [r7, #260]	@ 0x104
 8002b78:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8002b7c:	4413      	add	r3, r2
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
            ids[n]    = id;
 8002b84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b88:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8002b8c:	443b      	add	r3, r7
 8002b8e:	f897 2103 	ldrb.w	r2, [r7, #259]	@ 0x103
 8002b92:	f803 2c54 	strb.w	r2, [r3, #-84]
            ang_rl[n] = a;
 8002b96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8002ba0:	443b      	add	r3, r7
 8002ba2:	3b70      	subs	r3, #112	@ 0x70
 8002ba4:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002ba8:	601a      	str	r2, [r3, #0]
            n++;
 8002baa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bae:	3301      	adds	r3, #1
 8002bb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 8002bb4:	e002      	b.n	8002bbc <parse_and_control+0x304>
            if (tok[0]=='x' || tok[0]=='X') continue;
 8002bb6:	bf00      	nop
 8002bb8:	e000      	b.n	8002bbc <parse_and_control+0x304>
            if (!has_digit) continue;
 8002bba:	bf00      	nop
        for (uint8_t j = 0; j < 7; j++) {
 8002bbc:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8002bc6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8002bca:	2b06      	cmp	r3, #6
 8002bcc:	f67f af16 	bls.w	80029fc <parse_and_control+0x144>
 8002bd0:	e000      	b.n	8002bd4 <parse_and_control+0x31c>
            if (!tok) break;
 8002bd2:	bf00      	nop
        }

        if (n == 0) { p = end + 1; continue; }
 8002bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d105      	bne.n	8002be8 <parse_and_control+0x330>
 8002bdc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002be0:	3301      	adds	r3, #1
 8002be2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8002be6:	e088      	b.n	8002cfa <parse_and_control+0x442>

        const uint16_t ADDR_GOAL_POSITION = 116;
 8002be8:	2374      	movs	r3, #116	@ 0x74
 8002bea:	f8a7 3100 	strh.w	r3, [r7, #256]	@ 0x100

        for (uint8_t k = 0; k < n; k++) {
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 8002bf4:	e06a      	b.n	8002ccc <parse_and_control+0x414>
 8002bf6:	bf00      	nop
 8002bf8:	0800d034 	.word	0x0800d034
 8002bfc:	0800d548 	.word	0x0800d548
 8002c00:	c3340000 	.word	0xc3340000
 8002c04:	c3340000 	.word	0xc3340000
 8002c08:	43340000 	.word	0x43340000
 8002c0c:	43340000 	.word	0x43340000
            float f0_360 = wrap360(ang_rl[k] + 180.0f);
 8002c10:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8002c1a:	443b      	add	r3, r7
 8002c1c:	3b70      	subs	r3, #112	@ 0x70
 8002c1e:	edd3 7a00 	vldr	s15, [r3]
 8002c22:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 8002c0c <parse_and_control+0x354>
 8002c26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c2e:	f7ff fcbd 	bl	80025ac <wrap360>
 8002c32:	ed87 0a3f 	vstr	s0, [r7, #252]	@ 0xfc
            int32_t goal_cnt = deg0to360_to_cnt(f0_360);
 8002c36:	ed97 0a3f 	vldr	s0, [r7, #252]	@ 0xfc
 8002c3a:	f7ff fc99 	bl	8002570 <deg0to360_to_cnt>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

            printf("Moving ID %d to %.1f deg (cnt=%ld)\r\n", ids[k], f0_360, (long)goal_cnt);
 8002c44:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 8002c48:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8002c4c:	443b      	add	r3, r7
 8002c4e:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8002c52:	461c      	mov	r4, r3
 8002c54:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8002c58:	f7fd fc96 	bl	8000588 <__aeabi_f2d>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8002c64:	9100      	str	r1, [sp, #0]
 8002c66:	4621      	mov	r1, r4
 8002c68:	4841      	ldr	r0, [pc, #260]	@ (8002d70 <parse_and_control+0x4b8>)
 8002c6a:	f007 fa55 	bl	800a118 <iprintf>
            Dynamixel_write(ids[k], ADDR_GOAL_POSITION, (uint8_t*)&goal_cnt, 4);
 8002c6e:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 8002c72:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8002c76:	443b      	add	r3, r7
 8002c78:	f813 0c54 	ldrb.w	r0, [r3, #-84]
 8002c7c:	f107 02c4 	add.w	r2, r7, #196	@ 0xc4
 8002c80:	f8b7 1100 	ldrh.w	r1, [r7, #256]	@ 0x100
 8002c84:	2304      	movs	r3, #4
 8002c86:	f7fe fd63 	bl	8001750 <Dynamixel_write>
            HAL_Delay(5);
 8002c8a:	2005      	movs	r0, #5
 8002c8c:	f001 fae4 	bl	8004258 <HAL_Delay>

            int8_t idx = idx_of_id(ids[k]);
 8002c90:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 8002c94:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8002c98:	443b      	add	r3, r7
 8002c9a:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff fcdc 	bl	800265c <idx_of_id>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
            if (idx >= 0) {
 8002caa:	f997 30fb 	ldrsb.w	r3, [r7, #251]	@ 0xfb
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	db07      	blt.n	8002cc2 <parse_and_control+0x40a>
                g_target_deg[idx] = f0_360;
 8002cb2:	f997 30fb 	ldrsb.w	r3, [r7, #251]	@ 0xfb
 8002cb6:	4a2f      	ldr	r2, [pc, #188]	@ (8002d74 <parse_and_control+0x4bc>)
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8002cc0:	601a      	str	r2, [r3, #0]
        for (uint8_t k = 0; k < n; k++) {
 8002cc2:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 8002ccc:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 8002cd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d39b      	bcc.n	8002c10 <parse_and_control+0x358>
            }
        }

        processed_any = true;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
        p = end + 1;
 8002cde:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8002ce8:	e5f8      	b.n	80028dc <parse_and_control+0x24>
        if (!start) break;
 8002cea:	bf00      	nop
 8002cec:	e000      	b.n	8002cf0 <parse_and_control+0x438>
        if (!end) break;
 8002cee:	bf00      	nop
    }

    if (processed_any) {
 8002cf0:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <parse_and_control+0x444>
        bool ok = live_slowdown_until_reached(DXL_ID_CNT, DXL_ID_LIST, goal_all, TIMEOUT_MS);

        if (ok)  print_to_link("Done\r\n");
        else     print_to_link("timeout\r\n");
    }
}
 8002cf8:	e035      	b.n	8002d66 <parse_and_control+0x4ae>
    while (1) {
 8002cfa:	e5ef      	b.n	80028dc <parse_and_control+0x24>
        for (uint8_t i = 0; i < DXL_ID_CNT; i++)
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f887 3112 	strb.w	r3, [r7, #274]	@ 0x112
 8002d02:	e012      	b.n	8002d2a <parse_and_control+0x472>
            goal_all[i] = g_target_deg[i];
 8002d04:	f897 2112 	ldrb.w	r2, [r7, #274]	@ 0x112
 8002d08:	f897 3112 	ldrb.w	r3, [r7, #274]	@ 0x112
 8002d0c:	4919      	ldr	r1, [pc, #100]	@ (8002d74 <parse_and_control+0x4bc>)
 8002d0e:	0092      	lsls	r2, r2, #2
 8002d10:	440a      	add	r2, r1
 8002d12:	6812      	ldr	r2, [r2, #0]
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8002d1a:	443b      	add	r3, r7
 8002d1c:	3b90      	subs	r3, #144	@ 0x90
 8002d1e:	601a      	str	r2, [r3, #0]
        for (uint8_t i = 0; i < DXL_ID_CNT; i++)
 8002d20:	f897 3112 	ldrb.w	r3, [r7, #274]	@ 0x112
 8002d24:	3301      	adds	r3, #1
 8002d26:	f887 3112 	strb.w	r3, [r7, #274]	@ 0x112
 8002d2a:	f897 3112 	ldrb.w	r3, [r7, #274]	@ 0x112
 8002d2e:	2b06      	cmp	r3, #6
 8002d30:	d9e8      	bls.n	8002d04 <parse_and_control+0x44c>
        const uint32_t TIMEOUT_MS = 8000;
 8002d32:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002d36:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
        bool ok = live_slowdown_until_reached(DXL_ID_CNT, DXL_ID_LIST, goal_all, TIMEOUT_MS);
 8002d3a:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8002d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d42:	490d      	ldr	r1, [pc, #52]	@ (8002d78 <parse_and_control+0x4c0>)
 8002d44:	2007      	movs	r0, #7
 8002d46:	f7ff fcab 	bl	80026a0 <live_slowdown_until_reached>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f887 30f3 	strb.w	r3, [r7, #243]	@ 0xf3
        if (ok)  print_to_link("Done\r\n");
 8002d50:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <parse_and_control+0x4a8>
 8002d58:	4808      	ldr	r0, [pc, #32]	@ (8002d7c <parse_and_control+0x4c4>)
 8002d5a:	f7ff f9d3 	bl	8002104 <print_to_link>
}
 8002d5e:	e002      	b.n	8002d66 <parse_and_control+0x4ae>
        else     print_to_link("timeout\r\n");
 8002d60:	4807      	ldr	r0, [pc, #28]	@ (8002d80 <parse_and_control+0x4c8>)
 8002d62:	f7ff f9cf 	bl	8002104 <print_to_link>
}
 8002d66:	bf00      	nop
 8002d68:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd90      	pop	{r4, r7, pc}
 8002d70:	0800d038 	.word	0x0800d038
 8002d74:	20000aa8 	.word	0x20000aa8
 8002d78:	0800d2f8 	.word	0x0800d2f8
 8002d7c:	0800d060 	.word	0x0800d060
 8002d80:	0800d068 	.word	0x0800d068

08002d84 <init_move_all_to_180>:

void init_move_all_to_180(void) {
 8002d84:	b590      	push	{r4, r7, lr}
 8002d86:	b09b      	sub	sp, #108	@ 0x6c
 8002d88:	af02      	add	r7, sp, #8
    const uint8_t ADDR_GOAL_POSITION = 116;
 8002d8a:	2374      	movs	r3, #116	@ 0x74
 8002d8c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    const uint8_t POS_DATA_LEN = 4;
 8002d90:	2304      	movs	r3, #4
 8002d92:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    int32_t goal_pos_raw[DXL_ID_CNT];
    float target_degs[DXL_ID_CNT];

    const uint8_t ADDR_PROFILE_VELOCITY = 112;
 8002d96:	2370      	movs	r3, #112	@ 0x70
 8002d98:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
    const uint8_t VEL_DATA_LEN = 4;
 8002d9c:	2304      	movs	r3, #4
 8002d9e:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    uint32_t vel_raw[DXL_ID_CNT];

    for (uint8_t i = 0; i < DXL_ID_CNT; i++) {
 8002da2:	2300      	movs	r3, #0
 8002da4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002da8:	e02c      	b.n	8002e04 <init_move_all_to_180+0x80>
        target_degs[i] = 180.0f;
 8002daa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	3360      	adds	r3, #96	@ 0x60
 8002db2:	443b      	add	r3, r7
 8002db4:	3b40      	subs	r3, #64	@ 0x40
 8002db6:	4a31      	ldr	r2, [pc, #196]	@ (8002e7c <init_move_all_to_180+0xf8>)
 8002db8:	601a      	str	r2, [r3, #0]
        goal_pos_raw[i] = deg0to360_to_cnt(target_degs[i]);
 8002dba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	3360      	adds	r3, #96	@ 0x60
 8002dc2:	443b      	add	r3, r7
 8002dc4:	3b40      	subs	r3, #64	@ 0x40
 8002dc6:	edd3 7a00 	vldr	s15, [r3]
 8002dca:	f897 405f 	ldrb.w	r4, [r7, #95]	@ 0x5f
 8002dce:	eeb0 0a67 	vmov.f32	s0, s15
 8002dd2:	f7ff fbcd 	bl	8002570 <deg0to360_to_cnt>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	00a3      	lsls	r3, r4, #2
 8002dda:	3360      	adds	r3, #96	@ 0x60
 8002ddc:	443b      	add	r3, r7
 8002dde:	f843 2c24 	str.w	r2, [r3, #-36]
        vel_raw[i] = pv_raw_from_deg_s(20.0f);
 8002de2:	f897 405f 	ldrb.w	r4, [r7, #95]	@ 0x5f
 8002de6:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8002dea:	f7ff fc13 	bl	8002614 <pv_raw_from_deg_s>
 8002dee:	4602      	mov	r2, r0
 8002df0:	00a3      	lsls	r3, r4, #2
 8002df2:	3360      	adds	r3, #96	@ 0x60
 8002df4:	443b      	add	r3, r7
 8002df6:	f843 2c5c 	str.w	r2, [r3, #-92]
    for (uint8_t i = 0; i < DXL_ID_CNT; i++) {
 8002dfa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002dfe:	3301      	adds	r3, #1
 8002e00:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002e04:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002e08:	2b06      	cmp	r3, #6
 8002e0a:	d9ce      	bls.n	8002daa <init_move_all_to_180+0x26>
    }

    Dynamixel_SyncWrite(ADDR_PROFILE_VELOCITY, VEL_DATA_LEN, DXL_ID_LIST, DXL_ID_CNT, (uint8_t*)vel_raw);
 8002e0c:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8002e10:	b298      	uxth	r0, r3
 8002e12:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002e16:	b299      	uxth	r1, r3
 8002e18:	1d3b      	adds	r3, r7, #4
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	2307      	movs	r3, #7
 8002e1e:	4a18      	ldr	r2, [pc, #96]	@ (8002e80 <init_move_all_to_180+0xfc>)
 8002e20:	f7fe fcfe 	bl	8001820 <Dynamixel_SyncWrite>
    HAL_Delay(20);
 8002e24:	2014      	movs	r0, #20
 8002e26:	f001 fa17 	bl	8004258 <HAL_Delay>
    Dynamixel_SyncWrite(ADDR_GOAL_POSITION, POS_DATA_LEN, DXL_ID_LIST, DXL_ID_CNT, (uint8_t*)goal_pos_raw);
 8002e2a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002e2e:	b298      	uxth	r0, r3
 8002e30:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8002e34:	b299      	uxth	r1, r3
 8002e36:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	2307      	movs	r3, #7
 8002e3e:	4a10      	ldr	r2, [pc, #64]	@ (8002e80 <init_move_all_to_180+0xfc>)
 8002e40:	f7fe fcee 	bl	8001820 <Dynamixel_SyncWrite>

    printf("All homing commands sent.\r\n--- WAITING FOR MOTORS ---\r\n");
 8002e44:	480f      	ldr	r0, [pc, #60]	@ (8002e84 <init_move_all_to_180+0x100>)
 8002e46:	f007 f9cf 	bl	800a1e8 <puts>
    if(!live_slowdown_until_reached(DXL_ID_CNT, DXL_ID_LIST, target_degs, 15000)) {
 8002e4a:	f107 0220 	add.w	r2, r7, #32
 8002e4e:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8002e52:	490b      	ldr	r1, [pc, #44]	@ (8002e80 <init_move_all_to_180+0xfc>)
 8002e54:	2007      	movs	r0, #7
 8002e56:	f7ff fc23 	bl	80026a0 <live_slowdown_until_reached>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f083 0301 	eor.w	r3, r3, #1
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <init_move_all_to_180+0xea>
    	printf("Timeout waiting for homing completion!\r\n");
 8002e66:	4808      	ldr	r0, [pc, #32]	@ (8002e88 <init_move_all_to_180+0x104>)
 8002e68:	f007 f9be 	bl	800a1e8 <puts>
    } else {
        printf("All motors reached home position.\r\n");
    }
}
 8002e6c:	e002      	b.n	8002e74 <init_move_all_to_180+0xf0>
        printf("All motors reached home position.\r\n");
 8002e6e:	4807      	ldr	r0, [pc, #28]	@ (8002e8c <init_move_all_to_180+0x108>)
 8002e70:	f007 f9ba 	bl	800a1e8 <puts>
}
 8002e74:	bf00      	nop
 8002e76:	3764      	adds	r7, #100	@ 0x64
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd90      	pop	{r4, r7, pc}
 8002e7c:	43340000 	.word	0x43340000
 8002e80:	0800d2f8 	.word	0x0800d2f8
 8002e84:	0800d074 	.word	0x0800d074
 8002e88:	0800d0ac 	.word	0x0800d0ac
 8002e8c:	0800d0d4 	.word	0x0800d0d4

08002e90 <update_all_motors>:

void update_all_motors(void) {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b09e      	sub	sp, #120	@ 0x78
 8002e94:	af02      	add	r7, sp, #8
    static uint32_t last_send_ms = 0;
    uint32_t now = HAL_GetTick();
 8002e96:	f001 f9d3 	bl	8004240 <HAL_GetTick>
 8002e9a:	66b8      	str	r0, [r7, #104]	@ 0x68
    if (now - last_send_ms < 30) return;
 8002e9c:	4b42      	ldr	r3, [pc, #264]	@ (8002fa8 <update_all_motors+0x118>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b1d      	cmp	r3, #29
 8002ea6:	d97b      	bls.n	8002fa0 <update_all_motors+0x110>
    last_send_ms = now;
 8002ea8:	4a3f      	ldr	r2, [pc, #252]	@ (8002fa8 <update_all_motors+0x118>)
 8002eaa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002eac:	6013      	str	r3, [r2, #0]

    const uint16_t ADDR_PROFILE_ACCEL     = 108;
 8002eae:	236c      	movs	r3, #108	@ 0x6c
 8002eb0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    const uint16_t ADDR_PROFILE_VELOCITY  = 112;
 8002eb4:	2370      	movs	r3, #112	@ 0x70
 8002eb6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
    const uint16_t ADDR_GOAL_POSITION     = 116;
 8002eba:	2374      	movs	r3, #116	@ 0x74
 8002ebc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62

    uint32_t profile_accel[DXL_ID_CNT];
    uint32_t profile_vel[DXL_ID_CNT];
    int32_t  goal_pos[DXL_ID_CNT];

    const float accel_dps2 = 400.0f;
 8002ec0:	4b3a      	ldr	r3, [pc, #232]	@ (8002fac <update_all_motors+0x11c>)
 8002ec2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const float vel_dps    = 60.0f;
 8002ec4:	4b3a      	ldr	r3, [pc, #232]	@ (8002fb0 <update_all_motors+0x120>)
 8002ec6:	65bb      	str	r3, [r7, #88]	@ 0x58

    for (int i = 0; i < DXL_ID_CNT; i++) {
 8002ec8:	2300      	movs	r3, #0
 8002eca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ecc:	e041      	b.n	8002f52 <update_all_motors+0xc2>
        profile_accel[i] = (uint32_t)(accel_dps2 / 214.577f);
 8002ece:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8002ed2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002fb4 <update_all_motors+0x124>
 8002ed6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ede:	ee17 2a90 	vmov	r2, s15
 8002ee2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	3370      	adds	r3, #112	@ 0x70
 8002ee8:	443b      	add	r3, r7
 8002eea:	f843 2c34 	str.w	r2, [r3, #-52]
        profile_vel[i]   = (uint32_t)(vel_dps / 0.229f / 360.0f * 60.0f);
 8002eee:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002ef2:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8002fb8 <update_all_motors+0x128>
 8002ef6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002efa:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8002fbc <update_all_motors+0x12c>
 8002efe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f02:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002fc0 <update_all_motors+0x130>
 8002f06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f0e:	ee17 2a90 	vmov	r2, s15
 8002f12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	3370      	adds	r3, #112	@ 0x70
 8002f18:	443b      	add	r3, r7
 8002f1a:	f843 2c50 	str.w	r2, [r3, #-80]
        goal_pos[i]      = deg0to360_to_cnt(wrap360(g_target_deg[i])); // 固定例
 8002f1e:	4a29      	ldr	r2, [pc, #164]	@ (8002fc4 <update_all_motors+0x134>)
 8002f20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	edd3 7a00 	vldr	s15, [r3]
 8002f2a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f2e:	f7ff fb3d 	bl	80025ac <wrap360>
 8002f32:	eef0 7a40 	vmov.f32	s15, s0
 8002f36:	eeb0 0a67 	vmov.f32	s0, s15
 8002f3a:	f7ff fb19 	bl	8002570 <deg0to360_to_cnt>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	3370      	adds	r3, #112	@ 0x70
 8002f46:	443b      	add	r3, r7
 8002f48:	f843 2c6c 	str.w	r2, [r3, #-108]
    for (int i = 0; i < DXL_ID_CNT; i++) {
 8002f4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f4e:	3301      	adds	r3, #1
 8002f50:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f54:	2b06      	cmp	r3, #6
 8002f56:	ddba      	ble.n	8002ece <update_all_motors+0x3e>
    }

    Dynamixel_SyncWrite(ADDR_PROFILE_ACCEL, 4, DXL_ID_LIST, DXL_ID_CNT, (uint8_t*)profile_accel);
 8002f58:	f8b7 0066 	ldrh.w	r0, [r7, #102]	@ 0x66
 8002f5c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	2307      	movs	r3, #7
 8002f64:	4a18      	ldr	r2, [pc, #96]	@ (8002fc8 <update_all_motors+0x138>)
 8002f66:	2104      	movs	r1, #4
 8002f68:	f7fe fc5a 	bl	8001820 <Dynamixel_SyncWrite>
    HAL_Delay(5);
 8002f6c:	2005      	movs	r0, #5
 8002f6e:	f001 f973 	bl	8004258 <HAL_Delay>
    Dynamixel_SyncWrite(ADDR_PROFILE_VELOCITY, 4, DXL_ID_LIST, DXL_ID_CNT, (uint8_t*)profile_vel);
 8002f72:	f8b7 0064 	ldrh.w	r0, [r7, #100]	@ 0x64
 8002f76:	f107 0320 	add.w	r3, r7, #32
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	2307      	movs	r3, #7
 8002f7e:	4a12      	ldr	r2, [pc, #72]	@ (8002fc8 <update_all_motors+0x138>)
 8002f80:	2104      	movs	r1, #4
 8002f82:	f7fe fc4d 	bl	8001820 <Dynamixel_SyncWrite>
    HAL_Delay(5);
 8002f86:	2005      	movs	r0, #5
 8002f88:	f001 f966 	bl	8004258 <HAL_Delay>
    Dynamixel_SyncWrite(ADDR_GOAL_POSITION, 4, DXL_ID_LIST, DXL_ID_CNT, (uint8_t*)goal_pos);
 8002f8c:	f8b7 0062 	ldrh.w	r0, [r7, #98]	@ 0x62
 8002f90:	1d3b      	adds	r3, r7, #4
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	2307      	movs	r3, #7
 8002f96:	4a0c      	ldr	r2, [pc, #48]	@ (8002fc8 <update_all_motors+0x138>)
 8002f98:	2104      	movs	r1, #4
 8002f9a:	f7fe fc41 	bl	8001820 <Dynamixel_SyncWrite>
 8002f9e:	e000      	b.n	8002fa2 <update_all_motors+0x112>
    if (now - last_send_ms < 30) return;
 8002fa0:	bf00      	nop
}
 8002fa2:	3770      	adds	r7, #112	@ 0x70
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20000ac4 	.word	0x20000ac4
 8002fac:	43c80000 	.word	0x43c80000
 8002fb0:	42700000 	.word	0x42700000
 8002fb4:	435693b6 	.word	0x435693b6
 8002fb8:	3e6a7efa 	.word	0x3e6a7efa
 8002fbc:	43b40000 	.word	0x43b40000
 8002fc0:	42700000 	.word	0x42700000
 8002fc4:	20000aa8 	.word	0x20000aa8
 8002fc8:	0800d2f8 	.word	0x0800d2f8

08002fcc <clampf>:

ServoHandle_t s1, s2;
struct GripStop g1, g2;

// ---------- 小工具 ----------
static inline float clampf(float x, float lo, float hi) {
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	ed87 0a03 	vstr	s0, [r7, #12]
 8002fd6:	edc7 0a02 	vstr	s1, [r7, #8]
 8002fda:	ed87 1a01 	vstr	s2, [r7, #4]
  if (x < lo) return lo;
 8002fde:	ed97 7a03 	vldr	s14, [r7, #12]
 8002fe2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fe6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fee:	d501      	bpl.n	8002ff4 <clampf+0x28>
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	e00b      	b.n	800300c <clampf+0x40>
  if (x > hi) return hi;
 8002ff4:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ff8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ffc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003004:	dd01      	ble.n	800300a <clampf+0x3e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	e000      	b.n	800300c <clampf+0x40>
  return x;
 800300a:	68fb      	ldr	r3, [r7, #12]
}
 800300c:	ee07 3a90 	vmov	s15, r3
 8003010:	eeb0 0a67 	vmov.f32	s0, s15
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <clamp_u16>:

static inline uint16_t clamp_u16(uint16_t v, uint16_t lo, uint16_t hi) {
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	4603      	mov	r3, r0
 8003026:	80fb      	strh	r3, [r7, #6]
 8003028:	460b      	mov	r3, r1
 800302a:	80bb      	strh	r3, [r7, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	807b      	strh	r3, [r7, #2]
  if (v < lo) { return lo; }
 8003030:	88fa      	ldrh	r2, [r7, #6]
 8003032:	88bb      	ldrh	r3, [r7, #4]
 8003034:	429a      	cmp	r2, r3
 8003036:	d201      	bcs.n	800303c <clamp_u16+0x1e>
 8003038:	88bb      	ldrh	r3, [r7, #4]
 800303a:	e006      	b.n	800304a <clamp_u16+0x2c>
  if (v > hi) { return hi; }
 800303c:	88fa      	ldrh	r2, [r7, #6]
 800303e:	887b      	ldrh	r3, [r7, #2]
 8003040:	429a      	cmp	r2, r3
 8003042:	d901      	bls.n	8003048 <clamp_u16+0x2a>
 8003044:	887b      	ldrh	r3, [r7, #2]
 8003046:	e000      	b.n	800304a <clamp_u16+0x2c>
  return v;
 8003048:	88fb      	ldrh	r3, [r7, #6]
}
 800304a:	4618      	mov	r0, r3
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
	...

08003058 <deg_to_us>:

static inline uint16_t deg_to_us(const ServoHandle_t *s, float deg) {
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	ed87 0a00 	vstr	s0, [r7]
  float d = clampf(deg, 0.0f, 180.0f);
 8003064:	ed9f 1a1f 	vldr	s2, [pc, #124]	@ 80030e4 <deg_to_us+0x8c>
 8003068:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 80030e8 <deg_to_us+0x90>
 800306c:	ed97 0a00 	vldr	s0, [r7]
 8003070:	f7ff ffac 	bl	8002fcc <clampf>
 8003074:	ed87 0a02 	vstr	s0, [r7, #8]
  float usf = (float)s->us_min + (float)(s->us_max - s->us_min) * (d / 180.0f);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	891b      	ldrh	r3, [r3, #8]
 800307c:	ee07 3a90 	vmov	s15, r3
 8003080:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	895b      	ldrh	r3, [r3, #10]
 8003088:	461a      	mov	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	891b      	ldrh	r3, [r3, #8]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	ee07 3a90 	vmov	s15, r3
 8003094:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003098:	ed97 6a02 	vldr	s12, [r7, #8]
 800309c:	eddf 5a11 	vldr	s11, [pc, #68]	@ 80030e4 <deg_to_us+0x8c>
 80030a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ac:	edc7 7a03 	vstr	s15, [r7, #12]
  if (usf < 0.0f) { usf = 0.0f; }
 80030b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80030b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030bc:	d502      	bpl.n	80030c4 <deg_to_us+0x6c>
 80030be:	f04f 0300 	mov.w	r3, #0
 80030c2:	60fb      	str	r3, [r7, #12]
  return (uint16_t)(usf + 0.5f);
 80030c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80030c8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80030cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80030d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030d4:	ee17 3a90 	vmov	r3, s15
 80030d8:	b29b      	uxth	r3, r3
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	43340000 	.word	0x43340000
 80030e8:	00000000 	.word	0x00000000

080030ec <set_ccr_us>:

static inline void set_ccr_us(const ServoHandle_t *s, uint16_t us) {
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	460b      	mov	r3, r1
 80030f6:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COMPARE(s->htim, s->channel, us);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d105      	bne.n	800310c <set_ccr_us+0x20>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	887a      	ldrh	r2, [r7, #2]
 8003108:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800310a:	e018      	b.n	800313e <set_ccr_us+0x52>
  __HAL_TIM_SET_COMPARE(s->htim, s->channel, us);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b04      	cmp	r3, #4
 8003112:	d105      	bne.n	8003120 <set_ccr_us+0x34>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	887b      	ldrh	r3, [r7, #2]
 800311c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800311e:	e00e      	b.n	800313e <set_ccr_us+0x52>
  __HAL_TIM_SET_COMPARE(s->htim, s->channel, us);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b08      	cmp	r3, #8
 8003126:	d105      	bne.n	8003134 <set_ccr_us+0x48>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	887b      	ldrh	r3, [r7, #2]
 8003130:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003132:	e004      	b.n	800313e <set_ccr_us+0x52>
  __HAL_TIM_SET_COMPARE(s->htim, s->channel, us);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	887b      	ldrh	r3, [r7, #2]
 800313c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
	...

0800314c <Servo_Attach>:

// ---------- 對外 API ----------
void Servo_Attach(ServoHandle_t *s, TIM_HandleTypeDef *htim, uint32_t channel,
                  uint16_t us_min, uint16_t us_max)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	807b      	strh	r3, [r7, #2]
  s->htim     = htim;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	601a      	str	r2, [r3, #0]
  s->channel  = channel;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	605a      	str	r2, [r3, #4]
  s->us_min   = (us_min < 200) ? 200 : us_min;
 8003166:	887b      	ldrh	r3, [r7, #2]
 8003168:	2bc8      	cmp	r3, #200	@ 0xc8
 800316a:	bf38      	it	cc
 800316c:	23c8      	movcc	r3, #200	@ 0xc8
 800316e:	b29a      	uxth	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	811a      	strh	r2, [r3, #8]
  s->us_max   = (us_max > 30000) ? 30000 : us_max;
 8003174:	8b3b      	ldrh	r3, [r7, #24]
 8003176:	f247 5230 	movw	r2, #30000	@ 0x7530
 800317a:	4293      	cmp	r3, r2
 800317c:	bf28      	it	cs
 800317e:	4613      	movcs	r3, r2
 8003180:	b29a      	uxth	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	815a      	strh	r2, [r3, #10]
  if (s->us_max <= s->us_min + 10) {
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	895b      	ldrh	r3, [r3, #10]
 800318a:	461a      	mov	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	891b      	ldrh	r3, [r3, #8]
 8003190:	330a      	adds	r3, #10
 8003192:	429a      	cmp	r2, r3
 8003194:	dc05      	bgt.n	80031a2 <Servo_Attach+0x56>
    s->us_max = s->us_min + 10;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	891b      	ldrh	r3, [r3, #8]
 800319a:	330a      	adds	r3, #10
 800319c:	b29a      	uxth	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	815a      	strh	r2, [r3, #10]
  }

  s->cur_deg        = 90.0f;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4a21      	ldr	r2, [pc, #132]	@ (800322c <Servo_Attach+0xe0>)
 80031a6:	60da      	str	r2, [r3, #12]
  s->tgt_deg        = 90.0f;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4a20      	ldr	r2, [pc, #128]	@ (800322c <Servo_Attach+0xe0>)
 80031ac:	611a      	str	r2, [r3, #16]
  s->max_speed_dps  = SERVO_DEFAULT_SPEED_DPS;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003230 <Servo_Attach+0xe4>)
 80031b2:	615a      	str	r2, [r3, #20]
  s->ema_alpha      = SERVO_DEFAULT_EMA_ALPHA;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003234 <Servo_Attach+0xe8>)
 80031b8:	619a      	str	r2, [r3, #24]
  s->ema_us_f       = (float)deg_to_us(s, s->cur_deg);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80031c0:	eeb0 0a67 	vmov.f32	s0, s15
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f7ff ff47 	bl	8003058 <deg_to_us>
 80031ca:	4603      	mov	r3, r0
 80031cc:	ee07 3a90 	vmov	s15, r3
 80031d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	edc3 7a07 	vstr	s15, [r3, #28]
  s->ema_us         = (uint16_t)(s->ema_us_f + 0.5f);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	edd3 7a07 	vldr	s15, [r3, #28]
 80031e0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80031e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031ec:	ee17 3a90 	vmov	r3, s15
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	841a      	strh	r2, [r3, #32]
  s->last_ms        = HAL_GetTick();
 80031f6:	f001 f823 	bl	8004240 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	625a      	str	r2, [r3, #36]	@ 0x24
  s->attached       = 1U;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  HAL_TIM_PWM_Start(s->htim, s->channel);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	4619      	mov	r1, r3
 8003212:	4610      	mov	r0, r2
 8003214:	f003 f858 	bl	80062c8 <HAL_TIM_PWM_Start>
  set_ccr_us(s, s->ema_us);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8c1b      	ldrh	r3, [r3, #32]
 800321c:	4619      	mov	r1, r3
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f7ff ff64 	bl	80030ec <set_ccr_us>
}
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	42b40000 	.word	0x42b40000
 8003230:	42f00000 	.word	0x42f00000
 8003234:	3eb33333 	.word	0x3eb33333

08003238 <Servo_WriteMicroseconds>:

void Servo_WriteMicroseconds(ServoHandle_t *s, uint16_t us)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	807b      	strh	r3, [r7, #2]
  if (!s || !s->attached) return;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d055      	beq.n	80032f6 <Servo_WriteMicroseconds+0xbe>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003250:	2b00      	cmp	r3, #0
 8003252:	d050      	beq.n	80032f6 <Servo_WriteMicroseconds+0xbe>
  uint16_t clipped = clamp_u16(us, s->us_min, s->us_max);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	8919      	ldrh	r1, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	895a      	ldrh	r2, [r3, #10]
 800325c:	887b      	ldrh	r3, [r7, #2]
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff fedd 	bl	800301e <clamp_u16>
 8003264:	4603      	mov	r3, r0
 8003266:	81fb      	strh	r3, [r7, #14]

  float alpha = clampf(s->ema_alpha, 0.0f, 1.0f);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	edd3 7a06 	vldr	s15, [r3, #24]
 800326e:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8003272:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8003300 <Servo_WriteMicroseconds+0xc8>
 8003276:	eeb0 0a67 	vmov.f32	s0, s15
 800327a:	f7ff fea7 	bl	8002fcc <clampf>
 800327e:	ed87 0a02 	vstr	s0, [r7, #8]
  s->ema_us_f = (1.0f - alpha) * s->ema_us_f + alpha * (float)clipped;
 8003282:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003286:	edd7 7a02 	vldr	s15, [r7, #8]
 800328a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	edd3 7a07 	vldr	s15, [r3, #28]
 8003294:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003298:	89fb      	ldrh	r3, [r7, #14]
 800329a:	ee07 3a90 	vmov	s15, r3
 800329e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80032a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	edc3 7a07 	vstr	s15, [r3, #28]
  if (s->ema_us_f < 0.0f) s->ema_us_f = 0.0f;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	edd3 7a07 	vldr	s15, [r3, #28]
 80032ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c2:	d503      	bpl.n	80032cc <Servo_WriteMicroseconds+0x94>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	61da      	str	r2, [r3, #28]

  s->ema_us = (uint16_t)(s->ema_us_f + 0.5f);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	edd3 7a07 	vldr	s15, [r3, #28]
 80032d2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80032d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032de:	ee17 3a90 	vmov	r3, s15
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	841a      	strh	r2, [r3, #32]
  set_ccr_us(s, s->ema_us);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	8c1b      	ldrh	r3, [r3, #32]
 80032ec:	4619      	mov	r1, r3
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7ff fefc 	bl	80030ec <set_ccr_us>
 80032f4:	e000      	b.n	80032f8 <Servo_WriteMicroseconds+0xc0>
  if (!s || !s->attached) return;
 80032f6:	bf00      	nop
}
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	00000000 	.word	0x00000000

08003304 <Servo_WriteDegrees>:

void Servo_WriteDegrees(ServoHandle_t *s, float deg)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	ed87 0a00 	vstr	s0, [r7]
  if (!s || !s->attached) { return; }
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d01e      	beq.n	8003354 <Servo_WriteDegrees+0x50>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800331c:	2b00      	cmp	r3, #0
 800331e:	d019      	beq.n	8003354 <Servo_WriteDegrees+0x50>
  uint16_t us = deg_to_us(s, deg);
 8003320:	ed97 0a00 	vldr	s0, [r7]
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff fe97 	bl	8003058 <deg_to_us>
 800332a:	4603      	mov	r3, r0
 800332c:	81fb      	strh	r3, [r7, #14]
  s->cur_deg  = clampf(deg, 0.0f, 360.0f); // 立即更新目前角（無限速）
 800332e:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 800335c <Servo_WriteDegrees+0x58>
 8003332:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 8003360 <Servo_WriteDegrees+0x5c>
 8003336:	ed97 0a00 	vldr	s0, [r7]
 800333a:	f7ff fe47 	bl	8002fcc <clampf>
 800333e:	eef0 7a40 	vmov.f32	s15, s0
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	edc3 7a03 	vstr	s15, [r3, #12]
  Servo_WriteMicroseconds(s, us);
 8003348:	89fb      	ldrh	r3, [r7, #14]
 800334a:	4619      	mov	r1, r3
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7ff ff73 	bl	8003238 <Servo_WriteMicroseconds>
 8003352:	e000      	b.n	8003356 <Servo_WriteDegrees+0x52>
  if (!s || !s->attached) { return; }
 8003354:	bf00      	nop
}
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	43b40000 	.word	0x43b40000
 8003360:	00000000 	.word	0x00000000

08003364 <Servo_SetTargetDegrees>:

void Servo_SetTargetDegrees(ServoHandle_t *s, float target_deg)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	ed87 0a00 	vstr	s0, [r7]
  if (!s) { return; }
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00d      	beq.n	8003392 <Servo_SetTargetDegrees+0x2e>
  s->tgt_deg = clampf(target_deg, 0.0f, 180.0f);
 8003376:	ed9f 1a09 	vldr	s2, [pc, #36]	@ 800339c <Servo_SetTargetDegrees+0x38>
 800337a:	eddf 0a09 	vldr	s1, [pc, #36]	@ 80033a0 <Servo_SetTargetDegrees+0x3c>
 800337e:	ed97 0a00 	vldr	s0, [r7]
 8003382:	f7ff fe23 	bl	8002fcc <clampf>
 8003386:	eef0 7a40 	vmov.f32	s15, s0
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	edc3 7a04 	vstr	s15, [r3, #16]
 8003390:	e000      	b.n	8003394 <Servo_SetTargetDegrees+0x30>
  if (!s) { return; }
 8003392:	bf00      	nop
}
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	43340000 	.word	0x43340000
 80033a0:	00000000 	.word	0x00000000

080033a4 <Servo_SetMaxSpeedDps>:

void Servo_SetMaxSpeedDps(ServoHandle_t *s, float max_speed_dps)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	ed87 0a00 	vstr	s0, [r7]
  if (!s) { return; }
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d01a      	beq.n	80033ec <Servo_SetMaxSpeedDps+0x48>
  if (max_speed_dps < 1.0f)   { max_speed_dps = 1.0f;   }
 80033b6:	edd7 7a00 	vldr	s15, [r7]
 80033ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80033be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c6:	d502      	bpl.n	80033ce <Servo_SetMaxSpeedDps+0x2a>
 80033c8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80033cc:	603b      	str	r3, [r7, #0]
  if (max_speed_dps > 1000.f) { max_speed_dps = 1000.f; }
 80033ce:	edd7 7a00 	vldr	s15, [r7]
 80033d2:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80033f8 <Servo_SetMaxSpeedDps+0x54>
 80033d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033de:	dd01      	ble.n	80033e4 <Servo_SetMaxSpeedDps+0x40>
 80033e0:	4b06      	ldr	r3, [pc, #24]	@ (80033fc <Servo_SetMaxSpeedDps+0x58>)
 80033e2:	603b      	str	r3, [r7, #0]
  s->max_speed_dps = max_speed_dps;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	615a      	str	r2, [r3, #20]
 80033ea:	e000      	b.n	80033ee <Servo_SetMaxSpeedDps+0x4a>
  if (!s) { return; }
 80033ec:	bf00      	nop
}
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	447a0000 	.word	0x447a0000
 80033fc:	447a0000 	.word	0x447a0000

08003400 <Servo_SetEmaAlpha>:

void Servo_SetEmaAlpha(ServoHandle_t *s, float alpha)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	ed87 0a00 	vstr	s0, [r7]
  if (!s) { return; }
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00d      	beq.n	800342e <Servo_SetEmaAlpha+0x2e>
  s->ema_alpha = clampf(alpha, 0.0f, 1.0f);
 8003412:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8003416:	eddf 0a08 	vldr	s1, [pc, #32]	@ 8003438 <Servo_SetEmaAlpha+0x38>
 800341a:	ed97 0a00 	vldr	s0, [r7]
 800341e:	f7ff fdd5 	bl	8002fcc <clampf>
 8003422:	eef0 7a40 	vmov.f32	s15, s0
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	edc3 7a06 	vstr	s15, [r3, #24]
 800342c:	e000      	b.n	8003430 <Servo_SetEmaAlpha+0x30>
  if (!s) { return; }
 800342e:	bf00      	nop
}
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	00000000 	.word	0x00000000

0800343c <Servo_Update>:

void Servo_Update(ServoHandle_t *s)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08a      	sub	sp, #40	@ 0x28
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  if (!s || !s->attached) { return; }
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d073      	beq.n	8003532 <Servo_Update+0xf6>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003450:	2b00      	cmp	r3, #0
 8003452:	d06e      	beq.n	8003532 <Servo_Update+0xf6>

  uint32_t now = HAL_GetTick();
 8003454:	f000 fef4 	bl	8004240 <HAL_GetTick>
 8003458:	6238      	str	r0, [r7, #32]
  uint32_t dt_ms = now - s->last_ms;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345e:	6a3a      	ldr	r2, [r7, #32]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	61fb      	str	r3, [r7, #28]
  if (dt_ms == 0U) { return; } // 同一個tick內就先不更新
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d065      	beq.n	8003536 <Servo_Update+0xfa>
  s->last_ms = now;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a3a      	ldr	r2, [r7, #32]
 800346e:	625a      	str	r2, [r3, #36]	@ 0x24

  float dt = (float)dt_ms / 1000.0f;
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	ee07 3a90 	vmov	s15, r3
 8003476:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800347a:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8003540 <Servo_Update+0x104>
 800347e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003482:	edc7 7a06 	vstr	s15, [r7, #24]
  float err = s->tgt_deg - s->cur_deg;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	ed93 7a04 	vldr	s14, [r3, #16]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003492:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003496:	edc7 7a05 	vstr	s15, [r7, #20]

  // 限速器：一步最多移動 (max_speed_dps * dt)
  float max_step = s->max_speed_dps * dt;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	edd3 7a05 	vldr	s15, [r3, #20]
 80034a0:	ed97 7a06 	vldr	s14, [r7, #24]
 80034a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034a8:	edc7 7a04 	vstr	s15, [r7, #16]
  float step;
  if (err > 0.0f) {
 80034ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80034b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b8:	dd0d      	ble.n	80034d6 <Servo_Update+0x9a>
    step = (err > max_step) ? max_step : err;
 80034ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80034be:	edd7 7a04 	vldr	s15, [r7, #16]
 80034c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ca:	dd01      	ble.n	80034d0 <Servo_Update+0x94>
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	e000      	b.n	80034d2 <Servo_Update+0x96>
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80034d4:	e013      	b.n	80034fe <Servo_Update+0xc2>
  } else {
    step = (err < -max_step) ? -max_step : err;
 80034d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80034da:	eef1 7a67 	vneg.f32	s15, s15
 80034de:	ed97 7a05 	vldr	s14, [r7, #20]
 80034e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ea:	d504      	bpl.n	80034f6 <Servo_Update+0xba>
 80034ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80034f0:	eef1 7a67 	vneg.f32	s15, s15
 80034f4:	e001      	b.n	80034fa <Servo_Update+0xbe>
 80034f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80034fa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  }
  s->cur_deg += step;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	ed93 7a03 	vldr	s14, [r3, #12]
 8003504:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003508:	ee77 7a27 	vadd.f32	s15, s14, s15
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	edc3 7a03 	vstr	s15, [r3, #12]

  // 角度轉 μs，做 EMA 後輸出
  uint16_t us = deg_to_us(s, s->cur_deg);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	edd3 7a03 	vldr	s15, [r3, #12]
 8003518:	eeb0 0a67 	vmov.f32	s0, s15
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7ff fd9b 	bl	8003058 <deg_to_us>
 8003522:	4603      	mov	r3, r0
 8003524:	81fb      	strh	r3, [r7, #14]
  Servo_WriteMicroseconds(s, us);
 8003526:	89fb      	ldrh	r3, [r7, #14]
 8003528:	4619      	mov	r1, r3
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff fe84 	bl	8003238 <Servo_WriteMicroseconds>
 8003530:	e002      	b.n	8003538 <Servo_Update+0xfc>
  if (!s || !s->attached) { return; }
 8003532:	bf00      	nop
 8003534:	e000      	b.n	8003538 <Servo_Update+0xfc>
  if (dt_ms == 0U) { return; } // 同一個tick內就先不更新
 8003536:	bf00      	nop
}
 8003538:	3728      	adds	r7, #40	@ 0x28
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	447a0000 	.word	0x447a0000

08003544 <Servo_IsBusy>:

uint8_t Servo_IsBusy(ServoHandle_t *s, float tol_deg)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	ed87 0a00 	vstr	s0, [r7]
  if (!s) { return 0U; }
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <Servo_IsBusy+0x16>
 8003556:	2300      	movs	r3, #0
 8003558:	e02f      	b.n	80035ba <Servo_IsBusy+0x76>
  float tol = (tol_deg < 0.1f) ? 0.1f : tol_deg;
 800355a:	edd7 7a00 	vldr	s15, [r7]
 800355e:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80035c8 <Servo_IsBusy+0x84>
 8003562:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800356a:	d501      	bpl.n	8003570 <Servo_IsBusy+0x2c>
 800356c:	4b17      	ldr	r3, [pc, #92]	@ (80035cc <Servo_IsBusy+0x88>)
 800356e:	e000      	b.n	8003572 <Servo_IsBusy+0x2e>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	60bb      	str	r3, [r7, #8]
  float err = s->tgt_deg - s->cur_deg;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	ed93 7a04 	vldr	s14, [r3, #16]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003584:	edc7 7a03 	vstr	s15, [r7, #12]
  if (err < 0.0f) { err = -err; }
 8003588:	edd7 7a03 	vldr	s15, [r7, #12]
 800358c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003594:	d505      	bpl.n	80035a2 <Servo_IsBusy+0x5e>
 8003596:	edd7 7a03 	vldr	s15, [r7, #12]
 800359a:	eef1 7a67 	vneg.f32	s15, s15
 800359e:	edc7 7a03 	vstr	s15, [r7, #12]
  return (err > tol) ? 1U : 0U;
 80035a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80035a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80035aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b2:	dd01      	ble.n	80035b8 <Servo_IsBusy+0x74>
 80035b4:	2301      	movs	r3, #1
 80035b6:	e000      	b.n	80035ba <Servo_IsBusy+0x76>
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	3dcccccd 	.word	0x3dcccccd
 80035cc:	3dcccccd 	.word	0x3dcccccd

080035d0 <Servo_MoveToBlocking>:

bool Servo_MoveToBlocking(ServoHandle_t* s, float deg, float tol_deg, float dps, uint32_t timeout_ms)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b088      	sub	sp, #32
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6178      	str	r0, [r7, #20]
 80035d8:	ed87 0a04 	vstr	s0, [r7, #16]
 80035dc:	edc7 0a03 	vstr	s1, [r7, #12]
 80035e0:	ed87 1a02 	vstr	s2, [r7, #8]
 80035e4:	6079      	str	r1, [r7, #4]
  if (!s || !s->attached) return false;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d004      	beq.n	80035f6 <Servo_MoveToBlocking+0x26>
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <Servo_MoveToBlocking+0x2a>
 80035f6:	2300      	movs	r3, #0
 80035f8:	e03b      	b.n	8003672 <Servo_MoveToBlocking+0xa2>

  Servo_SetTargetDegrees(s, deg);
 80035fa:	ed97 0a04 	vldr	s0, [r7, #16]
 80035fe:	6978      	ldr	r0, [r7, #20]
 8003600:	f7ff feb0 	bl	8003364 <Servo_SetTargetDegrees>
  Servo_SetMaxSpeedDps(s, dps);
 8003604:	ed97 0a02 	vldr	s0, [r7, #8]
 8003608:	6978      	ldr	r0, [r7, #20]
 800360a:	f7ff fecb 	bl	80033a4 <Servo_SetMaxSpeedDps>

  uint32_t start_ms = HAL_GetTick();
 800360e:	f000 fe17 	bl	8004240 <HAL_GetTick>
 8003612:	61f8      	str	r0, [r7, #28]
  while(Servo_IsBusy(s, tol_deg)){
 8003614:	e00f      	b.n	8003636 <Servo_MoveToBlocking+0x66>
    Servo_Update(s);
 8003616:	6978      	ldr	r0, [r7, #20]
 8003618:	f7ff ff10 	bl	800343c <Servo_Update>
    if (HAL_GetTick() - start_ms > timeout_ms) {
 800361c:	f000 fe10 	bl	8004240 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	429a      	cmp	r2, r3
 800362a:	d201      	bcs.n	8003630 <Servo_MoveToBlocking+0x60>
      return false;
 800362c:	2300      	movs	r3, #0
 800362e:	e020      	b.n	8003672 <Servo_MoveToBlocking+0xa2>
    }
    HAL_Delay(5);
 8003630:	2005      	movs	r0, #5
 8003632:	f000 fe11 	bl	8004258 <HAL_Delay>
  while(Servo_IsBusy(s, tol_deg)){
 8003636:	ed97 0a03 	vldr	s0, [r7, #12]
 800363a:	6978      	ldr	r0, [r7, #20]
 800363c:	f7ff ff82 	bl	8003544 <Servo_IsBusy>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1e7      	bne.n	8003616 <Servo_MoveToBlocking+0x46>
  }
  float original_alpha = s->ema_alpha;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	61bb      	str	r3, [r7, #24]

  Servo_SetEmaAlpha(s, 1.0f);
 800364c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003650:	6978      	ldr	r0, [r7, #20]
 8003652:	f7ff fed5 	bl	8003400 <Servo_SetEmaAlpha>

  Servo_WriteDegrees(s, deg);
 8003656:	ed97 0a04 	vldr	s0, [r7, #16]
 800365a:	6978      	ldr	r0, [r7, #20]
 800365c:	f7ff fe52 	bl	8003304 <Servo_WriteDegrees>

  Servo_SetEmaAlpha(s, original_alpha);
 8003660:	ed97 0a06 	vldr	s0, [r7, #24]
 8003664:	6978      	ldr	r0, [r7, #20]
 8003666:	f7ff fecb 	bl	8003400 <Servo_SetEmaAlpha>

  s->cur_deg = deg;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	60da      	str	r2, [r3, #12]

  return true;
 8003670:	2301      	movs	r3, #1
}
 8003672:	4618      	mov	r0, r3
 8003674:	3720      	adds	r7, #32
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <ServoSystem_Init>:

void ServoSystem_Init(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af02      	add	r7, sp, #8
  Servo_Attach(&s1, &htim3, TIM_CHANNEL_1, 500, 3000);
 8003682:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800368c:	2200      	movs	r2, #0
 800368e:	4933      	ldr	r1, [pc, #204]	@ (800375c <ServoSystem_Init+0xe0>)
 8003690:	4833      	ldr	r0, [pc, #204]	@ (8003760 <ServoSystem_Init+0xe4>)
 8003692:	f7ff fd5b 	bl	800314c <Servo_Attach>
  Servo_Attach(&s2, &htim3, TIM_CHANNEL_2, 800, 2200);
 8003696:	f640 0398 	movw	r3, #2200	@ 0x898
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80036a0:	2204      	movs	r2, #4
 80036a2:	492e      	ldr	r1, [pc, #184]	@ (800375c <ServoSystem_Init+0xe0>)
 80036a4:	482f      	ldr	r0, [pc, #188]	@ (8003764 <ServoSystem_Init+0xe8>)
 80036a6:	f7ff fd51 	bl	800314c <Servo_Attach>

  Servo_SetMaxSpeedDps(&s1, 80.0f);
 80036aa:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 8003768 <ServoSystem_Init+0xec>
 80036ae:	482c      	ldr	r0, [pc, #176]	@ (8003760 <ServoSystem_Init+0xe4>)
 80036b0:	f7ff fe78 	bl	80033a4 <Servo_SetMaxSpeedDps>
  Servo_SetMaxSpeedDps(&s2, 80.0f);
 80036b4:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8003768 <ServoSystem_Init+0xec>
 80036b8:	482a      	ldr	r0, [pc, #168]	@ (8003764 <ServoSystem_Init+0xe8>)
 80036ba:	f7ff fe73 	bl	80033a4 <Servo_SetMaxSpeedDps>
  Servo_SetEmaAlpha(&s1, 0.35f);
 80036be:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 800376c <ServoSystem_Init+0xf0>
 80036c2:	4827      	ldr	r0, [pc, #156]	@ (8003760 <ServoSystem_Init+0xe4>)
 80036c4:	f7ff fe9c 	bl	8003400 <Servo_SetEmaAlpha>
  Servo_SetEmaAlpha(&s2, 0.35f);
 80036c8:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 800376c <ServoSystem_Init+0xf0>
 80036cc:	4825      	ldr	r0, [pc, #148]	@ (8003764 <ServoSystem_Init+0xe8>)
 80036ce:	f7ff fe97 	bl	8003400 <Servo_SetEmaAlpha>

  Servo_WriteDegrees(&s1, 180.0f);
 80036d2:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8003770 <ServoSystem_Init+0xf4>
 80036d6:	4822      	ldr	r0, [pc, #136]	@ (8003760 <ServoSystem_Init+0xe4>)
 80036d8:	f7ff fe14 	bl	8003304 <Servo_WriteDegrees>
  HAL_Delay(300);
 80036dc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80036e0:	f000 fdba 	bl	8004258 <HAL_Delay>
  Servo_WriteDegrees(&s2, 180.0f);
 80036e4:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8003770 <ServoSystem_Init+0xf4>
 80036e8:	481e      	ldr	r0, [pc, #120]	@ (8003764 <ServoSystem_Init+0xe8>)
 80036ea:	f7ff fe0b 	bl	8003304 <Servo_WriteDegrees>
  HAL_Delay(300);
 80036ee:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80036f2:	f000 fdb1 	bl	8004258 <HAL_Delay>

  GripStop_Init(&g1, &s1, PRESS_RIGHT, 180.0f, 30.0f, 2000.0f, 3, 80.0f, 0.35f, 1.0f, 5000);
 80036f6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 8003700:	ed9f 2a1a 	vldr	s4, [pc, #104]	@ 800376c <ServoSystem_Init+0xf0>
 8003704:	eddf 1a18 	vldr	s3, [pc, #96]	@ 8003768 <ServoSystem_Init+0xec>
 8003708:	2303      	movs	r3, #3
 800370a:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 8003774 <ServoSystem_Init+0xf8>
 800370e:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8003712:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8003770 <ServoSystem_Init+0xf4>
 8003716:	2201      	movs	r2, #1
 8003718:	4911      	ldr	r1, [pc, #68]	@ (8003760 <ServoSystem_Init+0xe4>)
 800371a:	4817      	ldr	r0, [pc, #92]	@ (8003778 <ServoSystem_Init+0xfc>)
 800371c:	f7fe fbc4 	bl	8001ea8 <GripStop_Init>
  GripStop_Init(&g2, &s2, PRESS_LEFT,  180.0f, 10.0f, 200.0f, 2, 80.0f, 0.35f, 1.0f, 5000);
 8003720:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 800372a:	ed9f 2a10 	vldr	s4, [pc, #64]	@ 800376c <ServoSystem_Init+0xf0>
 800372e:	eddf 1a0e 	vldr	s3, [pc, #56]	@ 8003768 <ServoSystem_Init+0xec>
 8003732:	2302      	movs	r3, #2
 8003734:	ed9f 1a11 	vldr	s2, [pc, #68]	@ 800377c <ServoSystem_Init+0x100>
 8003738:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 800373c:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8003770 <ServoSystem_Init+0xf4>
 8003740:	2200      	movs	r2, #0
 8003742:	4908      	ldr	r1, [pc, #32]	@ (8003764 <ServoSystem_Init+0xe8>)
 8003744:	480e      	ldr	r0, [pc, #56]	@ (8003780 <ServoSystem_Init+0x104>)
 8003746:	f7fe fbaf 	bl	8001ea8 <GripStop_Init>

  GripStop_Start(&g1);
 800374a:	480b      	ldr	r0, [pc, #44]	@ (8003778 <ServoSystem_Init+0xfc>)
 800374c:	f7fe fc48 	bl	8001fe0 <GripStop_Start>
  GripStop_Start(&g2);
 8003750:	480b      	ldr	r0, [pc, #44]	@ (8003780 <ServoSystem_Init+0x104>)
 8003752:	f7fe fc45 	bl	8001fe0 <GripStop_Start>
}
 8003756:	bf00      	nop
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	20000b84 	.word	0x20000b84
 8003760:	20000ac8 	.word	0x20000ac8
 8003764:	20000af4 	.word	0x20000af4
 8003768:	42a00000 	.word	0x42a00000
 800376c:	3eb33333 	.word	0x3eb33333
 8003770:	43340000 	.word	0x43340000
 8003774:	44fa0000 	.word	0x44fa0000
 8003778:	20000b20 	.word	0x20000b20
 800377c:	43480000 	.word	0x43480000
 8003780:	20000b50 	.word	0x20000b50

08003784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	607b      	str	r3, [r7, #4]
 800378e:	4b10      	ldr	r3, [pc, #64]	@ (80037d0 <HAL_MspInit+0x4c>)
 8003790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003792:	4a0f      	ldr	r2, [pc, #60]	@ (80037d0 <HAL_MspInit+0x4c>)
 8003794:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003798:	6453      	str	r3, [r2, #68]	@ 0x44
 800379a:	4b0d      	ldr	r3, [pc, #52]	@ (80037d0 <HAL_MspInit+0x4c>)
 800379c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037a2:	607b      	str	r3, [r7, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037a6:	2300      	movs	r3, #0
 80037a8:	603b      	str	r3, [r7, #0]
 80037aa:	4b09      	ldr	r3, [pc, #36]	@ (80037d0 <HAL_MspInit+0x4c>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ae:	4a08      	ldr	r2, [pc, #32]	@ (80037d0 <HAL_MspInit+0x4c>)
 80037b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80037b6:	4b06      	ldr	r3, [pc, #24]	@ (80037d0 <HAL_MspInit+0x4c>)
 80037b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	40023800 	.word	0x40023800

080037d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80037d8:	bf00      	nop
 80037da:	e7fd      	b.n	80037d8 <NMI_Handler+0x4>

080037dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037e0:	bf00      	nop
 80037e2:	e7fd      	b.n	80037e0 <HardFault_Handler+0x4>

080037e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037e8:	bf00      	nop
 80037ea:	e7fd      	b.n	80037e8 <MemManage_Handler+0x4>

080037ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037f0:	bf00      	nop
 80037f2:	e7fd      	b.n	80037f0 <BusFault_Handler+0x4>

080037f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037f8:	bf00      	nop
 80037fa:	e7fd      	b.n	80037f8 <UsageFault_Handler+0x4>

080037fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003800:	bf00      	nop
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800380a:	b480      	push	{r7}
 800380c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800380e:	bf00      	nop
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800381c:	bf00      	nop
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800382a:	f000 fcf5 	bl	8004218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800382e:	bf00      	nop
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8003838:	4802      	ldr	r0, [pc, #8]	@ (8003844 <DMA1_Stream0_IRQHandler+0x10>)
 800383a:	f001 fa4d 	bl	8004cd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20000d4c 	.word	0x20000d4c

08003848 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800384c:	4802      	ldr	r0, [pc, #8]	@ (8003858 <DMA1_Stream2_IRQHandler+0x10>)
 800384e:	f001 fa43 	bl	8004cd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003852:	bf00      	nop
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20000cec 	.word	0x20000cec

0800385c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003860:	4802      	ldr	r0, [pc, #8]	@ (800386c <UART4_IRQHandler+0x10>)
 8003862:	f003 fd4f 	bl	8007304 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003866:	bf00      	nop
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	20000bcc 	.word	0x20000bcc

08003870 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003874:	4802      	ldr	r0, [pc, #8]	@ (8003880 <UART5_IRQHandler+0x10>)
 8003876:	f003 fd45 	bl	8007304 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800387a:	bf00      	nop
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20000c14 	.word	0x20000c14

08003884 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003888:	4802      	ldr	r0, [pc, #8]	@ (8003894 <DMA2_Stream1_IRQHandler+0x10>)
 800388a:	f001 fa25 	bl	8004cd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800388e:	bf00      	nop
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000dac 	.word	0x20000dac

08003898 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  if ((__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE) != RESET) &&
 800389e:	4b11      	ldr	r3, [pc, #68]	@ (80038e4 <USART6_IRQHandler+0x4c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0310 	and.w	r3, r3, #16
 80038a8:	2b10      	cmp	r3, #16
 80038aa:	d114      	bne.n	80038d6 <USART6_IRQHandler+0x3e>
	  (__HAL_UART_GET_IT_SOURCE(&huart6, UART_IT_IDLE) != RESET))
 80038ac:	4b0d      	ldr	r3, [pc, #52]	@ (80038e4 <USART6_IRQHandler+0x4c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f003 0310 	and.w	r3, r3, #16
  if ((__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE) != RESET) &&
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00d      	beq.n	80038d6 <USART6_IRQHandler+0x3e>
  {
	  HAL_UART_IDLE_Callback(&huart6);
 80038ba:	480a      	ldr	r0, [pc, #40]	@ (80038e4 <USART6_IRQHandler+0x4c>)
 80038bc:	f7fe fcaa 	bl	8002214 <HAL_UART_IDLE_Callback>
	  __HAL_UART_CLEAR_IDLEFLAG(&huart6);
 80038c0:	2300      	movs	r3, #0
 80038c2:	607b      	str	r3, [r7, #4]
 80038c4:	4b07      	ldr	r3, [pc, #28]	@ (80038e4 <USART6_IRQHandler+0x4c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	607b      	str	r3, [r7, #4]
 80038cc:	4b05      	ldr	r3, [pc, #20]	@ (80038e4 <USART6_IRQHandler+0x4c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	607b      	str	r3, [r7, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
  }
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80038d6:	4803      	ldr	r0, [pc, #12]	@ (80038e4 <USART6_IRQHandler+0x4c>)
 80038d8:	f003 fd14 	bl	8007304 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80038dc:	bf00      	nop
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	20000ca4 	.word	0x20000ca4

080038e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  return 1;
 80038ec:	2301      	movs	r3, #1
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <_kill>:

int _kill(int pid, int sig)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003902:	f006 fe4b 	bl	800a59c <__errno>
 8003906:	4603      	mov	r3, r0
 8003908:	2216      	movs	r2, #22
 800390a:	601a      	str	r2, [r3, #0]
  return -1;
 800390c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003910:	4618      	mov	r0, r3
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <_exit>:

void _exit (int status)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003920:	f04f 31ff 	mov.w	r1, #4294967295
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7ff ffe7 	bl	80038f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800392a:	bf00      	nop
 800392c:	e7fd      	b.n	800392a <_exit+0x12>

0800392e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b086      	sub	sp, #24
 8003932:	af00      	add	r7, sp, #0
 8003934:	60f8      	str	r0, [r7, #12]
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	e00a      	b.n	8003956 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003940:	f3af 8000 	nop.w
 8003944:	4601      	mov	r1, r0
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	60ba      	str	r2, [r7, #8]
 800394c:	b2ca      	uxtb	r2, r1
 800394e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	3301      	adds	r3, #1
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	429a      	cmp	r2, r3
 800395c:	dbf0      	blt.n	8003940 <_read+0x12>
  }

  return len;
 800395e:	687b      	ldr	r3, [r7, #4]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003974:	2300      	movs	r3, #0
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	e009      	b.n	800398e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	60ba      	str	r2, [r7, #8]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f7fe fc9c 	bl	80022c0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	3301      	adds	r3, #1
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	429a      	cmp	r2, r3
 8003994:	dbf1      	blt.n	800397a <_write+0x12>
  }
  return len;
 8003996:	687b      	ldr	r3, [r7, #4]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <_close>:

int _close(int file)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039c8:	605a      	str	r2, [r3, #4]
  return 0;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <_isatty>:

int _isatty(int file)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80039e0:	2301      	movs	r3, #1
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b085      	sub	sp, #20
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a10:	4a14      	ldr	r2, [pc, #80]	@ (8003a64 <_sbrk+0x5c>)
 8003a12:	4b15      	ldr	r3, [pc, #84]	@ (8003a68 <_sbrk+0x60>)
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a1c:	4b13      	ldr	r3, [pc, #76]	@ (8003a6c <_sbrk+0x64>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d102      	bne.n	8003a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a24:	4b11      	ldr	r3, [pc, #68]	@ (8003a6c <_sbrk+0x64>)
 8003a26:	4a12      	ldr	r2, [pc, #72]	@ (8003a70 <_sbrk+0x68>)
 8003a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a2a:	4b10      	ldr	r3, [pc, #64]	@ (8003a6c <_sbrk+0x64>)
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4413      	add	r3, r2
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d207      	bcs.n	8003a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a38:	f006 fdb0 	bl	800a59c <__errno>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	220c      	movs	r2, #12
 8003a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a42:	f04f 33ff 	mov.w	r3, #4294967295
 8003a46:	e009      	b.n	8003a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a48:	4b08      	ldr	r3, [pc, #32]	@ (8003a6c <_sbrk+0x64>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a4e:	4b07      	ldr	r3, [pc, #28]	@ (8003a6c <_sbrk+0x64>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4413      	add	r3, r2
 8003a56:	4a05      	ldr	r2, [pc, #20]	@ (8003a6c <_sbrk+0x64>)
 8003a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	20020000 	.word	0x20020000
 8003a68:	00000400 	.word	0x00000400
 8003a6c:	20000b80 	.word	0x20000b80
 8003a70:	20000f60 	.word	0x20000f60

08003a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a78:	4b06      	ldr	r3, [pc, #24]	@ (8003a94 <SystemInit+0x20>)
 8003a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a7e:	4a05      	ldr	r2, [pc, #20]	@ (8003a94 <SystemInit+0x20>)
 8003a80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a88:	bf00      	nop
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	e000ed00 	.word	0xe000ed00

08003a98 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b08e      	sub	sp, #56	@ 0x38
 8003a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	605a      	str	r2, [r3, #4]
 8003aa8:	609a      	str	r2, [r3, #8]
 8003aaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003aac:	f107 0320 	add.w	r3, r7, #32
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ab6:	1d3b      	adds	r3, r7, #4
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	605a      	str	r2, [r3, #4]
 8003abe:	609a      	str	r2, [r3, #8]
 8003ac0:	60da      	str	r2, [r3, #12]
 8003ac2:	611a      	str	r2, [r3, #16]
 8003ac4:	615a      	str	r2, [r3, #20]
 8003ac6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003ac8:	4b33      	ldr	r3, [pc, #204]	@ (8003b98 <MX_TIM3_Init+0x100>)
 8003aca:	4a34      	ldr	r2, [pc, #208]	@ (8003b9c <MX_TIM3_Init+0x104>)
 8003acc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 89;
 8003ace:	4b32      	ldr	r3, [pc, #200]	@ (8003b98 <MX_TIM3_Init+0x100>)
 8003ad0:	2259      	movs	r2, #89	@ 0x59
 8003ad2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ad4:	4b30      	ldr	r3, [pc, #192]	@ (8003b98 <MX_TIM3_Init+0x100>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8003ada:	4b2f      	ldr	r3, [pc, #188]	@ (8003b98 <MX_TIM3_Init+0x100>)
 8003adc:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8003ae0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ae2:	4b2d      	ldr	r3, [pc, #180]	@ (8003b98 <MX_TIM3_Init+0x100>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ae8:	4b2b      	ldr	r3, [pc, #172]	@ (8003b98 <MX_TIM3_Init+0x100>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003aee:	482a      	ldr	r0, [pc, #168]	@ (8003b98 <MX_TIM3_Init+0x100>)
 8003af0:	f002 fb42 	bl	8006178 <HAL_TIM_Base_Init>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003afa:	f7fe fcb1 	bl	8002460 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003afe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b02:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003b04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4823      	ldr	r0, [pc, #140]	@ (8003b98 <MX_TIM3_Init+0x100>)
 8003b0c:	f002 fd66 	bl	80065dc <HAL_TIM_ConfigClockSource>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003b16:	f7fe fca3 	bl	8002460 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003b1a:	481f      	ldr	r0, [pc, #124]	@ (8003b98 <MX_TIM3_Init+0x100>)
 8003b1c:	f002 fb7b 	bl	8006216 <HAL_TIM_PWM_Init>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003b26:	f7fe fc9b 	bl	8002460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003b32:	f107 0320 	add.w	r3, r7, #32
 8003b36:	4619      	mov	r1, r3
 8003b38:	4817      	ldr	r0, [pc, #92]	@ (8003b98 <MX_TIM3_Init+0x100>)
 8003b3a:	f003 f92d 	bl	8006d98 <HAL_TIMEx_MasterConfigSynchronization>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003b44:	f7fe fc8c 	bl	8002460 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b48:	2360      	movs	r3, #96	@ 0x60
 8003b4a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8003b4c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8003b50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b5a:	1d3b      	adds	r3, r7, #4
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	4619      	mov	r1, r3
 8003b60:	480d      	ldr	r0, [pc, #52]	@ (8003b98 <MX_TIM3_Init+0x100>)
 8003b62:	f002 fc79 	bl	8006458 <HAL_TIM_PWM_ConfigChannel>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003b6c:	f7fe fc78 	bl	8002460 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8003b70:	2300      	movs	r3, #0
 8003b72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b74:	1d3b      	adds	r3, r7, #4
 8003b76:	2204      	movs	r2, #4
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4807      	ldr	r0, [pc, #28]	@ (8003b98 <MX_TIM3_Init+0x100>)
 8003b7c:	f002 fc6c 	bl	8006458 <HAL_TIM_PWM_ConfigChannel>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 8003b86:	f7fe fc6b 	bl	8002460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003b8a:	4803      	ldr	r0, [pc, #12]	@ (8003b98 <MX_TIM3_Init+0x100>)
 8003b8c:	f000 f82a 	bl	8003be4 <HAL_TIM_MspPostInit>

}
 8003b90:	bf00      	nop
 8003b92:	3738      	adds	r7, #56	@ 0x38
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	20000b84 	.word	0x20000b84
 8003b9c:	40000400 	.word	0x40000400

08003ba0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a0b      	ldr	r2, [pc, #44]	@ (8003bdc <HAL_TIM_Base_MspInit+0x3c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d10d      	bne.n	8003bce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8003be0 <HAL_TIM_Base_MspInit+0x40>)
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bba:	4a09      	ldr	r2, [pc, #36]	@ (8003be0 <HAL_TIM_Base_MspInit+0x40>)
 8003bbc:	f043 0302 	orr.w	r3, r3, #2
 8003bc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bc2:	4b07      	ldr	r3, [pc, #28]	@ (8003be0 <HAL_TIM_Base_MspInit+0x40>)
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003bce:	bf00      	nop
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	40000400 	.word	0x40000400
 8003be0:	40023800 	.word	0x40023800

08003be4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b088      	sub	sp, #32
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bec:	f107 030c 	add.w	r3, r7, #12
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	605a      	str	r2, [r3, #4]
 8003bf6:	609a      	str	r2, [r3, #8]
 8003bf8:	60da      	str	r2, [r3, #12]
 8003bfa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a12      	ldr	r2, [pc, #72]	@ (8003c4c <HAL_TIM_MspPostInit+0x68>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d11d      	bne.n	8003c42 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c06:	2300      	movs	r3, #0
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	4b11      	ldr	r3, [pc, #68]	@ (8003c50 <HAL_TIM_MspPostInit+0x6c>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0e:	4a10      	ldr	r2, [pc, #64]	@ (8003c50 <HAL_TIM_MspPostInit+0x6c>)
 8003c10:	f043 0301 	orr.w	r3, r3, #1
 8003c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c16:	4b0e      	ldr	r3, [pc, #56]	@ (8003c50 <HAL_TIM_MspPostInit+0x6c>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	60bb      	str	r3, [r7, #8]
 8003c20:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c22:	23c0      	movs	r3, #192	@ 0xc0
 8003c24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c26:	2302      	movs	r3, #2
 8003c28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c2e:	2302      	movs	r3, #2
 8003c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c32:	2302      	movs	r3, #2
 8003c34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c36:	f107 030c 	add.w	r3, r7, #12
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	4805      	ldr	r0, [pc, #20]	@ (8003c54 <HAL_TIM_MspPostInit+0x70>)
 8003c3e:	f001 fab5 	bl	80051ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003c42:	bf00      	nop
 8003c44:	3720      	adds	r7, #32
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40000400 	.word	0x40000400
 8003c50:	40023800 	.word	0x40023800
 8003c54:	40020000 	.word	0x40020000

08003c58 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_usart6_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003c5c:	4b10      	ldr	r3, [pc, #64]	@ (8003ca0 <MX_UART4_Init+0x48>)
 8003c5e:	4a11      	ldr	r2, [pc, #68]	@ (8003ca4 <MX_UART4_Init+0x4c>)
 8003c60:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8003c62:	4b0f      	ldr	r3, [pc, #60]	@ (8003ca0 <MX_UART4_Init+0x48>)
 8003c64:	4a10      	ldr	r2, [pc, #64]	@ (8003ca8 <MX_UART4_Init+0x50>)
 8003c66:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003c68:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca0 <MX_UART4_Init+0x48>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8003ca0 <MX_UART4_Init+0x48>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003c74:	4b0a      	ldr	r3, [pc, #40]	@ (8003ca0 <MX_UART4_Init+0x48>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003c7a:	4b09      	ldr	r3, [pc, #36]	@ (8003ca0 <MX_UART4_Init+0x48>)
 8003c7c:	220c      	movs	r2, #12
 8003c7e:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c80:	4b07      	ldr	r3, [pc, #28]	@ (8003ca0 <MX_UART4_Init+0x48>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c86:	4b06      	ldr	r3, [pc, #24]	@ (8003ca0 <MX_UART4_Init+0x48>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003c8c:	4804      	ldr	r0, [pc, #16]	@ (8003ca0 <MX_UART4_Init+0x48>)
 8003c8e:	f003 f8ff 	bl	8006e90 <HAL_UART_Init>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <MX_UART4_Init+0x44>
  {
    Error_Handler();
 8003c98:	f7fe fbe2 	bl	8002460 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003c9c:	bf00      	nop
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	20000bcc 	.word	0x20000bcc
 8003ca4:	40004c00 	.word	0x40004c00
 8003ca8:	001e8480 	.word	0x001e8480

08003cac <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003cb0:	4b10      	ldr	r3, [pc, #64]	@ (8003cf4 <MX_UART5_Init+0x48>)
 8003cb2:	4a11      	ldr	r2, [pc, #68]	@ (8003cf8 <MX_UART5_Init+0x4c>)
 8003cb4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 2000000;
 8003cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8003cf4 <MX_UART5_Init+0x48>)
 8003cb8:	4a10      	ldr	r2, [pc, #64]	@ (8003cfc <MX_UART5_Init+0x50>)
 8003cba:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003cbc:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf4 <MX_UART5_Init+0x48>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf4 <MX_UART5_Init+0x48>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf4 <MX_UART5_Init+0x48>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003cce:	4b09      	ldr	r3, [pc, #36]	@ (8003cf4 <MX_UART5_Init+0x48>)
 8003cd0:	220c      	movs	r2, #12
 8003cd2:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cd4:	4b07      	ldr	r3, [pc, #28]	@ (8003cf4 <MX_UART5_Init+0x48>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cda:	4b06      	ldr	r3, [pc, #24]	@ (8003cf4 <MX_UART5_Init+0x48>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003ce0:	4804      	ldr	r0, [pc, #16]	@ (8003cf4 <MX_UART5_Init+0x48>)
 8003ce2:	f003 f8d5 	bl	8006e90 <HAL_UART_Init>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <MX_UART5_Init+0x44>
  {
    Error_Handler();
 8003cec:	f7fe fbb8 	bl	8002460 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003cf0:	bf00      	nop
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	20000c14 	.word	0x20000c14
 8003cf8:	40005000 	.word	0x40005000
 8003cfc:	001e8480 	.word	0x001e8480

08003d00 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003d04:	4b11      	ldr	r3, [pc, #68]	@ (8003d4c <MX_USART2_UART_Init+0x4c>)
 8003d06:	4a12      	ldr	r2, [pc, #72]	@ (8003d50 <MX_USART2_UART_Init+0x50>)
 8003d08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003d0a:	4b10      	ldr	r3, [pc, #64]	@ (8003d4c <MX_USART2_UART_Init+0x4c>)
 8003d0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003d10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003d12:	4b0e      	ldr	r3, [pc, #56]	@ (8003d4c <MX_USART2_UART_Init+0x4c>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d18:	4b0c      	ldr	r3, [pc, #48]	@ (8003d4c <MX_USART2_UART_Init+0x4c>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d4c <MX_USART2_UART_Init+0x4c>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003d24:	4b09      	ldr	r3, [pc, #36]	@ (8003d4c <MX_USART2_UART_Init+0x4c>)
 8003d26:	220c      	movs	r2, #12
 8003d28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d2a:	4b08      	ldr	r3, [pc, #32]	@ (8003d4c <MX_USART2_UART_Init+0x4c>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d30:	4b06      	ldr	r3, [pc, #24]	@ (8003d4c <MX_USART2_UART_Init+0x4c>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d36:	4805      	ldr	r0, [pc, #20]	@ (8003d4c <MX_USART2_UART_Init+0x4c>)
 8003d38:	f003 f8aa 	bl	8006e90 <HAL_UART_Init>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003d42:	f7fe fb8d 	bl	8002460 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003d46:	bf00      	nop
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	20000c5c 	.word	0x20000c5c
 8003d50:	40004400 	.word	0x40004400

08003d54 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003d58:	4b11      	ldr	r3, [pc, #68]	@ (8003da0 <MX_USART6_UART_Init+0x4c>)
 8003d5a:	4a12      	ldr	r2, [pc, #72]	@ (8003da4 <MX_USART6_UART_Init+0x50>)
 8003d5c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003d5e:	4b10      	ldr	r3, [pc, #64]	@ (8003da0 <MX_USART6_UART_Init+0x4c>)
 8003d60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003d64:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003d66:	4b0e      	ldr	r3, [pc, #56]	@ (8003da0 <MX_USART6_UART_Init+0x4c>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003da0 <MX_USART6_UART_Init+0x4c>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003d72:	4b0b      	ldr	r3, [pc, #44]	@ (8003da0 <MX_USART6_UART_Init+0x4c>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003d78:	4b09      	ldr	r3, [pc, #36]	@ (8003da0 <MX_USART6_UART_Init+0x4c>)
 8003d7a:	220c      	movs	r2, #12
 8003d7c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d7e:	4b08      	ldr	r3, [pc, #32]	@ (8003da0 <MX_USART6_UART_Init+0x4c>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d84:	4b06      	ldr	r3, [pc, #24]	@ (8003da0 <MX_USART6_UART_Init+0x4c>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003d8a:	4805      	ldr	r0, [pc, #20]	@ (8003da0 <MX_USART6_UART_Init+0x4c>)
 8003d8c:	f003 f880 	bl	8006e90 <HAL_UART_Init>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003d96:	f7fe fb63 	bl	8002460 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003d9a:	bf00      	nop
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	20000ca4 	.word	0x20000ca4
 8003da4:	40011400 	.word	0x40011400

08003da8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b090      	sub	sp, #64	@ 0x40
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	605a      	str	r2, [r3, #4]
 8003dba:	609a      	str	r2, [r3, #8]
 8003dbc:	60da      	str	r2, [r3, #12]
 8003dbe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a8f      	ldr	r2, [pc, #572]	@ (8004004 <HAL_UART_MspInit+0x25c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d162      	bne.n	8003e90 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003dca:	2300      	movs	r3, #0
 8003dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dce:	4b8e      	ldr	r3, [pc, #568]	@ (8004008 <HAL_UART_MspInit+0x260>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd2:	4a8d      	ldr	r2, [pc, #564]	@ (8004008 <HAL_UART_MspInit+0x260>)
 8003dd4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003dd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dda:	4b8b      	ldr	r3, [pc, #556]	@ (8004008 <HAL_UART_MspInit+0x260>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dde:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003de2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003de6:	2300      	movs	r3, #0
 8003de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dea:	4b87      	ldr	r3, [pc, #540]	@ (8004008 <HAL_UART_MspInit+0x260>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dee:	4a86      	ldr	r2, [pc, #536]	@ (8004008 <HAL_UART_MspInit+0x260>)
 8003df0:	f043 0301 	orr.w	r3, r3, #1
 8003df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003df6:	4b84      	ldr	r3, [pc, #528]	@ (8004008 <HAL_UART_MspInit+0x260>)
 8003df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003e02:	2303      	movs	r3, #3
 8003e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e06:	2302      	movs	r3, #2
 8003e08:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003e12:	2308      	movs	r3, #8
 8003e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	487b      	ldr	r0, [pc, #492]	@ (800400c <HAL_UART_MspInit+0x264>)
 8003e1e:	f001 f9c5 	bl	80051ac <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8003e22:	4b7b      	ldr	r3, [pc, #492]	@ (8004010 <HAL_UART_MspInit+0x268>)
 8003e24:	4a7b      	ldr	r2, [pc, #492]	@ (8004014 <HAL_UART_MspInit+0x26c>)
 8003e26:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8003e28:	4b79      	ldr	r3, [pc, #484]	@ (8004010 <HAL_UART_MspInit+0x268>)
 8003e2a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003e2e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e30:	4b77      	ldr	r3, [pc, #476]	@ (8004010 <HAL_UART_MspInit+0x268>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e36:	4b76      	ldr	r3, [pc, #472]	@ (8004010 <HAL_UART_MspInit+0x268>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e3c:	4b74      	ldr	r3, [pc, #464]	@ (8004010 <HAL_UART_MspInit+0x268>)
 8003e3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e42:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e44:	4b72      	ldr	r3, [pc, #456]	@ (8004010 <HAL_UART_MspInit+0x268>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e4a:	4b71      	ldr	r3, [pc, #452]	@ (8004010 <HAL_UART_MspInit+0x268>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8003e50:	4b6f      	ldr	r3, [pc, #444]	@ (8004010 <HAL_UART_MspInit+0x268>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e56:	4b6e      	ldr	r3, [pc, #440]	@ (8004010 <HAL_UART_MspInit+0x268>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e5c:	4b6c      	ldr	r3, [pc, #432]	@ (8004010 <HAL_UART_MspInit+0x268>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003e62:	486b      	ldr	r0, [pc, #428]	@ (8004010 <HAL_UART_MspInit+0x268>)
 8003e64:	f000 fda0 	bl	80049a8 <HAL_DMA_Init>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8003e6e:	f7fe faf7 	bl	8002460 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a66      	ldr	r2, [pc, #408]	@ (8004010 <HAL_UART_MspInit+0x268>)
 8003e76:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003e78:	4a65      	ldr	r2, [pc, #404]	@ (8004010 <HAL_UART_MspInit+0x268>)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2100      	movs	r1, #0
 8003e82:	2034      	movs	r0, #52	@ 0x34
 8003e84:	f000 fd59 	bl	800493a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003e88:	2034      	movs	r0, #52	@ 0x34
 8003e8a:	f000 fd72 	bl	8004972 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003e8e:	e138      	b.n	8004102 <HAL_UART_MspInit+0x35a>
  else if(uartHandle->Instance==UART5)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a60      	ldr	r2, [pc, #384]	@ (8004018 <HAL_UART_MspInit+0x270>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	f040 8082 	bne.w	8003fa0 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	623b      	str	r3, [r7, #32]
 8003ea0:	4b59      	ldr	r3, [pc, #356]	@ (8004008 <HAL_UART_MspInit+0x260>)
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea4:	4a58      	ldr	r2, [pc, #352]	@ (8004008 <HAL_UART_MspInit+0x260>)
 8003ea6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003eaa:	6413      	str	r3, [r2, #64]	@ 0x40
 8003eac:	4b56      	ldr	r3, [pc, #344]	@ (8004008 <HAL_UART_MspInit+0x260>)
 8003eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003eb4:	623b      	str	r3, [r7, #32]
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eb8:	2300      	movs	r3, #0
 8003eba:	61fb      	str	r3, [r7, #28]
 8003ebc:	4b52      	ldr	r3, [pc, #328]	@ (8004008 <HAL_UART_MspInit+0x260>)
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec0:	4a51      	ldr	r2, [pc, #324]	@ (8004008 <HAL_UART_MspInit+0x260>)
 8003ec2:	f043 0304 	orr.w	r3, r3, #4
 8003ec6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ec8:	4b4f      	ldr	r3, [pc, #316]	@ (8004008 <HAL_UART_MspInit+0x260>)
 8003eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	61fb      	str	r3, [r7, #28]
 8003ed2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61bb      	str	r3, [r7, #24]
 8003ed8:	4b4b      	ldr	r3, [pc, #300]	@ (8004008 <HAL_UART_MspInit+0x260>)
 8003eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003edc:	4a4a      	ldr	r2, [pc, #296]	@ (8004008 <HAL_UART_MspInit+0x260>)
 8003ede:	f043 0308 	orr.w	r3, r3, #8
 8003ee2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ee4:	4b48      	ldr	r3, [pc, #288]	@ (8004008 <HAL_UART_MspInit+0x260>)
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee8:	f003 0308 	and.w	r3, r3, #8
 8003eec:	61bb      	str	r3, [r7, #24]
 8003eee:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003ef0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003efa:	2301      	movs	r3, #1
 8003efc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003efe:	2303      	movs	r3, #3
 8003f00:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003f02:	2308      	movs	r3, #8
 8003f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4843      	ldr	r0, [pc, #268]	@ (800401c <HAL_UART_MspInit+0x274>)
 8003f0e:	f001 f94d 	bl	80051ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003f12:	2304      	movs	r3, #4
 8003f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f16:	2302      	movs	r3, #2
 8003f18:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003f22:	2308      	movs	r3, #8
 8003f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	483c      	ldr	r0, [pc, #240]	@ (8004020 <HAL_UART_MspInit+0x278>)
 8003f2e:	f001 f93d 	bl	80051ac <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8003f32:	4b3c      	ldr	r3, [pc, #240]	@ (8004024 <HAL_UART_MspInit+0x27c>)
 8003f34:	4a3c      	ldr	r2, [pc, #240]	@ (8004028 <HAL_UART_MspInit+0x280>)
 8003f36:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8003f38:	4b3a      	ldr	r3, [pc, #232]	@ (8004024 <HAL_UART_MspInit+0x27c>)
 8003f3a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003f3e:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f40:	4b38      	ldr	r3, [pc, #224]	@ (8004024 <HAL_UART_MspInit+0x27c>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f46:	4b37      	ldr	r3, [pc, #220]	@ (8004024 <HAL_UART_MspInit+0x27c>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f4c:	4b35      	ldr	r3, [pc, #212]	@ (8004024 <HAL_UART_MspInit+0x27c>)
 8003f4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f52:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f54:	4b33      	ldr	r3, [pc, #204]	@ (8004024 <HAL_UART_MspInit+0x27c>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f5a:	4b32      	ldr	r3, [pc, #200]	@ (8004024 <HAL_UART_MspInit+0x27c>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8003f60:	4b30      	ldr	r3, [pc, #192]	@ (8004024 <HAL_UART_MspInit+0x27c>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f66:	4b2f      	ldr	r3, [pc, #188]	@ (8004024 <HAL_UART_MspInit+0x27c>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f6c:	4b2d      	ldr	r3, [pc, #180]	@ (8004024 <HAL_UART_MspInit+0x27c>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8003f72:	482c      	ldr	r0, [pc, #176]	@ (8004024 <HAL_UART_MspInit+0x27c>)
 8003f74:	f000 fd18 	bl	80049a8 <HAL_DMA_Init>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <HAL_UART_MspInit+0x1da>
      Error_Handler();
 8003f7e:	f7fe fa6f 	bl	8002460 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a27      	ldr	r2, [pc, #156]	@ (8004024 <HAL_UART_MspInit+0x27c>)
 8003f86:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003f88:	4a26      	ldr	r2, [pc, #152]	@ (8004024 <HAL_UART_MspInit+0x27c>)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2100      	movs	r1, #0
 8003f92:	2035      	movs	r0, #53	@ 0x35
 8003f94:	f000 fcd1 	bl	800493a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003f98:	2035      	movs	r0, #53	@ 0x35
 8003f9a:	f000 fcea 	bl	8004972 <HAL_NVIC_EnableIRQ>
}
 8003f9e:	e0b0      	b.n	8004102 <HAL_UART_MspInit+0x35a>
  else if(uartHandle->Instance==USART2)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a21      	ldr	r2, [pc, #132]	@ (800402c <HAL_UART_MspInit+0x284>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d142      	bne.n	8004030 <HAL_UART_MspInit+0x288>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003faa:	2300      	movs	r3, #0
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	4b16      	ldr	r3, [pc, #88]	@ (8004008 <HAL_UART_MspInit+0x260>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb2:	4a15      	ldr	r2, [pc, #84]	@ (8004008 <HAL_UART_MspInit+0x260>)
 8003fb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fba:	4b13      	ldr	r3, [pc, #76]	@ (8004008 <HAL_UART_MspInit+0x260>)
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	613b      	str	r3, [r7, #16]
 8003fca:	4b0f      	ldr	r3, [pc, #60]	@ (8004008 <HAL_UART_MspInit+0x260>)
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fce:	4a0e      	ldr	r2, [pc, #56]	@ (8004008 <HAL_UART_MspInit+0x260>)
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8004008 <HAL_UART_MspInit+0x260>)
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	613b      	str	r3, [r7, #16]
 8003fe0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003fe2:	230c      	movs	r3, #12
 8003fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fea:	2300      	movs	r3, #0
 8003fec:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ff2:	2307      	movs	r3, #7
 8003ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ff6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4803      	ldr	r0, [pc, #12]	@ (800400c <HAL_UART_MspInit+0x264>)
 8003ffe:	f001 f8d5 	bl	80051ac <HAL_GPIO_Init>
}
 8004002:	e07e      	b.n	8004102 <HAL_UART_MspInit+0x35a>
 8004004:	40004c00 	.word	0x40004c00
 8004008:	40023800 	.word	0x40023800
 800400c:	40020000 	.word	0x40020000
 8004010:	20000cec 	.word	0x20000cec
 8004014:	40026040 	.word	0x40026040
 8004018:	40005000 	.word	0x40005000
 800401c:	40020800 	.word	0x40020800
 8004020:	40020c00 	.word	0x40020c00
 8004024:	20000d4c 	.word	0x20000d4c
 8004028:	40026010 	.word	0x40026010
 800402c:	40004400 	.word	0x40004400
  else if(uartHandle->Instance==USART6)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a35      	ldr	r2, [pc, #212]	@ (800410c <HAL_UART_MspInit+0x364>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d163      	bne.n	8004102 <HAL_UART_MspInit+0x35a>
    __HAL_RCC_USART6_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	4b34      	ldr	r3, [pc, #208]	@ (8004110 <HAL_UART_MspInit+0x368>)
 8004040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004042:	4a33      	ldr	r2, [pc, #204]	@ (8004110 <HAL_UART_MspInit+0x368>)
 8004044:	f043 0320 	orr.w	r3, r3, #32
 8004048:	6453      	str	r3, [r2, #68]	@ 0x44
 800404a:	4b31      	ldr	r3, [pc, #196]	@ (8004110 <HAL_UART_MspInit+0x368>)
 800404c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404e:	f003 0320 	and.w	r3, r3, #32
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004056:	2300      	movs	r3, #0
 8004058:	60bb      	str	r3, [r7, #8]
 800405a:	4b2d      	ldr	r3, [pc, #180]	@ (8004110 <HAL_UART_MspInit+0x368>)
 800405c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405e:	4a2c      	ldr	r2, [pc, #176]	@ (8004110 <HAL_UART_MspInit+0x368>)
 8004060:	f043 0304 	orr.w	r3, r3, #4
 8004064:	6313      	str	r3, [r2, #48]	@ 0x30
 8004066:	4b2a      	ldr	r3, [pc, #168]	@ (8004110 <HAL_UART_MspInit+0x368>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	60bb      	str	r3, [r7, #8]
 8004070:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004072:	23c0      	movs	r3, #192	@ 0xc0
 8004074:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004076:	2302      	movs	r3, #2
 8004078:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407a:	2300      	movs	r3, #0
 800407c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800407e:	2303      	movs	r3, #3
 8004080:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004082:	2308      	movs	r3, #8
 8004084:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004086:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800408a:	4619      	mov	r1, r3
 800408c:	4821      	ldr	r0, [pc, #132]	@ (8004114 <HAL_UART_MspInit+0x36c>)
 800408e:	f001 f88d 	bl	80051ac <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004092:	4b21      	ldr	r3, [pc, #132]	@ (8004118 <HAL_UART_MspInit+0x370>)
 8004094:	4a21      	ldr	r2, [pc, #132]	@ (800411c <HAL_UART_MspInit+0x374>)
 8004096:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004098:	4b1f      	ldr	r3, [pc, #124]	@ (8004118 <HAL_UART_MspInit+0x370>)
 800409a:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800409e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004118 <HAL_UART_MspInit+0x370>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004118 <HAL_UART_MspInit+0x370>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004118 <HAL_UART_MspInit+0x370>)
 80040ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80040b2:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040b4:	4b18      	ldr	r3, [pc, #96]	@ (8004118 <HAL_UART_MspInit+0x370>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040ba:	4b17      	ldr	r3, [pc, #92]	@ (8004118 <HAL_UART_MspInit+0x370>)
 80040bc:	2200      	movs	r2, #0
 80040be:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80040c0:	4b15      	ldr	r3, [pc, #84]	@ (8004118 <HAL_UART_MspInit+0x370>)
 80040c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040c6:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80040c8:	4b13      	ldr	r3, [pc, #76]	@ (8004118 <HAL_UART_MspInit+0x370>)
 80040ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80040ce:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040d0:	4b11      	ldr	r3, [pc, #68]	@ (8004118 <HAL_UART_MspInit+0x370>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80040d6:	4810      	ldr	r0, [pc, #64]	@ (8004118 <HAL_UART_MspInit+0x370>)
 80040d8:	f000 fc66 	bl	80049a8 <HAL_DMA_Init>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <HAL_UART_MspInit+0x33e>
      Error_Handler();
 80040e2:	f7fe f9bd 	bl	8002460 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a0b      	ldr	r2, [pc, #44]	@ (8004118 <HAL_UART_MspInit+0x370>)
 80040ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 80040ec:	4a0a      	ldr	r2, [pc, #40]	@ (8004118 <HAL_UART_MspInit+0x370>)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80040f2:	2200      	movs	r2, #0
 80040f4:	2100      	movs	r1, #0
 80040f6:	2047      	movs	r0, #71	@ 0x47
 80040f8:	f000 fc1f 	bl	800493a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80040fc:	2047      	movs	r0, #71	@ 0x47
 80040fe:	f000 fc38 	bl	8004972 <HAL_NVIC_EnableIRQ>
}
 8004102:	bf00      	nop
 8004104:	3740      	adds	r7, #64	@ 0x40
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40011400 	.word	0x40011400
 8004110:	40023800 	.word	0x40023800
 8004114:	40020800 	.word	0x40020800
 8004118:	20000dac 	.word	0x20000dac
 800411c:	40026428 	.word	0x40026428

08004120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004120:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004158 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004124:	f7ff fca6 	bl	8003a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004128:	480c      	ldr	r0, [pc, #48]	@ (800415c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800412a:	490d      	ldr	r1, [pc, #52]	@ (8004160 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800412c:	4a0d      	ldr	r2, [pc, #52]	@ (8004164 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800412e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004130:	e002      	b.n	8004138 <LoopCopyDataInit>

08004132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004136:	3304      	adds	r3, #4

08004138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800413a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800413c:	d3f9      	bcc.n	8004132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800413e:	4a0a      	ldr	r2, [pc, #40]	@ (8004168 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004140:	4c0a      	ldr	r4, [pc, #40]	@ (800416c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004144:	e001      	b.n	800414a <LoopFillZerobss>

08004146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004148:	3204      	adds	r2, #4

0800414a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800414a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800414c:	d3fb      	bcc.n	8004146 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800414e:	f006 fa2b 	bl	800a5a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004152:	f7fe f8c7 	bl	80022e4 <main>
  bx  lr    
 8004156:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004158:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800415c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004160:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8004164:	0800d758 	.word	0x0800d758
  ldr r2, =_sbss
 8004168:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800416c:	20000f5c 	.word	0x20000f5c

08004170 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004170:	e7fe      	b.n	8004170 <ADC_IRQHandler>
	...

08004174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004178:	4b0e      	ldr	r3, [pc, #56]	@ (80041b4 <HAL_Init+0x40>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a0d      	ldr	r2, [pc, #52]	@ (80041b4 <HAL_Init+0x40>)
 800417e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004182:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004184:	4b0b      	ldr	r3, [pc, #44]	@ (80041b4 <HAL_Init+0x40>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a0a      	ldr	r2, [pc, #40]	@ (80041b4 <HAL_Init+0x40>)
 800418a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800418e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004190:	4b08      	ldr	r3, [pc, #32]	@ (80041b4 <HAL_Init+0x40>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a07      	ldr	r2, [pc, #28]	@ (80041b4 <HAL_Init+0x40>)
 8004196:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800419a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800419c:	2003      	movs	r0, #3
 800419e:	f000 fbc1 	bl	8004924 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041a2:	200f      	movs	r0, #15
 80041a4:	f000 f808 	bl	80041b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041a8:	f7ff faec 	bl	8003784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40023c00 	.word	0x40023c00

080041b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041c0:	4b12      	ldr	r3, [pc, #72]	@ (800420c <HAL_InitTick+0x54>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	4b12      	ldr	r3, [pc, #72]	@ (8004210 <HAL_InitTick+0x58>)
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	4619      	mov	r1, r3
 80041ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80041d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fbd9 	bl	800498e <HAL_SYSTICK_Config>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e00e      	b.n	8004204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b0f      	cmp	r3, #15
 80041ea:	d80a      	bhi.n	8004202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041ec:	2200      	movs	r2, #0
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	f04f 30ff 	mov.w	r0, #4294967295
 80041f4:	f000 fba1 	bl	800493a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041f8:	4a06      	ldr	r2, [pc, #24]	@ (8004214 <HAL_InitTick+0x5c>)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
 8004200:	e000      	b.n	8004204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
}
 8004204:	4618      	mov	r0, r3
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	20000000 	.word	0x20000000
 8004210:	20000008 	.word	0x20000008
 8004214:	20000004 	.word	0x20000004

08004218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800421c:	4b06      	ldr	r3, [pc, #24]	@ (8004238 <HAL_IncTick+0x20>)
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	461a      	mov	r2, r3
 8004222:	4b06      	ldr	r3, [pc, #24]	@ (800423c <HAL_IncTick+0x24>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4413      	add	r3, r2
 8004228:	4a04      	ldr	r2, [pc, #16]	@ (800423c <HAL_IncTick+0x24>)
 800422a:	6013      	str	r3, [r2, #0]
}
 800422c:	bf00      	nop
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	20000008 	.word	0x20000008
 800423c:	20000e0c 	.word	0x20000e0c

08004240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  return uwTick;
 8004244:	4b03      	ldr	r3, [pc, #12]	@ (8004254 <HAL_GetTick+0x14>)
 8004246:	681b      	ldr	r3, [r3, #0]
}
 8004248:	4618      	mov	r0, r3
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	20000e0c 	.word	0x20000e0c

08004258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004260:	f7ff ffee 	bl	8004240 <HAL_GetTick>
 8004264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004270:	d005      	beq.n	800427e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004272:	4b0a      	ldr	r3, [pc, #40]	@ (800429c <HAL_Delay+0x44>)
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4413      	add	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800427e:	bf00      	nop
 8004280:	f7ff ffde 	bl	8004240 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	429a      	cmp	r2, r3
 800428e:	d8f7      	bhi.n	8004280 <HAL_Delay+0x28>
  {
  }
}
 8004290:	bf00      	nop
 8004292:	bf00      	nop
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	20000008 	.word	0x20000008

080042a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042a8:	2300      	movs	r3, #0
 80042aa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e033      	b.n	800431e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d109      	bne.n	80042d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7fc ff72 	bl	80011a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d6:	f003 0310 	and.w	r3, r3, #16
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d118      	bne.n	8004310 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80042e6:	f023 0302 	bic.w	r3, r3, #2
 80042ea:	f043 0202 	orr.w	r2, r3, #2
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f94a 	bl	800458c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004302:	f023 0303 	bic.w	r3, r3, #3
 8004306:	f043 0201 	orr.w	r2, r3, #1
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	641a      	str	r2, [r3, #64]	@ 0x40
 800430e:	e001      	b.n	8004314 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800431c:	7bfb      	ldrb	r3, [r7, #15]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
	...

08004328 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800433c:	2b01      	cmp	r3, #1
 800433e:	d101      	bne.n	8004344 <HAL_ADC_ConfigChannel+0x1c>
 8004340:	2302      	movs	r3, #2
 8004342:	e113      	b.n	800456c <HAL_ADC_ConfigChannel+0x244>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b09      	cmp	r3, #9
 8004352:	d925      	bls.n	80043a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68d9      	ldr	r1, [r3, #12]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	b29b      	uxth	r3, r3
 8004360:	461a      	mov	r2, r3
 8004362:	4613      	mov	r3, r2
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	4413      	add	r3, r2
 8004368:	3b1e      	subs	r3, #30
 800436a:	2207      	movs	r2, #7
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	43da      	mvns	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	400a      	ands	r2, r1
 8004378:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68d9      	ldr	r1, [r3, #12]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	b29b      	uxth	r3, r3
 800438a:	4618      	mov	r0, r3
 800438c:	4603      	mov	r3, r0
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	4403      	add	r3, r0
 8004392:	3b1e      	subs	r3, #30
 8004394:	409a      	lsls	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	60da      	str	r2, [r3, #12]
 800439e:	e022      	b.n	80043e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6919      	ldr	r1, [r3, #16]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	461a      	mov	r2, r3
 80043ae:	4613      	mov	r3, r2
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	4413      	add	r3, r2
 80043b4:	2207      	movs	r2, #7
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	43da      	mvns	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	400a      	ands	r2, r1
 80043c2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6919      	ldr	r1, [r3, #16]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	4618      	mov	r0, r3
 80043d6:	4603      	mov	r3, r0
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	4403      	add	r3, r0
 80043dc:	409a      	lsls	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b06      	cmp	r3, #6
 80043ec:	d824      	bhi.n	8004438 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	4613      	mov	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	3b05      	subs	r3, #5
 8004400:	221f      	movs	r2, #31
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	43da      	mvns	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	400a      	ands	r2, r1
 800440e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	b29b      	uxth	r3, r3
 800441c:	4618      	mov	r0, r3
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	4613      	mov	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	3b05      	subs	r3, #5
 800442a:	fa00 f203 	lsl.w	r2, r0, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	635a      	str	r2, [r3, #52]	@ 0x34
 8004436:	e04c      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b0c      	cmp	r3, #12
 800443e:	d824      	bhi.n	800448a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	4613      	mov	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	3b23      	subs	r3, #35	@ 0x23
 8004452:	221f      	movs	r2, #31
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	43da      	mvns	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	400a      	ands	r2, r1
 8004460:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	b29b      	uxth	r3, r3
 800446e:	4618      	mov	r0, r3
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	3b23      	subs	r3, #35	@ 0x23
 800447c:	fa00 f203 	lsl.w	r2, r0, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	631a      	str	r2, [r3, #48]	@ 0x30
 8004488:	e023      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	4613      	mov	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	3b41      	subs	r3, #65	@ 0x41
 800449c:	221f      	movs	r2, #31
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	43da      	mvns	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	400a      	ands	r2, r1
 80044aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	4618      	mov	r0, r3
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	4613      	mov	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	3b41      	subs	r3, #65	@ 0x41
 80044c6:	fa00 f203 	lsl.w	r2, r0, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044d2:	4b29      	ldr	r3, [pc, #164]	@ (8004578 <HAL_ADC_ConfigChannel+0x250>)
 80044d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a28      	ldr	r2, [pc, #160]	@ (800457c <HAL_ADC_ConfigChannel+0x254>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d10f      	bne.n	8004500 <HAL_ADC_ConfigChannel+0x1d8>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b12      	cmp	r3, #18
 80044e6:	d10b      	bne.n	8004500 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a1d      	ldr	r2, [pc, #116]	@ (800457c <HAL_ADC_ConfigChannel+0x254>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d12b      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x23a>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a1c      	ldr	r2, [pc, #112]	@ (8004580 <HAL_ADC_ConfigChannel+0x258>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d003      	beq.n	800451c <HAL_ADC_ConfigChannel+0x1f4>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b11      	cmp	r3, #17
 800451a:	d122      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a11      	ldr	r2, [pc, #68]	@ (8004580 <HAL_ADC_ConfigChannel+0x258>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d111      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800453e:	4b11      	ldr	r3, [pc, #68]	@ (8004584 <HAL_ADC_ConfigChannel+0x25c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a11      	ldr	r2, [pc, #68]	@ (8004588 <HAL_ADC_ConfigChannel+0x260>)
 8004544:	fba2 2303 	umull	r2, r3, r2, r3
 8004548:	0c9a      	lsrs	r2, r3, #18
 800454a:	4613      	mov	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004554:	e002      	b.n	800455c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	3b01      	subs	r3, #1
 800455a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f9      	bne.n	8004556 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3714      	adds	r7, #20
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	40012300 	.word	0x40012300
 800457c:	40012000 	.word	0x40012000
 8004580:	10000012 	.word	0x10000012
 8004584:	20000000 	.word	0x20000000
 8004588:	431bde83 	.word	0x431bde83

0800458c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004594:	4b79      	ldr	r3, [pc, #484]	@ (800477c <ADC_Init+0x1f0>)
 8004596:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	431a      	orrs	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6859      	ldr	r1, [r3, #4]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	021a      	lsls	r2, r3, #8
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80045e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6859      	ldr	r1, [r3, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004606:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6899      	ldr	r1, [r3, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461e:	4a58      	ldr	r2, [pc, #352]	@ (8004780 <ADC_Init+0x1f4>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d022      	beq.n	800466a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004632:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6899      	ldr	r1, [r3, #8]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004654:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6899      	ldr	r1, [r3, #8]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	609a      	str	r2, [r3, #8]
 8004668:	e00f      	b.n	800468a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004678:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004688:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0202 	bic.w	r2, r2, #2
 8004698:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6899      	ldr	r1, [r3, #8]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	7e1b      	ldrb	r3, [r3, #24]
 80046a4:	005a      	lsls	r2, r3, #1
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d01b      	beq.n	80046f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046c6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80046d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6859      	ldr	r1, [r3, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e2:	3b01      	subs	r3, #1
 80046e4:	035a      	lsls	r2, r3, #13
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	605a      	str	r2, [r3, #4]
 80046ee:	e007      	b.n	8004700 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046fe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800470e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	3b01      	subs	r3, #1
 800471c:	051a      	lsls	r2, r3, #20
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004734:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6899      	ldr	r1, [r3, #8]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004742:	025a      	lsls	r2, r3, #9
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800475a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6899      	ldr	r1, [r3, #8]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	029a      	lsls	r2, r3, #10
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	430a      	orrs	r2, r1
 800476e:	609a      	str	r2, [r3, #8]
}
 8004770:	bf00      	nop
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	40012300 	.word	0x40012300
 8004780:	0f000001 	.word	0x0f000001

08004784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004794:	4b0c      	ldr	r3, [pc, #48]	@ (80047c8 <__NVIC_SetPriorityGrouping+0x44>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80047a0:	4013      	ands	r3, r2
 80047a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80047b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047b6:	4a04      	ldr	r2, [pc, #16]	@ (80047c8 <__NVIC_SetPriorityGrouping+0x44>)
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	60d3      	str	r3, [r2, #12]
}
 80047bc:	bf00      	nop
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	e000ed00 	.word	0xe000ed00

080047cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047d0:	4b04      	ldr	r3, [pc, #16]	@ (80047e4 <__NVIC_GetPriorityGrouping+0x18>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	0a1b      	lsrs	r3, r3, #8
 80047d6:	f003 0307 	and.w	r3, r3, #7
}
 80047da:	4618      	mov	r0, r3
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	e000ed00 	.word	0xe000ed00

080047e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	4603      	mov	r3, r0
 80047f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	db0b      	blt.n	8004812 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047fa:	79fb      	ldrb	r3, [r7, #7]
 80047fc:	f003 021f 	and.w	r2, r3, #31
 8004800:	4907      	ldr	r1, [pc, #28]	@ (8004820 <__NVIC_EnableIRQ+0x38>)
 8004802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004806:	095b      	lsrs	r3, r3, #5
 8004808:	2001      	movs	r0, #1
 800480a:	fa00 f202 	lsl.w	r2, r0, r2
 800480e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	e000e100 	.word	0xe000e100

08004824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	4603      	mov	r3, r0
 800482c:	6039      	str	r1, [r7, #0]
 800482e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004834:	2b00      	cmp	r3, #0
 8004836:	db0a      	blt.n	800484e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	b2da      	uxtb	r2, r3
 800483c:	490c      	ldr	r1, [pc, #48]	@ (8004870 <__NVIC_SetPriority+0x4c>)
 800483e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004842:	0112      	lsls	r2, r2, #4
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	440b      	add	r3, r1
 8004848:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800484c:	e00a      	b.n	8004864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	b2da      	uxtb	r2, r3
 8004852:	4908      	ldr	r1, [pc, #32]	@ (8004874 <__NVIC_SetPriority+0x50>)
 8004854:	79fb      	ldrb	r3, [r7, #7]
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	3b04      	subs	r3, #4
 800485c:	0112      	lsls	r2, r2, #4
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	440b      	add	r3, r1
 8004862:	761a      	strb	r2, [r3, #24]
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	e000e100 	.word	0xe000e100
 8004874:	e000ed00 	.word	0xe000ed00

08004878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004878:	b480      	push	{r7}
 800487a:	b089      	sub	sp, #36	@ 0x24
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	f1c3 0307 	rsb	r3, r3, #7
 8004892:	2b04      	cmp	r3, #4
 8004894:	bf28      	it	cs
 8004896:	2304      	movcs	r3, #4
 8004898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	3304      	adds	r3, #4
 800489e:	2b06      	cmp	r3, #6
 80048a0:	d902      	bls.n	80048a8 <NVIC_EncodePriority+0x30>
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	3b03      	subs	r3, #3
 80048a6:	e000      	b.n	80048aa <NVIC_EncodePriority+0x32>
 80048a8:	2300      	movs	r3, #0
 80048aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048ac:	f04f 32ff 	mov.w	r2, #4294967295
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	43da      	mvns	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	401a      	ands	r2, r3
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048c0:	f04f 31ff 	mov.w	r1, #4294967295
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	fa01 f303 	lsl.w	r3, r1, r3
 80048ca:	43d9      	mvns	r1, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048d0:	4313      	orrs	r3, r2
         );
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3724      	adds	r7, #36	@ 0x24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
	...

080048e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3b01      	subs	r3, #1
 80048ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048f0:	d301      	bcc.n	80048f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048f2:	2301      	movs	r3, #1
 80048f4:	e00f      	b.n	8004916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004920 <SysTick_Config+0x40>)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	3b01      	subs	r3, #1
 80048fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048fe:	210f      	movs	r1, #15
 8004900:	f04f 30ff 	mov.w	r0, #4294967295
 8004904:	f7ff ff8e 	bl	8004824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004908:	4b05      	ldr	r3, [pc, #20]	@ (8004920 <SysTick_Config+0x40>)
 800490a:	2200      	movs	r2, #0
 800490c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800490e:	4b04      	ldr	r3, [pc, #16]	@ (8004920 <SysTick_Config+0x40>)
 8004910:	2207      	movs	r2, #7
 8004912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	e000e010 	.word	0xe000e010

08004924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f7ff ff29 	bl	8004784 <__NVIC_SetPriorityGrouping>
}
 8004932:	bf00      	nop
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800493a:	b580      	push	{r7, lr}
 800493c:	b086      	sub	sp, #24
 800493e:	af00      	add	r7, sp, #0
 8004940:	4603      	mov	r3, r0
 8004942:	60b9      	str	r1, [r7, #8]
 8004944:	607a      	str	r2, [r7, #4]
 8004946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004948:	2300      	movs	r3, #0
 800494a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800494c:	f7ff ff3e 	bl	80047cc <__NVIC_GetPriorityGrouping>
 8004950:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	68b9      	ldr	r1, [r7, #8]
 8004956:	6978      	ldr	r0, [r7, #20]
 8004958:	f7ff ff8e 	bl	8004878 <NVIC_EncodePriority>
 800495c:	4602      	mov	r2, r0
 800495e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004962:	4611      	mov	r1, r2
 8004964:	4618      	mov	r0, r3
 8004966:	f7ff ff5d 	bl	8004824 <__NVIC_SetPriority>
}
 800496a:	bf00      	nop
 800496c:	3718      	adds	r7, #24
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b082      	sub	sp, #8
 8004976:	af00      	add	r7, sp, #0
 8004978:	4603      	mov	r3, r0
 800497a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800497c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff ff31 	bl	80047e8 <__NVIC_EnableIRQ>
}
 8004986:	bf00      	nop
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b082      	sub	sp, #8
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7ff ffa2 	bl	80048e0 <SysTick_Config>
 800499c:	4603      	mov	r3, r0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
	...

080049a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80049b4:	f7ff fc44 	bl	8004240 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e099      	b.n	8004af8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0201 	bic.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049e4:	e00f      	b.n	8004a06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049e6:	f7ff fc2b 	bl	8004240 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b05      	cmp	r3, #5
 80049f2:	d908      	bls.n	8004a06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2220      	movs	r2, #32
 80049f8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2203      	movs	r2, #3
 80049fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e078      	b.n	8004af8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1e8      	bne.n	80049e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	4b38      	ldr	r3, [pc, #224]	@ (8004b00 <HAL_DMA_Init+0x158>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d107      	bne.n	8004a70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f023 0307 	bic.w	r3, r3, #7
 8004a86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d117      	bne.n	8004aca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00e      	beq.n	8004aca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 fb01 	bl	80050b4 <DMA_CheckFifoParam>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d008      	beq.n	8004aca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2240      	movs	r2, #64	@ 0x40
 8004abc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e016      	b.n	8004af8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 fab8 	bl	8005048 <DMA_CalcBaseAndBitshift>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae0:	223f      	movs	r2, #63	@ 0x3f
 8004ae2:	409a      	lsls	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3718      	adds	r7, #24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	f010803f 	.word	0xf010803f

08004b04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
 8004b10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d101      	bne.n	8004b2a <HAL_DMA_Start_IT+0x26>
 8004b26:	2302      	movs	r3, #2
 8004b28:	e040      	b.n	8004bac <HAL_DMA_Start_IT+0xa8>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d12f      	bne.n	8004b9e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2202      	movs	r2, #2
 8004b42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	68b9      	ldr	r1, [r7, #8]
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 fa4a 	bl	8004fec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b5c:	223f      	movs	r2, #63	@ 0x3f
 8004b5e:	409a      	lsls	r2, r3
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0216 	orr.w	r2, r2, #22
 8004b72:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d007      	beq.n	8004b8c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0208 	orr.w	r2, r2, #8
 8004b8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0201 	orr.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	e005      	b.n	8004baa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3718      	adds	r7, #24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004bc2:	f7ff fb3d 	bl	8004240 <HAL_GetTick>
 8004bc6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d008      	beq.n	8004be6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2280      	movs	r2, #128	@ 0x80
 8004bd8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e052      	b.n	8004c8c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0216 	bic.w	r2, r2, #22
 8004bf4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	695a      	ldr	r2, [r3, #20]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c04:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d103      	bne.n	8004c16 <HAL_DMA_Abort+0x62>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d007      	beq.n	8004c26 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0208 	bic.w	r2, r2, #8
 8004c24:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0201 	bic.w	r2, r2, #1
 8004c34:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c36:	e013      	b.n	8004c60 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c38:	f7ff fb02 	bl	8004240 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b05      	cmp	r3, #5
 8004c44:	d90c      	bls.n	8004c60 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2203      	movs	r2, #3
 8004c50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e015      	b.n	8004c8c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1e4      	bne.n	8004c38 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c72:	223f      	movs	r2, #63	@ 0x3f
 8004c74:	409a      	lsls	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d004      	beq.n	8004cb2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2280      	movs	r2, #128	@ 0x80
 8004cac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e00c      	b.n	8004ccc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2205      	movs	r2, #5
 8004cb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0201 	bic.w	r2, r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ce4:	4b8e      	ldr	r3, [pc, #568]	@ (8004f20 <HAL_DMA_IRQHandler+0x248>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a8e      	ldr	r2, [pc, #568]	@ (8004f24 <HAL_DMA_IRQHandler+0x24c>)
 8004cea:	fba2 2303 	umull	r2, r3, r2, r3
 8004cee:	0a9b      	lsrs	r3, r3, #10
 8004cf0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cf6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d02:	2208      	movs	r2, #8
 8004d04:	409a      	lsls	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d01a      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d013      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0204 	bic.w	r2, r2, #4
 8004d2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d30:	2208      	movs	r2, #8
 8004d32:	409a      	lsls	r2, r3
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d3c:	f043 0201 	orr.w	r2, r3, #1
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d48:	2201      	movs	r2, #1
 8004d4a:	409a      	lsls	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d012      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00b      	beq.n	8004d7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d66:	2201      	movs	r2, #1
 8004d68:	409a      	lsls	r2, r3
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d72:	f043 0202 	orr.w	r2, r3, #2
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d7e:	2204      	movs	r2, #4
 8004d80:	409a      	lsls	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	4013      	ands	r3, r2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d012      	beq.n	8004db0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00b      	beq.n	8004db0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d9c:	2204      	movs	r2, #4
 8004d9e:	409a      	lsls	r2, r3
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004da8:	f043 0204 	orr.w	r2, r3, #4
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db4:	2210      	movs	r2, #16
 8004db6:	409a      	lsls	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d043      	beq.n	8004e48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0308 	and.w	r3, r3, #8
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d03c      	beq.n	8004e48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dd2:	2210      	movs	r2, #16
 8004dd4:	409a      	lsls	r2, r3
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d018      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d108      	bne.n	8004e08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d024      	beq.n	8004e48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	4798      	blx	r3
 8004e06:	e01f      	b.n	8004e48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d01b      	beq.n	8004e48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	4798      	blx	r3
 8004e18:	e016      	b.n	8004e48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d107      	bne.n	8004e38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 0208 	bic.w	r2, r2, #8
 8004e36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	409a      	lsls	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4013      	ands	r3, r2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 808f 	beq.w	8004f78 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0310 	and.w	r3, r3, #16
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 8087 	beq.w	8004f78 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e6e:	2220      	movs	r2, #32
 8004e70:	409a      	lsls	r2, r3
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b05      	cmp	r3, #5
 8004e80:	d136      	bne.n	8004ef0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0216 	bic.w	r2, r2, #22
 8004e90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	695a      	ldr	r2, [r3, #20]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ea0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d103      	bne.n	8004eb2 <HAL_DMA_IRQHandler+0x1da>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d007      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 0208 	bic.w	r2, r2, #8
 8004ec0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ec6:	223f      	movs	r2, #63	@ 0x3f
 8004ec8:	409a      	lsls	r2, r3
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d07e      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	4798      	blx	r3
        }
        return;
 8004eee:	e079      	b.n	8004fe4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d01d      	beq.n	8004f3a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10d      	bne.n	8004f28 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d031      	beq.n	8004f78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	4798      	blx	r3
 8004f1c:	e02c      	b.n	8004f78 <HAL_DMA_IRQHandler+0x2a0>
 8004f1e:	bf00      	nop
 8004f20:	20000000 	.word	0x20000000
 8004f24:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d023      	beq.n	8004f78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	4798      	blx	r3
 8004f38:	e01e      	b.n	8004f78 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10f      	bne.n	8004f68 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0210 	bic.w	r2, r2, #16
 8004f56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d003      	beq.n	8004f78 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d032      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d022      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2205      	movs	r2, #5
 8004f90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0201 	bic.w	r2, r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	60bb      	str	r3, [r7, #8]
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d307      	bcc.n	8004fc0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1f2      	bne.n	8004fa4 <HAL_DMA_IRQHandler+0x2cc>
 8004fbe:	e000      	b.n	8004fc2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004fc0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d005      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	4798      	blx	r3
 8004fe2:	e000      	b.n	8004fe6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004fe4:	bf00      	nop
    }
  }
}
 8004fe6:	3718      	adds	r7, #24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
 8004ff8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005008:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	2b40      	cmp	r3, #64	@ 0x40
 8005018:	d108      	bne.n	800502c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800502a:	e007      	b.n	800503c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	60da      	str	r2, [r3, #12]
}
 800503c:	bf00      	nop
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	b2db      	uxtb	r3, r3
 8005056:	3b10      	subs	r3, #16
 8005058:	4a14      	ldr	r2, [pc, #80]	@ (80050ac <DMA_CalcBaseAndBitshift+0x64>)
 800505a:	fba2 2303 	umull	r2, r3, r2, r3
 800505e:	091b      	lsrs	r3, r3, #4
 8005060:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005062:	4a13      	ldr	r2, [pc, #76]	@ (80050b0 <DMA_CalcBaseAndBitshift+0x68>)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4413      	add	r3, r2
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	461a      	mov	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2b03      	cmp	r3, #3
 8005074:	d909      	bls.n	800508a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800507e:	f023 0303 	bic.w	r3, r3, #3
 8005082:	1d1a      	adds	r2, r3, #4
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	659a      	str	r2, [r3, #88]	@ 0x58
 8005088:	e007      	b.n	800509a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005092:	f023 0303 	bic.w	r3, r3, #3
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3714      	adds	r7, #20
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	aaaaaaab 	.word	0xaaaaaaab
 80050b0:	0800d318 	.word	0x0800d318

080050b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050bc:	2300      	movs	r3, #0
 80050be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d11f      	bne.n	800510e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2b03      	cmp	r3, #3
 80050d2:	d856      	bhi.n	8005182 <DMA_CheckFifoParam+0xce>
 80050d4:	a201      	add	r2, pc, #4	@ (adr r2, 80050dc <DMA_CheckFifoParam+0x28>)
 80050d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050da:	bf00      	nop
 80050dc:	080050ed 	.word	0x080050ed
 80050e0:	080050ff 	.word	0x080050ff
 80050e4:	080050ed 	.word	0x080050ed
 80050e8:	08005183 	.word	0x08005183
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d046      	beq.n	8005186 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050fc:	e043      	b.n	8005186 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005102:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005106:	d140      	bne.n	800518a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800510c:	e03d      	b.n	800518a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005116:	d121      	bne.n	800515c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	2b03      	cmp	r3, #3
 800511c:	d837      	bhi.n	800518e <DMA_CheckFifoParam+0xda>
 800511e:	a201      	add	r2, pc, #4	@ (adr r2, 8005124 <DMA_CheckFifoParam+0x70>)
 8005120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005124:	08005135 	.word	0x08005135
 8005128:	0800513b 	.word	0x0800513b
 800512c:	08005135 	.word	0x08005135
 8005130:	0800514d 	.word	0x0800514d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	73fb      	strb	r3, [r7, #15]
      break;
 8005138:	e030      	b.n	800519c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d025      	beq.n	8005192 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800514a:	e022      	b.n	8005192 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005150:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005154:	d11f      	bne.n	8005196 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800515a:	e01c      	b.n	8005196 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2b02      	cmp	r3, #2
 8005160:	d903      	bls.n	800516a <DMA_CheckFifoParam+0xb6>
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	2b03      	cmp	r3, #3
 8005166:	d003      	beq.n	8005170 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005168:	e018      	b.n	800519c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	73fb      	strb	r3, [r7, #15]
      break;
 800516e:	e015      	b.n	800519c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005174:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00e      	beq.n	800519a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	73fb      	strb	r3, [r7, #15]
      break;
 8005180:	e00b      	b.n	800519a <DMA_CheckFifoParam+0xe6>
      break;
 8005182:	bf00      	nop
 8005184:	e00a      	b.n	800519c <DMA_CheckFifoParam+0xe8>
      break;
 8005186:	bf00      	nop
 8005188:	e008      	b.n	800519c <DMA_CheckFifoParam+0xe8>
      break;
 800518a:	bf00      	nop
 800518c:	e006      	b.n	800519c <DMA_CheckFifoParam+0xe8>
      break;
 800518e:	bf00      	nop
 8005190:	e004      	b.n	800519c <DMA_CheckFifoParam+0xe8>
      break;
 8005192:	bf00      	nop
 8005194:	e002      	b.n	800519c <DMA_CheckFifoParam+0xe8>
      break;   
 8005196:	bf00      	nop
 8005198:	e000      	b.n	800519c <DMA_CheckFifoParam+0xe8>
      break;
 800519a:	bf00      	nop
    }
  } 
  
  return status; 
 800519c:	7bfb      	ldrb	r3, [r7, #15]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop

080051ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b089      	sub	sp, #36	@ 0x24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80051b6:	2300      	movs	r3, #0
 80051b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80051ba:	2300      	movs	r3, #0
 80051bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80051be:	2300      	movs	r3, #0
 80051c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051c2:	2300      	movs	r3, #0
 80051c4:	61fb      	str	r3, [r7, #28]
 80051c6:	e165      	b.n	8005494 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051c8:	2201      	movs	r2, #1
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	fa02 f303 	lsl.w	r3, r2, r3
 80051d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	4013      	ands	r3, r2
 80051da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	f040 8154 	bne.w	800548e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f003 0303 	and.w	r3, r3, #3
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d005      	beq.n	80051fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d130      	bne.n	8005260 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	2203      	movs	r2, #3
 800520a:	fa02 f303 	lsl.w	r3, r2, r3
 800520e:	43db      	mvns	r3, r3
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	4013      	ands	r3, r2
 8005214:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	fa02 f303 	lsl.w	r3, r2, r3
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	4313      	orrs	r3, r2
 8005226:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005234:	2201      	movs	r2, #1
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	fa02 f303 	lsl.w	r3, r2, r3
 800523c:	43db      	mvns	r3, r3
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	4013      	ands	r3, r2
 8005242:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	091b      	lsrs	r3, r3, #4
 800524a:	f003 0201 	and.w	r2, r3, #1
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	fa02 f303 	lsl.w	r3, r2, r3
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	4313      	orrs	r3, r2
 8005258:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f003 0303 	and.w	r3, r3, #3
 8005268:	2b03      	cmp	r3, #3
 800526a:	d017      	beq.n	800529c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	2203      	movs	r2, #3
 8005278:	fa02 f303 	lsl.w	r3, r2, r3
 800527c:	43db      	mvns	r3, r3
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	4013      	ands	r3, r2
 8005282:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	005b      	lsls	r3, r3, #1
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	4313      	orrs	r3, r2
 8005294:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f003 0303 	and.w	r3, r3, #3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d123      	bne.n	80052f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	08da      	lsrs	r2, r3, #3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	3208      	adds	r2, #8
 80052b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	220f      	movs	r2, #15
 80052c0:	fa02 f303 	lsl.w	r3, r2, r3
 80052c4:	43db      	mvns	r3, r3
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	4013      	ands	r3, r2
 80052ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	f003 0307 	and.w	r3, r3, #7
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	fa02 f303 	lsl.w	r3, r2, r3
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	4313      	orrs	r3, r2
 80052e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	08da      	lsrs	r2, r3, #3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	3208      	adds	r2, #8
 80052ea:	69b9      	ldr	r1, [r7, #24]
 80052ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	2203      	movs	r2, #3
 80052fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005300:	43db      	mvns	r3, r3
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	4013      	ands	r3, r2
 8005306:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f003 0203 	and.w	r2, r3, #3
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	005b      	lsls	r3, r3, #1
 8005314:	fa02 f303 	lsl.w	r3, r2, r3
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	4313      	orrs	r3, r2
 800531c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 80ae 	beq.w	800548e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005332:	2300      	movs	r3, #0
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	4b5d      	ldr	r3, [pc, #372]	@ (80054ac <HAL_GPIO_Init+0x300>)
 8005338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800533a:	4a5c      	ldr	r2, [pc, #368]	@ (80054ac <HAL_GPIO_Init+0x300>)
 800533c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005340:	6453      	str	r3, [r2, #68]	@ 0x44
 8005342:	4b5a      	ldr	r3, [pc, #360]	@ (80054ac <HAL_GPIO_Init+0x300>)
 8005344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005346:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800534e:	4a58      	ldr	r2, [pc, #352]	@ (80054b0 <HAL_GPIO_Init+0x304>)
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	089b      	lsrs	r3, r3, #2
 8005354:	3302      	adds	r3, #2
 8005356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800535a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	220f      	movs	r2, #15
 8005366:	fa02 f303 	lsl.w	r3, r2, r3
 800536a:	43db      	mvns	r3, r3
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	4013      	ands	r3, r2
 8005370:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a4f      	ldr	r2, [pc, #316]	@ (80054b4 <HAL_GPIO_Init+0x308>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d025      	beq.n	80053c6 <HAL_GPIO_Init+0x21a>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a4e      	ldr	r2, [pc, #312]	@ (80054b8 <HAL_GPIO_Init+0x30c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d01f      	beq.n	80053c2 <HAL_GPIO_Init+0x216>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a4d      	ldr	r2, [pc, #308]	@ (80054bc <HAL_GPIO_Init+0x310>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d019      	beq.n	80053be <HAL_GPIO_Init+0x212>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a4c      	ldr	r2, [pc, #304]	@ (80054c0 <HAL_GPIO_Init+0x314>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d013      	beq.n	80053ba <HAL_GPIO_Init+0x20e>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a4b      	ldr	r2, [pc, #300]	@ (80054c4 <HAL_GPIO_Init+0x318>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00d      	beq.n	80053b6 <HAL_GPIO_Init+0x20a>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a4a      	ldr	r2, [pc, #296]	@ (80054c8 <HAL_GPIO_Init+0x31c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d007      	beq.n	80053b2 <HAL_GPIO_Init+0x206>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a49      	ldr	r2, [pc, #292]	@ (80054cc <HAL_GPIO_Init+0x320>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d101      	bne.n	80053ae <HAL_GPIO_Init+0x202>
 80053aa:	2306      	movs	r3, #6
 80053ac:	e00c      	b.n	80053c8 <HAL_GPIO_Init+0x21c>
 80053ae:	2307      	movs	r3, #7
 80053b0:	e00a      	b.n	80053c8 <HAL_GPIO_Init+0x21c>
 80053b2:	2305      	movs	r3, #5
 80053b4:	e008      	b.n	80053c8 <HAL_GPIO_Init+0x21c>
 80053b6:	2304      	movs	r3, #4
 80053b8:	e006      	b.n	80053c8 <HAL_GPIO_Init+0x21c>
 80053ba:	2303      	movs	r3, #3
 80053bc:	e004      	b.n	80053c8 <HAL_GPIO_Init+0x21c>
 80053be:	2302      	movs	r3, #2
 80053c0:	e002      	b.n	80053c8 <HAL_GPIO_Init+0x21c>
 80053c2:	2301      	movs	r3, #1
 80053c4:	e000      	b.n	80053c8 <HAL_GPIO_Init+0x21c>
 80053c6:	2300      	movs	r3, #0
 80053c8:	69fa      	ldr	r2, [r7, #28]
 80053ca:	f002 0203 	and.w	r2, r2, #3
 80053ce:	0092      	lsls	r2, r2, #2
 80053d0:	4093      	lsls	r3, r2
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053d8:	4935      	ldr	r1, [pc, #212]	@ (80054b0 <HAL_GPIO_Init+0x304>)
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	089b      	lsrs	r3, r3, #2
 80053de:	3302      	adds	r3, #2
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053e6:	4b3a      	ldr	r3, [pc, #232]	@ (80054d0 <HAL_GPIO_Init+0x324>)
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	43db      	mvns	r3, r3
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	4013      	ands	r3, r2
 80053f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d003      	beq.n	800540a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	4313      	orrs	r3, r2
 8005408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800540a:	4a31      	ldr	r2, [pc, #196]	@ (80054d0 <HAL_GPIO_Init+0x324>)
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005410:	4b2f      	ldr	r3, [pc, #188]	@ (80054d0 <HAL_GPIO_Init+0x324>)
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	43db      	mvns	r3, r3
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	4013      	ands	r3, r2
 800541e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d003      	beq.n	8005434 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	4313      	orrs	r3, r2
 8005432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005434:	4a26      	ldr	r2, [pc, #152]	@ (80054d0 <HAL_GPIO_Init+0x324>)
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800543a:	4b25      	ldr	r3, [pc, #148]	@ (80054d0 <HAL_GPIO_Init+0x324>)
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	43db      	mvns	r3, r3
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	4013      	ands	r3, r2
 8005448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	4313      	orrs	r3, r2
 800545c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800545e:	4a1c      	ldr	r2, [pc, #112]	@ (80054d0 <HAL_GPIO_Init+0x324>)
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005464:	4b1a      	ldr	r3, [pc, #104]	@ (80054d0 <HAL_GPIO_Init+0x324>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	43db      	mvns	r3, r3
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	4013      	ands	r3, r2
 8005472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	4313      	orrs	r3, r2
 8005486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005488:	4a11      	ldr	r2, [pc, #68]	@ (80054d0 <HAL_GPIO_Init+0x324>)
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	3301      	adds	r3, #1
 8005492:	61fb      	str	r3, [r7, #28]
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	2b0f      	cmp	r3, #15
 8005498:	f67f ae96 	bls.w	80051c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800549c:	bf00      	nop
 800549e:	bf00      	nop
 80054a0:	3724      	adds	r7, #36	@ 0x24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	40023800 	.word	0x40023800
 80054b0:	40013800 	.word	0x40013800
 80054b4:	40020000 	.word	0x40020000
 80054b8:	40020400 	.word	0x40020400
 80054bc:	40020800 	.word	0x40020800
 80054c0:	40020c00 	.word	0x40020c00
 80054c4:	40021000 	.word	0x40021000
 80054c8:	40021400 	.word	0x40021400
 80054cc:	40021800 	.word	0x40021800
 80054d0:	40013c00 	.word	0x40013c00

080054d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	460b      	mov	r3, r1
 80054de:	807b      	strh	r3, [r7, #2]
 80054e0:	4613      	mov	r3, r2
 80054e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054e4:	787b      	ldrb	r3, [r7, #1]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d003      	beq.n	80054f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054ea:	887a      	ldrh	r2, [r7, #2]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80054f0:	e003      	b.n	80054fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80054f2:	887b      	ldrh	r3, [r7, #2]
 80054f4:	041a      	lsls	r2, r3, #16
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	619a      	str	r2, [r3, #24]
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
	...

08005508 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800550e:	2300      	movs	r3, #0
 8005510:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005512:	2300      	movs	r3, #0
 8005514:	603b      	str	r3, [r7, #0]
 8005516:	4b20      	ldr	r3, [pc, #128]	@ (8005598 <HAL_PWREx_EnableOverDrive+0x90>)
 8005518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800551a:	4a1f      	ldr	r2, [pc, #124]	@ (8005598 <HAL_PWREx_EnableOverDrive+0x90>)
 800551c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005520:	6413      	str	r3, [r2, #64]	@ 0x40
 8005522:	4b1d      	ldr	r3, [pc, #116]	@ (8005598 <HAL_PWREx_EnableOverDrive+0x90>)
 8005524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800552a:	603b      	str	r3, [r7, #0]
 800552c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800552e:	4b1b      	ldr	r3, [pc, #108]	@ (800559c <HAL_PWREx_EnableOverDrive+0x94>)
 8005530:	2201      	movs	r2, #1
 8005532:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005534:	f7fe fe84 	bl	8004240 <HAL_GetTick>
 8005538:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800553a:	e009      	b.n	8005550 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800553c:	f7fe fe80 	bl	8004240 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800554a:	d901      	bls.n	8005550 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e01f      	b.n	8005590 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005550:	4b13      	ldr	r3, [pc, #76]	@ (80055a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800555c:	d1ee      	bne.n	800553c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800555e:	4b11      	ldr	r3, [pc, #68]	@ (80055a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005560:	2201      	movs	r2, #1
 8005562:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005564:	f7fe fe6c 	bl	8004240 <HAL_GetTick>
 8005568:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800556a:	e009      	b.n	8005580 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800556c:	f7fe fe68 	bl	8004240 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800557a:	d901      	bls.n	8005580 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e007      	b.n	8005590 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005580:	4b07      	ldr	r3, [pc, #28]	@ (80055a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005588:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800558c:	d1ee      	bne.n	800556c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	40023800 	.word	0x40023800
 800559c:	420e0040 	.word	0x420e0040
 80055a0:	40007000 	.word	0x40007000
 80055a4:	420e0044 	.word	0x420e0044

080055a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e0cc      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055bc:	4b68      	ldr	r3, [pc, #416]	@ (8005760 <HAL_RCC_ClockConfig+0x1b8>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 030f 	and.w	r3, r3, #15
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d90c      	bls.n	80055e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ca:	4b65      	ldr	r3, [pc, #404]	@ (8005760 <HAL_RCC_ClockConfig+0x1b8>)
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	b2d2      	uxtb	r2, r2
 80055d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055d2:	4b63      	ldr	r3, [pc, #396]	@ (8005760 <HAL_RCC_ClockConfig+0x1b8>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 030f 	and.w	r3, r3, #15
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d001      	beq.n	80055e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e0b8      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d020      	beq.n	8005632 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d005      	beq.n	8005608 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055fc:	4b59      	ldr	r3, [pc, #356]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	4a58      	ldr	r2, [pc, #352]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005602:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005606:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0308 	and.w	r3, r3, #8
 8005610:	2b00      	cmp	r3, #0
 8005612:	d005      	beq.n	8005620 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005614:	4b53      	ldr	r3, [pc, #332]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	4a52      	ldr	r2, [pc, #328]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 800561a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800561e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005620:	4b50      	ldr	r3, [pc, #320]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	494d      	ldr	r1, [pc, #308]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 800562e:	4313      	orrs	r3, r2
 8005630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d044      	beq.n	80056c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d107      	bne.n	8005656 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005646:	4b47      	ldr	r3, [pc, #284]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d119      	bne.n	8005686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e07f      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2b02      	cmp	r3, #2
 800565c:	d003      	beq.n	8005666 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005662:	2b03      	cmp	r3, #3
 8005664:	d107      	bne.n	8005676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005666:	4b3f      	ldr	r3, [pc, #252]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d109      	bne.n	8005686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e06f      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005676:	4b3b      	ldr	r3, [pc, #236]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e067      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005686:	4b37      	ldr	r3, [pc, #220]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f023 0203 	bic.w	r2, r3, #3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	4934      	ldr	r1, [pc, #208]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005694:	4313      	orrs	r3, r2
 8005696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005698:	f7fe fdd2 	bl	8004240 <HAL_GetTick>
 800569c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800569e:	e00a      	b.n	80056b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056a0:	f7fe fdce 	bl	8004240 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e04f      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056b6:	4b2b      	ldr	r3, [pc, #172]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f003 020c 	and.w	r2, r3, #12
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d1eb      	bne.n	80056a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056c8:	4b25      	ldr	r3, [pc, #148]	@ (8005760 <HAL_RCC_ClockConfig+0x1b8>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 030f 	and.w	r3, r3, #15
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d20c      	bcs.n	80056f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056d6:	4b22      	ldr	r3, [pc, #136]	@ (8005760 <HAL_RCC_ClockConfig+0x1b8>)
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	b2d2      	uxtb	r2, r2
 80056dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056de:	4b20      	ldr	r3, [pc, #128]	@ (8005760 <HAL_RCC_ClockConfig+0x1b8>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 030f 	and.w	r3, r3, #15
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d001      	beq.n	80056f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e032      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0304 	and.w	r3, r3, #4
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d008      	beq.n	800570e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056fc:	4b19      	ldr	r3, [pc, #100]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	4916      	ldr	r1, [pc, #88]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 800570a:	4313      	orrs	r3, r2
 800570c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	2b00      	cmp	r3, #0
 8005718:	d009      	beq.n	800572e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800571a:	4b12      	ldr	r3, [pc, #72]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	00db      	lsls	r3, r3, #3
 8005728:	490e      	ldr	r1, [pc, #56]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 800572a:	4313      	orrs	r3, r2
 800572c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800572e:	f000 f855 	bl	80057dc <HAL_RCC_GetSysClockFreq>
 8005732:	4602      	mov	r2, r0
 8005734:	4b0b      	ldr	r3, [pc, #44]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	091b      	lsrs	r3, r3, #4
 800573a:	f003 030f 	and.w	r3, r3, #15
 800573e:	490a      	ldr	r1, [pc, #40]	@ (8005768 <HAL_RCC_ClockConfig+0x1c0>)
 8005740:	5ccb      	ldrb	r3, [r1, r3]
 8005742:	fa22 f303 	lsr.w	r3, r2, r3
 8005746:	4a09      	ldr	r2, [pc, #36]	@ (800576c <HAL_RCC_ClockConfig+0x1c4>)
 8005748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800574a:	4b09      	ldr	r3, [pc, #36]	@ (8005770 <HAL_RCC_ClockConfig+0x1c8>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4618      	mov	r0, r3
 8005750:	f7fe fd32 	bl	80041b8 <HAL_InitTick>

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	40023c00 	.word	0x40023c00
 8005764:	40023800 	.word	0x40023800
 8005768:	0800d300 	.word	0x0800d300
 800576c:	20000000 	.word	0x20000000
 8005770:	20000004 	.word	0x20000004

08005774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005774:	b480      	push	{r7}
 8005776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005778:	4b03      	ldr	r3, [pc, #12]	@ (8005788 <HAL_RCC_GetHCLKFreq+0x14>)
 800577a:	681b      	ldr	r3, [r3, #0]
}
 800577c:	4618      	mov	r0, r3
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	20000000 	.word	0x20000000

0800578c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005790:	f7ff fff0 	bl	8005774 <HAL_RCC_GetHCLKFreq>
 8005794:	4602      	mov	r2, r0
 8005796:	4b05      	ldr	r3, [pc, #20]	@ (80057ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	0a9b      	lsrs	r3, r3, #10
 800579c:	f003 0307 	and.w	r3, r3, #7
 80057a0:	4903      	ldr	r1, [pc, #12]	@ (80057b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057a2:	5ccb      	ldrb	r3, [r1, r3]
 80057a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	40023800 	.word	0x40023800
 80057b0:	0800d310 	.word	0x0800d310

080057b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80057b8:	f7ff ffdc 	bl	8005774 <HAL_RCC_GetHCLKFreq>
 80057bc:	4602      	mov	r2, r0
 80057be:	4b05      	ldr	r3, [pc, #20]	@ (80057d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	0b5b      	lsrs	r3, r3, #13
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	4903      	ldr	r1, [pc, #12]	@ (80057d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057ca:	5ccb      	ldrb	r3, [r1, r3]
 80057cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	40023800 	.word	0x40023800
 80057d8:	0800d310 	.word	0x0800d310

080057dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057e0:	b0ae      	sub	sp, #184	@ 0xb8
 80057e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80057e4:	2300      	movs	r3, #0
 80057e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005802:	4bcb      	ldr	r3, [pc, #812]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0x354>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f003 030c 	and.w	r3, r3, #12
 800580a:	2b0c      	cmp	r3, #12
 800580c:	f200 8206 	bhi.w	8005c1c <HAL_RCC_GetSysClockFreq+0x440>
 8005810:	a201      	add	r2, pc, #4	@ (adr r2, 8005818 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005816:	bf00      	nop
 8005818:	0800584d 	.word	0x0800584d
 800581c:	08005c1d 	.word	0x08005c1d
 8005820:	08005c1d 	.word	0x08005c1d
 8005824:	08005c1d 	.word	0x08005c1d
 8005828:	08005855 	.word	0x08005855
 800582c:	08005c1d 	.word	0x08005c1d
 8005830:	08005c1d 	.word	0x08005c1d
 8005834:	08005c1d 	.word	0x08005c1d
 8005838:	0800585d 	.word	0x0800585d
 800583c:	08005c1d 	.word	0x08005c1d
 8005840:	08005c1d 	.word	0x08005c1d
 8005844:	08005c1d 	.word	0x08005c1d
 8005848:	08005a4d 	.word	0x08005a4d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800584c:	4bb9      	ldr	r3, [pc, #740]	@ (8005b34 <HAL_RCC_GetSysClockFreq+0x358>)
 800584e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005852:	e1e7      	b.n	8005c24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005854:	4bb8      	ldr	r3, [pc, #736]	@ (8005b38 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005856:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800585a:	e1e3      	b.n	8005c24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800585c:	4bb4      	ldr	r3, [pc, #720]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0x354>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005864:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005868:	4bb1      	ldr	r3, [pc, #708]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0x354>)
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d071      	beq.n	8005958 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005874:	4bae      	ldr	r3, [pc, #696]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0x354>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	099b      	lsrs	r3, r3, #6
 800587a:	2200      	movs	r2, #0
 800587c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005880:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005884:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800588c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005890:	2300      	movs	r3, #0
 8005892:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005896:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800589a:	4622      	mov	r2, r4
 800589c:	462b      	mov	r3, r5
 800589e:	f04f 0000 	mov.w	r0, #0
 80058a2:	f04f 0100 	mov.w	r1, #0
 80058a6:	0159      	lsls	r1, r3, #5
 80058a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058ac:	0150      	lsls	r0, r2, #5
 80058ae:	4602      	mov	r2, r0
 80058b0:	460b      	mov	r3, r1
 80058b2:	4621      	mov	r1, r4
 80058b4:	1a51      	subs	r1, r2, r1
 80058b6:	6439      	str	r1, [r7, #64]	@ 0x40
 80058b8:	4629      	mov	r1, r5
 80058ba:	eb63 0301 	sbc.w	r3, r3, r1
 80058be:	647b      	str	r3, [r7, #68]	@ 0x44
 80058c0:	f04f 0200 	mov.w	r2, #0
 80058c4:	f04f 0300 	mov.w	r3, #0
 80058c8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80058cc:	4649      	mov	r1, r9
 80058ce:	018b      	lsls	r3, r1, #6
 80058d0:	4641      	mov	r1, r8
 80058d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058d6:	4641      	mov	r1, r8
 80058d8:	018a      	lsls	r2, r1, #6
 80058da:	4641      	mov	r1, r8
 80058dc:	1a51      	subs	r1, r2, r1
 80058de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80058e0:	4649      	mov	r1, r9
 80058e2:	eb63 0301 	sbc.w	r3, r3, r1
 80058e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058e8:	f04f 0200 	mov.w	r2, #0
 80058ec:	f04f 0300 	mov.w	r3, #0
 80058f0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80058f4:	4649      	mov	r1, r9
 80058f6:	00cb      	lsls	r3, r1, #3
 80058f8:	4641      	mov	r1, r8
 80058fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058fe:	4641      	mov	r1, r8
 8005900:	00ca      	lsls	r2, r1, #3
 8005902:	4610      	mov	r0, r2
 8005904:	4619      	mov	r1, r3
 8005906:	4603      	mov	r3, r0
 8005908:	4622      	mov	r2, r4
 800590a:	189b      	adds	r3, r3, r2
 800590c:	633b      	str	r3, [r7, #48]	@ 0x30
 800590e:	462b      	mov	r3, r5
 8005910:	460a      	mov	r2, r1
 8005912:	eb42 0303 	adc.w	r3, r2, r3
 8005916:	637b      	str	r3, [r7, #52]	@ 0x34
 8005918:	f04f 0200 	mov.w	r2, #0
 800591c:	f04f 0300 	mov.w	r3, #0
 8005920:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005924:	4629      	mov	r1, r5
 8005926:	024b      	lsls	r3, r1, #9
 8005928:	4621      	mov	r1, r4
 800592a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800592e:	4621      	mov	r1, r4
 8005930:	024a      	lsls	r2, r1, #9
 8005932:	4610      	mov	r0, r2
 8005934:	4619      	mov	r1, r3
 8005936:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800593a:	2200      	movs	r2, #0
 800593c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005940:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005944:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005948:	f7fb f9be 	bl	8000cc8 <__aeabi_uldivmod>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	4613      	mov	r3, r2
 8005952:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005956:	e067      	b.n	8005a28 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005958:	4b75      	ldr	r3, [pc, #468]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0x354>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	099b      	lsrs	r3, r3, #6
 800595e:	2200      	movs	r2, #0
 8005960:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005964:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005968:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800596c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005970:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005972:	2300      	movs	r3, #0
 8005974:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005976:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800597a:	4622      	mov	r2, r4
 800597c:	462b      	mov	r3, r5
 800597e:	f04f 0000 	mov.w	r0, #0
 8005982:	f04f 0100 	mov.w	r1, #0
 8005986:	0159      	lsls	r1, r3, #5
 8005988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800598c:	0150      	lsls	r0, r2, #5
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	4621      	mov	r1, r4
 8005994:	1a51      	subs	r1, r2, r1
 8005996:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005998:	4629      	mov	r1, r5
 800599a:	eb63 0301 	sbc.w	r3, r3, r1
 800599e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059a0:	f04f 0200 	mov.w	r2, #0
 80059a4:	f04f 0300 	mov.w	r3, #0
 80059a8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80059ac:	4649      	mov	r1, r9
 80059ae:	018b      	lsls	r3, r1, #6
 80059b0:	4641      	mov	r1, r8
 80059b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059b6:	4641      	mov	r1, r8
 80059b8:	018a      	lsls	r2, r1, #6
 80059ba:	4641      	mov	r1, r8
 80059bc:	ebb2 0a01 	subs.w	sl, r2, r1
 80059c0:	4649      	mov	r1, r9
 80059c2:	eb63 0b01 	sbc.w	fp, r3, r1
 80059c6:	f04f 0200 	mov.w	r2, #0
 80059ca:	f04f 0300 	mov.w	r3, #0
 80059ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059da:	4692      	mov	sl, r2
 80059dc:	469b      	mov	fp, r3
 80059de:	4623      	mov	r3, r4
 80059e0:	eb1a 0303 	adds.w	r3, sl, r3
 80059e4:	623b      	str	r3, [r7, #32]
 80059e6:	462b      	mov	r3, r5
 80059e8:	eb4b 0303 	adc.w	r3, fp, r3
 80059ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80059ee:	f04f 0200 	mov.w	r2, #0
 80059f2:	f04f 0300 	mov.w	r3, #0
 80059f6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80059fa:	4629      	mov	r1, r5
 80059fc:	028b      	lsls	r3, r1, #10
 80059fe:	4621      	mov	r1, r4
 8005a00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a04:	4621      	mov	r1, r4
 8005a06:	028a      	lsls	r2, r1, #10
 8005a08:	4610      	mov	r0, r2
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a10:	2200      	movs	r2, #0
 8005a12:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a14:	677a      	str	r2, [r7, #116]	@ 0x74
 8005a16:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005a1a:	f7fb f955 	bl	8000cc8 <__aeabi_uldivmod>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	460b      	mov	r3, r1
 8005a22:	4613      	mov	r3, r2
 8005a24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005a28:	4b41      	ldr	r3, [pc, #260]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0x354>)
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	0c1b      	lsrs	r3, r3, #16
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	3301      	adds	r3, #1
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8005a3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005a4a:	e0eb      	b.n	8005c24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a4c:	4b38      	ldr	r3, [pc, #224]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0x354>)
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a58:	4b35      	ldr	r3, [pc, #212]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0x354>)
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d06b      	beq.n	8005b3c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a64:	4b32      	ldr	r3, [pc, #200]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0x354>)
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	099b      	lsrs	r3, r3, #6
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a76:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a78:	2300      	movs	r3, #0
 8005a7a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a7c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005a80:	4622      	mov	r2, r4
 8005a82:	462b      	mov	r3, r5
 8005a84:	f04f 0000 	mov.w	r0, #0
 8005a88:	f04f 0100 	mov.w	r1, #0
 8005a8c:	0159      	lsls	r1, r3, #5
 8005a8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a92:	0150      	lsls	r0, r2, #5
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	4621      	mov	r1, r4
 8005a9a:	1a51      	subs	r1, r2, r1
 8005a9c:	61b9      	str	r1, [r7, #24]
 8005a9e:	4629      	mov	r1, r5
 8005aa0:	eb63 0301 	sbc.w	r3, r3, r1
 8005aa4:	61fb      	str	r3, [r7, #28]
 8005aa6:	f04f 0200 	mov.w	r2, #0
 8005aaa:	f04f 0300 	mov.w	r3, #0
 8005aae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005ab2:	4659      	mov	r1, fp
 8005ab4:	018b      	lsls	r3, r1, #6
 8005ab6:	4651      	mov	r1, sl
 8005ab8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005abc:	4651      	mov	r1, sl
 8005abe:	018a      	lsls	r2, r1, #6
 8005ac0:	4651      	mov	r1, sl
 8005ac2:	ebb2 0801 	subs.w	r8, r2, r1
 8005ac6:	4659      	mov	r1, fp
 8005ac8:	eb63 0901 	sbc.w	r9, r3, r1
 8005acc:	f04f 0200 	mov.w	r2, #0
 8005ad0:	f04f 0300 	mov.w	r3, #0
 8005ad4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ad8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005adc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ae0:	4690      	mov	r8, r2
 8005ae2:	4699      	mov	r9, r3
 8005ae4:	4623      	mov	r3, r4
 8005ae6:	eb18 0303 	adds.w	r3, r8, r3
 8005aea:	613b      	str	r3, [r7, #16]
 8005aec:	462b      	mov	r3, r5
 8005aee:	eb49 0303 	adc.w	r3, r9, r3
 8005af2:	617b      	str	r3, [r7, #20]
 8005af4:	f04f 0200 	mov.w	r2, #0
 8005af8:	f04f 0300 	mov.w	r3, #0
 8005afc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005b00:	4629      	mov	r1, r5
 8005b02:	024b      	lsls	r3, r1, #9
 8005b04:	4621      	mov	r1, r4
 8005b06:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b0a:	4621      	mov	r1, r4
 8005b0c:	024a      	lsls	r2, r1, #9
 8005b0e:	4610      	mov	r0, r2
 8005b10:	4619      	mov	r1, r3
 8005b12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b16:	2200      	movs	r2, #0
 8005b18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b1a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005b1c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005b20:	f7fb f8d2 	bl	8000cc8 <__aeabi_uldivmod>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	4613      	mov	r3, r2
 8005b2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b2e:	e065      	b.n	8005bfc <HAL_RCC_GetSysClockFreq+0x420>
 8005b30:	40023800 	.word	0x40023800
 8005b34:	00f42400 	.word	0x00f42400
 8005b38:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b3c:	4b3d      	ldr	r3, [pc, #244]	@ (8005c34 <HAL_RCC_GetSysClockFreq+0x458>)
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	099b      	lsrs	r3, r3, #6
 8005b42:	2200      	movs	r2, #0
 8005b44:	4618      	mov	r0, r3
 8005b46:	4611      	mov	r1, r2
 8005b48:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b4e:	2300      	movs	r3, #0
 8005b50:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b52:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005b56:	4642      	mov	r2, r8
 8005b58:	464b      	mov	r3, r9
 8005b5a:	f04f 0000 	mov.w	r0, #0
 8005b5e:	f04f 0100 	mov.w	r1, #0
 8005b62:	0159      	lsls	r1, r3, #5
 8005b64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b68:	0150      	lsls	r0, r2, #5
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	4641      	mov	r1, r8
 8005b70:	1a51      	subs	r1, r2, r1
 8005b72:	60b9      	str	r1, [r7, #8]
 8005b74:	4649      	mov	r1, r9
 8005b76:	eb63 0301 	sbc.w	r3, r3, r1
 8005b7a:	60fb      	str	r3, [r7, #12]
 8005b7c:	f04f 0200 	mov.w	r2, #0
 8005b80:	f04f 0300 	mov.w	r3, #0
 8005b84:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005b88:	4659      	mov	r1, fp
 8005b8a:	018b      	lsls	r3, r1, #6
 8005b8c:	4651      	mov	r1, sl
 8005b8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b92:	4651      	mov	r1, sl
 8005b94:	018a      	lsls	r2, r1, #6
 8005b96:	4651      	mov	r1, sl
 8005b98:	1a54      	subs	r4, r2, r1
 8005b9a:	4659      	mov	r1, fp
 8005b9c:	eb63 0501 	sbc.w	r5, r3, r1
 8005ba0:	f04f 0200 	mov.w	r2, #0
 8005ba4:	f04f 0300 	mov.w	r3, #0
 8005ba8:	00eb      	lsls	r3, r5, #3
 8005baa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bae:	00e2      	lsls	r2, r4, #3
 8005bb0:	4614      	mov	r4, r2
 8005bb2:	461d      	mov	r5, r3
 8005bb4:	4643      	mov	r3, r8
 8005bb6:	18e3      	adds	r3, r4, r3
 8005bb8:	603b      	str	r3, [r7, #0]
 8005bba:	464b      	mov	r3, r9
 8005bbc:	eb45 0303 	adc.w	r3, r5, r3
 8005bc0:	607b      	str	r3, [r7, #4]
 8005bc2:	f04f 0200 	mov.w	r2, #0
 8005bc6:	f04f 0300 	mov.w	r3, #0
 8005bca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bce:	4629      	mov	r1, r5
 8005bd0:	028b      	lsls	r3, r1, #10
 8005bd2:	4621      	mov	r1, r4
 8005bd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bd8:	4621      	mov	r1, r4
 8005bda:	028a      	lsls	r2, r1, #10
 8005bdc:	4610      	mov	r0, r2
 8005bde:	4619      	mov	r1, r3
 8005be0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005be4:	2200      	movs	r2, #0
 8005be6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005be8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005bea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005bee:	f7fb f86b 	bl	8000cc8 <__aeabi_uldivmod>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8005c34 <HAL_RCC_GetSysClockFreq+0x458>)
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	0f1b      	lsrs	r3, r3, #28
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005c0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005c1a:	e003      	b.n	8005c24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c1c:	4b06      	ldr	r3, [pc, #24]	@ (8005c38 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005c1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005c22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	37b8      	adds	r7, #184	@ 0xb8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c32:	bf00      	nop
 8005c34:	40023800 	.word	0x40023800
 8005c38:	00f42400 	.word	0x00f42400

08005c3c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e28d      	b.n	800616a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f000 8083 	beq.w	8005d62 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005c5c:	4b94      	ldr	r3, [pc, #592]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f003 030c 	and.w	r3, r3, #12
 8005c64:	2b04      	cmp	r3, #4
 8005c66:	d019      	beq.n	8005c9c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005c68:	4b91      	ldr	r3, [pc, #580]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f003 030c 	and.w	r3, r3, #12
        || \
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d106      	bne.n	8005c82 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005c74:	4b8e      	ldr	r3, [pc, #568]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c80:	d00c      	beq.n	8005c9c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c82:	4b8b      	ldr	r3, [pc, #556]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005c8a:	2b0c      	cmp	r3, #12
 8005c8c:	d112      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c8e:	4b88      	ldr	r3, [pc, #544]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c9a:	d10b      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c9c:	4b84      	ldr	r3, [pc, #528]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d05b      	beq.n	8005d60 <HAL_RCC_OscConfig+0x124>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d157      	bne.n	8005d60 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e25a      	b.n	800616a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cbc:	d106      	bne.n	8005ccc <HAL_RCC_OscConfig+0x90>
 8005cbe:	4b7c      	ldr	r3, [pc, #496]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a7b      	ldr	r2, [pc, #492]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005cc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	e01d      	b.n	8005d08 <HAL_RCC_OscConfig+0xcc>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005cd4:	d10c      	bne.n	8005cf0 <HAL_RCC_OscConfig+0xb4>
 8005cd6:	4b76      	ldr	r3, [pc, #472]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a75      	ldr	r2, [pc, #468]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005cdc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ce0:	6013      	str	r3, [r2, #0]
 8005ce2:	4b73      	ldr	r3, [pc, #460]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a72      	ldr	r2, [pc, #456]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005ce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cec:	6013      	str	r3, [r2, #0]
 8005cee:	e00b      	b.n	8005d08 <HAL_RCC_OscConfig+0xcc>
 8005cf0:	4b6f      	ldr	r3, [pc, #444]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a6e      	ldr	r2, [pc, #440]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005cf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	4b6c      	ldr	r3, [pc, #432]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a6b      	ldr	r2, [pc, #428]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005d02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d013      	beq.n	8005d38 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d10:	f7fe fa96 	bl	8004240 <HAL_GetTick>
 8005d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d16:	e008      	b.n	8005d2a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d18:	f7fe fa92 	bl	8004240 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	2b64      	cmp	r3, #100	@ 0x64
 8005d24:	d901      	bls.n	8005d2a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e21f      	b.n	800616a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d2a:	4b61      	ldr	r3, [pc, #388]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d0f0      	beq.n	8005d18 <HAL_RCC_OscConfig+0xdc>
 8005d36:	e014      	b.n	8005d62 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d38:	f7fe fa82 	bl	8004240 <HAL_GetTick>
 8005d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d3e:	e008      	b.n	8005d52 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d40:	f7fe fa7e 	bl	8004240 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	2b64      	cmp	r3, #100	@ 0x64
 8005d4c:	d901      	bls.n	8005d52 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e20b      	b.n	800616a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d52:	4b57      	ldr	r3, [pc, #348]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1f0      	bne.n	8005d40 <HAL_RCC_OscConfig+0x104>
 8005d5e:	e000      	b.n	8005d62 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d06f      	beq.n	8005e4e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005d6e:	4b50      	ldr	r3, [pc, #320]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f003 030c 	and.w	r3, r3, #12
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d017      	beq.n	8005daa <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005d7a:	4b4d      	ldr	r3, [pc, #308]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f003 030c 	and.w	r3, r3, #12
        || \
 8005d82:	2b08      	cmp	r3, #8
 8005d84:	d105      	bne.n	8005d92 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005d86:	4b4a      	ldr	r3, [pc, #296]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00b      	beq.n	8005daa <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d92:	4b47      	ldr	r3, [pc, #284]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005d9a:	2b0c      	cmp	r3, #12
 8005d9c:	d11c      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d9e:	4b44      	ldr	r3, [pc, #272]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d116      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005daa:	4b41      	ldr	r3, [pc, #260]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d005      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x186>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d001      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e1d3      	b.n	800616a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dc2:	4b3b      	ldr	r3, [pc, #236]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	00db      	lsls	r3, r3, #3
 8005dd0:	4937      	ldr	r1, [pc, #220]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dd6:	e03a      	b.n	8005e4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d020      	beq.n	8005e22 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005de0:	4b34      	ldr	r3, [pc, #208]	@ (8005eb4 <HAL_RCC_OscConfig+0x278>)
 8005de2:	2201      	movs	r2, #1
 8005de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de6:	f7fe fa2b 	bl	8004240 <HAL_GetTick>
 8005dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dec:	e008      	b.n	8005e00 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dee:	f7fe fa27 	bl	8004240 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d901      	bls.n	8005e00 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e1b4      	b.n	800616a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e00:	4b2b      	ldr	r3, [pc, #172]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d0f0      	beq.n	8005dee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e0c:	4b28      	ldr	r3, [pc, #160]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	00db      	lsls	r3, r3, #3
 8005e1a:	4925      	ldr	r1, [pc, #148]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	600b      	str	r3, [r1, #0]
 8005e20:	e015      	b.n	8005e4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e22:	4b24      	ldr	r3, [pc, #144]	@ (8005eb4 <HAL_RCC_OscConfig+0x278>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e28:	f7fe fa0a 	bl	8004240 <HAL_GetTick>
 8005e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e2e:	e008      	b.n	8005e42 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e30:	f7fe fa06 	bl	8004240 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e193      	b.n	800616a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e42:	4b1b      	ldr	r3, [pc, #108]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1f0      	bne.n	8005e30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0308 	and.w	r3, r3, #8
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d036      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d016      	beq.n	8005e90 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e62:	4b15      	ldr	r3, [pc, #84]	@ (8005eb8 <HAL_RCC_OscConfig+0x27c>)
 8005e64:	2201      	movs	r2, #1
 8005e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e68:	f7fe f9ea 	bl	8004240 <HAL_GetTick>
 8005e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e6e:	e008      	b.n	8005e82 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e70:	f7fe f9e6 	bl	8004240 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d901      	bls.n	8005e82 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e173      	b.n	800616a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e82:	4b0b      	ldr	r3, [pc, #44]	@ (8005eb0 <HAL_RCC_OscConfig+0x274>)
 8005e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d0f0      	beq.n	8005e70 <HAL_RCC_OscConfig+0x234>
 8005e8e:	e01b      	b.n	8005ec8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e90:	4b09      	ldr	r3, [pc, #36]	@ (8005eb8 <HAL_RCC_OscConfig+0x27c>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e96:	f7fe f9d3 	bl	8004240 <HAL_GetTick>
 8005e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e9c:	e00e      	b.n	8005ebc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e9e:	f7fe f9cf 	bl	8004240 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d907      	bls.n	8005ebc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e15c      	b.n	800616a <HAL_RCC_OscConfig+0x52e>
 8005eb0:	40023800 	.word	0x40023800
 8005eb4:	42470000 	.word	0x42470000
 8005eb8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ebc:	4b8a      	ldr	r3, [pc, #552]	@ (80060e8 <HAL_RCC_OscConfig+0x4ac>)
 8005ebe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1ea      	bne.n	8005e9e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f000 8097 	beq.w	8006004 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005eda:	4b83      	ldr	r3, [pc, #524]	@ (80060e8 <HAL_RCC_OscConfig+0x4ac>)
 8005edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10f      	bne.n	8005f06 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	60bb      	str	r3, [r7, #8]
 8005eea:	4b7f      	ldr	r3, [pc, #508]	@ (80060e8 <HAL_RCC_OscConfig+0x4ac>)
 8005eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eee:	4a7e      	ldr	r2, [pc, #504]	@ (80060e8 <HAL_RCC_OscConfig+0x4ac>)
 8005ef0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ef4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ef6:	4b7c      	ldr	r3, [pc, #496]	@ (80060e8 <HAL_RCC_OscConfig+0x4ac>)
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005efe:	60bb      	str	r3, [r7, #8]
 8005f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f02:	2301      	movs	r3, #1
 8005f04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f06:	4b79      	ldr	r3, [pc, #484]	@ (80060ec <HAL_RCC_OscConfig+0x4b0>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d118      	bne.n	8005f44 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f12:	4b76      	ldr	r3, [pc, #472]	@ (80060ec <HAL_RCC_OscConfig+0x4b0>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a75      	ldr	r2, [pc, #468]	@ (80060ec <HAL_RCC_OscConfig+0x4b0>)
 8005f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f1e:	f7fe f98f 	bl	8004240 <HAL_GetTick>
 8005f22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f24:	e008      	b.n	8005f38 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f26:	f7fe f98b 	bl	8004240 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d901      	bls.n	8005f38 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e118      	b.n	800616a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f38:	4b6c      	ldr	r3, [pc, #432]	@ (80060ec <HAL_RCC_OscConfig+0x4b0>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d0f0      	beq.n	8005f26 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d106      	bne.n	8005f5a <HAL_RCC_OscConfig+0x31e>
 8005f4c:	4b66      	ldr	r3, [pc, #408]	@ (80060e8 <HAL_RCC_OscConfig+0x4ac>)
 8005f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f50:	4a65      	ldr	r2, [pc, #404]	@ (80060e8 <HAL_RCC_OscConfig+0x4ac>)
 8005f52:	f043 0301 	orr.w	r3, r3, #1
 8005f56:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f58:	e01c      	b.n	8005f94 <HAL_RCC_OscConfig+0x358>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	2b05      	cmp	r3, #5
 8005f60:	d10c      	bne.n	8005f7c <HAL_RCC_OscConfig+0x340>
 8005f62:	4b61      	ldr	r3, [pc, #388]	@ (80060e8 <HAL_RCC_OscConfig+0x4ac>)
 8005f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f66:	4a60      	ldr	r2, [pc, #384]	@ (80060e8 <HAL_RCC_OscConfig+0x4ac>)
 8005f68:	f043 0304 	orr.w	r3, r3, #4
 8005f6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f6e:	4b5e      	ldr	r3, [pc, #376]	@ (80060e8 <HAL_RCC_OscConfig+0x4ac>)
 8005f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f72:	4a5d      	ldr	r2, [pc, #372]	@ (80060e8 <HAL_RCC_OscConfig+0x4ac>)
 8005f74:	f043 0301 	orr.w	r3, r3, #1
 8005f78:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f7a:	e00b      	b.n	8005f94 <HAL_RCC_OscConfig+0x358>
 8005f7c:	4b5a      	ldr	r3, [pc, #360]	@ (80060e8 <HAL_RCC_OscConfig+0x4ac>)
 8005f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f80:	4a59      	ldr	r2, [pc, #356]	@ (80060e8 <HAL_RCC_OscConfig+0x4ac>)
 8005f82:	f023 0301 	bic.w	r3, r3, #1
 8005f86:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f88:	4b57      	ldr	r3, [pc, #348]	@ (80060e8 <HAL_RCC_OscConfig+0x4ac>)
 8005f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f8c:	4a56      	ldr	r2, [pc, #344]	@ (80060e8 <HAL_RCC_OscConfig+0x4ac>)
 8005f8e:	f023 0304 	bic.w	r3, r3, #4
 8005f92:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d015      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f9c:	f7fe f950 	bl	8004240 <HAL_GetTick>
 8005fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fa2:	e00a      	b.n	8005fba <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fa4:	f7fe f94c 	bl	8004240 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d901      	bls.n	8005fba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e0d7      	b.n	800616a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fba:	4b4b      	ldr	r3, [pc, #300]	@ (80060e8 <HAL_RCC_OscConfig+0x4ac>)
 8005fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d0ee      	beq.n	8005fa4 <HAL_RCC_OscConfig+0x368>
 8005fc6:	e014      	b.n	8005ff2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc8:	f7fe f93a 	bl	8004240 <HAL_GetTick>
 8005fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fce:	e00a      	b.n	8005fe6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fd0:	f7fe f936 	bl	8004240 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e0c1      	b.n	800616a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fe6:	4b40      	ldr	r3, [pc, #256]	@ (80060e8 <HAL_RCC_OscConfig+0x4ac>)
 8005fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1ee      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ff2:	7dfb      	ldrb	r3, [r7, #23]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d105      	bne.n	8006004 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ff8:	4b3b      	ldr	r3, [pc, #236]	@ (80060e8 <HAL_RCC_OscConfig+0x4ac>)
 8005ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffc:	4a3a      	ldr	r2, [pc, #232]	@ (80060e8 <HAL_RCC_OscConfig+0x4ac>)
 8005ffe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006002:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	2b00      	cmp	r3, #0
 800600a:	f000 80ad 	beq.w	8006168 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800600e:	4b36      	ldr	r3, [pc, #216]	@ (80060e8 <HAL_RCC_OscConfig+0x4ac>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f003 030c 	and.w	r3, r3, #12
 8006016:	2b08      	cmp	r3, #8
 8006018:	d060      	beq.n	80060dc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	2b02      	cmp	r3, #2
 8006020:	d145      	bne.n	80060ae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006022:	4b33      	ldr	r3, [pc, #204]	@ (80060f0 <HAL_RCC_OscConfig+0x4b4>)
 8006024:	2200      	movs	r2, #0
 8006026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006028:	f7fe f90a 	bl	8004240 <HAL_GetTick>
 800602c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800602e:	e008      	b.n	8006042 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006030:	f7fe f906 	bl	8004240 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	2b02      	cmp	r3, #2
 800603c:	d901      	bls.n	8006042 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e093      	b.n	800616a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006042:	4b29      	ldr	r3, [pc, #164]	@ (80060e8 <HAL_RCC_OscConfig+0x4ac>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1f0      	bne.n	8006030 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	69da      	ldr	r2, [r3, #28]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	431a      	orrs	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800605c:	019b      	lsls	r3, r3, #6
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006064:	085b      	lsrs	r3, r3, #1
 8006066:	3b01      	subs	r3, #1
 8006068:	041b      	lsls	r3, r3, #16
 800606a:	431a      	orrs	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006070:	061b      	lsls	r3, r3, #24
 8006072:	431a      	orrs	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006078:	071b      	lsls	r3, r3, #28
 800607a:	491b      	ldr	r1, [pc, #108]	@ (80060e8 <HAL_RCC_OscConfig+0x4ac>)
 800607c:	4313      	orrs	r3, r2
 800607e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006080:	4b1b      	ldr	r3, [pc, #108]	@ (80060f0 <HAL_RCC_OscConfig+0x4b4>)
 8006082:	2201      	movs	r2, #1
 8006084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006086:	f7fe f8db 	bl	8004240 <HAL_GetTick>
 800608a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800608c:	e008      	b.n	80060a0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800608e:	f7fe f8d7 	bl	8004240 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	2b02      	cmp	r3, #2
 800609a:	d901      	bls.n	80060a0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e064      	b.n	800616a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060a0:	4b11      	ldr	r3, [pc, #68]	@ (80060e8 <HAL_RCC_OscConfig+0x4ac>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d0f0      	beq.n	800608e <HAL_RCC_OscConfig+0x452>
 80060ac:	e05c      	b.n	8006168 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ae:	4b10      	ldr	r3, [pc, #64]	@ (80060f0 <HAL_RCC_OscConfig+0x4b4>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b4:	f7fe f8c4 	bl	8004240 <HAL_GetTick>
 80060b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ba:	e008      	b.n	80060ce <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060bc:	f7fe f8c0 	bl	8004240 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e04d      	b.n	800616a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ce:	4b06      	ldr	r3, [pc, #24]	@ (80060e8 <HAL_RCC_OscConfig+0x4ac>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1f0      	bne.n	80060bc <HAL_RCC_OscConfig+0x480>
 80060da:	e045      	b.n	8006168 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d107      	bne.n	80060f4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e040      	b.n	800616a <HAL_RCC_OscConfig+0x52e>
 80060e8:	40023800 	.word	0x40023800
 80060ec:	40007000 	.word	0x40007000
 80060f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060f4:	4b1f      	ldr	r3, [pc, #124]	@ (8006174 <HAL_RCC_OscConfig+0x538>)
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d030      	beq.n	8006164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800610c:	429a      	cmp	r2, r3
 800610e:	d129      	bne.n	8006164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800611a:	429a      	cmp	r2, r3
 800611c:	d122      	bne.n	8006164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006124:	4013      	ands	r3, r2
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800612a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800612c:	4293      	cmp	r3, r2
 800612e:	d119      	bne.n	8006164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800613a:	085b      	lsrs	r3, r3, #1
 800613c:	3b01      	subs	r3, #1
 800613e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006140:	429a      	cmp	r2, r3
 8006142:	d10f      	bne.n	8006164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800614e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006150:	429a      	cmp	r2, r3
 8006152:	d107      	bne.n	8006164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800615e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006160:	429a      	cmp	r2, r3
 8006162:	d001      	beq.n	8006168 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e000      	b.n	800616a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	40023800 	.word	0x40023800

08006178 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e041      	b.n	800620e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d106      	bne.n	80061a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7fd fcfe 	bl	8003ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2202      	movs	r2, #2
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	3304      	adds	r3, #4
 80061b4:	4619      	mov	r1, r3
 80061b6:	4610      	mov	r0, r2
 80061b8:	f000 fad8 	bl	800676c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b082      	sub	sp, #8
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d101      	bne.n	8006228 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e041      	b.n	80062ac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b00      	cmp	r3, #0
 8006232:	d106      	bne.n	8006242 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 f839 	bl	80062b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2202      	movs	r2, #2
 8006246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	3304      	adds	r3, #4
 8006252:	4619      	mov	r1, r3
 8006254:	4610      	mov	r0, r2
 8006256:	f000 fa89 	bl	800676c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3708      	adds	r7, #8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d109      	bne.n	80062ec <HAL_TIM_PWM_Start+0x24>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	bf14      	ite	ne
 80062e4:	2301      	movne	r3, #1
 80062e6:	2300      	moveq	r3, #0
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	e022      	b.n	8006332 <HAL_TIM_PWM_Start+0x6a>
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	d109      	bne.n	8006306 <HAL_TIM_PWM_Start+0x3e>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	bf14      	ite	ne
 80062fe:	2301      	movne	r3, #1
 8006300:	2300      	moveq	r3, #0
 8006302:	b2db      	uxtb	r3, r3
 8006304:	e015      	b.n	8006332 <HAL_TIM_PWM_Start+0x6a>
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	2b08      	cmp	r3, #8
 800630a:	d109      	bne.n	8006320 <HAL_TIM_PWM_Start+0x58>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b01      	cmp	r3, #1
 8006316:	bf14      	ite	ne
 8006318:	2301      	movne	r3, #1
 800631a:	2300      	moveq	r3, #0
 800631c:	b2db      	uxtb	r3, r3
 800631e:	e008      	b.n	8006332 <HAL_TIM_PWM_Start+0x6a>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006326:	b2db      	uxtb	r3, r3
 8006328:	2b01      	cmp	r3, #1
 800632a:	bf14      	ite	ne
 800632c:	2301      	movne	r3, #1
 800632e:	2300      	moveq	r3, #0
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e07c      	b.n	8006434 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d104      	bne.n	800634a <HAL_TIM_PWM_Start+0x82>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006348:	e013      	b.n	8006372 <HAL_TIM_PWM_Start+0xaa>
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b04      	cmp	r3, #4
 800634e:	d104      	bne.n	800635a <HAL_TIM_PWM_Start+0x92>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2202      	movs	r2, #2
 8006354:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006358:	e00b      	b.n	8006372 <HAL_TIM_PWM_Start+0xaa>
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2b08      	cmp	r3, #8
 800635e:	d104      	bne.n	800636a <HAL_TIM_PWM_Start+0xa2>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2202      	movs	r2, #2
 8006364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006368:	e003      	b.n	8006372 <HAL_TIM_PWM_Start+0xaa>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2202      	movs	r2, #2
 800636e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2201      	movs	r2, #1
 8006378:	6839      	ldr	r1, [r7, #0]
 800637a:	4618      	mov	r0, r3
 800637c:	f000 fce6 	bl	8006d4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a2d      	ldr	r2, [pc, #180]	@ (800643c <HAL_TIM_PWM_Start+0x174>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d004      	beq.n	8006394 <HAL_TIM_PWM_Start+0xcc>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a2c      	ldr	r2, [pc, #176]	@ (8006440 <HAL_TIM_PWM_Start+0x178>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d101      	bne.n	8006398 <HAL_TIM_PWM_Start+0xd0>
 8006394:	2301      	movs	r3, #1
 8006396:	e000      	b.n	800639a <HAL_TIM_PWM_Start+0xd2>
 8006398:	2300      	movs	r3, #0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d007      	beq.n	80063ae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a22      	ldr	r2, [pc, #136]	@ (800643c <HAL_TIM_PWM_Start+0x174>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d022      	beq.n	80063fe <HAL_TIM_PWM_Start+0x136>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063c0:	d01d      	beq.n	80063fe <HAL_TIM_PWM_Start+0x136>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a1f      	ldr	r2, [pc, #124]	@ (8006444 <HAL_TIM_PWM_Start+0x17c>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d018      	beq.n	80063fe <HAL_TIM_PWM_Start+0x136>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006448 <HAL_TIM_PWM_Start+0x180>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d013      	beq.n	80063fe <HAL_TIM_PWM_Start+0x136>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a1c      	ldr	r2, [pc, #112]	@ (800644c <HAL_TIM_PWM_Start+0x184>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d00e      	beq.n	80063fe <HAL_TIM_PWM_Start+0x136>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a16      	ldr	r2, [pc, #88]	@ (8006440 <HAL_TIM_PWM_Start+0x178>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d009      	beq.n	80063fe <HAL_TIM_PWM_Start+0x136>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a18      	ldr	r2, [pc, #96]	@ (8006450 <HAL_TIM_PWM_Start+0x188>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d004      	beq.n	80063fe <HAL_TIM_PWM_Start+0x136>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a16      	ldr	r2, [pc, #88]	@ (8006454 <HAL_TIM_PWM_Start+0x18c>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d111      	bne.n	8006422 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f003 0307 	and.w	r3, r3, #7
 8006408:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2b06      	cmp	r3, #6
 800640e:	d010      	beq.n	8006432 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f042 0201 	orr.w	r2, r2, #1
 800641e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006420:	e007      	b.n	8006432 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f042 0201 	orr.w	r2, r2, #1
 8006430:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	40010000 	.word	0x40010000
 8006440:	40010400 	.word	0x40010400
 8006444:	40000400 	.word	0x40000400
 8006448:	40000800 	.word	0x40000800
 800644c:	40000c00 	.word	0x40000c00
 8006450:	40014000 	.word	0x40014000
 8006454:	40001800 	.word	0x40001800

08006458 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006464:	2300      	movs	r3, #0
 8006466:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800646e:	2b01      	cmp	r3, #1
 8006470:	d101      	bne.n	8006476 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006472:	2302      	movs	r3, #2
 8006474:	e0ae      	b.n	80065d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b0c      	cmp	r3, #12
 8006482:	f200 809f 	bhi.w	80065c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006486:	a201      	add	r2, pc, #4	@ (adr r2, 800648c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648c:	080064c1 	.word	0x080064c1
 8006490:	080065c5 	.word	0x080065c5
 8006494:	080065c5 	.word	0x080065c5
 8006498:	080065c5 	.word	0x080065c5
 800649c:	08006501 	.word	0x08006501
 80064a0:	080065c5 	.word	0x080065c5
 80064a4:	080065c5 	.word	0x080065c5
 80064a8:	080065c5 	.word	0x080065c5
 80064ac:	08006543 	.word	0x08006543
 80064b0:	080065c5 	.word	0x080065c5
 80064b4:	080065c5 	.word	0x080065c5
 80064b8:	080065c5 	.word	0x080065c5
 80064bc:	08006583 	.word	0x08006583
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68b9      	ldr	r1, [r7, #8]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 f9f6 	bl	80068b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	699a      	ldr	r2, [r3, #24]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f042 0208 	orr.w	r2, r2, #8
 80064da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	699a      	ldr	r2, [r3, #24]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 0204 	bic.w	r2, r2, #4
 80064ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6999      	ldr	r1, [r3, #24]
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	691a      	ldr	r2, [r3, #16]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	619a      	str	r2, [r3, #24]
      break;
 80064fe:	e064      	b.n	80065ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68b9      	ldr	r1, [r7, #8]
 8006506:	4618      	mov	r0, r3
 8006508:	f000 fa46 	bl	8006998 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	699a      	ldr	r2, [r3, #24]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800651a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	699a      	ldr	r2, [r3, #24]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800652a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6999      	ldr	r1, [r3, #24]
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	021a      	lsls	r2, r3, #8
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	619a      	str	r2, [r3, #24]
      break;
 8006540:	e043      	b.n	80065ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68b9      	ldr	r1, [r7, #8]
 8006548:	4618      	mov	r0, r3
 800654a:	f000 fa9b 	bl	8006a84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	69da      	ldr	r2, [r3, #28]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f042 0208 	orr.w	r2, r2, #8
 800655c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	69da      	ldr	r2, [r3, #28]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 0204 	bic.w	r2, r2, #4
 800656c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	69d9      	ldr	r1, [r3, #28]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	691a      	ldr	r2, [r3, #16]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	61da      	str	r2, [r3, #28]
      break;
 8006580:	e023      	b.n	80065ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68b9      	ldr	r1, [r7, #8]
 8006588:	4618      	mov	r0, r3
 800658a:	f000 faef 	bl	8006b6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	69da      	ldr	r2, [r3, #28]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800659c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69da      	ldr	r2, [r3, #28]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	69d9      	ldr	r1, [r3, #28]
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	021a      	lsls	r2, r3, #8
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	430a      	orrs	r2, r1
 80065c0:	61da      	str	r2, [r3, #28]
      break;
 80065c2:	e002      	b.n	80065ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	75fb      	strb	r3, [r7, #23]
      break;
 80065c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3718      	adds	r7, #24
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d101      	bne.n	80065f8 <HAL_TIM_ConfigClockSource+0x1c>
 80065f4:	2302      	movs	r3, #2
 80065f6:	e0b4      	b.n	8006762 <HAL_TIM_ConfigClockSource+0x186>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800661e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006630:	d03e      	beq.n	80066b0 <HAL_TIM_ConfigClockSource+0xd4>
 8006632:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006636:	f200 8087 	bhi.w	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 800663a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800663e:	f000 8086 	beq.w	800674e <HAL_TIM_ConfigClockSource+0x172>
 8006642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006646:	d87f      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006648:	2b70      	cmp	r3, #112	@ 0x70
 800664a:	d01a      	beq.n	8006682 <HAL_TIM_ConfigClockSource+0xa6>
 800664c:	2b70      	cmp	r3, #112	@ 0x70
 800664e:	d87b      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006650:	2b60      	cmp	r3, #96	@ 0x60
 8006652:	d050      	beq.n	80066f6 <HAL_TIM_ConfigClockSource+0x11a>
 8006654:	2b60      	cmp	r3, #96	@ 0x60
 8006656:	d877      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006658:	2b50      	cmp	r3, #80	@ 0x50
 800665a:	d03c      	beq.n	80066d6 <HAL_TIM_ConfigClockSource+0xfa>
 800665c:	2b50      	cmp	r3, #80	@ 0x50
 800665e:	d873      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006660:	2b40      	cmp	r3, #64	@ 0x40
 8006662:	d058      	beq.n	8006716 <HAL_TIM_ConfigClockSource+0x13a>
 8006664:	2b40      	cmp	r3, #64	@ 0x40
 8006666:	d86f      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006668:	2b30      	cmp	r3, #48	@ 0x30
 800666a:	d064      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15a>
 800666c:	2b30      	cmp	r3, #48	@ 0x30
 800666e:	d86b      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006670:	2b20      	cmp	r3, #32
 8006672:	d060      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15a>
 8006674:	2b20      	cmp	r3, #32
 8006676:	d867      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006678:	2b00      	cmp	r3, #0
 800667a:	d05c      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15a>
 800667c:	2b10      	cmp	r3, #16
 800667e:	d05a      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15a>
 8006680:	e062      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006692:	f000 fb3b 	bl	8006d0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80066a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	609a      	str	r2, [r3, #8]
      break;
 80066ae:	e04f      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066c0:	f000 fb24 	bl	8006d0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066d2:	609a      	str	r2, [r3, #8]
      break;
 80066d4:	e03c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066e2:	461a      	mov	r2, r3
 80066e4:	f000 fa98 	bl	8006c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2150      	movs	r1, #80	@ 0x50
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 faf1 	bl	8006cd6 <TIM_ITRx_SetConfig>
      break;
 80066f4:	e02c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006702:	461a      	mov	r2, r3
 8006704:	f000 fab7 	bl	8006c76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2160      	movs	r1, #96	@ 0x60
 800670e:	4618      	mov	r0, r3
 8006710:	f000 fae1 	bl	8006cd6 <TIM_ITRx_SetConfig>
      break;
 8006714:	e01c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006722:	461a      	mov	r2, r3
 8006724:	f000 fa78 	bl	8006c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2140      	movs	r1, #64	@ 0x40
 800672e:	4618      	mov	r0, r3
 8006730:	f000 fad1 	bl	8006cd6 <TIM_ITRx_SetConfig>
      break;
 8006734:	e00c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4619      	mov	r1, r3
 8006740:	4610      	mov	r0, r2
 8006742:	f000 fac8 	bl	8006cd6 <TIM_ITRx_SetConfig>
      break;
 8006746:	e003      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	73fb      	strb	r3, [r7, #15]
      break;
 800674c:	e000      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800674e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006760:	7bfb      	ldrb	r3, [r7, #15]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
	...

0800676c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a43      	ldr	r2, [pc, #268]	@ (800688c <TIM_Base_SetConfig+0x120>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d013      	beq.n	80067ac <TIM_Base_SetConfig+0x40>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800678a:	d00f      	beq.n	80067ac <TIM_Base_SetConfig+0x40>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a40      	ldr	r2, [pc, #256]	@ (8006890 <TIM_Base_SetConfig+0x124>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d00b      	beq.n	80067ac <TIM_Base_SetConfig+0x40>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a3f      	ldr	r2, [pc, #252]	@ (8006894 <TIM_Base_SetConfig+0x128>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d007      	beq.n	80067ac <TIM_Base_SetConfig+0x40>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a3e      	ldr	r2, [pc, #248]	@ (8006898 <TIM_Base_SetConfig+0x12c>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d003      	beq.n	80067ac <TIM_Base_SetConfig+0x40>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a3d      	ldr	r2, [pc, #244]	@ (800689c <TIM_Base_SetConfig+0x130>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d108      	bne.n	80067be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a32      	ldr	r2, [pc, #200]	@ (800688c <TIM_Base_SetConfig+0x120>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d02b      	beq.n	800681e <TIM_Base_SetConfig+0xb2>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067cc:	d027      	beq.n	800681e <TIM_Base_SetConfig+0xb2>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a2f      	ldr	r2, [pc, #188]	@ (8006890 <TIM_Base_SetConfig+0x124>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d023      	beq.n	800681e <TIM_Base_SetConfig+0xb2>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a2e      	ldr	r2, [pc, #184]	@ (8006894 <TIM_Base_SetConfig+0x128>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d01f      	beq.n	800681e <TIM_Base_SetConfig+0xb2>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a2d      	ldr	r2, [pc, #180]	@ (8006898 <TIM_Base_SetConfig+0x12c>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d01b      	beq.n	800681e <TIM_Base_SetConfig+0xb2>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a2c      	ldr	r2, [pc, #176]	@ (800689c <TIM_Base_SetConfig+0x130>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d017      	beq.n	800681e <TIM_Base_SetConfig+0xb2>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a2b      	ldr	r2, [pc, #172]	@ (80068a0 <TIM_Base_SetConfig+0x134>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d013      	beq.n	800681e <TIM_Base_SetConfig+0xb2>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a2a      	ldr	r2, [pc, #168]	@ (80068a4 <TIM_Base_SetConfig+0x138>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d00f      	beq.n	800681e <TIM_Base_SetConfig+0xb2>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a29      	ldr	r2, [pc, #164]	@ (80068a8 <TIM_Base_SetConfig+0x13c>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d00b      	beq.n	800681e <TIM_Base_SetConfig+0xb2>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a28      	ldr	r2, [pc, #160]	@ (80068ac <TIM_Base_SetConfig+0x140>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d007      	beq.n	800681e <TIM_Base_SetConfig+0xb2>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a27      	ldr	r2, [pc, #156]	@ (80068b0 <TIM_Base_SetConfig+0x144>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d003      	beq.n	800681e <TIM_Base_SetConfig+0xb2>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a26      	ldr	r2, [pc, #152]	@ (80068b4 <TIM_Base_SetConfig+0x148>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d108      	bne.n	8006830 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	4313      	orrs	r3, r2
 800682e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	4313      	orrs	r3, r2
 800683c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	689a      	ldr	r2, [r3, #8]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a0e      	ldr	r2, [pc, #56]	@ (800688c <TIM_Base_SetConfig+0x120>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d003      	beq.n	800685e <TIM_Base_SetConfig+0xf2>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a10      	ldr	r2, [pc, #64]	@ (800689c <TIM_Base_SetConfig+0x130>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d103      	bne.n	8006866 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	691a      	ldr	r2, [r3, #16]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f043 0204 	orr.w	r2, r3, #4
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	601a      	str	r2, [r3, #0]
}
 800687e:	bf00      	nop
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	40010000 	.word	0x40010000
 8006890:	40000400 	.word	0x40000400
 8006894:	40000800 	.word	0x40000800
 8006898:	40000c00 	.word	0x40000c00
 800689c:	40010400 	.word	0x40010400
 80068a0:	40014000 	.word	0x40014000
 80068a4:	40014400 	.word	0x40014400
 80068a8:	40014800 	.word	0x40014800
 80068ac:	40001800 	.word	0x40001800
 80068b0:	40001c00 	.word	0x40001c00
 80068b4:	40002000 	.word	0x40002000

080068b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b087      	sub	sp, #28
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a1b      	ldr	r3, [r3, #32]
 80068cc:	f023 0201 	bic.w	r2, r3, #1
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f023 0303 	bic.w	r3, r3, #3
 80068ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f023 0302 	bic.w	r3, r3, #2
 8006900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	4313      	orrs	r3, r2
 800690a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a20      	ldr	r2, [pc, #128]	@ (8006990 <TIM_OC1_SetConfig+0xd8>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d003      	beq.n	800691c <TIM_OC1_SetConfig+0x64>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a1f      	ldr	r2, [pc, #124]	@ (8006994 <TIM_OC1_SetConfig+0xdc>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d10c      	bne.n	8006936 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f023 0308 	bic.w	r3, r3, #8
 8006922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	4313      	orrs	r3, r2
 800692c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f023 0304 	bic.w	r3, r3, #4
 8006934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a15      	ldr	r2, [pc, #84]	@ (8006990 <TIM_OC1_SetConfig+0xd8>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d003      	beq.n	8006946 <TIM_OC1_SetConfig+0x8e>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a14      	ldr	r2, [pc, #80]	@ (8006994 <TIM_OC1_SetConfig+0xdc>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d111      	bne.n	800696a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800694c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	4313      	orrs	r3, r2
 800695e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	4313      	orrs	r3, r2
 8006968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	621a      	str	r2, [r3, #32]
}
 8006984:	bf00      	nop
 8006986:	371c      	adds	r7, #28
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	40010000 	.word	0x40010000
 8006994:	40010400 	.word	0x40010400

08006998 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006998:	b480      	push	{r7}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a1b      	ldr	r3, [r3, #32]
 80069ac:	f023 0210 	bic.w	r2, r3, #16
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	021b      	lsls	r3, r3, #8
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	4313      	orrs	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f023 0320 	bic.w	r3, r3, #32
 80069e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	011b      	lsls	r3, r3, #4
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a22      	ldr	r2, [pc, #136]	@ (8006a7c <TIM_OC2_SetConfig+0xe4>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d003      	beq.n	8006a00 <TIM_OC2_SetConfig+0x68>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a21      	ldr	r2, [pc, #132]	@ (8006a80 <TIM_OC2_SetConfig+0xe8>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d10d      	bne.n	8006a1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	011b      	lsls	r3, r3, #4
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a17      	ldr	r2, [pc, #92]	@ (8006a7c <TIM_OC2_SetConfig+0xe4>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d003      	beq.n	8006a2c <TIM_OC2_SetConfig+0x94>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a16      	ldr	r2, [pc, #88]	@ (8006a80 <TIM_OC2_SetConfig+0xe8>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d113      	bne.n	8006a54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	693a      	ldr	r2, [r7, #16]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	621a      	str	r2, [r3, #32]
}
 8006a6e:	bf00      	nop
 8006a70:	371c      	adds	r7, #28
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	40010000 	.word	0x40010000
 8006a80:	40010400 	.word	0x40010400

08006a84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a1b      	ldr	r3, [r3, #32]
 8006a98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 0303 	bic.w	r3, r3, #3
 8006aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	021b      	lsls	r3, r3, #8
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a21      	ldr	r2, [pc, #132]	@ (8006b64 <TIM_OC3_SetConfig+0xe0>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d003      	beq.n	8006aea <TIM_OC3_SetConfig+0x66>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a20      	ldr	r2, [pc, #128]	@ (8006b68 <TIM_OC3_SetConfig+0xe4>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d10d      	bne.n	8006b06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006af0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	021b      	lsls	r3, r3, #8
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a16      	ldr	r2, [pc, #88]	@ (8006b64 <TIM_OC3_SetConfig+0xe0>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d003      	beq.n	8006b16 <TIM_OC3_SetConfig+0x92>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a15      	ldr	r2, [pc, #84]	@ (8006b68 <TIM_OC3_SetConfig+0xe4>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d113      	bne.n	8006b3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	011b      	lsls	r3, r3, #4
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	011b      	lsls	r3, r3, #4
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	621a      	str	r2, [r3, #32]
}
 8006b58:	bf00      	nop
 8006b5a:	371c      	adds	r7, #28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	40010000 	.word	0x40010000
 8006b68:	40010400 	.word	0x40010400

08006b6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	021b      	lsls	r3, r3, #8
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006bb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	031b      	lsls	r3, r3, #12
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a12      	ldr	r2, [pc, #72]	@ (8006c10 <TIM_OC4_SetConfig+0xa4>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d003      	beq.n	8006bd4 <TIM_OC4_SetConfig+0x68>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a11      	ldr	r2, [pc, #68]	@ (8006c14 <TIM_OC4_SetConfig+0xa8>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d109      	bne.n	8006be8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	019b      	lsls	r3, r3, #6
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	621a      	str	r2, [r3, #32]
}
 8006c02:	bf00      	nop
 8006c04:	371c      	adds	r7, #28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	40010000 	.word	0x40010000
 8006c14:	40010400 	.word	0x40010400

08006c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	f023 0201 	bic.w	r2, r3, #1
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	011b      	lsls	r3, r3, #4
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f023 030a 	bic.w	r3, r3, #10
 8006c54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	621a      	str	r2, [r3, #32]
}
 8006c6a:	bf00      	nop
 8006c6c:	371c      	adds	r7, #28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b087      	sub	sp, #28
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	60f8      	str	r0, [r7, #12]
 8006c7e:	60b9      	str	r1, [r7, #8]
 8006c80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6a1b      	ldr	r3, [r3, #32]
 8006c8c:	f023 0210 	bic.w	r2, r3, #16
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ca0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	031b      	lsls	r3, r3, #12
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006cb2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	011b      	lsls	r3, r3, #4
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	621a      	str	r2, [r3, #32]
}
 8006cca:	bf00      	nop
 8006ccc:	371c      	adds	r7, #28
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b085      	sub	sp, #20
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	f043 0307 	orr.w	r3, r3, #7
 8006cf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	609a      	str	r2, [r3, #8]
}
 8006d00:	bf00      	nop
 8006d02:	3714      	adds	r7, #20
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b087      	sub	sp, #28
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
 8006d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	021a      	lsls	r2, r3, #8
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	431a      	orrs	r2, r3
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	697a      	ldr	r2, [r7, #20]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	609a      	str	r2, [r3, #8]
}
 8006d40:	bf00      	nop
 8006d42:	371c      	adds	r7, #28
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b087      	sub	sp, #28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	f003 031f 	and.w	r3, r3, #31
 8006d5e:	2201      	movs	r2, #1
 8006d60:	fa02 f303 	lsl.w	r3, r2, r3
 8006d64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6a1a      	ldr	r2, [r3, #32]
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	43db      	mvns	r3, r3
 8006d6e:	401a      	ands	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6a1a      	ldr	r2, [r3, #32]
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	f003 031f 	and.w	r3, r3, #31
 8006d7e:	6879      	ldr	r1, [r7, #4]
 8006d80:	fa01 f303 	lsl.w	r3, r1, r3
 8006d84:	431a      	orrs	r2, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	621a      	str	r2, [r3, #32]
}
 8006d8a:	bf00      	nop
 8006d8c:	371c      	adds	r7, #28
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
	...

08006d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d101      	bne.n	8006db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006dac:	2302      	movs	r3, #2
 8006dae:	e05a      	b.n	8006e66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a21      	ldr	r2, [pc, #132]	@ (8006e74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d022      	beq.n	8006e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dfc:	d01d      	beq.n	8006e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a1d      	ldr	r2, [pc, #116]	@ (8006e78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d018      	beq.n	8006e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a1b      	ldr	r2, [pc, #108]	@ (8006e7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d013      	beq.n	8006e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a1a      	ldr	r2, [pc, #104]	@ (8006e80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d00e      	beq.n	8006e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a18      	ldr	r2, [pc, #96]	@ (8006e84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d009      	beq.n	8006e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a17      	ldr	r2, [pc, #92]	@ (8006e88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d004      	beq.n	8006e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a15      	ldr	r2, [pc, #84]	@ (8006e8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d10c      	bne.n	8006e54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	40010000 	.word	0x40010000
 8006e78:	40000400 	.word	0x40000400
 8006e7c:	40000800 	.word	0x40000800
 8006e80:	40000c00 	.word	0x40000c00
 8006e84:	40010400 	.word	0x40010400
 8006e88:	40014000 	.word	0x40014000
 8006e8c:	40001800 	.word	0x40001800

08006e90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e042      	b.n	8006f28 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d106      	bne.n	8006ebc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7fc ff76 	bl	8003da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2224      	movs	r2, #36	@ 0x24
 8006ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68da      	ldr	r2, [r3, #12]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ed2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f001 f96b 	bl	80081b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	691a      	ldr	r2, [r3, #16]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ee8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	695a      	ldr	r2, [r3, #20]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ef8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68da      	ldr	r2, [r3, #12]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2220      	movs	r2, #32
 8006f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2220      	movs	r2, #32
 8006f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3708      	adds	r7, #8
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b08a      	sub	sp, #40	@ 0x28
 8006f34:	af02      	add	r7, sp, #8
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	603b      	str	r3, [r7, #0]
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f40:	2300      	movs	r3, #0
 8006f42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b20      	cmp	r3, #32
 8006f4e:	d175      	bne.n	800703c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d002      	beq.n	8006f5c <HAL_UART_Transmit+0x2c>
 8006f56:	88fb      	ldrh	r3, [r7, #6]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e06e      	b.n	800703e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2221      	movs	r2, #33	@ 0x21
 8006f6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f6e:	f7fd f967 	bl	8004240 <HAL_GetTick>
 8006f72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	88fa      	ldrh	r2, [r7, #6]
 8006f78:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	88fa      	ldrh	r2, [r7, #6]
 8006f7e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f88:	d108      	bne.n	8006f9c <HAL_UART_Transmit+0x6c>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d104      	bne.n	8006f9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006f92:	2300      	movs	r3, #0
 8006f94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	61bb      	str	r3, [r7, #24]
 8006f9a:	e003      	b.n	8006fa4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006fa4:	e02e      	b.n	8007004 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	2200      	movs	r2, #0
 8006fae:	2180      	movs	r1, #128	@ 0x80
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 fda1 	bl	8007af8 <UART_WaitOnFlagUntilTimeout>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d005      	beq.n	8006fc8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e03a      	b.n	800703e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10b      	bne.n	8006fe6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	881b      	ldrh	r3, [r3, #0]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	3302      	adds	r3, #2
 8006fe2:	61bb      	str	r3, [r7, #24]
 8006fe4:	e007      	b.n	8006ff6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	781a      	ldrb	r2, [r3, #0]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007008:	b29b      	uxth	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1cb      	bne.n	8006fa6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	2200      	movs	r2, #0
 8007016:	2140      	movs	r1, #64	@ 0x40
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f000 fd6d 	bl	8007af8 <UART_WaitOnFlagUntilTimeout>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d005      	beq.n	8007030 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2220      	movs	r2, #32
 8007028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e006      	b.n	800703e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2220      	movs	r2, #32
 8007034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007038:	2300      	movs	r3, #0
 800703a:	e000      	b.n	800703e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800703c:	2302      	movs	r3, #2
  }
}
 800703e:	4618      	mov	r0, r3
 8007040:	3720      	adds	r7, #32
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b084      	sub	sp, #16
 800704a:	af00      	add	r7, sp, #0
 800704c:	60f8      	str	r0, [r7, #12]
 800704e:	60b9      	str	r1, [r7, #8]
 8007050:	4613      	mov	r3, r2
 8007052:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800705a:	b2db      	uxtb	r3, r3
 800705c:	2b20      	cmp	r3, #32
 800705e:	d112      	bne.n	8007086 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d002      	beq.n	800706c <HAL_UART_Receive_IT+0x26>
 8007066:	88fb      	ldrh	r3, [r7, #6]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e00b      	b.n	8007088 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007076:	88fb      	ldrh	r3, [r7, #6]
 8007078:	461a      	mov	r2, r3
 800707a:	68b9      	ldr	r1, [r7, #8]
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f000 fd94 	bl	8007baa <UART_Start_Receive_IT>
 8007082:	4603      	mov	r3, r0
 8007084:	e000      	b.n	8007088 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007086:	2302      	movs	r3, #2
  }
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	4613      	mov	r3, r2
 800709c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b20      	cmp	r3, #32
 80070a8:	d112      	bne.n	80070d0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <HAL_UART_Receive_DMA+0x26>
 80070b0:	88fb      	ldrh	r3, [r7, #6]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e00b      	b.n	80070d2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80070c0:	88fb      	ldrh	r3, [r7, #6]
 80070c2:	461a      	mov	r2, r3
 80070c4:	68b9      	ldr	r1, [r7, #8]
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f000 fdaa 	bl	8007c20 <UART_Start_Receive_DMA>
 80070cc:	4603      	mov	r3, r0
 80070ce:	e000      	b.n	80070d2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80070d0:	2302      	movs	r3, #2
  }
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
	...

080070dc <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b0a2      	sub	sp, #136	@ 0x88
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 80070e4:	2301      	movs	r3, #1
 80070e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	330c      	adds	r3, #12
 80070f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070f4:	e853 3f00 	ldrex	r3, [r3]
 80070f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80070fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070fc:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8007100:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	330c      	adds	r3, #12
 800710a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800710e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007110:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007112:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007114:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007116:	e841 2300 	strex	r3, r2, [r1]
 800711a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800711c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1e3      	bne.n	80070ea <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3314      	adds	r3, #20
 8007128:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800712c:	e853 3f00 	ldrex	r3, [r3]
 8007130:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007132:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007134:	f023 0301 	bic.w	r3, r3, #1
 8007138:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	3314      	adds	r3, #20
 8007140:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007142:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007144:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007146:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007148:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800714a:	e841 2300 	strex	r3, r2, [r1]
 800714e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007150:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1e5      	bne.n	8007122 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800715a:	2b01      	cmp	r3, #1
 800715c:	d119      	bne.n	8007192 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	330c      	adds	r3, #12
 8007164:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007168:	e853 3f00 	ldrex	r3, [r3]
 800716c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800716e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007170:	f023 0310 	bic.w	r3, r3, #16
 8007174:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	330c      	adds	r3, #12
 800717c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800717e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007180:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007182:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007184:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007186:	e841 2300 	strex	r3, r2, [r1]
 800718a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800718c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1e5      	bne.n	800715e <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00f      	beq.n	80071ba <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071a4:	2b80      	cmp	r3, #128	@ 0x80
 80071a6:	d104      	bne.n	80071b2 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ac:	4a53      	ldr	r2, [pc, #332]	@ (80072fc <HAL_UART_Abort_IT+0x220>)
 80071ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80071b0:	e003      	b.n	80071ba <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b6:	2200      	movs	r2, #0
 80071b8:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00f      	beq.n	80071e2 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071cc:	2b40      	cmp	r3, #64	@ 0x40
 80071ce:	d104      	bne.n	80071da <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071d4:	4a4a      	ldr	r2, [pc, #296]	@ (8007300 <HAL_UART_Abort_IT+0x224>)
 80071d6:	651a      	str	r2, [r3, #80]	@ 0x50
 80071d8:	e003      	b.n	80071e2 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071de:	2200      	movs	r2, #0
 80071e0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071ec:	2b80      	cmp	r3, #128	@ 0x80
 80071ee:	d12d      	bne.n	800724c <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	3314      	adds	r3, #20
 80071f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fa:	e853 3f00 	ldrex	r3, [r3]
 80071fe:	623b      	str	r3, [r7, #32]
   return(result);
 8007200:	6a3b      	ldr	r3, [r7, #32]
 8007202:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007206:	677b      	str	r3, [r7, #116]	@ 0x74
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	3314      	adds	r3, #20
 800720e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007210:	633a      	str	r2, [r7, #48]	@ 0x30
 8007212:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007214:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007216:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007218:	e841 2300 	strex	r3, r2, [r1]
 800721c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800721e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1e5      	bne.n	80071f0 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00f      	beq.n	800724c <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007230:	4618      	mov	r0, r3
 8007232:	f7fd fd2f 	bl	8004c94 <HAL_DMA_Abort_IT>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d004      	beq.n	8007246 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007240:	2200      	movs	r2, #0
 8007242:	651a      	str	r2, [r3, #80]	@ 0x50
 8007244:	e002      	b.n	800724c <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8007246:	2300      	movs	r3, #0
 8007248:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007256:	2b40      	cmp	r3, #64	@ 0x40
 8007258:	d130      	bne.n	80072bc <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3314      	adds	r3, #20
 8007260:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	e853 3f00 	ldrex	r3, [r3]
 8007268:	60fb      	str	r3, [r7, #12]
   return(result);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007270:	673b      	str	r3, [r7, #112]	@ 0x70
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	3314      	adds	r3, #20
 8007278:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800727a:	61fa      	str	r2, [r7, #28]
 800727c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727e:	69b9      	ldr	r1, [r7, #24]
 8007280:	69fa      	ldr	r2, [r7, #28]
 8007282:	e841 2300 	strex	r3, r2, [r1]
 8007286:	617b      	str	r3, [r7, #20]
   return(result);
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1e5      	bne.n	800725a <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007292:	2b00      	cmp	r3, #0
 8007294:	d012      	beq.n	80072bc <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800729a:	4618      	mov	r0, r3
 800729c:	f7fd fcfa 	bl	8004c94 <HAL_DMA_Abort_IT>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d007      	beq.n	80072b6 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072aa:	2200      	movs	r2, #0
 80072ac:	651a      	str	r2, [r3, #80]	@ 0x50
        AbortCplt = 0x01U;
 80072ae:	2301      	movs	r3, #1
 80072b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80072b4:	e002      	b.n	80072bc <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 80072b6:	2300      	movs	r3, #0
 80072b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 80072bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d116      	bne.n	80072f2 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	84da      	strh	r2, [r3, #38]	@ 0x26
    huart->RxXferCount = 0x00U;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2220      	movs	r2, #32
 80072da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    huart->RxState = HAL_UART_STATE_READY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2220      	movs	r2, #32
 80072e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fad1 	bl	8007894 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3788      	adds	r7, #136	@ 0x88
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	08007ea5 	.word	0x08007ea5
 8007300:	08007f05 	.word	0x08007f05

08007304 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b0ba      	sub	sp, #232	@ 0xe8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800732a:	2300      	movs	r3, #0
 800732c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007330:	2300      	movs	r3, #0
 8007332:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800733a:	f003 030f 	and.w	r3, r3, #15
 800733e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007342:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10f      	bne.n	800736a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800734a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800734e:	f003 0320 	and.w	r3, r3, #32
 8007352:	2b00      	cmp	r3, #0
 8007354:	d009      	beq.n	800736a <HAL_UART_IRQHandler+0x66>
 8007356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800735a:	f003 0320 	and.w	r3, r3, #32
 800735e:	2b00      	cmp	r3, #0
 8007360:	d003      	beq.n	800736a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fe66 	bl	8008034 <UART_Receive_IT>
      return;
 8007368:	e273      	b.n	8007852 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800736a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800736e:	2b00      	cmp	r3, #0
 8007370:	f000 80de 	beq.w	8007530 <HAL_UART_IRQHandler+0x22c>
 8007374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	2b00      	cmp	r3, #0
 800737e:	d106      	bne.n	800738e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007384:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007388:	2b00      	cmp	r3, #0
 800738a:	f000 80d1 	beq.w	8007530 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800738e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00b      	beq.n	80073b2 <HAL_UART_IRQHandler+0xae>
 800739a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800739e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d005      	beq.n	80073b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073aa:	f043 0201 	orr.w	r2, r3, #1
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073b6:	f003 0304 	and.w	r3, r3, #4
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00b      	beq.n	80073d6 <HAL_UART_IRQHandler+0xd2>
 80073be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073c2:	f003 0301 	and.w	r3, r3, #1
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d005      	beq.n	80073d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073ce:	f043 0202 	orr.w	r2, r3, #2
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073da:	f003 0302 	and.w	r3, r3, #2
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00b      	beq.n	80073fa <HAL_UART_IRQHandler+0xf6>
 80073e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d005      	beq.n	80073fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073f2:	f043 0204 	orr.w	r2, r3, #4
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80073fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073fe:	f003 0308 	and.w	r3, r3, #8
 8007402:	2b00      	cmp	r3, #0
 8007404:	d011      	beq.n	800742a <HAL_UART_IRQHandler+0x126>
 8007406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800740a:	f003 0320 	and.w	r3, r3, #32
 800740e:	2b00      	cmp	r3, #0
 8007410:	d105      	bne.n	800741e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007412:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	2b00      	cmp	r3, #0
 800741c:	d005      	beq.n	800742a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007422:	f043 0208 	orr.w	r2, r3, #8
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800742e:	2b00      	cmp	r3, #0
 8007430:	f000 820a 	beq.w	8007848 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007438:	f003 0320 	and.w	r3, r3, #32
 800743c:	2b00      	cmp	r3, #0
 800743e:	d008      	beq.n	8007452 <HAL_UART_IRQHandler+0x14e>
 8007440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007444:	f003 0320 	and.w	r3, r3, #32
 8007448:	2b00      	cmp	r3, #0
 800744a:	d002      	beq.n	8007452 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fdf1 	bl	8008034 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	695b      	ldr	r3, [r3, #20]
 8007458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800745c:	2b40      	cmp	r3, #64	@ 0x40
 800745e:	bf0c      	ite	eq
 8007460:	2301      	moveq	r3, #1
 8007462:	2300      	movne	r3, #0
 8007464:	b2db      	uxtb	r3, r3
 8007466:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800746e:	f003 0308 	and.w	r3, r3, #8
 8007472:	2b00      	cmp	r3, #0
 8007474:	d103      	bne.n	800747e <HAL_UART_IRQHandler+0x17a>
 8007476:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800747a:	2b00      	cmp	r3, #0
 800747c:	d04f      	beq.n	800751e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fc9c 	bl	8007dbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800748e:	2b40      	cmp	r3, #64	@ 0x40
 8007490:	d141      	bne.n	8007516 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	3314      	adds	r3, #20
 8007498:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80074a0:	e853 3f00 	ldrex	r3, [r3]
 80074a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80074a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	3314      	adds	r3, #20
 80074ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80074be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80074c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80074ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80074ce:	e841 2300 	strex	r3, r2, [r1]
 80074d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80074d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1d9      	bne.n	8007492 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d013      	beq.n	800750e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ea:	4a8a      	ldr	r2, [pc, #552]	@ (8007714 <HAL_UART_IRQHandler+0x410>)
 80074ec:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fd fbce 	bl	8004c94 <HAL_DMA_Abort_IT>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d016      	beq.n	800752c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007508:	4610      	mov	r0, r2
 800750a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800750c:	e00e      	b.n	800752c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f9b6 	bl	8007880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007514:	e00a      	b.n	800752c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 f9b2 	bl	8007880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800751c:	e006      	b.n	800752c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f9ae 	bl	8007880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800752a:	e18d      	b.n	8007848 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800752c:	bf00      	nop
    return;
 800752e:	e18b      	b.n	8007848 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007534:	2b01      	cmp	r3, #1
 8007536:	f040 8167 	bne.w	8007808 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800753a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800753e:	f003 0310 	and.w	r3, r3, #16
 8007542:	2b00      	cmp	r3, #0
 8007544:	f000 8160 	beq.w	8007808 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800754c:	f003 0310 	and.w	r3, r3, #16
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 8159 	beq.w	8007808 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007556:	2300      	movs	r3, #0
 8007558:	60bb      	str	r3, [r7, #8]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	60bb      	str	r3, [r7, #8]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	60bb      	str	r3, [r7, #8]
 800756a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007576:	2b40      	cmp	r3, #64	@ 0x40
 8007578:	f040 80ce 	bne.w	8007718 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007588:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 80a9 	beq.w	80076e4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007596:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800759a:	429a      	cmp	r2, r3
 800759c:	f080 80a2 	bcs.w	80076e4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80075a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ac:	69db      	ldr	r3, [r3, #28]
 80075ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075b2:	f000 8088 	beq.w	80076c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	330c      	adds	r3, #12
 80075bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80075c4:	e853 3f00 	ldrex	r3, [r3]
 80075c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80075cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80075d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	330c      	adds	r3, #12
 80075de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80075e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80075e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80075ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80075f2:	e841 2300 	strex	r3, r2, [r1]
 80075f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80075fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1d9      	bne.n	80075b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	3314      	adds	r3, #20
 8007608:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800760c:	e853 3f00 	ldrex	r3, [r3]
 8007610:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007612:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007614:	f023 0301 	bic.w	r3, r3, #1
 8007618:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3314      	adds	r3, #20
 8007622:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007626:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800762a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800762e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007632:	e841 2300 	strex	r3, r2, [r1]
 8007636:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007638:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1e1      	bne.n	8007602 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	3314      	adds	r3, #20
 8007644:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007646:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007648:	e853 3f00 	ldrex	r3, [r3]
 800764c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800764e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007650:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007654:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	3314      	adds	r3, #20
 800765e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007662:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007664:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007666:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007668:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800766a:	e841 2300 	strex	r3, r2, [r1]
 800766e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007670:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1e3      	bne.n	800763e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2220      	movs	r2, #32
 800767a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	330c      	adds	r3, #12
 800768a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800768e:	e853 3f00 	ldrex	r3, [r3]
 8007692:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007694:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007696:	f023 0310 	bic.w	r3, r3, #16
 800769a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	330c      	adds	r3, #12
 80076a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80076a8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80076aa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80076ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80076b0:	e841 2300 	strex	r3, r2, [r1]
 80076b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80076b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1e3      	bne.n	8007684 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7fd fa77 	bl	8004bb4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2202      	movs	r2, #2
 80076ca:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	1ad3      	subs	r3, r2, r3
 80076d8:	b29b      	uxth	r3, r3
 80076da:	4619      	mov	r1, r3
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f8e3 	bl	80078a8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80076e2:	e0b3      	b.n	800784c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80076e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80076ec:	429a      	cmp	r2, r3
 80076ee:	f040 80ad 	bne.w	800784c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076f6:	69db      	ldr	r3, [r3, #28]
 80076f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076fc:	f040 80a6 	bne.w	800784c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2202      	movs	r2, #2
 8007704:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800770a:	4619      	mov	r1, r3
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 f8cb 	bl	80078a8 <HAL_UARTEx_RxEventCallback>
      return;
 8007712:	e09b      	b.n	800784c <HAL_UART_IRQHandler+0x548>
 8007714:	08007e83 	.word	0x08007e83
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007720:	b29b      	uxth	r3, r3
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800772c:	b29b      	uxth	r3, r3
 800772e:	2b00      	cmp	r3, #0
 8007730:	f000 808e 	beq.w	8007850 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007734:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 8089 	beq.w	8007850 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	330c      	adds	r3, #12
 8007744:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007748:	e853 3f00 	ldrex	r3, [r3]
 800774c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800774e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007750:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007754:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	330c      	adds	r3, #12
 800775e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007762:	647a      	str	r2, [r7, #68]	@ 0x44
 8007764:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007766:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007768:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800776a:	e841 2300 	strex	r3, r2, [r1]
 800776e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1e3      	bne.n	800773e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	3314      	adds	r3, #20
 800777c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007780:	e853 3f00 	ldrex	r3, [r3]
 8007784:	623b      	str	r3, [r7, #32]
   return(result);
 8007786:	6a3b      	ldr	r3, [r7, #32]
 8007788:	f023 0301 	bic.w	r3, r3, #1
 800778c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	3314      	adds	r3, #20
 8007796:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800779a:	633a      	str	r2, [r7, #48]	@ 0x30
 800779c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077a2:	e841 2300 	strex	r3, r2, [r1]
 80077a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1e3      	bne.n	8007776 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2220      	movs	r2, #32
 80077b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	330c      	adds	r3, #12
 80077c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	e853 3f00 	ldrex	r3, [r3]
 80077ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f023 0310 	bic.w	r3, r3, #16
 80077d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	330c      	adds	r3, #12
 80077dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80077e0:	61fa      	str	r2, [r7, #28]
 80077e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e4:	69b9      	ldr	r1, [r7, #24]
 80077e6:	69fa      	ldr	r2, [r7, #28]
 80077e8:	e841 2300 	strex	r3, r2, [r1]
 80077ec:	617b      	str	r3, [r7, #20]
   return(result);
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1e3      	bne.n	80077bc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2202      	movs	r2, #2
 80077f8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80077fe:	4619      	mov	r1, r3
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 f851 	bl	80078a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007806:	e023      	b.n	8007850 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800780c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007810:	2b00      	cmp	r3, #0
 8007812:	d009      	beq.n	8007828 <HAL_UART_IRQHandler+0x524>
 8007814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800781c:	2b00      	cmp	r3, #0
 800781e:	d003      	beq.n	8007828 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fb9f 	bl	8007f64 <UART_Transmit_IT>
    return;
 8007826:	e014      	b.n	8007852 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800782c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00e      	beq.n	8007852 <HAL_UART_IRQHandler+0x54e>
 8007834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800783c:	2b00      	cmp	r3, #0
 800783e:	d008      	beq.n	8007852 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fbdf 	bl	8008004 <UART_EndTransmit_IT>
    return;
 8007846:	e004      	b.n	8007852 <HAL_UART_IRQHandler+0x54e>
    return;
 8007848:	bf00      	nop
 800784a:	e002      	b.n	8007852 <HAL_UART_IRQHandler+0x54e>
      return;
 800784c:	bf00      	nop
 800784e:	e000      	b.n	8007852 <HAL_UART_IRQHandler+0x54e>
      return;
 8007850:	bf00      	nop
  }
}
 8007852:	37e8      	adds	r7, #232	@ 0xe8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	460b      	mov	r3, r1
 80078b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 80078c8:	2300      	movs	r3, #0
 80078ca:	60fb      	str	r3, [r7, #12]
 80078cc:	2300      	movs	r3, #0
 80078ce:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	4313      	orrs	r3, r2
 80078ee:	b2db      	uxtb	r3, r3
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b09c      	sub	sp, #112	@ 0x70
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007908:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007914:	2b00      	cmp	r3, #0
 8007916:	d172      	bne.n	80079fe <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007918:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800791a:	2200      	movs	r2, #0
 800791c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800791e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	330c      	adds	r3, #12
 8007924:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007926:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007928:	e853 3f00 	ldrex	r3, [r3]
 800792c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800792e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007930:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007934:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007936:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	330c      	adds	r3, #12
 800793c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800793e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007940:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007942:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007944:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007946:	e841 2300 	strex	r3, r2, [r1]
 800794a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800794c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1e5      	bne.n	800791e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007952:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	3314      	adds	r3, #20
 8007958:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800795c:	e853 3f00 	ldrex	r3, [r3]
 8007960:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007964:	f023 0301 	bic.w	r3, r3, #1
 8007968:	667b      	str	r3, [r7, #100]	@ 0x64
 800796a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3314      	adds	r3, #20
 8007970:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007972:	647a      	str	r2, [r7, #68]	@ 0x44
 8007974:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007976:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007978:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800797a:	e841 2300 	strex	r3, r2, [r1]
 800797e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1e5      	bne.n	8007952 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007986:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3314      	adds	r3, #20
 800798c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007990:	e853 3f00 	ldrex	r3, [r3]
 8007994:	623b      	str	r3, [r7, #32]
   return(result);
 8007996:	6a3b      	ldr	r3, [r7, #32]
 8007998:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800799c:	663b      	str	r3, [r7, #96]	@ 0x60
 800799e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	3314      	adds	r3, #20
 80079a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80079a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80079a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079ae:	e841 2300 	strex	r3, r2, [r1]
 80079b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1e5      	bne.n	8007986 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80079ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079bc:	2220      	movs	r2, #32
 80079be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d119      	bne.n	80079fe <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	330c      	adds	r3, #12
 80079d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	e853 3f00 	ldrex	r3, [r3]
 80079d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f023 0310 	bic.w	r3, r3, #16
 80079e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	330c      	adds	r3, #12
 80079e8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80079ea:	61fa      	str	r2, [r7, #28]
 80079ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ee:	69b9      	ldr	r1, [r7, #24]
 80079f0:	69fa      	ldr	r2, [r7, #28]
 80079f2:	e841 2300 	strex	r3, r2, [r1]
 80079f6:	617b      	str	r3, [r7, #20]
   return(result);
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1e5      	bne.n	80079ca <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a00:	2200      	movs	r2, #0
 8007a02:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d106      	bne.n	8007a1a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a0e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007a10:	4619      	mov	r1, r3
 8007a12:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007a14:	f7ff ff48 	bl	80078a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a18:	e002      	b.n	8007a20 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007a1a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007a1c:	f7fa fba4 	bl	8002168 <HAL_UART_RxCpltCallback>
}
 8007a20:	bf00      	nop
 8007a22:	3770      	adds	r7, #112	@ 0x70
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a34:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d108      	bne.n	8007a56 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007a48:	085b      	lsrs	r3, r3, #1
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f7ff ff2a 	bl	80078a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a54:	e002      	b.n	8007a5c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f7ff ff08 	bl	800786c <HAL_UART_RxHalfCpltCallback>
}
 8007a5c:	bf00      	nop
 8007a5e:	3710      	adds	r7, #16
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a74:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a80:	2b80      	cmp	r3, #128	@ 0x80
 8007a82:	bf0c      	ite	eq
 8007a84:	2301      	moveq	r3, #1
 8007a86:	2300      	movne	r3, #0
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	2b21      	cmp	r3, #33	@ 0x21
 8007a96:	d108      	bne.n	8007aaa <UART_DMAError+0x46>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d005      	beq.n	8007aaa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007aa4:	68b8      	ldr	r0, [r7, #8]
 8007aa6:	f000 f961 	bl	8007d6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	695b      	ldr	r3, [r3, #20]
 8007ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ab4:	2b40      	cmp	r3, #64	@ 0x40
 8007ab6:	bf0c      	ite	eq
 8007ab8:	2301      	moveq	r3, #1
 8007aba:	2300      	movne	r3, #0
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	2b22      	cmp	r3, #34	@ 0x22
 8007aca:	d108      	bne.n	8007ade <UART_DMAError+0x7a>
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d005      	beq.n	8007ade <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007ad8:	68b8      	ldr	r0, [r7, #8]
 8007ada:	f000 f96f 	bl	8007dbc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ae2:	f043 0210 	orr.w	r2, r3, #16
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007aea:	68b8      	ldr	r0, [r7, #8]
 8007aec:	f7ff fec8 	bl	8007880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007af0:	bf00      	nop
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b086      	sub	sp, #24
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	603b      	str	r3, [r7, #0]
 8007b04:	4613      	mov	r3, r2
 8007b06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b08:	e03b      	b.n	8007b82 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b0a:	6a3b      	ldr	r3, [r7, #32]
 8007b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b10:	d037      	beq.n	8007b82 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b12:	f7fc fb95 	bl	8004240 <HAL_GetTick>
 8007b16:	4602      	mov	r2, r0
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	6a3a      	ldr	r2, [r7, #32]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d302      	bcc.n	8007b28 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b22:	6a3b      	ldr	r3, [r7, #32]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d101      	bne.n	8007b2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e03a      	b.n	8007ba2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	f003 0304 	and.w	r3, r3, #4
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d023      	beq.n	8007b82 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	2b80      	cmp	r3, #128	@ 0x80
 8007b3e:	d020      	beq.n	8007b82 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	2b40      	cmp	r3, #64	@ 0x40
 8007b44:	d01d      	beq.n	8007b82 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 0308 	and.w	r3, r3, #8
 8007b50:	2b08      	cmp	r3, #8
 8007b52:	d116      	bne.n	8007b82 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007b54:	2300      	movs	r3, #0
 8007b56:	617b      	str	r3, [r7, #20]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	617b      	str	r3, [r7, #20]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	617b      	str	r3, [r7, #20]
 8007b68:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f000 f926 	bl	8007dbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2208      	movs	r2, #8
 8007b74:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e00f      	b.n	8007ba2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	bf0c      	ite	eq
 8007b92:	2301      	moveq	r3, #1
 8007b94:	2300      	movne	r3, #0
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	461a      	mov	r2, r3
 8007b9a:	79fb      	ldrb	r3, [r7, #7]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d0b4      	beq.n	8007b0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3718      	adds	r7, #24
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b085      	sub	sp, #20
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	60f8      	str	r0, [r7, #12]
 8007bb2:	60b9      	str	r1, [r7, #8]
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	88fa      	ldrh	r2, [r7, #6]
 8007bc2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	88fa      	ldrh	r2, [r7, #6]
 8007bc8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2222      	movs	r2, #34	@ 0x22
 8007bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d007      	beq.n	8007bf0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68da      	ldr	r2, [r3, #12]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007bee:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	695a      	ldr	r2, [r3, #20]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f042 0201 	orr.w	r2, r2, #1
 8007bfe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68da      	ldr	r2, [r3, #12]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f042 0220 	orr.w	r2, r2, #32
 8007c0e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3714      	adds	r7, #20
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
	...

08007c20 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b098      	sub	sp, #96	@ 0x60
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	88fa      	ldrh	r2, [r7, #6]
 8007c38:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2222      	movs	r2, #34	@ 0x22
 8007c44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c4c:	4a44      	ldr	r2, [pc, #272]	@ (8007d60 <UART_Start_Receive_DMA+0x140>)
 8007c4e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c54:	4a43      	ldr	r2, [pc, #268]	@ (8007d64 <UART_Start_Receive_DMA+0x144>)
 8007c56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c5c:	4a42      	ldr	r2, [pc, #264]	@ (8007d68 <UART_Start_Receive_DMA+0x148>)
 8007c5e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c64:	2200      	movs	r2, #0
 8007c66:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007c68:	f107 0308 	add.w	r3, r7, #8
 8007c6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	3304      	adds	r3, #4
 8007c78:	4619      	mov	r1, r3
 8007c7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	88fb      	ldrh	r3, [r7, #6]
 8007c80:	f7fc ff40 	bl	8004b04 <HAL_DMA_Start_IT>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d008      	beq.n	8007c9c <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2210      	movs	r2, #16
 8007c8e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2220      	movs	r2, #32
 8007c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e05d      	b.n	8007d58 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	613b      	str	r3, [r7, #16]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	613b      	str	r3, [r7, #16]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	613b      	str	r3, [r7, #16]
 8007cb0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d019      	beq.n	8007cee <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	330c      	adds	r3, #12
 8007cc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cc4:	e853 3f00 	ldrex	r3, [r3]
 8007cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cd0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	330c      	adds	r3, #12
 8007cd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007cda:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cde:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007ce0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007ce2:	e841 2300 	strex	r3, r2, [r1]
 8007ce6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1e5      	bne.n	8007cba <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	3314      	adds	r3, #20
 8007cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cf8:	e853 3f00 	ldrex	r3, [r3]
 8007cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d00:	f043 0301 	orr.w	r3, r3, #1
 8007d04:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	3314      	adds	r3, #20
 8007d0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007d0e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007d10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d12:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007d14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d16:	e841 2300 	strex	r3, r2, [r1]
 8007d1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1e5      	bne.n	8007cee <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	3314      	adds	r3, #20
 8007d28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	e853 3f00 	ldrex	r3, [r3]
 8007d30:	617b      	str	r3, [r7, #20]
   return(result);
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d38:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3314      	adds	r3, #20
 8007d40:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007d42:	627a      	str	r2, [r7, #36]	@ 0x24
 8007d44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d46:	6a39      	ldr	r1, [r7, #32]
 8007d48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d4a:	e841 2300 	strex	r3, r2, [r1]
 8007d4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1e5      	bne.n	8007d22 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3760      	adds	r7, #96	@ 0x60
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	080078fd 	.word	0x080078fd
 8007d64:	08007a29 	.word	0x08007a29
 8007d68:	08007a65 	.word	0x08007a65

08007d6c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b089      	sub	sp, #36	@ 0x24
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	330c      	adds	r3, #12
 8007d7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	e853 3f00 	ldrex	r3, [r3]
 8007d82:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007d8a:	61fb      	str	r3, [r7, #28]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	330c      	adds	r3, #12
 8007d92:	69fa      	ldr	r2, [r7, #28]
 8007d94:	61ba      	str	r2, [r7, #24]
 8007d96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d98:	6979      	ldr	r1, [r7, #20]
 8007d9a:	69ba      	ldr	r2, [r7, #24]
 8007d9c:	e841 2300 	strex	r3, r2, [r1]
 8007da0:	613b      	str	r3, [r7, #16]
   return(result);
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1e5      	bne.n	8007d74 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2220      	movs	r2, #32
 8007dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007db0:	bf00      	nop
 8007db2:	3724      	adds	r7, #36	@ 0x24
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b095      	sub	sp, #84	@ 0x54
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	330c      	adds	r3, #12
 8007dca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dce:	e853 3f00 	ldrex	r3, [r3]
 8007dd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	330c      	adds	r3, #12
 8007de2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007de4:	643a      	str	r2, [r7, #64]	@ 0x40
 8007de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007dea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007dec:	e841 2300 	strex	r3, r2, [r1]
 8007df0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1e5      	bne.n	8007dc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	3314      	adds	r3, #20
 8007dfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e00:	6a3b      	ldr	r3, [r7, #32]
 8007e02:	e853 3f00 	ldrex	r3, [r3]
 8007e06:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	f023 0301 	bic.w	r3, r3, #1
 8007e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	3314      	adds	r3, #20
 8007e16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e20:	e841 2300 	strex	r3, r2, [r1]
 8007e24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1e5      	bne.n	8007df8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d119      	bne.n	8007e68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	330c      	adds	r3, #12
 8007e3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	e853 3f00 	ldrex	r3, [r3]
 8007e42:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	f023 0310 	bic.w	r3, r3, #16
 8007e4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	330c      	adds	r3, #12
 8007e52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e54:	61ba      	str	r2, [r7, #24]
 8007e56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e58:	6979      	ldr	r1, [r7, #20]
 8007e5a:	69ba      	ldr	r2, [r7, #24]
 8007e5c:	e841 2300 	strex	r3, r2, [r1]
 8007e60:	613b      	str	r3, [r7, #16]
   return(result);
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1e5      	bne.n	8007e34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2220      	movs	r2, #32
 8007e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007e76:	bf00      	nop
 8007e78:	3754      	adds	r7, #84	@ 0x54
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b084      	sub	sp, #16
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f7ff fcf2 	bl	8007880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e9c:	bf00      	nop
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eb0:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d004      	beq.n	8007ecc <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d117      	bne.n	8007efc <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2220      	movs	r2, #32
 8007ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2220      	movs	r2, #32
 8007eea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f7ff fccd 	bl	8007894 <HAL_UART_AbortCpltCallback>
 8007efa:	e000      	b.n	8007efe <UART_DMATxAbortCallback+0x5a>
      return;
 8007efc:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007efe:	3710      	adds	r7, #16
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f10:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f16:	2200      	movs	r2, #0
 8007f18:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d004      	beq.n	8007f2c <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d117      	bne.n	8007f5c <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2220      	movs	r2, #32
 8007f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2220      	movs	r2, #32
 8007f4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f7ff fc9d 	bl	8007894 <HAL_UART_AbortCpltCallback>
 8007f5a:	e000      	b.n	8007f5e <UART_DMARxAbortCallback+0x5a>
      return;
 8007f5c:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	2b21      	cmp	r3, #33	@ 0x21
 8007f76:	d13e      	bne.n	8007ff6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f80:	d114      	bne.n	8007fac <UART_Transmit_IT+0x48>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d110      	bne.n	8007fac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	881b      	ldrh	r3, [r3, #0]
 8007f94:	461a      	mov	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f9e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a1b      	ldr	r3, [r3, #32]
 8007fa4:	1c9a      	adds	r2, r3, #2
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	621a      	str	r2, [r3, #32]
 8007faa:	e008      	b.n	8007fbe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a1b      	ldr	r3, [r3, #32]
 8007fb0:	1c59      	adds	r1, r3, #1
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	6211      	str	r1, [r2, #32]
 8007fb6:	781a      	ldrb	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	4619      	mov	r1, r3
 8007fcc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10f      	bne.n	8007ff2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68da      	ldr	r2, [r3, #12]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007fe0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68da      	ldr	r2, [r3, #12]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ff0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	e000      	b.n	8007ff8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007ff6:	2302      	movs	r3, #2
  }
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3714      	adds	r7, #20
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68da      	ldr	r2, [r3, #12]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800801a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2220      	movs	r2, #32
 8008020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f7ff fc17 	bl	8007858 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b08c      	sub	sp, #48	@ 0x30
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800803c:	2300      	movs	r3, #0
 800803e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8008040:	2300      	movs	r3, #0
 8008042:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800804a:	b2db      	uxtb	r3, r3
 800804c:	2b22      	cmp	r3, #34	@ 0x22
 800804e:	f040 80aa 	bne.w	80081a6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800805a:	d115      	bne.n	8008088 <UART_Receive_IT+0x54>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d111      	bne.n	8008088 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008068:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	b29b      	uxth	r3, r3
 8008072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008076:	b29a      	uxth	r2, r3
 8008078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800807a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008080:	1c9a      	adds	r2, r3, #2
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	629a      	str	r2, [r3, #40]	@ 0x28
 8008086:	e024      	b.n	80080d2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800808c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008096:	d007      	beq.n	80080a8 <UART_Receive_IT+0x74>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10a      	bne.n	80080b6 <UART_Receive_IT+0x82>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d106      	bne.n	80080b6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	b2da      	uxtb	r2, r3
 80080b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b2:	701a      	strb	r2, [r3, #0]
 80080b4:	e008      	b.n	80080c8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080c6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080cc:	1c5a      	adds	r2, r3, #1
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	3b01      	subs	r3, #1
 80080da:	b29b      	uxth	r3, r3
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	4619      	mov	r1, r3
 80080e0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d15d      	bne.n	80081a2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68da      	ldr	r2, [r3, #12]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f022 0220 	bic.w	r2, r2, #32
 80080f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68da      	ldr	r2, [r3, #12]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008104:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	695a      	ldr	r2, [r3, #20]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f022 0201 	bic.w	r2, r2, #1
 8008114:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2220      	movs	r2, #32
 800811a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008128:	2b01      	cmp	r3, #1
 800812a:	d135      	bne.n	8008198 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	330c      	adds	r3, #12
 8008138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	e853 3f00 	ldrex	r3, [r3]
 8008140:	613b      	str	r3, [r7, #16]
   return(result);
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	f023 0310 	bic.w	r3, r3, #16
 8008148:	627b      	str	r3, [r7, #36]	@ 0x24
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	330c      	adds	r3, #12
 8008150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008152:	623a      	str	r2, [r7, #32]
 8008154:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008156:	69f9      	ldr	r1, [r7, #28]
 8008158:	6a3a      	ldr	r2, [r7, #32]
 800815a:	e841 2300 	strex	r3, r2, [r1]
 800815e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1e5      	bne.n	8008132 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0310 	and.w	r3, r3, #16
 8008170:	2b10      	cmp	r3, #16
 8008172:	d10a      	bne.n	800818a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008174:	2300      	movs	r3, #0
 8008176:	60fb      	str	r3, [r7, #12]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	60fb      	str	r3, [r7, #12]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	60fb      	str	r3, [r7, #12]
 8008188:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800818e:	4619      	mov	r1, r3
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f7ff fb89 	bl	80078a8 <HAL_UARTEx_RxEventCallback>
 8008196:	e002      	b.n	800819e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f7f9 ffe5 	bl	8002168 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800819e:	2300      	movs	r3, #0
 80081a0:	e002      	b.n	80081a8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80081a2:	2300      	movs	r3, #0
 80081a4:	e000      	b.n	80081a8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80081a6:	2302      	movs	r3, #2
  }
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3730      	adds	r7, #48	@ 0x30
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081b4:	b0c0      	sub	sp, #256	@ 0x100
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80081c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081cc:	68d9      	ldr	r1, [r3, #12]
 80081ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	ea40 0301 	orr.w	r3, r0, r1
 80081d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80081da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081de:	689a      	ldr	r2, [r3, #8]
 80081e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	431a      	orrs	r2, r3
 80081e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	431a      	orrs	r2, r3
 80081f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081f4:	69db      	ldr	r3, [r3, #28]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80081fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008208:	f021 010c 	bic.w	r1, r1, #12
 800820c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008216:	430b      	orrs	r3, r1
 8008218:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800821a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800822a:	6999      	ldr	r1, [r3, #24]
 800822c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	ea40 0301 	orr.w	r3, r0, r1
 8008236:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	4b8f      	ldr	r3, [pc, #572]	@ (800847c <UART_SetConfig+0x2cc>)
 8008240:	429a      	cmp	r2, r3
 8008242:	d005      	beq.n	8008250 <UART_SetConfig+0xa0>
 8008244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	4b8d      	ldr	r3, [pc, #564]	@ (8008480 <UART_SetConfig+0x2d0>)
 800824c:	429a      	cmp	r2, r3
 800824e:	d104      	bne.n	800825a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008250:	f7fd fab0 	bl	80057b4 <HAL_RCC_GetPCLK2Freq>
 8008254:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008258:	e003      	b.n	8008262 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800825a:	f7fd fa97 	bl	800578c <HAL_RCC_GetPCLK1Freq>
 800825e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008266:	69db      	ldr	r3, [r3, #28]
 8008268:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800826c:	f040 810c 	bne.w	8008488 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008274:	2200      	movs	r2, #0
 8008276:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800827a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800827e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008282:	4622      	mov	r2, r4
 8008284:	462b      	mov	r3, r5
 8008286:	1891      	adds	r1, r2, r2
 8008288:	65b9      	str	r1, [r7, #88]	@ 0x58
 800828a:	415b      	adcs	r3, r3
 800828c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800828e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008292:	4621      	mov	r1, r4
 8008294:	eb12 0801 	adds.w	r8, r2, r1
 8008298:	4629      	mov	r1, r5
 800829a:	eb43 0901 	adc.w	r9, r3, r1
 800829e:	f04f 0200 	mov.w	r2, #0
 80082a2:	f04f 0300 	mov.w	r3, #0
 80082a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80082b2:	4690      	mov	r8, r2
 80082b4:	4699      	mov	r9, r3
 80082b6:	4623      	mov	r3, r4
 80082b8:	eb18 0303 	adds.w	r3, r8, r3
 80082bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80082c0:	462b      	mov	r3, r5
 80082c2:	eb49 0303 	adc.w	r3, r9, r3
 80082c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80082ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80082d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80082da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80082de:	460b      	mov	r3, r1
 80082e0:	18db      	adds	r3, r3, r3
 80082e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80082e4:	4613      	mov	r3, r2
 80082e6:	eb42 0303 	adc.w	r3, r2, r3
 80082ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80082ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80082f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80082f4:	f7f8 fce8 	bl	8000cc8 <__aeabi_uldivmod>
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	4b61      	ldr	r3, [pc, #388]	@ (8008484 <UART_SetConfig+0x2d4>)
 80082fe:	fba3 2302 	umull	r2, r3, r3, r2
 8008302:	095b      	lsrs	r3, r3, #5
 8008304:	011c      	lsls	r4, r3, #4
 8008306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800830a:	2200      	movs	r2, #0
 800830c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008310:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008314:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008318:	4642      	mov	r2, r8
 800831a:	464b      	mov	r3, r9
 800831c:	1891      	adds	r1, r2, r2
 800831e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008320:	415b      	adcs	r3, r3
 8008322:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008324:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008328:	4641      	mov	r1, r8
 800832a:	eb12 0a01 	adds.w	sl, r2, r1
 800832e:	4649      	mov	r1, r9
 8008330:	eb43 0b01 	adc.w	fp, r3, r1
 8008334:	f04f 0200 	mov.w	r2, #0
 8008338:	f04f 0300 	mov.w	r3, #0
 800833c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008340:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008344:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008348:	4692      	mov	sl, r2
 800834a:	469b      	mov	fp, r3
 800834c:	4643      	mov	r3, r8
 800834e:	eb1a 0303 	adds.w	r3, sl, r3
 8008352:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008356:	464b      	mov	r3, r9
 8008358:	eb4b 0303 	adc.w	r3, fp, r3
 800835c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800836c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008370:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008374:	460b      	mov	r3, r1
 8008376:	18db      	adds	r3, r3, r3
 8008378:	643b      	str	r3, [r7, #64]	@ 0x40
 800837a:	4613      	mov	r3, r2
 800837c:	eb42 0303 	adc.w	r3, r2, r3
 8008380:	647b      	str	r3, [r7, #68]	@ 0x44
 8008382:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008386:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800838a:	f7f8 fc9d 	bl	8000cc8 <__aeabi_uldivmod>
 800838e:	4602      	mov	r2, r0
 8008390:	460b      	mov	r3, r1
 8008392:	4611      	mov	r1, r2
 8008394:	4b3b      	ldr	r3, [pc, #236]	@ (8008484 <UART_SetConfig+0x2d4>)
 8008396:	fba3 2301 	umull	r2, r3, r3, r1
 800839a:	095b      	lsrs	r3, r3, #5
 800839c:	2264      	movs	r2, #100	@ 0x64
 800839e:	fb02 f303 	mul.w	r3, r2, r3
 80083a2:	1acb      	subs	r3, r1, r3
 80083a4:	00db      	lsls	r3, r3, #3
 80083a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80083aa:	4b36      	ldr	r3, [pc, #216]	@ (8008484 <UART_SetConfig+0x2d4>)
 80083ac:	fba3 2302 	umull	r2, r3, r3, r2
 80083b0:	095b      	lsrs	r3, r3, #5
 80083b2:	005b      	lsls	r3, r3, #1
 80083b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80083b8:	441c      	add	r4, r3
 80083ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083be:	2200      	movs	r2, #0
 80083c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80083c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80083c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80083cc:	4642      	mov	r2, r8
 80083ce:	464b      	mov	r3, r9
 80083d0:	1891      	adds	r1, r2, r2
 80083d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80083d4:	415b      	adcs	r3, r3
 80083d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80083dc:	4641      	mov	r1, r8
 80083de:	1851      	adds	r1, r2, r1
 80083e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80083e2:	4649      	mov	r1, r9
 80083e4:	414b      	adcs	r3, r1
 80083e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80083e8:	f04f 0200 	mov.w	r2, #0
 80083ec:	f04f 0300 	mov.w	r3, #0
 80083f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80083f4:	4659      	mov	r1, fp
 80083f6:	00cb      	lsls	r3, r1, #3
 80083f8:	4651      	mov	r1, sl
 80083fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083fe:	4651      	mov	r1, sl
 8008400:	00ca      	lsls	r2, r1, #3
 8008402:	4610      	mov	r0, r2
 8008404:	4619      	mov	r1, r3
 8008406:	4603      	mov	r3, r0
 8008408:	4642      	mov	r2, r8
 800840a:	189b      	adds	r3, r3, r2
 800840c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008410:	464b      	mov	r3, r9
 8008412:	460a      	mov	r2, r1
 8008414:	eb42 0303 	adc.w	r3, r2, r3
 8008418:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800841c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008428:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800842c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008430:	460b      	mov	r3, r1
 8008432:	18db      	adds	r3, r3, r3
 8008434:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008436:	4613      	mov	r3, r2
 8008438:	eb42 0303 	adc.w	r3, r2, r3
 800843c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800843e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008442:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008446:	f7f8 fc3f 	bl	8000cc8 <__aeabi_uldivmod>
 800844a:	4602      	mov	r2, r0
 800844c:	460b      	mov	r3, r1
 800844e:	4b0d      	ldr	r3, [pc, #52]	@ (8008484 <UART_SetConfig+0x2d4>)
 8008450:	fba3 1302 	umull	r1, r3, r3, r2
 8008454:	095b      	lsrs	r3, r3, #5
 8008456:	2164      	movs	r1, #100	@ 0x64
 8008458:	fb01 f303 	mul.w	r3, r1, r3
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	00db      	lsls	r3, r3, #3
 8008460:	3332      	adds	r3, #50	@ 0x32
 8008462:	4a08      	ldr	r2, [pc, #32]	@ (8008484 <UART_SetConfig+0x2d4>)
 8008464:	fba2 2303 	umull	r2, r3, r2, r3
 8008468:	095b      	lsrs	r3, r3, #5
 800846a:	f003 0207 	and.w	r2, r3, #7
 800846e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4422      	add	r2, r4
 8008476:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008478:	e106      	b.n	8008688 <UART_SetConfig+0x4d8>
 800847a:	bf00      	nop
 800847c:	40011000 	.word	0x40011000
 8008480:	40011400 	.word	0x40011400
 8008484:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800848c:	2200      	movs	r2, #0
 800848e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008492:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008496:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800849a:	4642      	mov	r2, r8
 800849c:	464b      	mov	r3, r9
 800849e:	1891      	adds	r1, r2, r2
 80084a0:	6239      	str	r1, [r7, #32]
 80084a2:	415b      	adcs	r3, r3
 80084a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80084a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084aa:	4641      	mov	r1, r8
 80084ac:	1854      	adds	r4, r2, r1
 80084ae:	4649      	mov	r1, r9
 80084b0:	eb43 0501 	adc.w	r5, r3, r1
 80084b4:	f04f 0200 	mov.w	r2, #0
 80084b8:	f04f 0300 	mov.w	r3, #0
 80084bc:	00eb      	lsls	r3, r5, #3
 80084be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084c2:	00e2      	lsls	r2, r4, #3
 80084c4:	4614      	mov	r4, r2
 80084c6:	461d      	mov	r5, r3
 80084c8:	4643      	mov	r3, r8
 80084ca:	18e3      	adds	r3, r4, r3
 80084cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80084d0:	464b      	mov	r3, r9
 80084d2:	eb45 0303 	adc.w	r3, r5, r3
 80084d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80084da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80084e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80084ea:	f04f 0200 	mov.w	r2, #0
 80084ee:	f04f 0300 	mov.w	r3, #0
 80084f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80084f6:	4629      	mov	r1, r5
 80084f8:	008b      	lsls	r3, r1, #2
 80084fa:	4621      	mov	r1, r4
 80084fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008500:	4621      	mov	r1, r4
 8008502:	008a      	lsls	r2, r1, #2
 8008504:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008508:	f7f8 fbde 	bl	8000cc8 <__aeabi_uldivmod>
 800850c:	4602      	mov	r2, r0
 800850e:	460b      	mov	r3, r1
 8008510:	4b60      	ldr	r3, [pc, #384]	@ (8008694 <UART_SetConfig+0x4e4>)
 8008512:	fba3 2302 	umull	r2, r3, r3, r2
 8008516:	095b      	lsrs	r3, r3, #5
 8008518:	011c      	lsls	r4, r3, #4
 800851a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800851e:	2200      	movs	r2, #0
 8008520:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008524:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008528:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800852c:	4642      	mov	r2, r8
 800852e:	464b      	mov	r3, r9
 8008530:	1891      	adds	r1, r2, r2
 8008532:	61b9      	str	r1, [r7, #24]
 8008534:	415b      	adcs	r3, r3
 8008536:	61fb      	str	r3, [r7, #28]
 8008538:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800853c:	4641      	mov	r1, r8
 800853e:	1851      	adds	r1, r2, r1
 8008540:	6139      	str	r1, [r7, #16]
 8008542:	4649      	mov	r1, r9
 8008544:	414b      	adcs	r3, r1
 8008546:	617b      	str	r3, [r7, #20]
 8008548:	f04f 0200 	mov.w	r2, #0
 800854c:	f04f 0300 	mov.w	r3, #0
 8008550:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008554:	4659      	mov	r1, fp
 8008556:	00cb      	lsls	r3, r1, #3
 8008558:	4651      	mov	r1, sl
 800855a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800855e:	4651      	mov	r1, sl
 8008560:	00ca      	lsls	r2, r1, #3
 8008562:	4610      	mov	r0, r2
 8008564:	4619      	mov	r1, r3
 8008566:	4603      	mov	r3, r0
 8008568:	4642      	mov	r2, r8
 800856a:	189b      	adds	r3, r3, r2
 800856c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008570:	464b      	mov	r3, r9
 8008572:	460a      	mov	r2, r1
 8008574:	eb42 0303 	adc.w	r3, r2, r3
 8008578:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800857c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008586:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008588:	f04f 0200 	mov.w	r2, #0
 800858c:	f04f 0300 	mov.w	r3, #0
 8008590:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008594:	4649      	mov	r1, r9
 8008596:	008b      	lsls	r3, r1, #2
 8008598:	4641      	mov	r1, r8
 800859a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800859e:	4641      	mov	r1, r8
 80085a0:	008a      	lsls	r2, r1, #2
 80085a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80085a6:	f7f8 fb8f 	bl	8000cc8 <__aeabi_uldivmod>
 80085aa:	4602      	mov	r2, r0
 80085ac:	460b      	mov	r3, r1
 80085ae:	4611      	mov	r1, r2
 80085b0:	4b38      	ldr	r3, [pc, #224]	@ (8008694 <UART_SetConfig+0x4e4>)
 80085b2:	fba3 2301 	umull	r2, r3, r3, r1
 80085b6:	095b      	lsrs	r3, r3, #5
 80085b8:	2264      	movs	r2, #100	@ 0x64
 80085ba:	fb02 f303 	mul.w	r3, r2, r3
 80085be:	1acb      	subs	r3, r1, r3
 80085c0:	011b      	lsls	r3, r3, #4
 80085c2:	3332      	adds	r3, #50	@ 0x32
 80085c4:	4a33      	ldr	r2, [pc, #204]	@ (8008694 <UART_SetConfig+0x4e4>)
 80085c6:	fba2 2303 	umull	r2, r3, r2, r3
 80085ca:	095b      	lsrs	r3, r3, #5
 80085cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80085d0:	441c      	add	r4, r3
 80085d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085d6:	2200      	movs	r2, #0
 80085d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80085da:	677a      	str	r2, [r7, #116]	@ 0x74
 80085dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80085e0:	4642      	mov	r2, r8
 80085e2:	464b      	mov	r3, r9
 80085e4:	1891      	adds	r1, r2, r2
 80085e6:	60b9      	str	r1, [r7, #8]
 80085e8:	415b      	adcs	r3, r3
 80085ea:	60fb      	str	r3, [r7, #12]
 80085ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80085f0:	4641      	mov	r1, r8
 80085f2:	1851      	adds	r1, r2, r1
 80085f4:	6039      	str	r1, [r7, #0]
 80085f6:	4649      	mov	r1, r9
 80085f8:	414b      	adcs	r3, r1
 80085fa:	607b      	str	r3, [r7, #4]
 80085fc:	f04f 0200 	mov.w	r2, #0
 8008600:	f04f 0300 	mov.w	r3, #0
 8008604:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008608:	4659      	mov	r1, fp
 800860a:	00cb      	lsls	r3, r1, #3
 800860c:	4651      	mov	r1, sl
 800860e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008612:	4651      	mov	r1, sl
 8008614:	00ca      	lsls	r2, r1, #3
 8008616:	4610      	mov	r0, r2
 8008618:	4619      	mov	r1, r3
 800861a:	4603      	mov	r3, r0
 800861c:	4642      	mov	r2, r8
 800861e:	189b      	adds	r3, r3, r2
 8008620:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008622:	464b      	mov	r3, r9
 8008624:	460a      	mov	r2, r1
 8008626:	eb42 0303 	adc.w	r3, r2, r3
 800862a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800862c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	663b      	str	r3, [r7, #96]	@ 0x60
 8008636:	667a      	str	r2, [r7, #100]	@ 0x64
 8008638:	f04f 0200 	mov.w	r2, #0
 800863c:	f04f 0300 	mov.w	r3, #0
 8008640:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008644:	4649      	mov	r1, r9
 8008646:	008b      	lsls	r3, r1, #2
 8008648:	4641      	mov	r1, r8
 800864a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800864e:	4641      	mov	r1, r8
 8008650:	008a      	lsls	r2, r1, #2
 8008652:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008656:	f7f8 fb37 	bl	8000cc8 <__aeabi_uldivmod>
 800865a:	4602      	mov	r2, r0
 800865c:	460b      	mov	r3, r1
 800865e:	4b0d      	ldr	r3, [pc, #52]	@ (8008694 <UART_SetConfig+0x4e4>)
 8008660:	fba3 1302 	umull	r1, r3, r3, r2
 8008664:	095b      	lsrs	r3, r3, #5
 8008666:	2164      	movs	r1, #100	@ 0x64
 8008668:	fb01 f303 	mul.w	r3, r1, r3
 800866c:	1ad3      	subs	r3, r2, r3
 800866e:	011b      	lsls	r3, r3, #4
 8008670:	3332      	adds	r3, #50	@ 0x32
 8008672:	4a08      	ldr	r2, [pc, #32]	@ (8008694 <UART_SetConfig+0x4e4>)
 8008674:	fba2 2303 	umull	r2, r3, r2, r3
 8008678:	095b      	lsrs	r3, r3, #5
 800867a:	f003 020f 	and.w	r2, r3, #15
 800867e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4422      	add	r2, r4
 8008686:	609a      	str	r2, [r3, #8]
}
 8008688:	bf00      	nop
 800868a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800868e:	46bd      	mov	sp, r7
 8008690:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008694:	51eb851f 	.word	0x51eb851f

08008698 <atof>:
 8008698:	2100      	movs	r1, #0
 800869a:	f000 be0b 	b.w	80092b4 <strtod>

0800869e <sulp>:
 800869e:	b570      	push	{r4, r5, r6, lr}
 80086a0:	4604      	mov	r4, r0
 80086a2:	460d      	mov	r5, r1
 80086a4:	ec45 4b10 	vmov	d0, r4, r5
 80086a8:	4616      	mov	r6, r2
 80086aa:	f003 fdd5 	bl	800c258 <__ulp>
 80086ae:	ec51 0b10 	vmov	r0, r1, d0
 80086b2:	b17e      	cbz	r6, 80086d4 <sulp+0x36>
 80086b4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80086b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80086bc:	2b00      	cmp	r3, #0
 80086be:	dd09      	ble.n	80086d4 <sulp+0x36>
 80086c0:	051b      	lsls	r3, r3, #20
 80086c2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80086c6:	2400      	movs	r4, #0
 80086c8:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80086cc:	4622      	mov	r2, r4
 80086ce:	462b      	mov	r3, r5
 80086d0:	f7f7 ffb2 	bl	8000638 <__aeabi_dmul>
 80086d4:	ec41 0b10 	vmov	d0, r0, r1
 80086d8:	bd70      	pop	{r4, r5, r6, pc}
 80086da:	0000      	movs	r0, r0
 80086dc:	0000      	movs	r0, r0
	...

080086e0 <_strtod_l>:
 80086e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e4:	b09f      	sub	sp, #124	@ 0x7c
 80086e6:	460c      	mov	r4, r1
 80086e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80086ea:	2200      	movs	r2, #0
 80086ec:	921a      	str	r2, [sp, #104]	@ 0x68
 80086ee:	9005      	str	r0, [sp, #20]
 80086f0:	f04f 0a00 	mov.w	sl, #0
 80086f4:	f04f 0b00 	mov.w	fp, #0
 80086f8:	460a      	mov	r2, r1
 80086fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80086fc:	7811      	ldrb	r1, [r2, #0]
 80086fe:	292b      	cmp	r1, #43	@ 0x2b
 8008700:	d04a      	beq.n	8008798 <_strtod_l+0xb8>
 8008702:	d838      	bhi.n	8008776 <_strtod_l+0x96>
 8008704:	290d      	cmp	r1, #13
 8008706:	d832      	bhi.n	800876e <_strtod_l+0x8e>
 8008708:	2908      	cmp	r1, #8
 800870a:	d832      	bhi.n	8008772 <_strtod_l+0x92>
 800870c:	2900      	cmp	r1, #0
 800870e:	d03b      	beq.n	8008788 <_strtod_l+0xa8>
 8008710:	2200      	movs	r2, #0
 8008712:	920e      	str	r2, [sp, #56]	@ 0x38
 8008714:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008716:	782a      	ldrb	r2, [r5, #0]
 8008718:	2a30      	cmp	r2, #48	@ 0x30
 800871a:	f040 80b2 	bne.w	8008882 <_strtod_l+0x1a2>
 800871e:	786a      	ldrb	r2, [r5, #1]
 8008720:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008724:	2a58      	cmp	r2, #88	@ 0x58
 8008726:	d16e      	bne.n	8008806 <_strtod_l+0x126>
 8008728:	9302      	str	r3, [sp, #8]
 800872a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800872c:	9301      	str	r3, [sp, #4]
 800872e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008730:	9300      	str	r3, [sp, #0]
 8008732:	4a8f      	ldr	r2, [pc, #572]	@ (8008970 <_strtod_l+0x290>)
 8008734:	9805      	ldr	r0, [sp, #20]
 8008736:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008738:	a919      	add	r1, sp, #100	@ 0x64
 800873a:	f002 fe87 	bl	800b44c <__gethex>
 800873e:	f010 060f 	ands.w	r6, r0, #15
 8008742:	4604      	mov	r4, r0
 8008744:	d005      	beq.n	8008752 <_strtod_l+0x72>
 8008746:	2e06      	cmp	r6, #6
 8008748:	d128      	bne.n	800879c <_strtod_l+0xbc>
 800874a:	3501      	adds	r5, #1
 800874c:	2300      	movs	r3, #0
 800874e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008750:	930e      	str	r3, [sp, #56]	@ 0x38
 8008752:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008754:	2b00      	cmp	r3, #0
 8008756:	f040 858e 	bne.w	8009276 <_strtod_l+0xb96>
 800875a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800875c:	b1cb      	cbz	r3, 8008792 <_strtod_l+0xb2>
 800875e:	4652      	mov	r2, sl
 8008760:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008764:	ec43 2b10 	vmov	d0, r2, r3
 8008768:	b01f      	add	sp, #124	@ 0x7c
 800876a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800876e:	2920      	cmp	r1, #32
 8008770:	d1ce      	bne.n	8008710 <_strtod_l+0x30>
 8008772:	3201      	adds	r2, #1
 8008774:	e7c1      	b.n	80086fa <_strtod_l+0x1a>
 8008776:	292d      	cmp	r1, #45	@ 0x2d
 8008778:	d1ca      	bne.n	8008710 <_strtod_l+0x30>
 800877a:	2101      	movs	r1, #1
 800877c:	910e      	str	r1, [sp, #56]	@ 0x38
 800877e:	1c51      	adds	r1, r2, #1
 8008780:	9119      	str	r1, [sp, #100]	@ 0x64
 8008782:	7852      	ldrb	r2, [r2, #1]
 8008784:	2a00      	cmp	r2, #0
 8008786:	d1c5      	bne.n	8008714 <_strtod_l+0x34>
 8008788:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800878a:	9419      	str	r4, [sp, #100]	@ 0x64
 800878c:	2b00      	cmp	r3, #0
 800878e:	f040 8570 	bne.w	8009272 <_strtod_l+0xb92>
 8008792:	4652      	mov	r2, sl
 8008794:	465b      	mov	r3, fp
 8008796:	e7e5      	b.n	8008764 <_strtod_l+0x84>
 8008798:	2100      	movs	r1, #0
 800879a:	e7ef      	b.n	800877c <_strtod_l+0x9c>
 800879c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800879e:	b13a      	cbz	r2, 80087b0 <_strtod_l+0xd0>
 80087a0:	2135      	movs	r1, #53	@ 0x35
 80087a2:	a81c      	add	r0, sp, #112	@ 0x70
 80087a4:	f003 fe52 	bl	800c44c <__copybits>
 80087a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80087aa:	9805      	ldr	r0, [sp, #20]
 80087ac:	f003 fa28 	bl	800bc00 <_Bfree>
 80087b0:	3e01      	subs	r6, #1
 80087b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80087b4:	2e04      	cmp	r6, #4
 80087b6:	d806      	bhi.n	80087c6 <_strtod_l+0xe6>
 80087b8:	e8df f006 	tbb	[pc, r6]
 80087bc:	201d0314 	.word	0x201d0314
 80087c0:	14          	.byte	0x14
 80087c1:	00          	.byte	0x00
 80087c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80087c6:	05e1      	lsls	r1, r4, #23
 80087c8:	bf48      	it	mi
 80087ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80087ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80087d2:	0d1b      	lsrs	r3, r3, #20
 80087d4:	051b      	lsls	r3, r3, #20
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1bb      	bne.n	8008752 <_strtod_l+0x72>
 80087da:	f001 fedf 	bl	800a59c <__errno>
 80087de:	2322      	movs	r3, #34	@ 0x22
 80087e0:	6003      	str	r3, [r0, #0]
 80087e2:	e7b6      	b.n	8008752 <_strtod_l+0x72>
 80087e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80087e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80087ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80087f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80087f4:	e7e7      	b.n	80087c6 <_strtod_l+0xe6>
 80087f6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8008978 <_strtod_l+0x298>
 80087fa:	e7e4      	b.n	80087c6 <_strtod_l+0xe6>
 80087fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008800:	f04f 3aff 	mov.w	sl, #4294967295
 8008804:	e7df      	b.n	80087c6 <_strtod_l+0xe6>
 8008806:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008808:	1c5a      	adds	r2, r3, #1
 800880a:	9219      	str	r2, [sp, #100]	@ 0x64
 800880c:	785b      	ldrb	r3, [r3, #1]
 800880e:	2b30      	cmp	r3, #48	@ 0x30
 8008810:	d0f9      	beq.n	8008806 <_strtod_l+0x126>
 8008812:	2b00      	cmp	r3, #0
 8008814:	d09d      	beq.n	8008752 <_strtod_l+0x72>
 8008816:	2301      	movs	r3, #1
 8008818:	2700      	movs	r7, #0
 800881a:	9308      	str	r3, [sp, #32]
 800881c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800881e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008820:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008822:	46b9      	mov	r9, r7
 8008824:	220a      	movs	r2, #10
 8008826:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008828:	7805      	ldrb	r5, [r0, #0]
 800882a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800882e:	b2d9      	uxtb	r1, r3
 8008830:	2909      	cmp	r1, #9
 8008832:	d928      	bls.n	8008886 <_strtod_l+0x1a6>
 8008834:	494f      	ldr	r1, [pc, #316]	@ (8008974 <_strtod_l+0x294>)
 8008836:	2201      	movs	r2, #1
 8008838:	f001 fe29 	bl	800a48e <strncmp>
 800883c:	2800      	cmp	r0, #0
 800883e:	d032      	beq.n	80088a6 <_strtod_l+0x1c6>
 8008840:	2000      	movs	r0, #0
 8008842:	462a      	mov	r2, r5
 8008844:	900a      	str	r0, [sp, #40]	@ 0x28
 8008846:	464d      	mov	r5, r9
 8008848:	4603      	mov	r3, r0
 800884a:	2a65      	cmp	r2, #101	@ 0x65
 800884c:	d001      	beq.n	8008852 <_strtod_l+0x172>
 800884e:	2a45      	cmp	r2, #69	@ 0x45
 8008850:	d114      	bne.n	800887c <_strtod_l+0x19c>
 8008852:	b91d      	cbnz	r5, 800885c <_strtod_l+0x17c>
 8008854:	9a08      	ldr	r2, [sp, #32]
 8008856:	4302      	orrs	r2, r0
 8008858:	d096      	beq.n	8008788 <_strtod_l+0xa8>
 800885a:	2500      	movs	r5, #0
 800885c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800885e:	1c62      	adds	r2, r4, #1
 8008860:	9219      	str	r2, [sp, #100]	@ 0x64
 8008862:	7862      	ldrb	r2, [r4, #1]
 8008864:	2a2b      	cmp	r2, #43	@ 0x2b
 8008866:	d07a      	beq.n	800895e <_strtod_l+0x27e>
 8008868:	2a2d      	cmp	r2, #45	@ 0x2d
 800886a:	d07e      	beq.n	800896a <_strtod_l+0x28a>
 800886c:	f04f 0c00 	mov.w	ip, #0
 8008870:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008874:	2909      	cmp	r1, #9
 8008876:	f240 8085 	bls.w	8008984 <_strtod_l+0x2a4>
 800887a:	9419      	str	r4, [sp, #100]	@ 0x64
 800887c:	f04f 0800 	mov.w	r8, #0
 8008880:	e0a5      	b.n	80089ce <_strtod_l+0x2ee>
 8008882:	2300      	movs	r3, #0
 8008884:	e7c8      	b.n	8008818 <_strtod_l+0x138>
 8008886:	f1b9 0f08 	cmp.w	r9, #8
 800888a:	bfd8      	it	le
 800888c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800888e:	f100 0001 	add.w	r0, r0, #1
 8008892:	bfda      	itte	le
 8008894:	fb02 3301 	mlale	r3, r2, r1, r3
 8008898:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800889a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800889e:	f109 0901 	add.w	r9, r9, #1
 80088a2:	9019      	str	r0, [sp, #100]	@ 0x64
 80088a4:	e7bf      	b.n	8008826 <_strtod_l+0x146>
 80088a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088a8:	1c5a      	adds	r2, r3, #1
 80088aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80088ac:	785a      	ldrb	r2, [r3, #1]
 80088ae:	f1b9 0f00 	cmp.w	r9, #0
 80088b2:	d03b      	beq.n	800892c <_strtod_l+0x24c>
 80088b4:	900a      	str	r0, [sp, #40]	@ 0x28
 80088b6:	464d      	mov	r5, r9
 80088b8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80088bc:	2b09      	cmp	r3, #9
 80088be:	d912      	bls.n	80088e6 <_strtod_l+0x206>
 80088c0:	2301      	movs	r3, #1
 80088c2:	e7c2      	b.n	800884a <_strtod_l+0x16a>
 80088c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088c6:	1c5a      	adds	r2, r3, #1
 80088c8:	9219      	str	r2, [sp, #100]	@ 0x64
 80088ca:	785a      	ldrb	r2, [r3, #1]
 80088cc:	3001      	adds	r0, #1
 80088ce:	2a30      	cmp	r2, #48	@ 0x30
 80088d0:	d0f8      	beq.n	80088c4 <_strtod_l+0x1e4>
 80088d2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80088d6:	2b08      	cmp	r3, #8
 80088d8:	f200 84d2 	bhi.w	8009280 <_strtod_l+0xba0>
 80088dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088de:	900a      	str	r0, [sp, #40]	@ 0x28
 80088e0:	2000      	movs	r0, #0
 80088e2:	930c      	str	r3, [sp, #48]	@ 0x30
 80088e4:	4605      	mov	r5, r0
 80088e6:	3a30      	subs	r2, #48	@ 0x30
 80088e8:	f100 0301 	add.w	r3, r0, #1
 80088ec:	d018      	beq.n	8008920 <_strtod_l+0x240>
 80088ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80088f0:	4419      	add	r1, r3
 80088f2:	910a      	str	r1, [sp, #40]	@ 0x28
 80088f4:	462e      	mov	r6, r5
 80088f6:	f04f 0e0a 	mov.w	lr, #10
 80088fa:	1c71      	adds	r1, r6, #1
 80088fc:	eba1 0c05 	sub.w	ip, r1, r5
 8008900:	4563      	cmp	r3, ip
 8008902:	dc15      	bgt.n	8008930 <_strtod_l+0x250>
 8008904:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008908:	182b      	adds	r3, r5, r0
 800890a:	2b08      	cmp	r3, #8
 800890c:	f105 0501 	add.w	r5, r5, #1
 8008910:	4405      	add	r5, r0
 8008912:	dc1a      	bgt.n	800894a <_strtod_l+0x26a>
 8008914:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008916:	230a      	movs	r3, #10
 8008918:	fb03 2301 	mla	r3, r3, r1, r2
 800891c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800891e:	2300      	movs	r3, #0
 8008920:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008922:	1c51      	adds	r1, r2, #1
 8008924:	9119      	str	r1, [sp, #100]	@ 0x64
 8008926:	7852      	ldrb	r2, [r2, #1]
 8008928:	4618      	mov	r0, r3
 800892a:	e7c5      	b.n	80088b8 <_strtod_l+0x1d8>
 800892c:	4648      	mov	r0, r9
 800892e:	e7ce      	b.n	80088ce <_strtod_l+0x1ee>
 8008930:	2e08      	cmp	r6, #8
 8008932:	dc05      	bgt.n	8008940 <_strtod_l+0x260>
 8008934:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008936:	fb0e f606 	mul.w	r6, lr, r6
 800893a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800893c:	460e      	mov	r6, r1
 800893e:	e7dc      	b.n	80088fa <_strtod_l+0x21a>
 8008940:	2910      	cmp	r1, #16
 8008942:	bfd8      	it	le
 8008944:	fb0e f707 	mulle.w	r7, lr, r7
 8008948:	e7f8      	b.n	800893c <_strtod_l+0x25c>
 800894a:	2b0f      	cmp	r3, #15
 800894c:	bfdc      	itt	le
 800894e:	230a      	movle	r3, #10
 8008950:	fb03 2707 	mlale	r7, r3, r7, r2
 8008954:	e7e3      	b.n	800891e <_strtod_l+0x23e>
 8008956:	2300      	movs	r3, #0
 8008958:	930a      	str	r3, [sp, #40]	@ 0x28
 800895a:	2301      	movs	r3, #1
 800895c:	e77a      	b.n	8008854 <_strtod_l+0x174>
 800895e:	f04f 0c00 	mov.w	ip, #0
 8008962:	1ca2      	adds	r2, r4, #2
 8008964:	9219      	str	r2, [sp, #100]	@ 0x64
 8008966:	78a2      	ldrb	r2, [r4, #2]
 8008968:	e782      	b.n	8008870 <_strtod_l+0x190>
 800896a:	f04f 0c01 	mov.w	ip, #1
 800896e:	e7f8      	b.n	8008962 <_strtod_l+0x282>
 8008970:	0800d50c 	.word	0x0800d50c
 8008974:	0800d320 	.word	0x0800d320
 8008978:	7ff00000 	.word	0x7ff00000
 800897c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800897e:	1c51      	adds	r1, r2, #1
 8008980:	9119      	str	r1, [sp, #100]	@ 0x64
 8008982:	7852      	ldrb	r2, [r2, #1]
 8008984:	2a30      	cmp	r2, #48	@ 0x30
 8008986:	d0f9      	beq.n	800897c <_strtod_l+0x29c>
 8008988:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800898c:	2908      	cmp	r1, #8
 800898e:	f63f af75 	bhi.w	800887c <_strtod_l+0x19c>
 8008992:	3a30      	subs	r2, #48	@ 0x30
 8008994:	9209      	str	r2, [sp, #36]	@ 0x24
 8008996:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008998:	920f      	str	r2, [sp, #60]	@ 0x3c
 800899a:	f04f 080a 	mov.w	r8, #10
 800899e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80089a0:	1c56      	adds	r6, r2, #1
 80089a2:	9619      	str	r6, [sp, #100]	@ 0x64
 80089a4:	7852      	ldrb	r2, [r2, #1]
 80089a6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80089aa:	f1be 0f09 	cmp.w	lr, #9
 80089ae:	d939      	bls.n	8008a24 <_strtod_l+0x344>
 80089b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80089b2:	1a76      	subs	r6, r6, r1
 80089b4:	2e08      	cmp	r6, #8
 80089b6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80089ba:	dc03      	bgt.n	80089c4 <_strtod_l+0x2e4>
 80089bc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80089be:	4588      	cmp	r8, r1
 80089c0:	bfa8      	it	ge
 80089c2:	4688      	movge	r8, r1
 80089c4:	f1bc 0f00 	cmp.w	ip, #0
 80089c8:	d001      	beq.n	80089ce <_strtod_l+0x2ee>
 80089ca:	f1c8 0800 	rsb	r8, r8, #0
 80089ce:	2d00      	cmp	r5, #0
 80089d0:	d14e      	bne.n	8008a70 <_strtod_l+0x390>
 80089d2:	9908      	ldr	r1, [sp, #32]
 80089d4:	4308      	orrs	r0, r1
 80089d6:	f47f aebc 	bne.w	8008752 <_strtod_l+0x72>
 80089da:	2b00      	cmp	r3, #0
 80089dc:	f47f aed4 	bne.w	8008788 <_strtod_l+0xa8>
 80089e0:	2a69      	cmp	r2, #105	@ 0x69
 80089e2:	d028      	beq.n	8008a36 <_strtod_l+0x356>
 80089e4:	dc25      	bgt.n	8008a32 <_strtod_l+0x352>
 80089e6:	2a49      	cmp	r2, #73	@ 0x49
 80089e8:	d025      	beq.n	8008a36 <_strtod_l+0x356>
 80089ea:	2a4e      	cmp	r2, #78	@ 0x4e
 80089ec:	f47f aecc 	bne.w	8008788 <_strtod_l+0xa8>
 80089f0:	499a      	ldr	r1, [pc, #616]	@ (8008c5c <_strtod_l+0x57c>)
 80089f2:	a819      	add	r0, sp, #100	@ 0x64
 80089f4:	f002 ff4c 	bl	800b890 <__match>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	f43f aec5 	beq.w	8008788 <_strtod_l+0xa8>
 80089fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	2b28      	cmp	r3, #40	@ 0x28
 8008a04:	d12e      	bne.n	8008a64 <_strtod_l+0x384>
 8008a06:	4996      	ldr	r1, [pc, #600]	@ (8008c60 <_strtod_l+0x580>)
 8008a08:	aa1c      	add	r2, sp, #112	@ 0x70
 8008a0a:	a819      	add	r0, sp, #100	@ 0x64
 8008a0c:	f002 ff54 	bl	800b8b8 <__hexnan>
 8008a10:	2805      	cmp	r0, #5
 8008a12:	d127      	bne.n	8008a64 <_strtod_l+0x384>
 8008a14:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008a16:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008a1a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008a1e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008a22:	e696      	b.n	8008752 <_strtod_l+0x72>
 8008a24:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a26:	fb08 2101 	mla	r1, r8, r1, r2
 8008a2a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008a2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a30:	e7b5      	b.n	800899e <_strtod_l+0x2be>
 8008a32:	2a6e      	cmp	r2, #110	@ 0x6e
 8008a34:	e7da      	b.n	80089ec <_strtod_l+0x30c>
 8008a36:	498b      	ldr	r1, [pc, #556]	@ (8008c64 <_strtod_l+0x584>)
 8008a38:	a819      	add	r0, sp, #100	@ 0x64
 8008a3a:	f002 ff29 	bl	800b890 <__match>
 8008a3e:	2800      	cmp	r0, #0
 8008a40:	f43f aea2 	beq.w	8008788 <_strtod_l+0xa8>
 8008a44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a46:	4988      	ldr	r1, [pc, #544]	@ (8008c68 <_strtod_l+0x588>)
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	a819      	add	r0, sp, #100	@ 0x64
 8008a4c:	9319      	str	r3, [sp, #100]	@ 0x64
 8008a4e:	f002 ff1f 	bl	800b890 <__match>
 8008a52:	b910      	cbnz	r0, 8008a5a <_strtod_l+0x37a>
 8008a54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a56:	3301      	adds	r3, #1
 8008a58:	9319      	str	r3, [sp, #100]	@ 0x64
 8008a5a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8008c78 <_strtod_l+0x598>
 8008a5e:	f04f 0a00 	mov.w	sl, #0
 8008a62:	e676      	b.n	8008752 <_strtod_l+0x72>
 8008a64:	4881      	ldr	r0, [pc, #516]	@ (8008c6c <_strtod_l+0x58c>)
 8008a66:	f001 fdd7 	bl	800a618 <nan>
 8008a6a:	ec5b ab10 	vmov	sl, fp, d0
 8008a6e:	e670      	b.n	8008752 <_strtod_l+0x72>
 8008a70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a72:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008a74:	eba8 0303 	sub.w	r3, r8, r3
 8008a78:	f1b9 0f00 	cmp.w	r9, #0
 8008a7c:	bf08      	it	eq
 8008a7e:	46a9      	moveq	r9, r5
 8008a80:	2d10      	cmp	r5, #16
 8008a82:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a84:	462c      	mov	r4, r5
 8008a86:	bfa8      	it	ge
 8008a88:	2410      	movge	r4, #16
 8008a8a:	f7f7 fd5b 	bl	8000544 <__aeabi_ui2d>
 8008a8e:	2d09      	cmp	r5, #9
 8008a90:	4682      	mov	sl, r0
 8008a92:	468b      	mov	fp, r1
 8008a94:	dc13      	bgt.n	8008abe <_strtod_l+0x3de>
 8008a96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f43f ae5a 	beq.w	8008752 <_strtod_l+0x72>
 8008a9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008aa0:	dd78      	ble.n	8008b94 <_strtod_l+0x4b4>
 8008aa2:	2b16      	cmp	r3, #22
 8008aa4:	dc5f      	bgt.n	8008b66 <_strtod_l+0x486>
 8008aa6:	4972      	ldr	r1, [pc, #456]	@ (8008c70 <_strtod_l+0x590>)
 8008aa8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008aac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ab0:	4652      	mov	r2, sl
 8008ab2:	465b      	mov	r3, fp
 8008ab4:	f7f7 fdc0 	bl	8000638 <__aeabi_dmul>
 8008ab8:	4682      	mov	sl, r0
 8008aba:	468b      	mov	fp, r1
 8008abc:	e649      	b.n	8008752 <_strtod_l+0x72>
 8008abe:	4b6c      	ldr	r3, [pc, #432]	@ (8008c70 <_strtod_l+0x590>)
 8008ac0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ac4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008ac8:	f7f7 fdb6 	bl	8000638 <__aeabi_dmul>
 8008acc:	4682      	mov	sl, r0
 8008ace:	4638      	mov	r0, r7
 8008ad0:	468b      	mov	fp, r1
 8008ad2:	f7f7 fd37 	bl	8000544 <__aeabi_ui2d>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	4650      	mov	r0, sl
 8008adc:	4659      	mov	r1, fp
 8008ade:	f7f7 fbf5 	bl	80002cc <__adddf3>
 8008ae2:	2d0f      	cmp	r5, #15
 8008ae4:	4682      	mov	sl, r0
 8008ae6:	468b      	mov	fp, r1
 8008ae8:	ddd5      	ble.n	8008a96 <_strtod_l+0x3b6>
 8008aea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008aec:	1b2c      	subs	r4, r5, r4
 8008aee:	441c      	add	r4, r3
 8008af0:	2c00      	cmp	r4, #0
 8008af2:	f340 8093 	ble.w	8008c1c <_strtod_l+0x53c>
 8008af6:	f014 030f 	ands.w	r3, r4, #15
 8008afa:	d00a      	beq.n	8008b12 <_strtod_l+0x432>
 8008afc:	495c      	ldr	r1, [pc, #368]	@ (8008c70 <_strtod_l+0x590>)
 8008afe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008b02:	4652      	mov	r2, sl
 8008b04:	465b      	mov	r3, fp
 8008b06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b0a:	f7f7 fd95 	bl	8000638 <__aeabi_dmul>
 8008b0e:	4682      	mov	sl, r0
 8008b10:	468b      	mov	fp, r1
 8008b12:	f034 040f 	bics.w	r4, r4, #15
 8008b16:	d073      	beq.n	8008c00 <_strtod_l+0x520>
 8008b18:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008b1c:	dd49      	ble.n	8008bb2 <_strtod_l+0x4d2>
 8008b1e:	2400      	movs	r4, #0
 8008b20:	46a0      	mov	r8, r4
 8008b22:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008b24:	46a1      	mov	r9, r4
 8008b26:	9a05      	ldr	r2, [sp, #20]
 8008b28:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8008c78 <_strtod_l+0x598>
 8008b2c:	2322      	movs	r3, #34	@ 0x22
 8008b2e:	6013      	str	r3, [r2, #0]
 8008b30:	f04f 0a00 	mov.w	sl, #0
 8008b34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	f43f ae0b 	beq.w	8008752 <_strtod_l+0x72>
 8008b3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b3e:	9805      	ldr	r0, [sp, #20]
 8008b40:	f003 f85e 	bl	800bc00 <_Bfree>
 8008b44:	9805      	ldr	r0, [sp, #20]
 8008b46:	4649      	mov	r1, r9
 8008b48:	f003 f85a 	bl	800bc00 <_Bfree>
 8008b4c:	9805      	ldr	r0, [sp, #20]
 8008b4e:	4641      	mov	r1, r8
 8008b50:	f003 f856 	bl	800bc00 <_Bfree>
 8008b54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008b56:	9805      	ldr	r0, [sp, #20]
 8008b58:	f003 f852 	bl	800bc00 <_Bfree>
 8008b5c:	9805      	ldr	r0, [sp, #20]
 8008b5e:	4621      	mov	r1, r4
 8008b60:	f003 f84e 	bl	800bc00 <_Bfree>
 8008b64:	e5f5      	b.n	8008752 <_strtod_l+0x72>
 8008b66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b68:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	dbbc      	blt.n	8008aea <_strtod_l+0x40a>
 8008b70:	4c3f      	ldr	r4, [pc, #252]	@ (8008c70 <_strtod_l+0x590>)
 8008b72:	f1c5 050f 	rsb	r5, r5, #15
 8008b76:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008b7a:	4652      	mov	r2, sl
 8008b7c:	465b      	mov	r3, fp
 8008b7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b82:	f7f7 fd59 	bl	8000638 <__aeabi_dmul>
 8008b86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b88:	1b5d      	subs	r5, r3, r5
 8008b8a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008b8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008b92:	e78f      	b.n	8008ab4 <_strtod_l+0x3d4>
 8008b94:	3316      	adds	r3, #22
 8008b96:	dba8      	blt.n	8008aea <_strtod_l+0x40a>
 8008b98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b9a:	eba3 0808 	sub.w	r8, r3, r8
 8008b9e:	4b34      	ldr	r3, [pc, #208]	@ (8008c70 <_strtod_l+0x590>)
 8008ba0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008ba4:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008ba8:	4650      	mov	r0, sl
 8008baa:	4659      	mov	r1, fp
 8008bac:	f7f7 fe6e 	bl	800088c <__aeabi_ddiv>
 8008bb0:	e782      	b.n	8008ab8 <_strtod_l+0x3d8>
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	4f2f      	ldr	r7, [pc, #188]	@ (8008c74 <_strtod_l+0x594>)
 8008bb6:	1124      	asrs	r4, r4, #4
 8008bb8:	4650      	mov	r0, sl
 8008bba:	4659      	mov	r1, fp
 8008bbc:	461e      	mov	r6, r3
 8008bbe:	2c01      	cmp	r4, #1
 8008bc0:	dc21      	bgt.n	8008c06 <_strtod_l+0x526>
 8008bc2:	b10b      	cbz	r3, 8008bc8 <_strtod_l+0x4e8>
 8008bc4:	4682      	mov	sl, r0
 8008bc6:	468b      	mov	fp, r1
 8008bc8:	492a      	ldr	r1, [pc, #168]	@ (8008c74 <_strtod_l+0x594>)
 8008bca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008bce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008bd2:	4652      	mov	r2, sl
 8008bd4:	465b      	mov	r3, fp
 8008bd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bda:	f7f7 fd2d 	bl	8000638 <__aeabi_dmul>
 8008bde:	4b26      	ldr	r3, [pc, #152]	@ (8008c78 <_strtod_l+0x598>)
 8008be0:	460a      	mov	r2, r1
 8008be2:	400b      	ands	r3, r1
 8008be4:	4925      	ldr	r1, [pc, #148]	@ (8008c7c <_strtod_l+0x59c>)
 8008be6:	428b      	cmp	r3, r1
 8008be8:	4682      	mov	sl, r0
 8008bea:	d898      	bhi.n	8008b1e <_strtod_l+0x43e>
 8008bec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008bf0:	428b      	cmp	r3, r1
 8008bf2:	bf86      	itte	hi
 8008bf4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008c80 <_strtod_l+0x5a0>
 8008bf8:	f04f 3aff 	movhi.w	sl, #4294967295
 8008bfc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008c00:	2300      	movs	r3, #0
 8008c02:	9308      	str	r3, [sp, #32]
 8008c04:	e076      	b.n	8008cf4 <_strtod_l+0x614>
 8008c06:	07e2      	lsls	r2, r4, #31
 8008c08:	d504      	bpl.n	8008c14 <_strtod_l+0x534>
 8008c0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c0e:	f7f7 fd13 	bl	8000638 <__aeabi_dmul>
 8008c12:	2301      	movs	r3, #1
 8008c14:	3601      	adds	r6, #1
 8008c16:	1064      	asrs	r4, r4, #1
 8008c18:	3708      	adds	r7, #8
 8008c1a:	e7d0      	b.n	8008bbe <_strtod_l+0x4de>
 8008c1c:	d0f0      	beq.n	8008c00 <_strtod_l+0x520>
 8008c1e:	4264      	negs	r4, r4
 8008c20:	f014 020f 	ands.w	r2, r4, #15
 8008c24:	d00a      	beq.n	8008c3c <_strtod_l+0x55c>
 8008c26:	4b12      	ldr	r3, [pc, #72]	@ (8008c70 <_strtod_l+0x590>)
 8008c28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c2c:	4650      	mov	r0, sl
 8008c2e:	4659      	mov	r1, fp
 8008c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c34:	f7f7 fe2a 	bl	800088c <__aeabi_ddiv>
 8008c38:	4682      	mov	sl, r0
 8008c3a:	468b      	mov	fp, r1
 8008c3c:	1124      	asrs	r4, r4, #4
 8008c3e:	d0df      	beq.n	8008c00 <_strtod_l+0x520>
 8008c40:	2c1f      	cmp	r4, #31
 8008c42:	dd1f      	ble.n	8008c84 <_strtod_l+0x5a4>
 8008c44:	2400      	movs	r4, #0
 8008c46:	46a0      	mov	r8, r4
 8008c48:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008c4a:	46a1      	mov	r9, r4
 8008c4c:	9a05      	ldr	r2, [sp, #20]
 8008c4e:	2322      	movs	r3, #34	@ 0x22
 8008c50:	f04f 0a00 	mov.w	sl, #0
 8008c54:	f04f 0b00 	mov.w	fp, #0
 8008c58:	6013      	str	r3, [r2, #0]
 8008c5a:	e76b      	b.n	8008b34 <_strtod_l+0x454>
 8008c5c:	0800d32f 	.word	0x0800d32f
 8008c60:	0800d4f8 	.word	0x0800d4f8
 8008c64:	0800d327 	.word	0x0800d327
 8008c68:	0800d366 	.word	0x0800d366
 8008c6c:	0800d4f5 	.word	0x0800d4f5
 8008c70:	0800d680 	.word	0x0800d680
 8008c74:	0800d658 	.word	0x0800d658
 8008c78:	7ff00000 	.word	0x7ff00000
 8008c7c:	7ca00000 	.word	0x7ca00000
 8008c80:	7fefffff 	.word	0x7fefffff
 8008c84:	f014 0310 	ands.w	r3, r4, #16
 8008c88:	bf18      	it	ne
 8008c8a:	236a      	movne	r3, #106	@ 0x6a
 8008c8c:	4ea9      	ldr	r6, [pc, #676]	@ (8008f34 <_strtod_l+0x854>)
 8008c8e:	9308      	str	r3, [sp, #32]
 8008c90:	4650      	mov	r0, sl
 8008c92:	4659      	mov	r1, fp
 8008c94:	2300      	movs	r3, #0
 8008c96:	07e7      	lsls	r7, r4, #31
 8008c98:	d504      	bpl.n	8008ca4 <_strtod_l+0x5c4>
 8008c9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008c9e:	f7f7 fccb 	bl	8000638 <__aeabi_dmul>
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	1064      	asrs	r4, r4, #1
 8008ca6:	f106 0608 	add.w	r6, r6, #8
 8008caa:	d1f4      	bne.n	8008c96 <_strtod_l+0x5b6>
 8008cac:	b10b      	cbz	r3, 8008cb2 <_strtod_l+0x5d2>
 8008cae:	4682      	mov	sl, r0
 8008cb0:	468b      	mov	fp, r1
 8008cb2:	9b08      	ldr	r3, [sp, #32]
 8008cb4:	b1b3      	cbz	r3, 8008ce4 <_strtod_l+0x604>
 8008cb6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008cba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	4659      	mov	r1, fp
 8008cc2:	dd0f      	ble.n	8008ce4 <_strtod_l+0x604>
 8008cc4:	2b1f      	cmp	r3, #31
 8008cc6:	dd56      	ble.n	8008d76 <_strtod_l+0x696>
 8008cc8:	2b34      	cmp	r3, #52	@ 0x34
 8008cca:	bfde      	ittt	le
 8008ccc:	f04f 33ff 	movle.w	r3, #4294967295
 8008cd0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008cd4:	4093      	lslle	r3, r2
 8008cd6:	f04f 0a00 	mov.w	sl, #0
 8008cda:	bfcc      	ite	gt
 8008cdc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008ce0:	ea03 0b01 	andle.w	fp, r3, r1
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	4650      	mov	r0, sl
 8008cea:	4659      	mov	r1, fp
 8008cec:	f7f7 ff0c 	bl	8000b08 <__aeabi_dcmpeq>
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	d1a7      	bne.n	8008c44 <_strtod_l+0x564>
 8008cf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008cf6:	9300      	str	r3, [sp, #0]
 8008cf8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008cfa:	9805      	ldr	r0, [sp, #20]
 8008cfc:	462b      	mov	r3, r5
 8008cfe:	464a      	mov	r2, r9
 8008d00:	f002 ffe6 	bl	800bcd0 <__s2b>
 8008d04:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008d06:	2800      	cmp	r0, #0
 8008d08:	f43f af09 	beq.w	8008b1e <_strtod_l+0x43e>
 8008d0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d10:	2a00      	cmp	r2, #0
 8008d12:	eba3 0308 	sub.w	r3, r3, r8
 8008d16:	bfa8      	it	ge
 8008d18:	2300      	movge	r3, #0
 8008d1a:	9312      	str	r3, [sp, #72]	@ 0x48
 8008d1c:	2400      	movs	r4, #0
 8008d1e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008d22:	9316      	str	r3, [sp, #88]	@ 0x58
 8008d24:	46a0      	mov	r8, r4
 8008d26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d28:	9805      	ldr	r0, [sp, #20]
 8008d2a:	6859      	ldr	r1, [r3, #4]
 8008d2c:	f002 ff28 	bl	800bb80 <_Balloc>
 8008d30:	4681      	mov	r9, r0
 8008d32:	2800      	cmp	r0, #0
 8008d34:	f43f aef7 	beq.w	8008b26 <_strtod_l+0x446>
 8008d38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d3a:	691a      	ldr	r2, [r3, #16]
 8008d3c:	3202      	adds	r2, #2
 8008d3e:	f103 010c 	add.w	r1, r3, #12
 8008d42:	0092      	lsls	r2, r2, #2
 8008d44:	300c      	adds	r0, #12
 8008d46:	f001 fc56 	bl	800a5f6 <memcpy>
 8008d4a:	ec4b ab10 	vmov	d0, sl, fp
 8008d4e:	9805      	ldr	r0, [sp, #20]
 8008d50:	aa1c      	add	r2, sp, #112	@ 0x70
 8008d52:	a91b      	add	r1, sp, #108	@ 0x6c
 8008d54:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008d58:	f003 faee 	bl	800c338 <__d2b>
 8008d5c:	901a      	str	r0, [sp, #104]	@ 0x68
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	f43f aee1 	beq.w	8008b26 <_strtod_l+0x446>
 8008d64:	9805      	ldr	r0, [sp, #20]
 8008d66:	2101      	movs	r1, #1
 8008d68:	f003 f848 	bl	800bdfc <__i2b>
 8008d6c:	4680      	mov	r8, r0
 8008d6e:	b948      	cbnz	r0, 8008d84 <_strtod_l+0x6a4>
 8008d70:	f04f 0800 	mov.w	r8, #0
 8008d74:	e6d7      	b.n	8008b26 <_strtod_l+0x446>
 8008d76:	f04f 32ff 	mov.w	r2, #4294967295
 8008d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d7e:	ea03 0a0a 	and.w	sl, r3, sl
 8008d82:	e7af      	b.n	8008ce4 <_strtod_l+0x604>
 8008d84:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008d86:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008d88:	2d00      	cmp	r5, #0
 8008d8a:	bfab      	itete	ge
 8008d8c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008d8e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008d90:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008d92:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008d94:	bfac      	ite	ge
 8008d96:	18ef      	addge	r7, r5, r3
 8008d98:	1b5e      	sublt	r6, r3, r5
 8008d9a:	9b08      	ldr	r3, [sp, #32]
 8008d9c:	1aed      	subs	r5, r5, r3
 8008d9e:	4415      	add	r5, r2
 8008da0:	4b65      	ldr	r3, [pc, #404]	@ (8008f38 <_strtod_l+0x858>)
 8008da2:	3d01      	subs	r5, #1
 8008da4:	429d      	cmp	r5, r3
 8008da6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008daa:	da50      	bge.n	8008e4e <_strtod_l+0x76e>
 8008dac:	1b5b      	subs	r3, r3, r5
 8008dae:	2b1f      	cmp	r3, #31
 8008db0:	eba2 0203 	sub.w	r2, r2, r3
 8008db4:	f04f 0101 	mov.w	r1, #1
 8008db8:	dc3d      	bgt.n	8008e36 <_strtod_l+0x756>
 8008dba:	fa01 f303 	lsl.w	r3, r1, r3
 8008dbe:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	9310      	str	r3, [sp, #64]	@ 0x40
 8008dc4:	18bd      	adds	r5, r7, r2
 8008dc6:	9b08      	ldr	r3, [sp, #32]
 8008dc8:	42af      	cmp	r7, r5
 8008dca:	4416      	add	r6, r2
 8008dcc:	441e      	add	r6, r3
 8008dce:	463b      	mov	r3, r7
 8008dd0:	bfa8      	it	ge
 8008dd2:	462b      	movge	r3, r5
 8008dd4:	42b3      	cmp	r3, r6
 8008dd6:	bfa8      	it	ge
 8008dd8:	4633      	movge	r3, r6
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	bfc2      	ittt	gt
 8008dde:	1aed      	subgt	r5, r5, r3
 8008de0:	1af6      	subgt	r6, r6, r3
 8008de2:	1aff      	subgt	r7, r7, r3
 8008de4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	dd16      	ble.n	8008e18 <_strtod_l+0x738>
 8008dea:	4641      	mov	r1, r8
 8008dec:	9805      	ldr	r0, [sp, #20]
 8008dee:	461a      	mov	r2, r3
 8008df0:	f003 f8bc 	bl	800bf6c <__pow5mult>
 8008df4:	4680      	mov	r8, r0
 8008df6:	2800      	cmp	r0, #0
 8008df8:	d0ba      	beq.n	8008d70 <_strtod_l+0x690>
 8008dfa:	4601      	mov	r1, r0
 8008dfc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008dfe:	9805      	ldr	r0, [sp, #20]
 8008e00:	f003 f812 	bl	800be28 <__multiply>
 8008e04:	900a      	str	r0, [sp, #40]	@ 0x28
 8008e06:	2800      	cmp	r0, #0
 8008e08:	f43f ae8d 	beq.w	8008b26 <_strtod_l+0x446>
 8008e0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008e0e:	9805      	ldr	r0, [sp, #20]
 8008e10:	f002 fef6 	bl	800bc00 <_Bfree>
 8008e14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e16:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e18:	2d00      	cmp	r5, #0
 8008e1a:	dc1d      	bgt.n	8008e58 <_strtod_l+0x778>
 8008e1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	dd23      	ble.n	8008e6a <_strtod_l+0x78a>
 8008e22:	4649      	mov	r1, r9
 8008e24:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008e26:	9805      	ldr	r0, [sp, #20]
 8008e28:	f003 f8a0 	bl	800bf6c <__pow5mult>
 8008e2c:	4681      	mov	r9, r0
 8008e2e:	b9e0      	cbnz	r0, 8008e6a <_strtod_l+0x78a>
 8008e30:	f04f 0900 	mov.w	r9, #0
 8008e34:	e677      	b.n	8008b26 <_strtod_l+0x446>
 8008e36:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008e3a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008e3e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008e42:	35e2      	adds	r5, #226	@ 0xe2
 8008e44:	fa01 f305 	lsl.w	r3, r1, r5
 8008e48:	9310      	str	r3, [sp, #64]	@ 0x40
 8008e4a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008e4c:	e7ba      	b.n	8008dc4 <_strtod_l+0x6e4>
 8008e4e:	2300      	movs	r3, #0
 8008e50:	9310      	str	r3, [sp, #64]	@ 0x40
 8008e52:	2301      	movs	r3, #1
 8008e54:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008e56:	e7b5      	b.n	8008dc4 <_strtod_l+0x6e4>
 8008e58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008e5a:	9805      	ldr	r0, [sp, #20]
 8008e5c:	462a      	mov	r2, r5
 8008e5e:	f003 f8df 	bl	800c020 <__lshift>
 8008e62:	901a      	str	r0, [sp, #104]	@ 0x68
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d1d9      	bne.n	8008e1c <_strtod_l+0x73c>
 8008e68:	e65d      	b.n	8008b26 <_strtod_l+0x446>
 8008e6a:	2e00      	cmp	r6, #0
 8008e6c:	dd07      	ble.n	8008e7e <_strtod_l+0x79e>
 8008e6e:	4649      	mov	r1, r9
 8008e70:	9805      	ldr	r0, [sp, #20]
 8008e72:	4632      	mov	r2, r6
 8008e74:	f003 f8d4 	bl	800c020 <__lshift>
 8008e78:	4681      	mov	r9, r0
 8008e7a:	2800      	cmp	r0, #0
 8008e7c:	d0d8      	beq.n	8008e30 <_strtod_l+0x750>
 8008e7e:	2f00      	cmp	r7, #0
 8008e80:	dd08      	ble.n	8008e94 <_strtod_l+0x7b4>
 8008e82:	4641      	mov	r1, r8
 8008e84:	9805      	ldr	r0, [sp, #20]
 8008e86:	463a      	mov	r2, r7
 8008e88:	f003 f8ca 	bl	800c020 <__lshift>
 8008e8c:	4680      	mov	r8, r0
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	f43f ae49 	beq.w	8008b26 <_strtod_l+0x446>
 8008e94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008e96:	9805      	ldr	r0, [sp, #20]
 8008e98:	464a      	mov	r2, r9
 8008e9a:	f003 f949 	bl	800c130 <__mdiff>
 8008e9e:	4604      	mov	r4, r0
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	f43f ae40 	beq.w	8008b26 <_strtod_l+0x446>
 8008ea6:	68c3      	ldr	r3, [r0, #12]
 8008ea8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008eaa:	2300      	movs	r3, #0
 8008eac:	60c3      	str	r3, [r0, #12]
 8008eae:	4641      	mov	r1, r8
 8008eb0:	f003 f922 	bl	800c0f8 <__mcmp>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	da45      	bge.n	8008f44 <_strtod_l+0x864>
 8008eb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008eba:	ea53 030a 	orrs.w	r3, r3, sl
 8008ebe:	d16b      	bne.n	8008f98 <_strtod_l+0x8b8>
 8008ec0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d167      	bne.n	8008f98 <_strtod_l+0x8b8>
 8008ec8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008ecc:	0d1b      	lsrs	r3, r3, #20
 8008ece:	051b      	lsls	r3, r3, #20
 8008ed0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008ed4:	d960      	bls.n	8008f98 <_strtod_l+0x8b8>
 8008ed6:	6963      	ldr	r3, [r4, #20]
 8008ed8:	b913      	cbnz	r3, 8008ee0 <_strtod_l+0x800>
 8008eda:	6923      	ldr	r3, [r4, #16]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	dd5b      	ble.n	8008f98 <_strtod_l+0x8b8>
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	9805      	ldr	r0, [sp, #20]
 8008ee6:	f003 f89b 	bl	800c020 <__lshift>
 8008eea:	4641      	mov	r1, r8
 8008eec:	4604      	mov	r4, r0
 8008eee:	f003 f903 	bl	800c0f8 <__mcmp>
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	dd50      	ble.n	8008f98 <_strtod_l+0x8b8>
 8008ef6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008efa:	9a08      	ldr	r2, [sp, #32]
 8008efc:	0d1b      	lsrs	r3, r3, #20
 8008efe:	051b      	lsls	r3, r3, #20
 8008f00:	2a00      	cmp	r2, #0
 8008f02:	d06a      	beq.n	8008fda <_strtod_l+0x8fa>
 8008f04:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008f08:	d867      	bhi.n	8008fda <_strtod_l+0x8fa>
 8008f0a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008f0e:	f67f ae9d 	bls.w	8008c4c <_strtod_l+0x56c>
 8008f12:	4b0a      	ldr	r3, [pc, #40]	@ (8008f3c <_strtod_l+0x85c>)
 8008f14:	4650      	mov	r0, sl
 8008f16:	4659      	mov	r1, fp
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f7f7 fb8d 	bl	8000638 <__aeabi_dmul>
 8008f1e:	4b08      	ldr	r3, [pc, #32]	@ (8008f40 <_strtod_l+0x860>)
 8008f20:	400b      	ands	r3, r1
 8008f22:	4682      	mov	sl, r0
 8008f24:	468b      	mov	fp, r1
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	f47f ae08 	bne.w	8008b3c <_strtod_l+0x45c>
 8008f2c:	9a05      	ldr	r2, [sp, #20]
 8008f2e:	2322      	movs	r3, #34	@ 0x22
 8008f30:	6013      	str	r3, [r2, #0]
 8008f32:	e603      	b.n	8008b3c <_strtod_l+0x45c>
 8008f34:	0800d520 	.word	0x0800d520
 8008f38:	fffffc02 	.word	0xfffffc02
 8008f3c:	39500000 	.word	0x39500000
 8008f40:	7ff00000 	.word	0x7ff00000
 8008f44:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008f48:	d165      	bne.n	8009016 <_strtod_l+0x936>
 8008f4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008f4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f50:	b35a      	cbz	r2, 8008faa <_strtod_l+0x8ca>
 8008f52:	4a9f      	ldr	r2, [pc, #636]	@ (80091d0 <_strtod_l+0xaf0>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d12b      	bne.n	8008fb0 <_strtod_l+0x8d0>
 8008f58:	9b08      	ldr	r3, [sp, #32]
 8008f5a:	4651      	mov	r1, sl
 8008f5c:	b303      	cbz	r3, 8008fa0 <_strtod_l+0x8c0>
 8008f5e:	4b9d      	ldr	r3, [pc, #628]	@ (80091d4 <_strtod_l+0xaf4>)
 8008f60:	465a      	mov	r2, fp
 8008f62:	4013      	ands	r3, r2
 8008f64:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008f68:	f04f 32ff 	mov.w	r2, #4294967295
 8008f6c:	d81b      	bhi.n	8008fa6 <_strtod_l+0x8c6>
 8008f6e:	0d1b      	lsrs	r3, r3, #20
 8008f70:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008f74:	fa02 f303 	lsl.w	r3, r2, r3
 8008f78:	4299      	cmp	r1, r3
 8008f7a:	d119      	bne.n	8008fb0 <_strtod_l+0x8d0>
 8008f7c:	4b96      	ldr	r3, [pc, #600]	@ (80091d8 <_strtod_l+0xaf8>)
 8008f7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d102      	bne.n	8008f8a <_strtod_l+0x8aa>
 8008f84:	3101      	adds	r1, #1
 8008f86:	f43f adce 	beq.w	8008b26 <_strtod_l+0x446>
 8008f8a:	4b92      	ldr	r3, [pc, #584]	@ (80091d4 <_strtod_l+0xaf4>)
 8008f8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f8e:	401a      	ands	r2, r3
 8008f90:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008f94:	f04f 0a00 	mov.w	sl, #0
 8008f98:	9b08      	ldr	r3, [sp, #32]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1b9      	bne.n	8008f12 <_strtod_l+0x832>
 8008f9e:	e5cd      	b.n	8008b3c <_strtod_l+0x45c>
 8008fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8008fa4:	e7e8      	b.n	8008f78 <_strtod_l+0x898>
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	e7e6      	b.n	8008f78 <_strtod_l+0x898>
 8008faa:	ea53 030a 	orrs.w	r3, r3, sl
 8008fae:	d0a2      	beq.n	8008ef6 <_strtod_l+0x816>
 8008fb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008fb2:	b1db      	cbz	r3, 8008fec <_strtod_l+0x90c>
 8008fb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008fb6:	4213      	tst	r3, r2
 8008fb8:	d0ee      	beq.n	8008f98 <_strtod_l+0x8b8>
 8008fba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fbc:	9a08      	ldr	r2, [sp, #32]
 8008fbe:	4650      	mov	r0, sl
 8008fc0:	4659      	mov	r1, fp
 8008fc2:	b1bb      	cbz	r3, 8008ff4 <_strtod_l+0x914>
 8008fc4:	f7ff fb6b 	bl	800869e <sulp>
 8008fc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008fcc:	ec53 2b10 	vmov	r2, r3, d0
 8008fd0:	f7f7 f97c 	bl	80002cc <__adddf3>
 8008fd4:	4682      	mov	sl, r0
 8008fd6:	468b      	mov	fp, r1
 8008fd8:	e7de      	b.n	8008f98 <_strtod_l+0x8b8>
 8008fda:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008fde:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008fe2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008fe6:	f04f 3aff 	mov.w	sl, #4294967295
 8008fea:	e7d5      	b.n	8008f98 <_strtod_l+0x8b8>
 8008fec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008fee:	ea13 0f0a 	tst.w	r3, sl
 8008ff2:	e7e1      	b.n	8008fb8 <_strtod_l+0x8d8>
 8008ff4:	f7ff fb53 	bl	800869e <sulp>
 8008ff8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ffc:	ec53 2b10 	vmov	r2, r3, d0
 8009000:	f7f7 f962 	bl	80002c8 <__aeabi_dsub>
 8009004:	2200      	movs	r2, #0
 8009006:	2300      	movs	r3, #0
 8009008:	4682      	mov	sl, r0
 800900a:	468b      	mov	fp, r1
 800900c:	f7f7 fd7c 	bl	8000b08 <__aeabi_dcmpeq>
 8009010:	2800      	cmp	r0, #0
 8009012:	d0c1      	beq.n	8008f98 <_strtod_l+0x8b8>
 8009014:	e61a      	b.n	8008c4c <_strtod_l+0x56c>
 8009016:	4641      	mov	r1, r8
 8009018:	4620      	mov	r0, r4
 800901a:	f003 f9e5 	bl	800c3e8 <__ratio>
 800901e:	ec57 6b10 	vmov	r6, r7, d0
 8009022:	2200      	movs	r2, #0
 8009024:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009028:	4630      	mov	r0, r6
 800902a:	4639      	mov	r1, r7
 800902c:	f7f7 fd80 	bl	8000b30 <__aeabi_dcmple>
 8009030:	2800      	cmp	r0, #0
 8009032:	d06f      	beq.n	8009114 <_strtod_l+0xa34>
 8009034:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009036:	2b00      	cmp	r3, #0
 8009038:	d17a      	bne.n	8009130 <_strtod_l+0xa50>
 800903a:	f1ba 0f00 	cmp.w	sl, #0
 800903e:	d158      	bne.n	80090f2 <_strtod_l+0xa12>
 8009040:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009042:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009046:	2b00      	cmp	r3, #0
 8009048:	d15a      	bne.n	8009100 <_strtod_l+0xa20>
 800904a:	4b64      	ldr	r3, [pc, #400]	@ (80091dc <_strtod_l+0xafc>)
 800904c:	2200      	movs	r2, #0
 800904e:	4630      	mov	r0, r6
 8009050:	4639      	mov	r1, r7
 8009052:	f7f7 fd63 	bl	8000b1c <__aeabi_dcmplt>
 8009056:	2800      	cmp	r0, #0
 8009058:	d159      	bne.n	800910e <_strtod_l+0xa2e>
 800905a:	4630      	mov	r0, r6
 800905c:	4639      	mov	r1, r7
 800905e:	4b60      	ldr	r3, [pc, #384]	@ (80091e0 <_strtod_l+0xb00>)
 8009060:	2200      	movs	r2, #0
 8009062:	f7f7 fae9 	bl	8000638 <__aeabi_dmul>
 8009066:	4606      	mov	r6, r0
 8009068:	460f      	mov	r7, r1
 800906a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800906e:	9606      	str	r6, [sp, #24]
 8009070:	9307      	str	r3, [sp, #28]
 8009072:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009076:	4d57      	ldr	r5, [pc, #348]	@ (80091d4 <_strtod_l+0xaf4>)
 8009078:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800907c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800907e:	401d      	ands	r5, r3
 8009080:	4b58      	ldr	r3, [pc, #352]	@ (80091e4 <_strtod_l+0xb04>)
 8009082:	429d      	cmp	r5, r3
 8009084:	f040 80b2 	bne.w	80091ec <_strtod_l+0xb0c>
 8009088:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800908a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800908e:	ec4b ab10 	vmov	d0, sl, fp
 8009092:	f003 f8e1 	bl	800c258 <__ulp>
 8009096:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800909a:	ec51 0b10 	vmov	r0, r1, d0
 800909e:	f7f7 facb 	bl	8000638 <__aeabi_dmul>
 80090a2:	4652      	mov	r2, sl
 80090a4:	465b      	mov	r3, fp
 80090a6:	f7f7 f911 	bl	80002cc <__adddf3>
 80090aa:	460b      	mov	r3, r1
 80090ac:	4949      	ldr	r1, [pc, #292]	@ (80091d4 <_strtod_l+0xaf4>)
 80090ae:	4a4e      	ldr	r2, [pc, #312]	@ (80091e8 <_strtod_l+0xb08>)
 80090b0:	4019      	ands	r1, r3
 80090b2:	4291      	cmp	r1, r2
 80090b4:	4682      	mov	sl, r0
 80090b6:	d942      	bls.n	800913e <_strtod_l+0xa5e>
 80090b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80090ba:	4b47      	ldr	r3, [pc, #284]	@ (80091d8 <_strtod_l+0xaf8>)
 80090bc:	429a      	cmp	r2, r3
 80090be:	d103      	bne.n	80090c8 <_strtod_l+0x9e8>
 80090c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80090c2:	3301      	adds	r3, #1
 80090c4:	f43f ad2f 	beq.w	8008b26 <_strtod_l+0x446>
 80090c8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80091d8 <_strtod_l+0xaf8>
 80090cc:	f04f 3aff 	mov.w	sl, #4294967295
 80090d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80090d2:	9805      	ldr	r0, [sp, #20]
 80090d4:	f002 fd94 	bl	800bc00 <_Bfree>
 80090d8:	9805      	ldr	r0, [sp, #20]
 80090da:	4649      	mov	r1, r9
 80090dc:	f002 fd90 	bl	800bc00 <_Bfree>
 80090e0:	9805      	ldr	r0, [sp, #20]
 80090e2:	4641      	mov	r1, r8
 80090e4:	f002 fd8c 	bl	800bc00 <_Bfree>
 80090e8:	9805      	ldr	r0, [sp, #20]
 80090ea:	4621      	mov	r1, r4
 80090ec:	f002 fd88 	bl	800bc00 <_Bfree>
 80090f0:	e619      	b.n	8008d26 <_strtod_l+0x646>
 80090f2:	f1ba 0f01 	cmp.w	sl, #1
 80090f6:	d103      	bne.n	8009100 <_strtod_l+0xa20>
 80090f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	f43f ada6 	beq.w	8008c4c <_strtod_l+0x56c>
 8009100:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80091b0 <_strtod_l+0xad0>
 8009104:	4f35      	ldr	r7, [pc, #212]	@ (80091dc <_strtod_l+0xafc>)
 8009106:	ed8d 7b06 	vstr	d7, [sp, #24]
 800910a:	2600      	movs	r6, #0
 800910c:	e7b1      	b.n	8009072 <_strtod_l+0x992>
 800910e:	4f34      	ldr	r7, [pc, #208]	@ (80091e0 <_strtod_l+0xb00>)
 8009110:	2600      	movs	r6, #0
 8009112:	e7aa      	b.n	800906a <_strtod_l+0x98a>
 8009114:	4b32      	ldr	r3, [pc, #200]	@ (80091e0 <_strtod_l+0xb00>)
 8009116:	4630      	mov	r0, r6
 8009118:	4639      	mov	r1, r7
 800911a:	2200      	movs	r2, #0
 800911c:	f7f7 fa8c 	bl	8000638 <__aeabi_dmul>
 8009120:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009122:	4606      	mov	r6, r0
 8009124:	460f      	mov	r7, r1
 8009126:	2b00      	cmp	r3, #0
 8009128:	d09f      	beq.n	800906a <_strtod_l+0x98a>
 800912a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800912e:	e7a0      	b.n	8009072 <_strtod_l+0x992>
 8009130:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80091b8 <_strtod_l+0xad8>
 8009134:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009138:	ec57 6b17 	vmov	r6, r7, d7
 800913c:	e799      	b.n	8009072 <_strtod_l+0x992>
 800913e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009142:	9b08      	ldr	r3, [sp, #32]
 8009144:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009148:	2b00      	cmp	r3, #0
 800914a:	d1c1      	bne.n	80090d0 <_strtod_l+0x9f0>
 800914c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009150:	0d1b      	lsrs	r3, r3, #20
 8009152:	051b      	lsls	r3, r3, #20
 8009154:	429d      	cmp	r5, r3
 8009156:	d1bb      	bne.n	80090d0 <_strtod_l+0x9f0>
 8009158:	4630      	mov	r0, r6
 800915a:	4639      	mov	r1, r7
 800915c:	f7f7 fdcc 	bl	8000cf8 <__aeabi_d2lz>
 8009160:	f7f7 fa3c 	bl	80005dc <__aeabi_l2d>
 8009164:	4602      	mov	r2, r0
 8009166:	460b      	mov	r3, r1
 8009168:	4630      	mov	r0, r6
 800916a:	4639      	mov	r1, r7
 800916c:	f7f7 f8ac 	bl	80002c8 <__aeabi_dsub>
 8009170:	460b      	mov	r3, r1
 8009172:	4602      	mov	r2, r0
 8009174:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009178:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800917c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800917e:	ea46 060a 	orr.w	r6, r6, sl
 8009182:	431e      	orrs	r6, r3
 8009184:	d06f      	beq.n	8009266 <_strtod_l+0xb86>
 8009186:	a30e      	add	r3, pc, #56	@ (adr r3, 80091c0 <_strtod_l+0xae0>)
 8009188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918c:	f7f7 fcc6 	bl	8000b1c <__aeabi_dcmplt>
 8009190:	2800      	cmp	r0, #0
 8009192:	f47f acd3 	bne.w	8008b3c <_strtod_l+0x45c>
 8009196:	a30c      	add	r3, pc, #48	@ (adr r3, 80091c8 <_strtod_l+0xae8>)
 8009198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091a0:	f7f7 fcda 	bl	8000b58 <__aeabi_dcmpgt>
 80091a4:	2800      	cmp	r0, #0
 80091a6:	d093      	beq.n	80090d0 <_strtod_l+0x9f0>
 80091a8:	e4c8      	b.n	8008b3c <_strtod_l+0x45c>
 80091aa:	bf00      	nop
 80091ac:	f3af 8000 	nop.w
 80091b0:	00000000 	.word	0x00000000
 80091b4:	bff00000 	.word	0xbff00000
 80091b8:	00000000 	.word	0x00000000
 80091bc:	3ff00000 	.word	0x3ff00000
 80091c0:	94a03595 	.word	0x94a03595
 80091c4:	3fdfffff 	.word	0x3fdfffff
 80091c8:	35afe535 	.word	0x35afe535
 80091cc:	3fe00000 	.word	0x3fe00000
 80091d0:	000fffff 	.word	0x000fffff
 80091d4:	7ff00000 	.word	0x7ff00000
 80091d8:	7fefffff 	.word	0x7fefffff
 80091dc:	3ff00000 	.word	0x3ff00000
 80091e0:	3fe00000 	.word	0x3fe00000
 80091e4:	7fe00000 	.word	0x7fe00000
 80091e8:	7c9fffff 	.word	0x7c9fffff
 80091ec:	9b08      	ldr	r3, [sp, #32]
 80091ee:	b323      	cbz	r3, 800923a <_strtod_l+0xb5a>
 80091f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80091f4:	d821      	bhi.n	800923a <_strtod_l+0xb5a>
 80091f6:	a328      	add	r3, pc, #160	@ (adr r3, 8009298 <_strtod_l+0xbb8>)
 80091f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fc:	4630      	mov	r0, r6
 80091fe:	4639      	mov	r1, r7
 8009200:	f7f7 fc96 	bl	8000b30 <__aeabi_dcmple>
 8009204:	b1a0      	cbz	r0, 8009230 <_strtod_l+0xb50>
 8009206:	4639      	mov	r1, r7
 8009208:	4630      	mov	r0, r6
 800920a:	f7f7 fced 	bl	8000be8 <__aeabi_d2uiz>
 800920e:	2801      	cmp	r0, #1
 8009210:	bf38      	it	cc
 8009212:	2001      	movcc	r0, #1
 8009214:	f7f7 f996 	bl	8000544 <__aeabi_ui2d>
 8009218:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800921a:	4606      	mov	r6, r0
 800921c:	460f      	mov	r7, r1
 800921e:	b9fb      	cbnz	r3, 8009260 <_strtod_l+0xb80>
 8009220:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009224:	9014      	str	r0, [sp, #80]	@ 0x50
 8009226:	9315      	str	r3, [sp, #84]	@ 0x54
 8009228:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800922c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009230:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009232:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009236:	1b5b      	subs	r3, r3, r5
 8009238:	9311      	str	r3, [sp, #68]	@ 0x44
 800923a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800923e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009242:	f003 f809 	bl	800c258 <__ulp>
 8009246:	4650      	mov	r0, sl
 8009248:	ec53 2b10 	vmov	r2, r3, d0
 800924c:	4659      	mov	r1, fp
 800924e:	f7f7 f9f3 	bl	8000638 <__aeabi_dmul>
 8009252:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009256:	f7f7 f839 	bl	80002cc <__adddf3>
 800925a:	4682      	mov	sl, r0
 800925c:	468b      	mov	fp, r1
 800925e:	e770      	b.n	8009142 <_strtod_l+0xa62>
 8009260:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009264:	e7e0      	b.n	8009228 <_strtod_l+0xb48>
 8009266:	a30e      	add	r3, pc, #56	@ (adr r3, 80092a0 <_strtod_l+0xbc0>)
 8009268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926c:	f7f7 fc56 	bl	8000b1c <__aeabi_dcmplt>
 8009270:	e798      	b.n	80091a4 <_strtod_l+0xac4>
 8009272:	2300      	movs	r3, #0
 8009274:	930e      	str	r3, [sp, #56]	@ 0x38
 8009276:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009278:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800927a:	6013      	str	r3, [r2, #0]
 800927c:	f7ff ba6d 	b.w	800875a <_strtod_l+0x7a>
 8009280:	2a65      	cmp	r2, #101	@ 0x65
 8009282:	f43f ab68 	beq.w	8008956 <_strtod_l+0x276>
 8009286:	2a45      	cmp	r2, #69	@ 0x45
 8009288:	f43f ab65 	beq.w	8008956 <_strtod_l+0x276>
 800928c:	2301      	movs	r3, #1
 800928e:	f7ff bba0 	b.w	80089d2 <_strtod_l+0x2f2>
 8009292:	bf00      	nop
 8009294:	f3af 8000 	nop.w
 8009298:	ffc00000 	.word	0xffc00000
 800929c:	41dfffff 	.word	0x41dfffff
 80092a0:	94a03595 	.word	0x94a03595
 80092a4:	3fcfffff 	.word	0x3fcfffff

080092a8 <_strtod_r>:
 80092a8:	4b01      	ldr	r3, [pc, #4]	@ (80092b0 <_strtod_r+0x8>)
 80092aa:	f7ff ba19 	b.w	80086e0 <_strtod_l>
 80092ae:	bf00      	nop
 80092b0:	20000018 	.word	0x20000018

080092b4 <strtod>:
 80092b4:	460a      	mov	r2, r1
 80092b6:	4601      	mov	r1, r0
 80092b8:	4802      	ldr	r0, [pc, #8]	@ (80092c4 <strtod+0x10>)
 80092ba:	4b03      	ldr	r3, [pc, #12]	@ (80092c8 <strtod+0x14>)
 80092bc:	6800      	ldr	r0, [r0, #0]
 80092be:	f7ff ba0f 	b.w	80086e0 <_strtod_l>
 80092c2:	bf00      	nop
 80092c4:	20000184 	.word	0x20000184
 80092c8:	20000018 	.word	0x20000018

080092cc <__cvt>:
 80092cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092d0:	ec57 6b10 	vmov	r6, r7, d0
 80092d4:	2f00      	cmp	r7, #0
 80092d6:	460c      	mov	r4, r1
 80092d8:	4619      	mov	r1, r3
 80092da:	463b      	mov	r3, r7
 80092dc:	bfbb      	ittet	lt
 80092de:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80092e2:	461f      	movlt	r7, r3
 80092e4:	2300      	movge	r3, #0
 80092e6:	232d      	movlt	r3, #45	@ 0x2d
 80092e8:	700b      	strb	r3, [r1, #0]
 80092ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80092ec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80092f0:	4691      	mov	r9, r2
 80092f2:	f023 0820 	bic.w	r8, r3, #32
 80092f6:	bfbc      	itt	lt
 80092f8:	4632      	movlt	r2, r6
 80092fa:	4616      	movlt	r6, r2
 80092fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009300:	d005      	beq.n	800930e <__cvt+0x42>
 8009302:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009306:	d100      	bne.n	800930a <__cvt+0x3e>
 8009308:	3401      	adds	r4, #1
 800930a:	2102      	movs	r1, #2
 800930c:	e000      	b.n	8009310 <__cvt+0x44>
 800930e:	2103      	movs	r1, #3
 8009310:	ab03      	add	r3, sp, #12
 8009312:	9301      	str	r3, [sp, #4]
 8009314:	ab02      	add	r3, sp, #8
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	ec47 6b10 	vmov	d0, r6, r7
 800931c:	4653      	mov	r3, sl
 800931e:	4622      	mov	r2, r4
 8009320:	f001 fa12 	bl	800a748 <_dtoa_r>
 8009324:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009328:	4605      	mov	r5, r0
 800932a:	d119      	bne.n	8009360 <__cvt+0x94>
 800932c:	f019 0f01 	tst.w	r9, #1
 8009330:	d00e      	beq.n	8009350 <__cvt+0x84>
 8009332:	eb00 0904 	add.w	r9, r0, r4
 8009336:	2200      	movs	r2, #0
 8009338:	2300      	movs	r3, #0
 800933a:	4630      	mov	r0, r6
 800933c:	4639      	mov	r1, r7
 800933e:	f7f7 fbe3 	bl	8000b08 <__aeabi_dcmpeq>
 8009342:	b108      	cbz	r0, 8009348 <__cvt+0x7c>
 8009344:	f8cd 900c 	str.w	r9, [sp, #12]
 8009348:	2230      	movs	r2, #48	@ 0x30
 800934a:	9b03      	ldr	r3, [sp, #12]
 800934c:	454b      	cmp	r3, r9
 800934e:	d31e      	bcc.n	800938e <__cvt+0xc2>
 8009350:	9b03      	ldr	r3, [sp, #12]
 8009352:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009354:	1b5b      	subs	r3, r3, r5
 8009356:	4628      	mov	r0, r5
 8009358:	6013      	str	r3, [r2, #0]
 800935a:	b004      	add	sp, #16
 800935c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009360:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009364:	eb00 0904 	add.w	r9, r0, r4
 8009368:	d1e5      	bne.n	8009336 <__cvt+0x6a>
 800936a:	7803      	ldrb	r3, [r0, #0]
 800936c:	2b30      	cmp	r3, #48	@ 0x30
 800936e:	d10a      	bne.n	8009386 <__cvt+0xba>
 8009370:	2200      	movs	r2, #0
 8009372:	2300      	movs	r3, #0
 8009374:	4630      	mov	r0, r6
 8009376:	4639      	mov	r1, r7
 8009378:	f7f7 fbc6 	bl	8000b08 <__aeabi_dcmpeq>
 800937c:	b918      	cbnz	r0, 8009386 <__cvt+0xba>
 800937e:	f1c4 0401 	rsb	r4, r4, #1
 8009382:	f8ca 4000 	str.w	r4, [sl]
 8009386:	f8da 3000 	ldr.w	r3, [sl]
 800938a:	4499      	add	r9, r3
 800938c:	e7d3      	b.n	8009336 <__cvt+0x6a>
 800938e:	1c59      	adds	r1, r3, #1
 8009390:	9103      	str	r1, [sp, #12]
 8009392:	701a      	strb	r2, [r3, #0]
 8009394:	e7d9      	b.n	800934a <__cvt+0x7e>

08009396 <__exponent>:
 8009396:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009398:	2900      	cmp	r1, #0
 800939a:	bfba      	itte	lt
 800939c:	4249      	neglt	r1, r1
 800939e:	232d      	movlt	r3, #45	@ 0x2d
 80093a0:	232b      	movge	r3, #43	@ 0x2b
 80093a2:	2909      	cmp	r1, #9
 80093a4:	7002      	strb	r2, [r0, #0]
 80093a6:	7043      	strb	r3, [r0, #1]
 80093a8:	dd29      	ble.n	80093fe <__exponent+0x68>
 80093aa:	f10d 0307 	add.w	r3, sp, #7
 80093ae:	461d      	mov	r5, r3
 80093b0:	270a      	movs	r7, #10
 80093b2:	461a      	mov	r2, r3
 80093b4:	fbb1 f6f7 	udiv	r6, r1, r7
 80093b8:	fb07 1416 	mls	r4, r7, r6, r1
 80093bc:	3430      	adds	r4, #48	@ 0x30
 80093be:	f802 4c01 	strb.w	r4, [r2, #-1]
 80093c2:	460c      	mov	r4, r1
 80093c4:	2c63      	cmp	r4, #99	@ 0x63
 80093c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80093ca:	4631      	mov	r1, r6
 80093cc:	dcf1      	bgt.n	80093b2 <__exponent+0x1c>
 80093ce:	3130      	adds	r1, #48	@ 0x30
 80093d0:	1e94      	subs	r4, r2, #2
 80093d2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80093d6:	1c41      	adds	r1, r0, #1
 80093d8:	4623      	mov	r3, r4
 80093da:	42ab      	cmp	r3, r5
 80093dc:	d30a      	bcc.n	80093f4 <__exponent+0x5e>
 80093de:	f10d 0309 	add.w	r3, sp, #9
 80093e2:	1a9b      	subs	r3, r3, r2
 80093e4:	42ac      	cmp	r4, r5
 80093e6:	bf88      	it	hi
 80093e8:	2300      	movhi	r3, #0
 80093ea:	3302      	adds	r3, #2
 80093ec:	4403      	add	r3, r0
 80093ee:	1a18      	subs	r0, r3, r0
 80093f0:	b003      	add	sp, #12
 80093f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093f4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80093f8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80093fc:	e7ed      	b.n	80093da <__exponent+0x44>
 80093fe:	2330      	movs	r3, #48	@ 0x30
 8009400:	3130      	adds	r1, #48	@ 0x30
 8009402:	7083      	strb	r3, [r0, #2]
 8009404:	70c1      	strb	r1, [r0, #3]
 8009406:	1d03      	adds	r3, r0, #4
 8009408:	e7f1      	b.n	80093ee <__exponent+0x58>
	...

0800940c <_printf_float>:
 800940c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009410:	b08d      	sub	sp, #52	@ 0x34
 8009412:	460c      	mov	r4, r1
 8009414:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009418:	4616      	mov	r6, r2
 800941a:	461f      	mov	r7, r3
 800941c:	4605      	mov	r5, r0
 800941e:	f001 f873 	bl	800a508 <_localeconv_r>
 8009422:	6803      	ldr	r3, [r0, #0]
 8009424:	9304      	str	r3, [sp, #16]
 8009426:	4618      	mov	r0, r3
 8009428:	f7f6 ff42 	bl	80002b0 <strlen>
 800942c:	2300      	movs	r3, #0
 800942e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009430:	f8d8 3000 	ldr.w	r3, [r8]
 8009434:	9005      	str	r0, [sp, #20]
 8009436:	3307      	adds	r3, #7
 8009438:	f023 0307 	bic.w	r3, r3, #7
 800943c:	f103 0208 	add.w	r2, r3, #8
 8009440:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009444:	f8d4 b000 	ldr.w	fp, [r4]
 8009448:	f8c8 2000 	str.w	r2, [r8]
 800944c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009450:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009454:	9307      	str	r3, [sp, #28]
 8009456:	f8cd 8018 	str.w	r8, [sp, #24]
 800945a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800945e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009462:	4b9c      	ldr	r3, [pc, #624]	@ (80096d4 <_printf_float+0x2c8>)
 8009464:	f04f 32ff 	mov.w	r2, #4294967295
 8009468:	f7f7 fb80 	bl	8000b6c <__aeabi_dcmpun>
 800946c:	bb70      	cbnz	r0, 80094cc <_printf_float+0xc0>
 800946e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009472:	4b98      	ldr	r3, [pc, #608]	@ (80096d4 <_printf_float+0x2c8>)
 8009474:	f04f 32ff 	mov.w	r2, #4294967295
 8009478:	f7f7 fb5a 	bl	8000b30 <__aeabi_dcmple>
 800947c:	bb30      	cbnz	r0, 80094cc <_printf_float+0xc0>
 800947e:	2200      	movs	r2, #0
 8009480:	2300      	movs	r3, #0
 8009482:	4640      	mov	r0, r8
 8009484:	4649      	mov	r1, r9
 8009486:	f7f7 fb49 	bl	8000b1c <__aeabi_dcmplt>
 800948a:	b110      	cbz	r0, 8009492 <_printf_float+0x86>
 800948c:	232d      	movs	r3, #45	@ 0x2d
 800948e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009492:	4a91      	ldr	r2, [pc, #580]	@ (80096d8 <_printf_float+0x2cc>)
 8009494:	4b91      	ldr	r3, [pc, #580]	@ (80096dc <_printf_float+0x2d0>)
 8009496:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800949a:	bf8c      	ite	hi
 800949c:	4690      	movhi	r8, r2
 800949e:	4698      	movls	r8, r3
 80094a0:	2303      	movs	r3, #3
 80094a2:	6123      	str	r3, [r4, #16]
 80094a4:	f02b 0304 	bic.w	r3, fp, #4
 80094a8:	6023      	str	r3, [r4, #0]
 80094aa:	f04f 0900 	mov.w	r9, #0
 80094ae:	9700      	str	r7, [sp, #0]
 80094b0:	4633      	mov	r3, r6
 80094b2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80094b4:	4621      	mov	r1, r4
 80094b6:	4628      	mov	r0, r5
 80094b8:	f000 f9d2 	bl	8009860 <_printf_common>
 80094bc:	3001      	adds	r0, #1
 80094be:	f040 808d 	bne.w	80095dc <_printf_float+0x1d0>
 80094c2:	f04f 30ff 	mov.w	r0, #4294967295
 80094c6:	b00d      	add	sp, #52	@ 0x34
 80094c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094cc:	4642      	mov	r2, r8
 80094ce:	464b      	mov	r3, r9
 80094d0:	4640      	mov	r0, r8
 80094d2:	4649      	mov	r1, r9
 80094d4:	f7f7 fb4a 	bl	8000b6c <__aeabi_dcmpun>
 80094d8:	b140      	cbz	r0, 80094ec <_printf_float+0xe0>
 80094da:	464b      	mov	r3, r9
 80094dc:	2b00      	cmp	r3, #0
 80094de:	bfbc      	itt	lt
 80094e0:	232d      	movlt	r3, #45	@ 0x2d
 80094e2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80094e6:	4a7e      	ldr	r2, [pc, #504]	@ (80096e0 <_printf_float+0x2d4>)
 80094e8:	4b7e      	ldr	r3, [pc, #504]	@ (80096e4 <_printf_float+0x2d8>)
 80094ea:	e7d4      	b.n	8009496 <_printf_float+0x8a>
 80094ec:	6863      	ldr	r3, [r4, #4]
 80094ee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80094f2:	9206      	str	r2, [sp, #24]
 80094f4:	1c5a      	adds	r2, r3, #1
 80094f6:	d13b      	bne.n	8009570 <_printf_float+0x164>
 80094f8:	2306      	movs	r3, #6
 80094fa:	6063      	str	r3, [r4, #4]
 80094fc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009500:	2300      	movs	r3, #0
 8009502:	6022      	str	r2, [r4, #0]
 8009504:	9303      	str	r3, [sp, #12]
 8009506:	ab0a      	add	r3, sp, #40	@ 0x28
 8009508:	e9cd a301 	strd	sl, r3, [sp, #4]
 800950c:	ab09      	add	r3, sp, #36	@ 0x24
 800950e:	9300      	str	r3, [sp, #0]
 8009510:	6861      	ldr	r1, [r4, #4]
 8009512:	ec49 8b10 	vmov	d0, r8, r9
 8009516:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800951a:	4628      	mov	r0, r5
 800951c:	f7ff fed6 	bl	80092cc <__cvt>
 8009520:	9b06      	ldr	r3, [sp, #24]
 8009522:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009524:	2b47      	cmp	r3, #71	@ 0x47
 8009526:	4680      	mov	r8, r0
 8009528:	d129      	bne.n	800957e <_printf_float+0x172>
 800952a:	1cc8      	adds	r0, r1, #3
 800952c:	db02      	blt.n	8009534 <_printf_float+0x128>
 800952e:	6863      	ldr	r3, [r4, #4]
 8009530:	4299      	cmp	r1, r3
 8009532:	dd41      	ble.n	80095b8 <_printf_float+0x1ac>
 8009534:	f1aa 0a02 	sub.w	sl, sl, #2
 8009538:	fa5f fa8a 	uxtb.w	sl, sl
 800953c:	3901      	subs	r1, #1
 800953e:	4652      	mov	r2, sl
 8009540:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009544:	9109      	str	r1, [sp, #36]	@ 0x24
 8009546:	f7ff ff26 	bl	8009396 <__exponent>
 800954a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800954c:	1813      	adds	r3, r2, r0
 800954e:	2a01      	cmp	r2, #1
 8009550:	4681      	mov	r9, r0
 8009552:	6123      	str	r3, [r4, #16]
 8009554:	dc02      	bgt.n	800955c <_printf_float+0x150>
 8009556:	6822      	ldr	r2, [r4, #0]
 8009558:	07d2      	lsls	r2, r2, #31
 800955a:	d501      	bpl.n	8009560 <_printf_float+0x154>
 800955c:	3301      	adds	r3, #1
 800955e:	6123      	str	r3, [r4, #16]
 8009560:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009564:	2b00      	cmp	r3, #0
 8009566:	d0a2      	beq.n	80094ae <_printf_float+0xa2>
 8009568:	232d      	movs	r3, #45	@ 0x2d
 800956a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800956e:	e79e      	b.n	80094ae <_printf_float+0xa2>
 8009570:	9a06      	ldr	r2, [sp, #24]
 8009572:	2a47      	cmp	r2, #71	@ 0x47
 8009574:	d1c2      	bne.n	80094fc <_printf_float+0xf0>
 8009576:	2b00      	cmp	r3, #0
 8009578:	d1c0      	bne.n	80094fc <_printf_float+0xf0>
 800957a:	2301      	movs	r3, #1
 800957c:	e7bd      	b.n	80094fa <_printf_float+0xee>
 800957e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009582:	d9db      	bls.n	800953c <_printf_float+0x130>
 8009584:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009588:	d118      	bne.n	80095bc <_printf_float+0x1b0>
 800958a:	2900      	cmp	r1, #0
 800958c:	6863      	ldr	r3, [r4, #4]
 800958e:	dd0b      	ble.n	80095a8 <_printf_float+0x19c>
 8009590:	6121      	str	r1, [r4, #16]
 8009592:	b913      	cbnz	r3, 800959a <_printf_float+0x18e>
 8009594:	6822      	ldr	r2, [r4, #0]
 8009596:	07d0      	lsls	r0, r2, #31
 8009598:	d502      	bpl.n	80095a0 <_printf_float+0x194>
 800959a:	3301      	adds	r3, #1
 800959c:	440b      	add	r3, r1
 800959e:	6123      	str	r3, [r4, #16]
 80095a0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80095a2:	f04f 0900 	mov.w	r9, #0
 80095a6:	e7db      	b.n	8009560 <_printf_float+0x154>
 80095a8:	b913      	cbnz	r3, 80095b0 <_printf_float+0x1a4>
 80095aa:	6822      	ldr	r2, [r4, #0]
 80095ac:	07d2      	lsls	r2, r2, #31
 80095ae:	d501      	bpl.n	80095b4 <_printf_float+0x1a8>
 80095b0:	3302      	adds	r3, #2
 80095b2:	e7f4      	b.n	800959e <_printf_float+0x192>
 80095b4:	2301      	movs	r3, #1
 80095b6:	e7f2      	b.n	800959e <_printf_float+0x192>
 80095b8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80095bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095be:	4299      	cmp	r1, r3
 80095c0:	db05      	blt.n	80095ce <_printf_float+0x1c2>
 80095c2:	6823      	ldr	r3, [r4, #0]
 80095c4:	6121      	str	r1, [r4, #16]
 80095c6:	07d8      	lsls	r0, r3, #31
 80095c8:	d5ea      	bpl.n	80095a0 <_printf_float+0x194>
 80095ca:	1c4b      	adds	r3, r1, #1
 80095cc:	e7e7      	b.n	800959e <_printf_float+0x192>
 80095ce:	2900      	cmp	r1, #0
 80095d0:	bfd4      	ite	le
 80095d2:	f1c1 0202 	rsble	r2, r1, #2
 80095d6:	2201      	movgt	r2, #1
 80095d8:	4413      	add	r3, r2
 80095da:	e7e0      	b.n	800959e <_printf_float+0x192>
 80095dc:	6823      	ldr	r3, [r4, #0]
 80095de:	055a      	lsls	r2, r3, #21
 80095e0:	d407      	bmi.n	80095f2 <_printf_float+0x1e6>
 80095e2:	6923      	ldr	r3, [r4, #16]
 80095e4:	4642      	mov	r2, r8
 80095e6:	4631      	mov	r1, r6
 80095e8:	4628      	mov	r0, r5
 80095ea:	47b8      	blx	r7
 80095ec:	3001      	adds	r0, #1
 80095ee:	d12b      	bne.n	8009648 <_printf_float+0x23c>
 80095f0:	e767      	b.n	80094c2 <_printf_float+0xb6>
 80095f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80095f6:	f240 80dd 	bls.w	80097b4 <_printf_float+0x3a8>
 80095fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80095fe:	2200      	movs	r2, #0
 8009600:	2300      	movs	r3, #0
 8009602:	f7f7 fa81 	bl	8000b08 <__aeabi_dcmpeq>
 8009606:	2800      	cmp	r0, #0
 8009608:	d033      	beq.n	8009672 <_printf_float+0x266>
 800960a:	4a37      	ldr	r2, [pc, #220]	@ (80096e8 <_printf_float+0x2dc>)
 800960c:	2301      	movs	r3, #1
 800960e:	4631      	mov	r1, r6
 8009610:	4628      	mov	r0, r5
 8009612:	47b8      	blx	r7
 8009614:	3001      	adds	r0, #1
 8009616:	f43f af54 	beq.w	80094c2 <_printf_float+0xb6>
 800961a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800961e:	4543      	cmp	r3, r8
 8009620:	db02      	blt.n	8009628 <_printf_float+0x21c>
 8009622:	6823      	ldr	r3, [r4, #0]
 8009624:	07d8      	lsls	r0, r3, #31
 8009626:	d50f      	bpl.n	8009648 <_printf_float+0x23c>
 8009628:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800962c:	4631      	mov	r1, r6
 800962e:	4628      	mov	r0, r5
 8009630:	47b8      	blx	r7
 8009632:	3001      	adds	r0, #1
 8009634:	f43f af45 	beq.w	80094c2 <_printf_float+0xb6>
 8009638:	f04f 0900 	mov.w	r9, #0
 800963c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009640:	f104 0a1a 	add.w	sl, r4, #26
 8009644:	45c8      	cmp	r8, r9
 8009646:	dc09      	bgt.n	800965c <_printf_float+0x250>
 8009648:	6823      	ldr	r3, [r4, #0]
 800964a:	079b      	lsls	r3, r3, #30
 800964c:	f100 8103 	bmi.w	8009856 <_printf_float+0x44a>
 8009650:	68e0      	ldr	r0, [r4, #12]
 8009652:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009654:	4298      	cmp	r0, r3
 8009656:	bfb8      	it	lt
 8009658:	4618      	movlt	r0, r3
 800965a:	e734      	b.n	80094c6 <_printf_float+0xba>
 800965c:	2301      	movs	r3, #1
 800965e:	4652      	mov	r2, sl
 8009660:	4631      	mov	r1, r6
 8009662:	4628      	mov	r0, r5
 8009664:	47b8      	blx	r7
 8009666:	3001      	adds	r0, #1
 8009668:	f43f af2b 	beq.w	80094c2 <_printf_float+0xb6>
 800966c:	f109 0901 	add.w	r9, r9, #1
 8009670:	e7e8      	b.n	8009644 <_printf_float+0x238>
 8009672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009674:	2b00      	cmp	r3, #0
 8009676:	dc39      	bgt.n	80096ec <_printf_float+0x2e0>
 8009678:	4a1b      	ldr	r2, [pc, #108]	@ (80096e8 <_printf_float+0x2dc>)
 800967a:	2301      	movs	r3, #1
 800967c:	4631      	mov	r1, r6
 800967e:	4628      	mov	r0, r5
 8009680:	47b8      	blx	r7
 8009682:	3001      	adds	r0, #1
 8009684:	f43f af1d 	beq.w	80094c2 <_printf_float+0xb6>
 8009688:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800968c:	ea59 0303 	orrs.w	r3, r9, r3
 8009690:	d102      	bne.n	8009698 <_printf_float+0x28c>
 8009692:	6823      	ldr	r3, [r4, #0]
 8009694:	07d9      	lsls	r1, r3, #31
 8009696:	d5d7      	bpl.n	8009648 <_printf_float+0x23c>
 8009698:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800969c:	4631      	mov	r1, r6
 800969e:	4628      	mov	r0, r5
 80096a0:	47b8      	blx	r7
 80096a2:	3001      	adds	r0, #1
 80096a4:	f43f af0d 	beq.w	80094c2 <_printf_float+0xb6>
 80096a8:	f04f 0a00 	mov.w	sl, #0
 80096ac:	f104 0b1a 	add.w	fp, r4, #26
 80096b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096b2:	425b      	negs	r3, r3
 80096b4:	4553      	cmp	r3, sl
 80096b6:	dc01      	bgt.n	80096bc <_printf_float+0x2b0>
 80096b8:	464b      	mov	r3, r9
 80096ba:	e793      	b.n	80095e4 <_printf_float+0x1d8>
 80096bc:	2301      	movs	r3, #1
 80096be:	465a      	mov	r2, fp
 80096c0:	4631      	mov	r1, r6
 80096c2:	4628      	mov	r0, r5
 80096c4:	47b8      	blx	r7
 80096c6:	3001      	adds	r0, #1
 80096c8:	f43f aefb 	beq.w	80094c2 <_printf_float+0xb6>
 80096cc:	f10a 0a01 	add.w	sl, sl, #1
 80096d0:	e7ee      	b.n	80096b0 <_printf_float+0x2a4>
 80096d2:	bf00      	nop
 80096d4:	7fefffff 	.word	0x7fefffff
 80096d8:	0800d326 	.word	0x0800d326
 80096dc:	0800d322 	.word	0x0800d322
 80096e0:	0800d32e 	.word	0x0800d32e
 80096e4:	0800d32a 	.word	0x0800d32a
 80096e8:	0800d332 	.word	0x0800d332
 80096ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80096ee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80096f2:	4553      	cmp	r3, sl
 80096f4:	bfa8      	it	ge
 80096f6:	4653      	movge	r3, sl
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	4699      	mov	r9, r3
 80096fc:	dc36      	bgt.n	800976c <_printf_float+0x360>
 80096fe:	f04f 0b00 	mov.w	fp, #0
 8009702:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009706:	f104 021a 	add.w	r2, r4, #26
 800970a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800970c:	9306      	str	r3, [sp, #24]
 800970e:	eba3 0309 	sub.w	r3, r3, r9
 8009712:	455b      	cmp	r3, fp
 8009714:	dc31      	bgt.n	800977a <_printf_float+0x36e>
 8009716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009718:	459a      	cmp	sl, r3
 800971a:	dc3a      	bgt.n	8009792 <_printf_float+0x386>
 800971c:	6823      	ldr	r3, [r4, #0]
 800971e:	07da      	lsls	r2, r3, #31
 8009720:	d437      	bmi.n	8009792 <_printf_float+0x386>
 8009722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009724:	ebaa 0903 	sub.w	r9, sl, r3
 8009728:	9b06      	ldr	r3, [sp, #24]
 800972a:	ebaa 0303 	sub.w	r3, sl, r3
 800972e:	4599      	cmp	r9, r3
 8009730:	bfa8      	it	ge
 8009732:	4699      	movge	r9, r3
 8009734:	f1b9 0f00 	cmp.w	r9, #0
 8009738:	dc33      	bgt.n	80097a2 <_printf_float+0x396>
 800973a:	f04f 0800 	mov.w	r8, #0
 800973e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009742:	f104 0b1a 	add.w	fp, r4, #26
 8009746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009748:	ebaa 0303 	sub.w	r3, sl, r3
 800974c:	eba3 0309 	sub.w	r3, r3, r9
 8009750:	4543      	cmp	r3, r8
 8009752:	f77f af79 	ble.w	8009648 <_printf_float+0x23c>
 8009756:	2301      	movs	r3, #1
 8009758:	465a      	mov	r2, fp
 800975a:	4631      	mov	r1, r6
 800975c:	4628      	mov	r0, r5
 800975e:	47b8      	blx	r7
 8009760:	3001      	adds	r0, #1
 8009762:	f43f aeae 	beq.w	80094c2 <_printf_float+0xb6>
 8009766:	f108 0801 	add.w	r8, r8, #1
 800976a:	e7ec      	b.n	8009746 <_printf_float+0x33a>
 800976c:	4642      	mov	r2, r8
 800976e:	4631      	mov	r1, r6
 8009770:	4628      	mov	r0, r5
 8009772:	47b8      	blx	r7
 8009774:	3001      	adds	r0, #1
 8009776:	d1c2      	bne.n	80096fe <_printf_float+0x2f2>
 8009778:	e6a3      	b.n	80094c2 <_printf_float+0xb6>
 800977a:	2301      	movs	r3, #1
 800977c:	4631      	mov	r1, r6
 800977e:	4628      	mov	r0, r5
 8009780:	9206      	str	r2, [sp, #24]
 8009782:	47b8      	blx	r7
 8009784:	3001      	adds	r0, #1
 8009786:	f43f ae9c 	beq.w	80094c2 <_printf_float+0xb6>
 800978a:	9a06      	ldr	r2, [sp, #24]
 800978c:	f10b 0b01 	add.w	fp, fp, #1
 8009790:	e7bb      	b.n	800970a <_printf_float+0x2fe>
 8009792:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009796:	4631      	mov	r1, r6
 8009798:	4628      	mov	r0, r5
 800979a:	47b8      	blx	r7
 800979c:	3001      	adds	r0, #1
 800979e:	d1c0      	bne.n	8009722 <_printf_float+0x316>
 80097a0:	e68f      	b.n	80094c2 <_printf_float+0xb6>
 80097a2:	9a06      	ldr	r2, [sp, #24]
 80097a4:	464b      	mov	r3, r9
 80097a6:	4442      	add	r2, r8
 80097a8:	4631      	mov	r1, r6
 80097aa:	4628      	mov	r0, r5
 80097ac:	47b8      	blx	r7
 80097ae:	3001      	adds	r0, #1
 80097b0:	d1c3      	bne.n	800973a <_printf_float+0x32e>
 80097b2:	e686      	b.n	80094c2 <_printf_float+0xb6>
 80097b4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80097b8:	f1ba 0f01 	cmp.w	sl, #1
 80097bc:	dc01      	bgt.n	80097c2 <_printf_float+0x3b6>
 80097be:	07db      	lsls	r3, r3, #31
 80097c0:	d536      	bpl.n	8009830 <_printf_float+0x424>
 80097c2:	2301      	movs	r3, #1
 80097c4:	4642      	mov	r2, r8
 80097c6:	4631      	mov	r1, r6
 80097c8:	4628      	mov	r0, r5
 80097ca:	47b8      	blx	r7
 80097cc:	3001      	adds	r0, #1
 80097ce:	f43f ae78 	beq.w	80094c2 <_printf_float+0xb6>
 80097d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097d6:	4631      	mov	r1, r6
 80097d8:	4628      	mov	r0, r5
 80097da:	47b8      	blx	r7
 80097dc:	3001      	adds	r0, #1
 80097de:	f43f ae70 	beq.w	80094c2 <_printf_float+0xb6>
 80097e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80097e6:	2200      	movs	r2, #0
 80097e8:	2300      	movs	r3, #0
 80097ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80097ee:	f7f7 f98b 	bl	8000b08 <__aeabi_dcmpeq>
 80097f2:	b9c0      	cbnz	r0, 8009826 <_printf_float+0x41a>
 80097f4:	4653      	mov	r3, sl
 80097f6:	f108 0201 	add.w	r2, r8, #1
 80097fa:	4631      	mov	r1, r6
 80097fc:	4628      	mov	r0, r5
 80097fe:	47b8      	blx	r7
 8009800:	3001      	adds	r0, #1
 8009802:	d10c      	bne.n	800981e <_printf_float+0x412>
 8009804:	e65d      	b.n	80094c2 <_printf_float+0xb6>
 8009806:	2301      	movs	r3, #1
 8009808:	465a      	mov	r2, fp
 800980a:	4631      	mov	r1, r6
 800980c:	4628      	mov	r0, r5
 800980e:	47b8      	blx	r7
 8009810:	3001      	adds	r0, #1
 8009812:	f43f ae56 	beq.w	80094c2 <_printf_float+0xb6>
 8009816:	f108 0801 	add.w	r8, r8, #1
 800981a:	45d0      	cmp	r8, sl
 800981c:	dbf3      	blt.n	8009806 <_printf_float+0x3fa>
 800981e:	464b      	mov	r3, r9
 8009820:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009824:	e6df      	b.n	80095e6 <_printf_float+0x1da>
 8009826:	f04f 0800 	mov.w	r8, #0
 800982a:	f104 0b1a 	add.w	fp, r4, #26
 800982e:	e7f4      	b.n	800981a <_printf_float+0x40e>
 8009830:	2301      	movs	r3, #1
 8009832:	4642      	mov	r2, r8
 8009834:	e7e1      	b.n	80097fa <_printf_float+0x3ee>
 8009836:	2301      	movs	r3, #1
 8009838:	464a      	mov	r2, r9
 800983a:	4631      	mov	r1, r6
 800983c:	4628      	mov	r0, r5
 800983e:	47b8      	blx	r7
 8009840:	3001      	adds	r0, #1
 8009842:	f43f ae3e 	beq.w	80094c2 <_printf_float+0xb6>
 8009846:	f108 0801 	add.w	r8, r8, #1
 800984a:	68e3      	ldr	r3, [r4, #12]
 800984c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800984e:	1a5b      	subs	r3, r3, r1
 8009850:	4543      	cmp	r3, r8
 8009852:	dcf0      	bgt.n	8009836 <_printf_float+0x42a>
 8009854:	e6fc      	b.n	8009650 <_printf_float+0x244>
 8009856:	f04f 0800 	mov.w	r8, #0
 800985a:	f104 0919 	add.w	r9, r4, #25
 800985e:	e7f4      	b.n	800984a <_printf_float+0x43e>

08009860 <_printf_common>:
 8009860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009864:	4616      	mov	r6, r2
 8009866:	4698      	mov	r8, r3
 8009868:	688a      	ldr	r2, [r1, #8]
 800986a:	690b      	ldr	r3, [r1, #16]
 800986c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009870:	4293      	cmp	r3, r2
 8009872:	bfb8      	it	lt
 8009874:	4613      	movlt	r3, r2
 8009876:	6033      	str	r3, [r6, #0]
 8009878:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800987c:	4607      	mov	r7, r0
 800987e:	460c      	mov	r4, r1
 8009880:	b10a      	cbz	r2, 8009886 <_printf_common+0x26>
 8009882:	3301      	adds	r3, #1
 8009884:	6033      	str	r3, [r6, #0]
 8009886:	6823      	ldr	r3, [r4, #0]
 8009888:	0699      	lsls	r1, r3, #26
 800988a:	bf42      	ittt	mi
 800988c:	6833      	ldrmi	r3, [r6, #0]
 800988e:	3302      	addmi	r3, #2
 8009890:	6033      	strmi	r3, [r6, #0]
 8009892:	6825      	ldr	r5, [r4, #0]
 8009894:	f015 0506 	ands.w	r5, r5, #6
 8009898:	d106      	bne.n	80098a8 <_printf_common+0x48>
 800989a:	f104 0a19 	add.w	sl, r4, #25
 800989e:	68e3      	ldr	r3, [r4, #12]
 80098a0:	6832      	ldr	r2, [r6, #0]
 80098a2:	1a9b      	subs	r3, r3, r2
 80098a4:	42ab      	cmp	r3, r5
 80098a6:	dc26      	bgt.n	80098f6 <_printf_common+0x96>
 80098a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80098ac:	6822      	ldr	r2, [r4, #0]
 80098ae:	3b00      	subs	r3, #0
 80098b0:	bf18      	it	ne
 80098b2:	2301      	movne	r3, #1
 80098b4:	0692      	lsls	r2, r2, #26
 80098b6:	d42b      	bmi.n	8009910 <_printf_common+0xb0>
 80098b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80098bc:	4641      	mov	r1, r8
 80098be:	4638      	mov	r0, r7
 80098c0:	47c8      	blx	r9
 80098c2:	3001      	adds	r0, #1
 80098c4:	d01e      	beq.n	8009904 <_printf_common+0xa4>
 80098c6:	6823      	ldr	r3, [r4, #0]
 80098c8:	6922      	ldr	r2, [r4, #16]
 80098ca:	f003 0306 	and.w	r3, r3, #6
 80098ce:	2b04      	cmp	r3, #4
 80098d0:	bf02      	ittt	eq
 80098d2:	68e5      	ldreq	r5, [r4, #12]
 80098d4:	6833      	ldreq	r3, [r6, #0]
 80098d6:	1aed      	subeq	r5, r5, r3
 80098d8:	68a3      	ldr	r3, [r4, #8]
 80098da:	bf0c      	ite	eq
 80098dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098e0:	2500      	movne	r5, #0
 80098e2:	4293      	cmp	r3, r2
 80098e4:	bfc4      	itt	gt
 80098e6:	1a9b      	subgt	r3, r3, r2
 80098e8:	18ed      	addgt	r5, r5, r3
 80098ea:	2600      	movs	r6, #0
 80098ec:	341a      	adds	r4, #26
 80098ee:	42b5      	cmp	r5, r6
 80098f0:	d11a      	bne.n	8009928 <_printf_common+0xc8>
 80098f2:	2000      	movs	r0, #0
 80098f4:	e008      	b.n	8009908 <_printf_common+0xa8>
 80098f6:	2301      	movs	r3, #1
 80098f8:	4652      	mov	r2, sl
 80098fa:	4641      	mov	r1, r8
 80098fc:	4638      	mov	r0, r7
 80098fe:	47c8      	blx	r9
 8009900:	3001      	adds	r0, #1
 8009902:	d103      	bne.n	800990c <_printf_common+0xac>
 8009904:	f04f 30ff 	mov.w	r0, #4294967295
 8009908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800990c:	3501      	adds	r5, #1
 800990e:	e7c6      	b.n	800989e <_printf_common+0x3e>
 8009910:	18e1      	adds	r1, r4, r3
 8009912:	1c5a      	adds	r2, r3, #1
 8009914:	2030      	movs	r0, #48	@ 0x30
 8009916:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800991a:	4422      	add	r2, r4
 800991c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009920:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009924:	3302      	adds	r3, #2
 8009926:	e7c7      	b.n	80098b8 <_printf_common+0x58>
 8009928:	2301      	movs	r3, #1
 800992a:	4622      	mov	r2, r4
 800992c:	4641      	mov	r1, r8
 800992e:	4638      	mov	r0, r7
 8009930:	47c8      	blx	r9
 8009932:	3001      	adds	r0, #1
 8009934:	d0e6      	beq.n	8009904 <_printf_common+0xa4>
 8009936:	3601      	adds	r6, #1
 8009938:	e7d9      	b.n	80098ee <_printf_common+0x8e>
	...

0800993c <_printf_i>:
 800993c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009940:	7e0f      	ldrb	r7, [r1, #24]
 8009942:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009944:	2f78      	cmp	r7, #120	@ 0x78
 8009946:	4691      	mov	r9, r2
 8009948:	4680      	mov	r8, r0
 800994a:	460c      	mov	r4, r1
 800994c:	469a      	mov	sl, r3
 800994e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009952:	d807      	bhi.n	8009964 <_printf_i+0x28>
 8009954:	2f62      	cmp	r7, #98	@ 0x62
 8009956:	d80a      	bhi.n	800996e <_printf_i+0x32>
 8009958:	2f00      	cmp	r7, #0
 800995a:	f000 80d1 	beq.w	8009b00 <_printf_i+0x1c4>
 800995e:	2f58      	cmp	r7, #88	@ 0x58
 8009960:	f000 80b8 	beq.w	8009ad4 <_printf_i+0x198>
 8009964:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009968:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800996c:	e03a      	b.n	80099e4 <_printf_i+0xa8>
 800996e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009972:	2b15      	cmp	r3, #21
 8009974:	d8f6      	bhi.n	8009964 <_printf_i+0x28>
 8009976:	a101      	add	r1, pc, #4	@ (adr r1, 800997c <_printf_i+0x40>)
 8009978:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800997c:	080099d5 	.word	0x080099d5
 8009980:	080099e9 	.word	0x080099e9
 8009984:	08009965 	.word	0x08009965
 8009988:	08009965 	.word	0x08009965
 800998c:	08009965 	.word	0x08009965
 8009990:	08009965 	.word	0x08009965
 8009994:	080099e9 	.word	0x080099e9
 8009998:	08009965 	.word	0x08009965
 800999c:	08009965 	.word	0x08009965
 80099a0:	08009965 	.word	0x08009965
 80099a4:	08009965 	.word	0x08009965
 80099a8:	08009ae7 	.word	0x08009ae7
 80099ac:	08009a13 	.word	0x08009a13
 80099b0:	08009aa1 	.word	0x08009aa1
 80099b4:	08009965 	.word	0x08009965
 80099b8:	08009965 	.word	0x08009965
 80099bc:	08009b09 	.word	0x08009b09
 80099c0:	08009965 	.word	0x08009965
 80099c4:	08009a13 	.word	0x08009a13
 80099c8:	08009965 	.word	0x08009965
 80099cc:	08009965 	.word	0x08009965
 80099d0:	08009aa9 	.word	0x08009aa9
 80099d4:	6833      	ldr	r3, [r6, #0]
 80099d6:	1d1a      	adds	r2, r3, #4
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	6032      	str	r2, [r6, #0]
 80099dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80099e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80099e4:	2301      	movs	r3, #1
 80099e6:	e09c      	b.n	8009b22 <_printf_i+0x1e6>
 80099e8:	6833      	ldr	r3, [r6, #0]
 80099ea:	6820      	ldr	r0, [r4, #0]
 80099ec:	1d19      	adds	r1, r3, #4
 80099ee:	6031      	str	r1, [r6, #0]
 80099f0:	0606      	lsls	r6, r0, #24
 80099f2:	d501      	bpl.n	80099f8 <_printf_i+0xbc>
 80099f4:	681d      	ldr	r5, [r3, #0]
 80099f6:	e003      	b.n	8009a00 <_printf_i+0xc4>
 80099f8:	0645      	lsls	r5, r0, #25
 80099fa:	d5fb      	bpl.n	80099f4 <_printf_i+0xb8>
 80099fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009a00:	2d00      	cmp	r5, #0
 8009a02:	da03      	bge.n	8009a0c <_printf_i+0xd0>
 8009a04:	232d      	movs	r3, #45	@ 0x2d
 8009a06:	426d      	negs	r5, r5
 8009a08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a0c:	4858      	ldr	r0, [pc, #352]	@ (8009b70 <_printf_i+0x234>)
 8009a0e:	230a      	movs	r3, #10
 8009a10:	e011      	b.n	8009a36 <_printf_i+0xfa>
 8009a12:	6821      	ldr	r1, [r4, #0]
 8009a14:	6833      	ldr	r3, [r6, #0]
 8009a16:	0608      	lsls	r0, r1, #24
 8009a18:	f853 5b04 	ldr.w	r5, [r3], #4
 8009a1c:	d402      	bmi.n	8009a24 <_printf_i+0xe8>
 8009a1e:	0649      	lsls	r1, r1, #25
 8009a20:	bf48      	it	mi
 8009a22:	b2ad      	uxthmi	r5, r5
 8009a24:	2f6f      	cmp	r7, #111	@ 0x6f
 8009a26:	4852      	ldr	r0, [pc, #328]	@ (8009b70 <_printf_i+0x234>)
 8009a28:	6033      	str	r3, [r6, #0]
 8009a2a:	bf14      	ite	ne
 8009a2c:	230a      	movne	r3, #10
 8009a2e:	2308      	moveq	r3, #8
 8009a30:	2100      	movs	r1, #0
 8009a32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009a36:	6866      	ldr	r6, [r4, #4]
 8009a38:	60a6      	str	r6, [r4, #8]
 8009a3a:	2e00      	cmp	r6, #0
 8009a3c:	db05      	blt.n	8009a4a <_printf_i+0x10e>
 8009a3e:	6821      	ldr	r1, [r4, #0]
 8009a40:	432e      	orrs	r6, r5
 8009a42:	f021 0104 	bic.w	r1, r1, #4
 8009a46:	6021      	str	r1, [r4, #0]
 8009a48:	d04b      	beq.n	8009ae2 <_printf_i+0x1a6>
 8009a4a:	4616      	mov	r6, r2
 8009a4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a50:	fb03 5711 	mls	r7, r3, r1, r5
 8009a54:	5dc7      	ldrb	r7, [r0, r7]
 8009a56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009a5a:	462f      	mov	r7, r5
 8009a5c:	42bb      	cmp	r3, r7
 8009a5e:	460d      	mov	r5, r1
 8009a60:	d9f4      	bls.n	8009a4c <_printf_i+0x110>
 8009a62:	2b08      	cmp	r3, #8
 8009a64:	d10b      	bne.n	8009a7e <_printf_i+0x142>
 8009a66:	6823      	ldr	r3, [r4, #0]
 8009a68:	07df      	lsls	r7, r3, #31
 8009a6a:	d508      	bpl.n	8009a7e <_printf_i+0x142>
 8009a6c:	6923      	ldr	r3, [r4, #16]
 8009a6e:	6861      	ldr	r1, [r4, #4]
 8009a70:	4299      	cmp	r1, r3
 8009a72:	bfde      	ittt	le
 8009a74:	2330      	movle	r3, #48	@ 0x30
 8009a76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a7a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009a7e:	1b92      	subs	r2, r2, r6
 8009a80:	6122      	str	r2, [r4, #16]
 8009a82:	f8cd a000 	str.w	sl, [sp]
 8009a86:	464b      	mov	r3, r9
 8009a88:	aa03      	add	r2, sp, #12
 8009a8a:	4621      	mov	r1, r4
 8009a8c:	4640      	mov	r0, r8
 8009a8e:	f7ff fee7 	bl	8009860 <_printf_common>
 8009a92:	3001      	adds	r0, #1
 8009a94:	d14a      	bne.n	8009b2c <_printf_i+0x1f0>
 8009a96:	f04f 30ff 	mov.w	r0, #4294967295
 8009a9a:	b004      	add	sp, #16
 8009a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aa0:	6823      	ldr	r3, [r4, #0]
 8009aa2:	f043 0320 	orr.w	r3, r3, #32
 8009aa6:	6023      	str	r3, [r4, #0]
 8009aa8:	4832      	ldr	r0, [pc, #200]	@ (8009b74 <_printf_i+0x238>)
 8009aaa:	2778      	movs	r7, #120	@ 0x78
 8009aac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009ab0:	6823      	ldr	r3, [r4, #0]
 8009ab2:	6831      	ldr	r1, [r6, #0]
 8009ab4:	061f      	lsls	r7, r3, #24
 8009ab6:	f851 5b04 	ldr.w	r5, [r1], #4
 8009aba:	d402      	bmi.n	8009ac2 <_printf_i+0x186>
 8009abc:	065f      	lsls	r7, r3, #25
 8009abe:	bf48      	it	mi
 8009ac0:	b2ad      	uxthmi	r5, r5
 8009ac2:	6031      	str	r1, [r6, #0]
 8009ac4:	07d9      	lsls	r1, r3, #31
 8009ac6:	bf44      	itt	mi
 8009ac8:	f043 0320 	orrmi.w	r3, r3, #32
 8009acc:	6023      	strmi	r3, [r4, #0]
 8009ace:	b11d      	cbz	r5, 8009ad8 <_printf_i+0x19c>
 8009ad0:	2310      	movs	r3, #16
 8009ad2:	e7ad      	b.n	8009a30 <_printf_i+0xf4>
 8009ad4:	4826      	ldr	r0, [pc, #152]	@ (8009b70 <_printf_i+0x234>)
 8009ad6:	e7e9      	b.n	8009aac <_printf_i+0x170>
 8009ad8:	6823      	ldr	r3, [r4, #0]
 8009ada:	f023 0320 	bic.w	r3, r3, #32
 8009ade:	6023      	str	r3, [r4, #0]
 8009ae0:	e7f6      	b.n	8009ad0 <_printf_i+0x194>
 8009ae2:	4616      	mov	r6, r2
 8009ae4:	e7bd      	b.n	8009a62 <_printf_i+0x126>
 8009ae6:	6833      	ldr	r3, [r6, #0]
 8009ae8:	6825      	ldr	r5, [r4, #0]
 8009aea:	6961      	ldr	r1, [r4, #20]
 8009aec:	1d18      	adds	r0, r3, #4
 8009aee:	6030      	str	r0, [r6, #0]
 8009af0:	062e      	lsls	r6, r5, #24
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	d501      	bpl.n	8009afa <_printf_i+0x1be>
 8009af6:	6019      	str	r1, [r3, #0]
 8009af8:	e002      	b.n	8009b00 <_printf_i+0x1c4>
 8009afa:	0668      	lsls	r0, r5, #25
 8009afc:	d5fb      	bpl.n	8009af6 <_printf_i+0x1ba>
 8009afe:	8019      	strh	r1, [r3, #0]
 8009b00:	2300      	movs	r3, #0
 8009b02:	6123      	str	r3, [r4, #16]
 8009b04:	4616      	mov	r6, r2
 8009b06:	e7bc      	b.n	8009a82 <_printf_i+0x146>
 8009b08:	6833      	ldr	r3, [r6, #0]
 8009b0a:	1d1a      	adds	r2, r3, #4
 8009b0c:	6032      	str	r2, [r6, #0]
 8009b0e:	681e      	ldr	r6, [r3, #0]
 8009b10:	6862      	ldr	r2, [r4, #4]
 8009b12:	2100      	movs	r1, #0
 8009b14:	4630      	mov	r0, r6
 8009b16:	f7f6 fb7b 	bl	8000210 <memchr>
 8009b1a:	b108      	cbz	r0, 8009b20 <_printf_i+0x1e4>
 8009b1c:	1b80      	subs	r0, r0, r6
 8009b1e:	6060      	str	r0, [r4, #4]
 8009b20:	6863      	ldr	r3, [r4, #4]
 8009b22:	6123      	str	r3, [r4, #16]
 8009b24:	2300      	movs	r3, #0
 8009b26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b2a:	e7aa      	b.n	8009a82 <_printf_i+0x146>
 8009b2c:	6923      	ldr	r3, [r4, #16]
 8009b2e:	4632      	mov	r2, r6
 8009b30:	4649      	mov	r1, r9
 8009b32:	4640      	mov	r0, r8
 8009b34:	47d0      	blx	sl
 8009b36:	3001      	adds	r0, #1
 8009b38:	d0ad      	beq.n	8009a96 <_printf_i+0x15a>
 8009b3a:	6823      	ldr	r3, [r4, #0]
 8009b3c:	079b      	lsls	r3, r3, #30
 8009b3e:	d413      	bmi.n	8009b68 <_printf_i+0x22c>
 8009b40:	68e0      	ldr	r0, [r4, #12]
 8009b42:	9b03      	ldr	r3, [sp, #12]
 8009b44:	4298      	cmp	r0, r3
 8009b46:	bfb8      	it	lt
 8009b48:	4618      	movlt	r0, r3
 8009b4a:	e7a6      	b.n	8009a9a <_printf_i+0x15e>
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	4632      	mov	r2, r6
 8009b50:	4649      	mov	r1, r9
 8009b52:	4640      	mov	r0, r8
 8009b54:	47d0      	blx	sl
 8009b56:	3001      	adds	r0, #1
 8009b58:	d09d      	beq.n	8009a96 <_printf_i+0x15a>
 8009b5a:	3501      	adds	r5, #1
 8009b5c:	68e3      	ldr	r3, [r4, #12]
 8009b5e:	9903      	ldr	r1, [sp, #12]
 8009b60:	1a5b      	subs	r3, r3, r1
 8009b62:	42ab      	cmp	r3, r5
 8009b64:	dcf2      	bgt.n	8009b4c <_printf_i+0x210>
 8009b66:	e7eb      	b.n	8009b40 <_printf_i+0x204>
 8009b68:	2500      	movs	r5, #0
 8009b6a:	f104 0619 	add.w	r6, r4, #25
 8009b6e:	e7f5      	b.n	8009b5c <_printf_i+0x220>
 8009b70:	0800d334 	.word	0x0800d334
 8009b74:	0800d345 	.word	0x0800d345

08009b78 <_scanf_float>:
 8009b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b7c:	b087      	sub	sp, #28
 8009b7e:	4691      	mov	r9, r2
 8009b80:	9303      	str	r3, [sp, #12]
 8009b82:	688b      	ldr	r3, [r1, #8]
 8009b84:	1e5a      	subs	r2, r3, #1
 8009b86:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009b8a:	bf81      	itttt	hi
 8009b8c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009b90:	eb03 0b05 	addhi.w	fp, r3, r5
 8009b94:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009b98:	608b      	strhi	r3, [r1, #8]
 8009b9a:	680b      	ldr	r3, [r1, #0]
 8009b9c:	460a      	mov	r2, r1
 8009b9e:	f04f 0500 	mov.w	r5, #0
 8009ba2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009ba6:	f842 3b1c 	str.w	r3, [r2], #28
 8009baa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009bae:	4680      	mov	r8, r0
 8009bb0:	460c      	mov	r4, r1
 8009bb2:	bf98      	it	ls
 8009bb4:	f04f 0b00 	movls.w	fp, #0
 8009bb8:	9201      	str	r2, [sp, #4]
 8009bba:	4616      	mov	r6, r2
 8009bbc:	46aa      	mov	sl, r5
 8009bbe:	462f      	mov	r7, r5
 8009bc0:	9502      	str	r5, [sp, #8]
 8009bc2:	68a2      	ldr	r2, [r4, #8]
 8009bc4:	b15a      	cbz	r2, 8009bde <_scanf_float+0x66>
 8009bc6:	f8d9 3000 	ldr.w	r3, [r9]
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	2b4e      	cmp	r3, #78	@ 0x4e
 8009bce:	d863      	bhi.n	8009c98 <_scanf_float+0x120>
 8009bd0:	2b40      	cmp	r3, #64	@ 0x40
 8009bd2:	d83b      	bhi.n	8009c4c <_scanf_float+0xd4>
 8009bd4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009bd8:	b2c8      	uxtb	r0, r1
 8009bda:	280e      	cmp	r0, #14
 8009bdc:	d939      	bls.n	8009c52 <_scanf_float+0xda>
 8009bde:	b11f      	cbz	r7, 8009be8 <_scanf_float+0x70>
 8009be0:	6823      	ldr	r3, [r4, #0]
 8009be2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009be6:	6023      	str	r3, [r4, #0]
 8009be8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009bec:	f1ba 0f01 	cmp.w	sl, #1
 8009bf0:	f200 8114 	bhi.w	8009e1c <_scanf_float+0x2a4>
 8009bf4:	9b01      	ldr	r3, [sp, #4]
 8009bf6:	429e      	cmp	r6, r3
 8009bf8:	f200 8105 	bhi.w	8009e06 <_scanf_float+0x28e>
 8009bfc:	2001      	movs	r0, #1
 8009bfe:	b007      	add	sp, #28
 8009c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c04:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009c08:	2a0d      	cmp	r2, #13
 8009c0a:	d8e8      	bhi.n	8009bde <_scanf_float+0x66>
 8009c0c:	a101      	add	r1, pc, #4	@ (adr r1, 8009c14 <_scanf_float+0x9c>)
 8009c0e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009c12:	bf00      	nop
 8009c14:	08009d5d 	.word	0x08009d5d
 8009c18:	08009bdf 	.word	0x08009bdf
 8009c1c:	08009bdf 	.word	0x08009bdf
 8009c20:	08009bdf 	.word	0x08009bdf
 8009c24:	08009db9 	.word	0x08009db9
 8009c28:	08009d93 	.word	0x08009d93
 8009c2c:	08009bdf 	.word	0x08009bdf
 8009c30:	08009bdf 	.word	0x08009bdf
 8009c34:	08009d6b 	.word	0x08009d6b
 8009c38:	08009bdf 	.word	0x08009bdf
 8009c3c:	08009bdf 	.word	0x08009bdf
 8009c40:	08009bdf 	.word	0x08009bdf
 8009c44:	08009bdf 	.word	0x08009bdf
 8009c48:	08009d27 	.word	0x08009d27
 8009c4c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009c50:	e7da      	b.n	8009c08 <_scanf_float+0x90>
 8009c52:	290e      	cmp	r1, #14
 8009c54:	d8c3      	bhi.n	8009bde <_scanf_float+0x66>
 8009c56:	a001      	add	r0, pc, #4	@ (adr r0, 8009c5c <_scanf_float+0xe4>)
 8009c58:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009c5c:	08009d17 	.word	0x08009d17
 8009c60:	08009bdf 	.word	0x08009bdf
 8009c64:	08009d17 	.word	0x08009d17
 8009c68:	08009da7 	.word	0x08009da7
 8009c6c:	08009bdf 	.word	0x08009bdf
 8009c70:	08009cb9 	.word	0x08009cb9
 8009c74:	08009cfd 	.word	0x08009cfd
 8009c78:	08009cfd 	.word	0x08009cfd
 8009c7c:	08009cfd 	.word	0x08009cfd
 8009c80:	08009cfd 	.word	0x08009cfd
 8009c84:	08009cfd 	.word	0x08009cfd
 8009c88:	08009cfd 	.word	0x08009cfd
 8009c8c:	08009cfd 	.word	0x08009cfd
 8009c90:	08009cfd 	.word	0x08009cfd
 8009c94:	08009cfd 	.word	0x08009cfd
 8009c98:	2b6e      	cmp	r3, #110	@ 0x6e
 8009c9a:	d809      	bhi.n	8009cb0 <_scanf_float+0x138>
 8009c9c:	2b60      	cmp	r3, #96	@ 0x60
 8009c9e:	d8b1      	bhi.n	8009c04 <_scanf_float+0x8c>
 8009ca0:	2b54      	cmp	r3, #84	@ 0x54
 8009ca2:	d07b      	beq.n	8009d9c <_scanf_float+0x224>
 8009ca4:	2b59      	cmp	r3, #89	@ 0x59
 8009ca6:	d19a      	bne.n	8009bde <_scanf_float+0x66>
 8009ca8:	2d07      	cmp	r5, #7
 8009caa:	d198      	bne.n	8009bde <_scanf_float+0x66>
 8009cac:	2508      	movs	r5, #8
 8009cae:	e02f      	b.n	8009d10 <_scanf_float+0x198>
 8009cb0:	2b74      	cmp	r3, #116	@ 0x74
 8009cb2:	d073      	beq.n	8009d9c <_scanf_float+0x224>
 8009cb4:	2b79      	cmp	r3, #121	@ 0x79
 8009cb6:	e7f6      	b.n	8009ca6 <_scanf_float+0x12e>
 8009cb8:	6821      	ldr	r1, [r4, #0]
 8009cba:	05c8      	lsls	r0, r1, #23
 8009cbc:	d51e      	bpl.n	8009cfc <_scanf_float+0x184>
 8009cbe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009cc2:	6021      	str	r1, [r4, #0]
 8009cc4:	3701      	adds	r7, #1
 8009cc6:	f1bb 0f00 	cmp.w	fp, #0
 8009cca:	d003      	beq.n	8009cd4 <_scanf_float+0x15c>
 8009ccc:	3201      	adds	r2, #1
 8009cce:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009cd2:	60a2      	str	r2, [r4, #8]
 8009cd4:	68a3      	ldr	r3, [r4, #8]
 8009cd6:	3b01      	subs	r3, #1
 8009cd8:	60a3      	str	r3, [r4, #8]
 8009cda:	6923      	ldr	r3, [r4, #16]
 8009cdc:	3301      	adds	r3, #1
 8009cde:	6123      	str	r3, [r4, #16]
 8009ce0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	f8c9 3004 	str.w	r3, [r9, #4]
 8009cec:	f340 8082 	ble.w	8009df4 <_scanf_float+0x27c>
 8009cf0:	f8d9 3000 	ldr.w	r3, [r9]
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	f8c9 3000 	str.w	r3, [r9]
 8009cfa:	e762      	b.n	8009bc2 <_scanf_float+0x4a>
 8009cfc:	eb1a 0105 	adds.w	r1, sl, r5
 8009d00:	f47f af6d 	bne.w	8009bde <_scanf_float+0x66>
 8009d04:	6822      	ldr	r2, [r4, #0]
 8009d06:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009d0a:	6022      	str	r2, [r4, #0]
 8009d0c:	460d      	mov	r5, r1
 8009d0e:	468a      	mov	sl, r1
 8009d10:	f806 3b01 	strb.w	r3, [r6], #1
 8009d14:	e7de      	b.n	8009cd4 <_scanf_float+0x15c>
 8009d16:	6822      	ldr	r2, [r4, #0]
 8009d18:	0610      	lsls	r0, r2, #24
 8009d1a:	f57f af60 	bpl.w	8009bde <_scanf_float+0x66>
 8009d1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009d22:	6022      	str	r2, [r4, #0]
 8009d24:	e7f4      	b.n	8009d10 <_scanf_float+0x198>
 8009d26:	f1ba 0f00 	cmp.w	sl, #0
 8009d2a:	d10c      	bne.n	8009d46 <_scanf_float+0x1ce>
 8009d2c:	b977      	cbnz	r7, 8009d4c <_scanf_float+0x1d4>
 8009d2e:	6822      	ldr	r2, [r4, #0]
 8009d30:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009d34:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009d38:	d108      	bne.n	8009d4c <_scanf_float+0x1d4>
 8009d3a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009d3e:	6022      	str	r2, [r4, #0]
 8009d40:	f04f 0a01 	mov.w	sl, #1
 8009d44:	e7e4      	b.n	8009d10 <_scanf_float+0x198>
 8009d46:	f1ba 0f02 	cmp.w	sl, #2
 8009d4a:	d050      	beq.n	8009dee <_scanf_float+0x276>
 8009d4c:	2d01      	cmp	r5, #1
 8009d4e:	d002      	beq.n	8009d56 <_scanf_float+0x1de>
 8009d50:	2d04      	cmp	r5, #4
 8009d52:	f47f af44 	bne.w	8009bde <_scanf_float+0x66>
 8009d56:	3501      	adds	r5, #1
 8009d58:	b2ed      	uxtb	r5, r5
 8009d5a:	e7d9      	b.n	8009d10 <_scanf_float+0x198>
 8009d5c:	f1ba 0f01 	cmp.w	sl, #1
 8009d60:	f47f af3d 	bne.w	8009bde <_scanf_float+0x66>
 8009d64:	f04f 0a02 	mov.w	sl, #2
 8009d68:	e7d2      	b.n	8009d10 <_scanf_float+0x198>
 8009d6a:	b975      	cbnz	r5, 8009d8a <_scanf_float+0x212>
 8009d6c:	2f00      	cmp	r7, #0
 8009d6e:	f47f af37 	bne.w	8009be0 <_scanf_float+0x68>
 8009d72:	6822      	ldr	r2, [r4, #0]
 8009d74:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009d78:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009d7c:	f040 8103 	bne.w	8009f86 <_scanf_float+0x40e>
 8009d80:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009d84:	6022      	str	r2, [r4, #0]
 8009d86:	2501      	movs	r5, #1
 8009d88:	e7c2      	b.n	8009d10 <_scanf_float+0x198>
 8009d8a:	2d03      	cmp	r5, #3
 8009d8c:	d0e3      	beq.n	8009d56 <_scanf_float+0x1de>
 8009d8e:	2d05      	cmp	r5, #5
 8009d90:	e7df      	b.n	8009d52 <_scanf_float+0x1da>
 8009d92:	2d02      	cmp	r5, #2
 8009d94:	f47f af23 	bne.w	8009bde <_scanf_float+0x66>
 8009d98:	2503      	movs	r5, #3
 8009d9a:	e7b9      	b.n	8009d10 <_scanf_float+0x198>
 8009d9c:	2d06      	cmp	r5, #6
 8009d9e:	f47f af1e 	bne.w	8009bde <_scanf_float+0x66>
 8009da2:	2507      	movs	r5, #7
 8009da4:	e7b4      	b.n	8009d10 <_scanf_float+0x198>
 8009da6:	6822      	ldr	r2, [r4, #0]
 8009da8:	0591      	lsls	r1, r2, #22
 8009daa:	f57f af18 	bpl.w	8009bde <_scanf_float+0x66>
 8009dae:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009db2:	6022      	str	r2, [r4, #0]
 8009db4:	9702      	str	r7, [sp, #8]
 8009db6:	e7ab      	b.n	8009d10 <_scanf_float+0x198>
 8009db8:	6822      	ldr	r2, [r4, #0]
 8009dba:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009dbe:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009dc2:	d005      	beq.n	8009dd0 <_scanf_float+0x258>
 8009dc4:	0550      	lsls	r0, r2, #21
 8009dc6:	f57f af0a 	bpl.w	8009bde <_scanf_float+0x66>
 8009dca:	2f00      	cmp	r7, #0
 8009dcc:	f000 80db 	beq.w	8009f86 <_scanf_float+0x40e>
 8009dd0:	0591      	lsls	r1, r2, #22
 8009dd2:	bf58      	it	pl
 8009dd4:	9902      	ldrpl	r1, [sp, #8]
 8009dd6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009dda:	bf58      	it	pl
 8009ddc:	1a79      	subpl	r1, r7, r1
 8009dde:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009de2:	bf58      	it	pl
 8009de4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009de8:	6022      	str	r2, [r4, #0]
 8009dea:	2700      	movs	r7, #0
 8009dec:	e790      	b.n	8009d10 <_scanf_float+0x198>
 8009dee:	f04f 0a03 	mov.w	sl, #3
 8009df2:	e78d      	b.n	8009d10 <_scanf_float+0x198>
 8009df4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009df8:	4649      	mov	r1, r9
 8009dfa:	4640      	mov	r0, r8
 8009dfc:	4798      	blx	r3
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	f43f aedf 	beq.w	8009bc2 <_scanf_float+0x4a>
 8009e04:	e6eb      	b.n	8009bde <_scanf_float+0x66>
 8009e06:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009e0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009e0e:	464a      	mov	r2, r9
 8009e10:	4640      	mov	r0, r8
 8009e12:	4798      	blx	r3
 8009e14:	6923      	ldr	r3, [r4, #16]
 8009e16:	3b01      	subs	r3, #1
 8009e18:	6123      	str	r3, [r4, #16]
 8009e1a:	e6eb      	b.n	8009bf4 <_scanf_float+0x7c>
 8009e1c:	1e6b      	subs	r3, r5, #1
 8009e1e:	2b06      	cmp	r3, #6
 8009e20:	d824      	bhi.n	8009e6c <_scanf_float+0x2f4>
 8009e22:	2d02      	cmp	r5, #2
 8009e24:	d836      	bhi.n	8009e94 <_scanf_float+0x31c>
 8009e26:	9b01      	ldr	r3, [sp, #4]
 8009e28:	429e      	cmp	r6, r3
 8009e2a:	f67f aee7 	bls.w	8009bfc <_scanf_float+0x84>
 8009e2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009e32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009e36:	464a      	mov	r2, r9
 8009e38:	4640      	mov	r0, r8
 8009e3a:	4798      	blx	r3
 8009e3c:	6923      	ldr	r3, [r4, #16]
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	6123      	str	r3, [r4, #16]
 8009e42:	e7f0      	b.n	8009e26 <_scanf_float+0x2ae>
 8009e44:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009e48:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009e4c:	464a      	mov	r2, r9
 8009e4e:	4640      	mov	r0, r8
 8009e50:	4798      	blx	r3
 8009e52:	6923      	ldr	r3, [r4, #16]
 8009e54:	3b01      	subs	r3, #1
 8009e56:	6123      	str	r3, [r4, #16]
 8009e58:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e5c:	fa5f fa8a 	uxtb.w	sl, sl
 8009e60:	f1ba 0f02 	cmp.w	sl, #2
 8009e64:	d1ee      	bne.n	8009e44 <_scanf_float+0x2cc>
 8009e66:	3d03      	subs	r5, #3
 8009e68:	b2ed      	uxtb	r5, r5
 8009e6a:	1b76      	subs	r6, r6, r5
 8009e6c:	6823      	ldr	r3, [r4, #0]
 8009e6e:	05da      	lsls	r2, r3, #23
 8009e70:	d530      	bpl.n	8009ed4 <_scanf_float+0x35c>
 8009e72:	055b      	lsls	r3, r3, #21
 8009e74:	d511      	bpl.n	8009e9a <_scanf_float+0x322>
 8009e76:	9b01      	ldr	r3, [sp, #4]
 8009e78:	429e      	cmp	r6, r3
 8009e7a:	f67f aebf 	bls.w	8009bfc <_scanf_float+0x84>
 8009e7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009e82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009e86:	464a      	mov	r2, r9
 8009e88:	4640      	mov	r0, r8
 8009e8a:	4798      	blx	r3
 8009e8c:	6923      	ldr	r3, [r4, #16]
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	6123      	str	r3, [r4, #16]
 8009e92:	e7f0      	b.n	8009e76 <_scanf_float+0x2fe>
 8009e94:	46aa      	mov	sl, r5
 8009e96:	46b3      	mov	fp, r6
 8009e98:	e7de      	b.n	8009e58 <_scanf_float+0x2e0>
 8009e9a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009e9e:	6923      	ldr	r3, [r4, #16]
 8009ea0:	2965      	cmp	r1, #101	@ 0x65
 8009ea2:	f103 33ff 	add.w	r3, r3, #4294967295
 8009ea6:	f106 35ff 	add.w	r5, r6, #4294967295
 8009eaa:	6123      	str	r3, [r4, #16]
 8009eac:	d00c      	beq.n	8009ec8 <_scanf_float+0x350>
 8009eae:	2945      	cmp	r1, #69	@ 0x45
 8009eb0:	d00a      	beq.n	8009ec8 <_scanf_float+0x350>
 8009eb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009eb6:	464a      	mov	r2, r9
 8009eb8:	4640      	mov	r0, r8
 8009eba:	4798      	blx	r3
 8009ebc:	6923      	ldr	r3, [r4, #16]
 8009ebe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	1eb5      	subs	r5, r6, #2
 8009ec6:	6123      	str	r3, [r4, #16]
 8009ec8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009ecc:	464a      	mov	r2, r9
 8009ece:	4640      	mov	r0, r8
 8009ed0:	4798      	blx	r3
 8009ed2:	462e      	mov	r6, r5
 8009ed4:	6822      	ldr	r2, [r4, #0]
 8009ed6:	f012 0210 	ands.w	r2, r2, #16
 8009eda:	d001      	beq.n	8009ee0 <_scanf_float+0x368>
 8009edc:	2000      	movs	r0, #0
 8009ede:	e68e      	b.n	8009bfe <_scanf_float+0x86>
 8009ee0:	7032      	strb	r2, [r6, #0]
 8009ee2:	6823      	ldr	r3, [r4, #0]
 8009ee4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009ee8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009eec:	d125      	bne.n	8009f3a <_scanf_float+0x3c2>
 8009eee:	9b02      	ldr	r3, [sp, #8]
 8009ef0:	429f      	cmp	r7, r3
 8009ef2:	d00a      	beq.n	8009f0a <_scanf_float+0x392>
 8009ef4:	1bda      	subs	r2, r3, r7
 8009ef6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009efa:	429e      	cmp	r6, r3
 8009efc:	bf28      	it	cs
 8009efe:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009f02:	4922      	ldr	r1, [pc, #136]	@ (8009f8c <_scanf_float+0x414>)
 8009f04:	4630      	mov	r0, r6
 8009f06:	f000 f977 	bl	800a1f8 <siprintf>
 8009f0a:	9901      	ldr	r1, [sp, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	4640      	mov	r0, r8
 8009f10:	f7ff f9ca 	bl	80092a8 <_strtod_r>
 8009f14:	9b03      	ldr	r3, [sp, #12]
 8009f16:	6821      	ldr	r1, [r4, #0]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f011 0f02 	tst.w	r1, #2
 8009f1e:	ec57 6b10 	vmov	r6, r7, d0
 8009f22:	f103 0204 	add.w	r2, r3, #4
 8009f26:	d015      	beq.n	8009f54 <_scanf_float+0x3dc>
 8009f28:	9903      	ldr	r1, [sp, #12]
 8009f2a:	600a      	str	r2, [r1, #0]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	e9c3 6700 	strd	r6, r7, [r3]
 8009f32:	68e3      	ldr	r3, [r4, #12]
 8009f34:	3301      	adds	r3, #1
 8009f36:	60e3      	str	r3, [r4, #12]
 8009f38:	e7d0      	b.n	8009edc <_scanf_float+0x364>
 8009f3a:	9b04      	ldr	r3, [sp, #16]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d0e4      	beq.n	8009f0a <_scanf_float+0x392>
 8009f40:	9905      	ldr	r1, [sp, #20]
 8009f42:	230a      	movs	r3, #10
 8009f44:	3101      	adds	r1, #1
 8009f46:	4640      	mov	r0, r8
 8009f48:	f002 fb3e 	bl	800c5c8 <_strtol_r>
 8009f4c:	9b04      	ldr	r3, [sp, #16]
 8009f4e:	9e05      	ldr	r6, [sp, #20]
 8009f50:	1ac2      	subs	r2, r0, r3
 8009f52:	e7d0      	b.n	8009ef6 <_scanf_float+0x37e>
 8009f54:	f011 0f04 	tst.w	r1, #4
 8009f58:	9903      	ldr	r1, [sp, #12]
 8009f5a:	600a      	str	r2, [r1, #0]
 8009f5c:	d1e6      	bne.n	8009f2c <_scanf_float+0x3b4>
 8009f5e:	681d      	ldr	r5, [r3, #0]
 8009f60:	4632      	mov	r2, r6
 8009f62:	463b      	mov	r3, r7
 8009f64:	4630      	mov	r0, r6
 8009f66:	4639      	mov	r1, r7
 8009f68:	f7f6 fe00 	bl	8000b6c <__aeabi_dcmpun>
 8009f6c:	b128      	cbz	r0, 8009f7a <_scanf_float+0x402>
 8009f6e:	4808      	ldr	r0, [pc, #32]	@ (8009f90 <_scanf_float+0x418>)
 8009f70:	f000 fb5a 	bl	800a628 <nanf>
 8009f74:	ed85 0a00 	vstr	s0, [r5]
 8009f78:	e7db      	b.n	8009f32 <_scanf_float+0x3ba>
 8009f7a:	4630      	mov	r0, r6
 8009f7c:	4639      	mov	r1, r7
 8009f7e:	f7f6 fe53 	bl	8000c28 <__aeabi_d2f>
 8009f82:	6028      	str	r0, [r5, #0]
 8009f84:	e7d5      	b.n	8009f32 <_scanf_float+0x3ba>
 8009f86:	2700      	movs	r7, #0
 8009f88:	e62e      	b.n	8009be8 <_scanf_float+0x70>
 8009f8a:	bf00      	nop
 8009f8c:	0800d356 	.word	0x0800d356
 8009f90:	0800d4f5 	.word	0x0800d4f5

08009f94 <std>:
 8009f94:	2300      	movs	r3, #0
 8009f96:	b510      	push	{r4, lr}
 8009f98:	4604      	mov	r4, r0
 8009f9a:	e9c0 3300 	strd	r3, r3, [r0]
 8009f9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fa2:	6083      	str	r3, [r0, #8]
 8009fa4:	8181      	strh	r1, [r0, #12]
 8009fa6:	6643      	str	r3, [r0, #100]	@ 0x64
 8009fa8:	81c2      	strh	r2, [r0, #14]
 8009faa:	6183      	str	r3, [r0, #24]
 8009fac:	4619      	mov	r1, r3
 8009fae:	2208      	movs	r2, #8
 8009fb0:	305c      	adds	r0, #92	@ 0x5c
 8009fb2:	f000 fa57 	bl	800a464 <memset>
 8009fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8009fec <std+0x58>)
 8009fb8:	6263      	str	r3, [r4, #36]	@ 0x24
 8009fba:	4b0d      	ldr	r3, [pc, #52]	@ (8009ff0 <std+0x5c>)
 8009fbc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8009ff4 <std+0x60>)
 8009fc0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8009ff8 <std+0x64>)
 8009fc4:	6323      	str	r3, [r4, #48]	@ 0x30
 8009fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8009ffc <std+0x68>)
 8009fc8:	6224      	str	r4, [r4, #32]
 8009fca:	429c      	cmp	r4, r3
 8009fcc:	d006      	beq.n	8009fdc <std+0x48>
 8009fce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009fd2:	4294      	cmp	r4, r2
 8009fd4:	d002      	beq.n	8009fdc <std+0x48>
 8009fd6:	33d0      	adds	r3, #208	@ 0xd0
 8009fd8:	429c      	cmp	r4, r3
 8009fda:	d105      	bne.n	8009fe8 <std+0x54>
 8009fdc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fe4:	f000 bb04 	b.w	800a5f0 <__retarget_lock_init_recursive>
 8009fe8:	bd10      	pop	{r4, pc}
 8009fea:	bf00      	nop
 8009fec:	0800a23d 	.word	0x0800a23d
 8009ff0:	0800a25f 	.word	0x0800a25f
 8009ff4:	0800a297 	.word	0x0800a297
 8009ff8:	0800a2bb 	.word	0x0800a2bb
 8009ffc:	20000e10 	.word	0x20000e10

0800a000 <stdio_exit_handler>:
 800a000:	4a02      	ldr	r2, [pc, #8]	@ (800a00c <stdio_exit_handler+0xc>)
 800a002:	4903      	ldr	r1, [pc, #12]	@ (800a010 <stdio_exit_handler+0x10>)
 800a004:	4803      	ldr	r0, [pc, #12]	@ (800a014 <stdio_exit_handler+0x14>)
 800a006:	f000 b869 	b.w	800a0dc <_fwalk_sglue>
 800a00a:	bf00      	nop
 800a00c:	2000000c 	.word	0x2000000c
 800a010:	0800cc21 	.word	0x0800cc21
 800a014:	20000188 	.word	0x20000188

0800a018 <cleanup_stdio>:
 800a018:	6841      	ldr	r1, [r0, #4]
 800a01a:	4b0c      	ldr	r3, [pc, #48]	@ (800a04c <cleanup_stdio+0x34>)
 800a01c:	4299      	cmp	r1, r3
 800a01e:	b510      	push	{r4, lr}
 800a020:	4604      	mov	r4, r0
 800a022:	d001      	beq.n	800a028 <cleanup_stdio+0x10>
 800a024:	f002 fdfc 	bl	800cc20 <_fflush_r>
 800a028:	68a1      	ldr	r1, [r4, #8]
 800a02a:	4b09      	ldr	r3, [pc, #36]	@ (800a050 <cleanup_stdio+0x38>)
 800a02c:	4299      	cmp	r1, r3
 800a02e:	d002      	beq.n	800a036 <cleanup_stdio+0x1e>
 800a030:	4620      	mov	r0, r4
 800a032:	f002 fdf5 	bl	800cc20 <_fflush_r>
 800a036:	68e1      	ldr	r1, [r4, #12]
 800a038:	4b06      	ldr	r3, [pc, #24]	@ (800a054 <cleanup_stdio+0x3c>)
 800a03a:	4299      	cmp	r1, r3
 800a03c:	d004      	beq.n	800a048 <cleanup_stdio+0x30>
 800a03e:	4620      	mov	r0, r4
 800a040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a044:	f002 bdec 	b.w	800cc20 <_fflush_r>
 800a048:	bd10      	pop	{r4, pc}
 800a04a:	bf00      	nop
 800a04c:	20000e10 	.word	0x20000e10
 800a050:	20000e78 	.word	0x20000e78
 800a054:	20000ee0 	.word	0x20000ee0

0800a058 <global_stdio_init.part.0>:
 800a058:	b510      	push	{r4, lr}
 800a05a:	4b0b      	ldr	r3, [pc, #44]	@ (800a088 <global_stdio_init.part.0+0x30>)
 800a05c:	4c0b      	ldr	r4, [pc, #44]	@ (800a08c <global_stdio_init.part.0+0x34>)
 800a05e:	4a0c      	ldr	r2, [pc, #48]	@ (800a090 <global_stdio_init.part.0+0x38>)
 800a060:	601a      	str	r2, [r3, #0]
 800a062:	4620      	mov	r0, r4
 800a064:	2200      	movs	r2, #0
 800a066:	2104      	movs	r1, #4
 800a068:	f7ff ff94 	bl	8009f94 <std>
 800a06c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a070:	2201      	movs	r2, #1
 800a072:	2109      	movs	r1, #9
 800a074:	f7ff ff8e 	bl	8009f94 <std>
 800a078:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a07c:	2202      	movs	r2, #2
 800a07e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a082:	2112      	movs	r1, #18
 800a084:	f7ff bf86 	b.w	8009f94 <std>
 800a088:	20000f48 	.word	0x20000f48
 800a08c:	20000e10 	.word	0x20000e10
 800a090:	0800a001 	.word	0x0800a001

0800a094 <__sfp_lock_acquire>:
 800a094:	4801      	ldr	r0, [pc, #4]	@ (800a09c <__sfp_lock_acquire+0x8>)
 800a096:	f000 baac 	b.w	800a5f2 <__retarget_lock_acquire_recursive>
 800a09a:	bf00      	nop
 800a09c:	20000f51 	.word	0x20000f51

0800a0a0 <__sfp_lock_release>:
 800a0a0:	4801      	ldr	r0, [pc, #4]	@ (800a0a8 <__sfp_lock_release+0x8>)
 800a0a2:	f000 baa7 	b.w	800a5f4 <__retarget_lock_release_recursive>
 800a0a6:	bf00      	nop
 800a0a8:	20000f51 	.word	0x20000f51

0800a0ac <__sinit>:
 800a0ac:	b510      	push	{r4, lr}
 800a0ae:	4604      	mov	r4, r0
 800a0b0:	f7ff fff0 	bl	800a094 <__sfp_lock_acquire>
 800a0b4:	6a23      	ldr	r3, [r4, #32]
 800a0b6:	b11b      	cbz	r3, 800a0c0 <__sinit+0x14>
 800a0b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0bc:	f7ff bff0 	b.w	800a0a0 <__sfp_lock_release>
 800a0c0:	4b04      	ldr	r3, [pc, #16]	@ (800a0d4 <__sinit+0x28>)
 800a0c2:	6223      	str	r3, [r4, #32]
 800a0c4:	4b04      	ldr	r3, [pc, #16]	@ (800a0d8 <__sinit+0x2c>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d1f5      	bne.n	800a0b8 <__sinit+0xc>
 800a0cc:	f7ff ffc4 	bl	800a058 <global_stdio_init.part.0>
 800a0d0:	e7f2      	b.n	800a0b8 <__sinit+0xc>
 800a0d2:	bf00      	nop
 800a0d4:	0800a019 	.word	0x0800a019
 800a0d8:	20000f48 	.word	0x20000f48

0800a0dc <_fwalk_sglue>:
 800a0dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0e0:	4607      	mov	r7, r0
 800a0e2:	4688      	mov	r8, r1
 800a0e4:	4614      	mov	r4, r2
 800a0e6:	2600      	movs	r6, #0
 800a0e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0ec:	f1b9 0901 	subs.w	r9, r9, #1
 800a0f0:	d505      	bpl.n	800a0fe <_fwalk_sglue+0x22>
 800a0f2:	6824      	ldr	r4, [r4, #0]
 800a0f4:	2c00      	cmp	r4, #0
 800a0f6:	d1f7      	bne.n	800a0e8 <_fwalk_sglue+0xc>
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0fe:	89ab      	ldrh	r3, [r5, #12]
 800a100:	2b01      	cmp	r3, #1
 800a102:	d907      	bls.n	800a114 <_fwalk_sglue+0x38>
 800a104:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a108:	3301      	adds	r3, #1
 800a10a:	d003      	beq.n	800a114 <_fwalk_sglue+0x38>
 800a10c:	4629      	mov	r1, r5
 800a10e:	4638      	mov	r0, r7
 800a110:	47c0      	blx	r8
 800a112:	4306      	orrs	r6, r0
 800a114:	3568      	adds	r5, #104	@ 0x68
 800a116:	e7e9      	b.n	800a0ec <_fwalk_sglue+0x10>

0800a118 <iprintf>:
 800a118:	b40f      	push	{r0, r1, r2, r3}
 800a11a:	b507      	push	{r0, r1, r2, lr}
 800a11c:	4906      	ldr	r1, [pc, #24]	@ (800a138 <iprintf+0x20>)
 800a11e:	ab04      	add	r3, sp, #16
 800a120:	6808      	ldr	r0, [r1, #0]
 800a122:	f853 2b04 	ldr.w	r2, [r3], #4
 800a126:	6881      	ldr	r1, [r0, #8]
 800a128:	9301      	str	r3, [sp, #4]
 800a12a:	f002 fbdd 	bl	800c8e8 <_vfiprintf_r>
 800a12e:	b003      	add	sp, #12
 800a130:	f85d eb04 	ldr.w	lr, [sp], #4
 800a134:	b004      	add	sp, #16
 800a136:	4770      	bx	lr
 800a138:	20000184 	.word	0x20000184

0800a13c <_puts_r>:
 800a13c:	6a03      	ldr	r3, [r0, #32]
 800a13e:	b570      	push	{r4, r5, r6, lr}
 800a140:	6884      	ldr	r4, [r0, #8]
 800a142:	4605      	mov	r5, r0
 800a144:	460e      	mov	r6, r1
 800a146:	b90b      	cbnz	r3, 800a14c <_puts_r+0x10>
 800a148:	f7ff ffb0 	bl	800a0ac <__sinit>
 800a14c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a14e:	07db      	lsls	r3, r3, #31
 800a150:	d405      	bmi.n	800a15e <_puts_r+0x22>
 800a152:	89a3      	ldrh	r3, [r4, #12]
 800a154:	0598      	lsls	r0, r3, #22
 800a156:	d402      	bmi.n	800a15e <_puts_r+0x22>
 800a158:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a15a:	f000 fa4a 	bl	800a5f2 <__retarget_lock_acquire_recursive>
 800a15e:	89a3      	ldrh	r3, [r4, #12]
 800a160:	0719      	lsls	r1, r3, #28
 800a162:	d502      	bpl.n	800a16a <_puts_r+0x2e>
 800a164:	6923      	ldr	r3, [r4, #16]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d135      	bne.n	800a1d6 <_puts_r+0x9a>
 800a16a:	4621      	mov	r1, r4
 800a16c:	4628      	mov	r0, r5
 800a16e:	f000 f923 	bl	800a3b8 <__swsetup_r>
 800a172:	b380      	cbz	r0, 800a1d6 <_puts_r+0x9a>
 800a174:	f04f 35ff 	mov.w	r5, #4294967295
 800a178:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a17a:	07da      	lsls	r2, r3, #31
 800a17c:	d405      	bmi.n	800a18a <_puts_r+0x4e>
 800a17e:	89a3      	ldrh	r3, [r4, #12]
 800a180:	059b      	lsls	r3, r3, #22
 800a182:	d402      	bmi.n	800a18a <_puts_r+0x4e>
 800a184:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a186:	f000 fa35 	bl	800a5f4 <__retarget_lock_release_recursive>
 800a18a:	4628      	mov	r0, r5
 800a18c:	bd70      	pop	{r4, r5, r6, pc}
 800a18e:	2b00      	cmp	r3, #0
 800a190:	da04      	bge.n	800a19c <_puts_r+0x60>
 800a192:	69a2      	ldr	r2, [r4, #24]
 800a194:	429a      	cmp	r2, r3
 800a196:	dc17      	bgt.n	800a1c8 <_puts_r+0x8c>
 800a198:	290a      	cmp	r1, #10
 800a19a:	d015      	beq.n	800a1c8 <_puts_r+0x8c>
 800a19c:	6823      	ldr	r3, [r4, #0]
 800a19e:	1c5a      	adds	r2, r3, #1
 800a1a0:	6022      	str	r2, [r4, #0]
 800a1a2:	7019      	strb	r1, [r3, #0]
 800a1a4:	68a3      	ldr	r3, [r4, #8]
 800a1a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	60a3      	str	r3, [r4, #8]
 800a1ae:	2900      	cmp	r1, #0
 800a1b0:	d1ed      	bne.n	800a18e <_puts_r+0x52>
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	da11      	bge.n	800a1da <_puts_r+0x9e>
 800a1b6:	4622      	mov	r2, r4
 800a1b8:	210a      	movs	r1, #10
 800a1ba:	4628      	mov	r0, r5
 800a1bc:	f000 f8be 	bl	800a33c <__swbuf_r>
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	d0d7      	beq.n	800a174 <_puts_r+0x38>
 800a1c4:	250a      	movs	r5, #10
 800a1c6:	e7d7      	b.n	800a178 <_puts_r+0x3c>
 800a1c8:	4622      	mov	r2, r4
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	f000 f8b6 	bl	800a33c <__swbuf_r>
 800a1d0:	3001      	adds	r0, #1
 800a1d2:	d1e7      	bne.n	800a1a4 <_puts_r+0x68>
 800a1d4:	e7ce      	b.n	800a174 <_puts_r+0x38>
 800a1d6:	3e01      	subs	r6, #1
 800a1d8:	e7e4      	b.n	800a1a4 <_puts_r+0x68>
 800a1da:	6823      	ldr	r3, [r4, #0]
 800a1dc:	1c5a      	adds	r2, r3, #1
 800a1de:	6022      	str	r2, [r4, #0]
 800a1e0:	220a      	movs	r2, #10
 800a1e2:	701a      	strb	r2, [r3, #0]
 800a1e4:	e7ee      	b.n	800a1c4 <_puts_r+0x88>
	...

0800a1e8 <puts>:
 800a1e8:	4b02      	ldr	r3, [pc, #8]	@ (800a1f4 <puts+0xc>)
 800a1ea:	4601      	mov	r1, r0
 800a1ec:	6818      	ldr	r0, [r3, #0]
 800a1ee:	f7ff bfa5 	b.w	800a13c <_puts_r>
 800a1f2:	bf00      	nop
 800a1f4:	20000184 	.word	0x20000184

0800a1f8 <siprintf>:
 800a1f8:	b40e      	push	{r1, r2, r3}
 800a1fa:	b510      	push	{r4, lr}
 800a1fc:	b09d      	sub	sp, #116	@ 0x74
 800a1fe:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a200:	9002      	str	r0, [sp, #8]
 800a202:	9006      	str	r0, [sp, #24]
 800a204:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a208:	480a      	ldr	r0, [pc, #40]	@ (800a234 <siprintf+0x3c>)
 800a20a:	9107      	str	r1, [sp, #28]
 800a20c:	9104      	str	r1, [sp, #16]
 800a20e:	490a      	ldr	r1, [pc, #40]	@ (800a238 <siprintf+0x40>)
 800a210:	f853 2b04 	ldr.w	r2, [r3], #4
 800a214:	9105      	str	r1, [sp, #20]
 800a216:	2400      	movs	r4, #0
 800a218:	a902      	add	r1, sp, #8
 800a21a:	6800      	ldr	r0, [r0, #0]
 800a21c:	9301      	str	r3, [sp, #4]
 800a21e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a220:	f002 fa3c 	bl	800c69c <_svfiprintf_r>
 800a224:	9b02      	ldr	r3, [sp, #8]
 800a226:	701c      	strb	r4, [r3, #0]
 800a228:	b01d      	add	sp, #116	@ 0x74
 800a22a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a22e:	b003      	add	sp, #12
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	20000184 	.word	0x20000184
 800a238:	ffff0208 	.word	0xffff0208

0800a23c <__sread>:
 800a23c:	b510      	push	{r4, lr}
 800a23e:	460c      	mov	r4, r1
 800a240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a244:	f000 f986 	bl	800a554 <_read_r>
 800a248:	2800      	cmp	r0, #0
 800a24a:	bfab      	itete	ge
 800a24c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a24e:	89a3      	ldrhlt	r3, [r4, #12]
 800a250:	181b      	addge	r3, r3, r0
 800a252:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a256:	bfac      	ite	ge
 800a258:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a25a:	81a3      	strhlt	r3, [r4, #12]
 800a25c:	bd10      	pop	{r4, pc}

0800a25e <__swrite>:
 800a25e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a262:	461f      	mov	r7, r3
 800a264:	898b      	ldrh	r3, [r1, #12]
 800a266:	05db      	lsls	r3, r3, #23
 800a268:	4605      	mov	r5, r0
 800a26a:	460c      	mov	r4, r1
 800a26c:	4616      	mov	r6, r2
 800a26e:	d505      	bpl.n	800a27c <__swrite+0x1e>
 800a270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a274:	2302      	movs	r3, #2
 800a276:	2200      	movs	r2, #0
 800a278:	f000 f95a 	bl	800a530 <_lseek_r>
 800a27c:	89a3      	ldrh	r3, [r4, #12]
 800a27e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a282:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a286:	81a3      	strh	r3, [r4, #12]
 800a288:	4632      	mov	r2, r6
 800a28a:	463b      	mov	r3, r7
 800a28c:	4628      	mov	r0, r5
 800a28e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a292:	f000 b971 	b.w	800a578 <_write_r>

0800a296 <__sseek>:
 800a296:	b510      	push	{r4, lr}
 800a298:	460c      	mov	r4, r1
 800a29a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a29e:	f000 f947 	bl	800a530 <_lseek_r>
 800a2a2:	1c43      	adds	r3, r0, #1
 800a2a4:	89a3      	ldrh	r3, [r4, #12]
 800a2a6:	bf15      	itete	ne
 800a2a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a2aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a2ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a2b2:	81a3      	strheq	r3, [r4, #12]
 800a2b4:	bf18      	it	ne
 800a2b6:	81a3      	strhne	r3, [r4, #12]
 800a2b8:	bd10      	pop	{r4, pc}

0800a2ba <__sclose>:
 800a2ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2be:	f000 b927 	b.w	800a510 <_close_r>

0800a2c2 <_vsniprintf_r>:
 800a2c2:	b530      	push	{r4, r5, lr}
 800a2c4:	4614      	mov	r4, r2
 800a2c6:	2c00      	cmp	r4, #0
 800a2c8:	b09b      	sub	sp, #108	@ 0x6c
 800a2ca:	4605      	mov	r5, r0
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	da05      	bge.n	800a2dc <_vsniprintf_r+0x1a>
 800a2d0:	238b      	movs	r3, #139	@ 0x8b
 800a2d2:	6003      	str	r3, [r0, #0]
 800a2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d8:	b01b      	add	sp, #108	@ 0x6c
 800a2da:	bd30      	pop	{r4, r5, pc}
 800a2dc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a2e0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a2e4:	f04f 0300 	mov.w	r3, #0
 800a2e8:	9319      	str	r3, [sp, #100]	@ 0x64
 800a2ea:	bf14      	ite	ne
 800a2ec:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a2f0:	4623      	moveq	r3, r4
 800a2f2:	9302      	str	r3, [sp, #8]
 800a2f4:	9305      	str	r3, [sp, #20]
 800a2f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a2fa:	9100      	str	r1, [sp, #0]
 800a2fc:	9104      	str	r1, [sp, #16]
 800a2fe:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a302:	4669      	mov	r1, sp
 800a304:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a306:	f002 f9c9 	bl	800c69c <_svfiprintf_r>
 800a30a:	1c43      	adds	r3, r0, #1
 800a30c:	bfbc      	itt	lt
 800a30e:	238b      	movlt	r3, #139	@ 0x8b
 800a310:	602b      	strlt	r3, [r5, #0]
 800a312:	2c00      	cmp	r4, #0
 800a314:	d0e0      	beq.n	800a2d8 <_vsniprintf_r+0x16>
 800a316:	9b00      	ldr	r3, [sp, #0]
 800a318:	2200      	movs	r2, #0
 800a31a:	701a      	strb	r2, [r3, #0]
 800a31c:	e7dc      	b.n	800a2d8 <_vsniprintf_r+0x16>
	...

0800a320 <vsniprintf>:
 800a320:	b507      	push	{r0, r1, r2, lr}
 800a322:	9300      	str	r3, [sp, #0]
 800a324:	4613      	mov	r3, r2
 800a326:	460a      	mov	r2, r1
 800a328:	4601      	mov	r1, r0
 800a32a:	4803      	ldr	r0, [pc, #12]	@ (800a338 <vsniprintf+0x18>)
 800a32c:	6800      	ldr	r0, [r0, #0]
 800a32e:	f7ff ffc8 	bl	800a2c2 <_vsniprintf_r>
 800a332:	b003      	add	sp, #12
 800a334:	f85d fb04 	ldr.w	pc, [sp], #4
 800a338:	20000184 	.word	0x20000184

0800a33c <__swbuf_r>:
 800a33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a33e:	460e      	mov	r6, r1
 800a340:	4614      	mov	r4, r2
 800a342:	4605      	mov	r5, r0
 800a344:	b118      	cbz	r0, 800a34e <__swbuf_r+0x12>
 800a346:	6a03      	ldr	r3, [r0, #32]
 800a348:	b90b      	cbnz	r3, 800a34e <__swbuf_r+0x12>
 800a34a:	f7ff feaf 	bl	800a0ac <__sinit>
 800a34e:	69a3      	ldr	r3, [r4, #24]
 800a350:	60a3      	str	r3, [r4, #8]
 800a352:	89a3      	ldrh	r3, [r4, #12]
 800a354:	071a      	lsls	r2, r3, #28
 800a356:	d501      	bpl.n	800a35c <__swbuf_r+0x20>
 800a358:	6923      	ldr	r3, [r4, #16]
 800a35a:	b943      	cbnz	r3, 800a36e <__swbuf_r+0x32>
 800a35c:	4621      	mov	r1, r4
 800a35e:	4628      	mov	r0, r5
 800a360:	f000 f82a 	bl	800a3b8 <__swsetup_r>
 800a364:	b118      	cbz	r0, 800a36e <__swbuf_r+0x32>
 800a366:	f04f 37ff 	mov.w	r7, #4294967295
 800a36a:	4638      	mov	r0, r7
 800a36c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a36e:	6823      	ldr	r3, [r4, #0]
 800a370:	6922      	ldr	r2, [r4, #16]
 800a372:	1a98      	subs	r0, r3, r2
 800a374:	6963      	ldr	r3, [r4, #20]
 800a376:	b2f6      	uxtb	r6, r6
 800a378:	4283      	cmp	r3, r0
 800a37a:	4637      	mov	r7, r6
 800a37c:	dc05      	bgt.n	800a38a <__swbuf_r+0x4e>
 800a37e:	4621      	mov	r1, r4
 800a380:	4628      	mov	r0, r5
 800a382:	f002 fc4d 	bl	800cc20 <_fflush_r>
 800a386:	2800      	cmp	r0, #0
 800a388:	d1ed      	bne.n	800a366 <__swbuf_r+0x2a>
 800a38a:	68a3      	ldr	r3, [r4, #8]
 800a38c:	3b01      	subs	r3, #1
 800a38e:	60a3      	str	r3, [r4, #8]
 800a390:	6823      	ldr	r3, [r4, #0]
 800a392:	1c5a      	adds	r2, r3, #1
 800a394:	6022      	str	r2, [r4, #0]
 800a396:	701e      	strb	r6, [r3, #0]
 800a398:	6962      	ldr	r2, [r4, #20]
 800a39a:	1c43      	adds	r3, r0, #1
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d004      	beq.n	800a3aa <__swbuf_r+0x6e>
 800a3a0:	89a3      	ldrh	r3, [r4, #12]
 800a3a2:	07db      	lsls	r3, r3, #31
 800a3a4:	d5e1      	bpl.n	800a36a <__swbuf_r+0x2e>
 800a3a6:	2e0a      	cmp	r6, #10
 800a3a8:	d1df      	bne.n	800a36a <__swbuf_r+0x2e>
 800a3aa:	4621      	mov	r1, r4
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	f002 fc37 	bl	800cc20 <_fflush_r>
 800a3b2:	2800      	cmp	r0, #0
 800a3b4:	d0d9      	beq.n	800a36a <__swbuf_r+0x2e>
 800a3b6:	e7d6      	b.n	800a366 <__swbuf_r+0x2a>

0800a3b8 <__swsetup_r>:
 800a3b8:	b538      	push	{r3, r4, r5, lr}
 800a3ba:	4b29      	ldr	r3, [pc, #164]	@ (800a460 <__swsetup_r+0xa8>)
 800a3bc:	4605      	mov	r5, r0
 800a3be:	6818      	ldr	r0, [r3, #0]
 800a3c0:	460c      	mov	r4, r1
 800a3c2:	b118      	cbz	r0, 800a3cc <__swsetup_r+0x14>
 800a3c4:	6a03      	ldr	r3, [r0, #32]
 800a3c6:	b90b      	cbnz	r3, 800a3cc <__swsetup_r+0x14>
 800a3c8:	f7ff fe70 	bl	800a0ac <__sinit>
 800a3cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3d0:	0719      	lsls	r1, r3, #28
 800a3d2:	d422      	bmi.n	800a41a <__swsetup_r+0x62>
 800a3d4:	06da      	lsls	r2, r3, #27
 800a3d6:	d407      	bmi.n	800a3e8 <__swsetup_r+0x30>
 800a3d8:	2209      	movs	r2, #9
 800a3da:	602a      	str	r2, [r5, #0]
 800a3dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3e0:	81a3      	strh	r3, [r4, #12]
 800a3e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e6:	e033      	b.n	800a450 <__swsetup_r+0x98>
 800a3e8:	0758      	lsls	r0, r3, #29
 800a3ea:	d512      	bpl.n	800a412 <__swsetup_r+0x5a>
 800a3ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a3ee:	b141      	cbz	r1, 800a402 <__swsetup_r+0x4a>
 800a3f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a3f4:	4299      	cmp	r1, r3
 800a3f6:	d002      	beq.n	800a3fe <__swsetup_r+0x46>
 800a3f8:	4628      	mov	r0, r5
 800a3fa:	f000 ff75 	bl	800b2e8 <_free_r>
 800a3fe:	2300      	movs	r3, #0
 800a400:	6363      	str	r3, [r4, #52]	@ 0x34
 800a402:	89a3      	ldrh	r3, [r4, #12]
 800a404:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a408:	81a3      	strh	r3, [r4, #12]
 800a40a:	2300      	movs	r3, #0
 800a40c:	6063      	str	r3, [r4, #4]
 800a40e:	6923      	ldr	r3, [r4, #16]
 800a410:	6023      	str	r3, [r4, #0]
 800a412:	89a3      	ldrh	r3, [r4, #12]
 800a414:	f043 0308 	orr.w	r3, r3, #8
 800a418:	81a3      	strh	r3, [r4, #12]
 800a41a:	6923      	ldr	r3, [r4, #16]
 800a41c:	b94b      	cbnz	r3, 800a432 <__swsetup_r+0x7a>
 800a41e:	89a3      	ldrh	r3, [r4, #12]
 800a420:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a424:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a428:	d003      	beq.n	800a432 <__swsetup_r+0x7a>
 800a42a:	4621      	mov	r1, r4
 800a42c:	4628      	mov	r0, r5
 800a42e:	f002 fc45 	bl	800ccbc <__smakebuf_r>
 800a432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a436:	f013 0201 	ands.w	r2, r3, #1
 800a43a:	d00a      	beq.n	800a452 <__swsetup_r+0x9a>
 800a43c:	2200      	movs	r2, #0
 800a43e:	60a2      	str	r2, [r4, #8]
 800a440:	6962      	ldr	r2, [r4, #20]
 800a442:	4252      	negs	r2, r2
 800a444:	61a2      	str	r2, [r4, #24]
 800a446:	6922      	ldr	r2, [r4, #16]
 800a448:	b942      	cbnz	r2, 800a45c <__swsetup_r+0xa4>
 800a44a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a44e:	d1c5      	bne.n	800a3dc <__swsetup_r+0x24>
 800a450:	bd38      	pop	{r3, r4, r5, pc}
 800a452:	0799      	lsls	r1, r3, #30
 800a454:	bf58      	it	pl
 800a456:	6962      	ldrpl	r2, [r4, #20]
 800a458:	60a2      	str	r2, [r4, #8]
 800a45a:	e7f4      	b.n	800a446 <__swsetup_r+0x8e>
 800a45c:	2000      	movs	r0, #0
 800a45e:	e7f7      	b.n	800a450 <__swsetup_r+0x98>
 800a460:	20000184 	.word	0x20000184

0800a464 <memset>:
 800a464:	4402      	add	r2, r0
 800a466:	4603      	mov	r3, r0
 800a468:	4293      	cmp	r3, r2
 800a46a:	d100      	bne.n	800a46e <memset+0xa>
 800a46c:	4770      	bx	lr
 800a46e:	f803 1b01 	strb.w	r1, [r3], #1
 800a472:	e7f9      	b.n	800a468 <memset+0x4>

0800a474 <strchr>:
 800a474:	b2c9      	uxtb	r1, r1
 800a476:	4603      	mov	r3, r0
 800a478:	4618      	mov	r0, r3
 800a47a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a47e:	b112      	cbz	r2, 800a486 <strchr+0x12>
 800a480:	428a      	cmp	r2, r1
 800a482:	d1f9      	bne.n	800a478 <strchr+0x4>
 800a484:	4770      	bx	lr
 800a486:	2900      	cmp	r1, #0
 800a488:	bf18      	it	ne
 800a48a:	2000      	movne	r0, #0
 800a48c:	4770      	bx	lr

0800a48e <strncmp>:
 800a48e:	b510      	push	{r4, lr}
 800a490:	b16a      	cbz	r2, 800a4ae <strncmp+0x20>
 800a492:	3901      	subs	r1, #1
 800a494:	1884      	adds	r4, r0, r2
 800a496:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a49a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d103      	bne.n	800a4aa <strncmp+0x1c>
 800a4a2:	42a0      	cmp	r0, r4
 800a4a4:	d001      	beq.n	800a4aa <strncmp+0x1c>
 800a4a6:	2a00      	cmp	r2, #0
 800a4a8:	d1f5      	bne.n	800a496 <strncmp+0x8>
 800a4aa:	1ad0      	subs	r0, r2, r3
 800a4ac:	bd10      	pop	{r4, pc}
 800a4ae:	4610      	mov	r0, r2
 800a4b0:	e7fc      	b.n	800a4ac <strncmp+0x1e>

0800a4b2 <__strtok_r>:
 800a4b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4b4:	4604      	mov	r4, r0
 800a4b6:	b908      	cbnz	r0, 800a4bc <__strtok_r+0xa>
 800a4b8:	6814      	ldr	r4, [r2, #0]
 800a4ba:	b144      	cbz	r4, 800a4ce <__strtok_r+0x1c>
 800a4bc:	4620      	mov	r0, r4
 800a4be:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a4c2:	460f      	mov	r7, r1
 800a4c4:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a4c8:	b91e      	cbnz	r6, 800a4d2 <__strtok_r+0x20>
 800a4ca:	b965      	cbnz	r5, 800a4e6 <__strtok_r+0x34>
 800a4cc:	6015      	str	r5, [r2, #0]
 800a4ce:	2000      	movs	r0, #0
 800a4d0:	e005      	b.n	800a4de <__strtok_r+0x2c>
 800a4d2:	42b5      	cmp	r5, r6
 800a4d4:	d1f6      	bne.n	800a4c4 <__strtok_r+0x12>
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d1f0      	bne.n	800a4bc <__strtok_r+0xa>
 800a4da:	6014      	str	r4, [r2, #0]
 800a4dc:	7003      	strb	r3, [r0, #0]
 800a4de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4e0:	461c      	mov	r4, r3
 800a4e2:	e00c      	b.n	800a4fe <__strtok_r+0x4c>
 800a4e4:	b91d      	cbnz	r5, 800a4ee <__strtok_r+0x3c>
 800a4e6:	4627      	mov	r7, r4
 800a4e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a4ec:	460e      	mov	r6, r1
 800a4ee:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a4f2:	42ab      	cmp	r3, r5
 800a4f4:	d1f6      	bne.n	800a4e4 <__strtok_r+0x32>
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d0f2      	beq.n	800a4e0 <__strtok_r+0x2e>
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	703b      	strb	r3, [r7, #0]
 800a4fe:	6014      	str	r4, [r2, #0]
 800a500:	e7ed      	b.n	800a4de <__strtok_r+0x2c>

0800a502 <strtok_r>:
 800a502:	2301      	movs	r3, #1
 800a504:	f7ff bfd5 	b.w	800a4b2 <__strtok_r>

0800a508 <_localeconv_r>:
 800a508:	4800      	ldr	r0, [pc, #0]	@ (800a50c <_localeconv_r+0x4>)
 800a50a:	4770      	bx	lr
 800a50c:	20000108 	.word	0x20000108

0800a510 <_close_r>:
 800a510:	b538      	push	{r3, r4, r5, lr}
 800a512:	4d06      	ldr	r5, [pc, #24]	@ (800a52c <_close_r+0x1c>)
 800a514:	2300      	movs	r3, #0
 800a516:	4604      	mov	r4, r0
 800a518:	4608      	mov	r0, r1
 800a51a:	602b      	str	r3, [r5, #0]
 800a51c:	f7f9 fa40 	bl	80039a0 <_close>
 800a520:	1c43      	adds	r3, r0, #1
 800a522:	d102      	bne.n	800a52a <_close_r+0x1a>
 800a524:	682b      	ldr	r3, [r5, #0]
 800a526:	b103      	cbz	r3, 800a52a <_close_r+0x1a>
 800a528:	6023      	str	r3, [r4, #0]
 800a52a:	bd38      	pop	{r3, r4, r5, pc}
 800a52c:	20000f4c 	.word	0x20000f4c

0800a530 <_lseek_r>:
 800a530:	b538      	push	{r3, r4, r5, lr}
 800a532:	4d07      	ldr	r5, [pc, #28]	@ (800a550 <_lseek_r+0x20>)
 800a534:	4604      	mov	r4, r0
 800a536:	4608      	mov	r0, r1
 800a538:	4611      	mov	r1, r2
 800a53a:	2200      	movs	r2, #0
 800a53c:	602a      	str	r2, [r5, #0]
 800a53e:	461a      	mov	r2, r3
 800a540:	f7f9 fa55 	bl	80039ee <_lseek>
 800a544:	1c43      	adds	r3, r0, #1
 800a546:	d102      	bne.n	800a54e <_lseek_r+0x1e>
 800a548:	682b      	ldr	r3, [r5, #0]
 800a54a:	b103      	cbz	r3, 800a54e <_lseek_r+0x1e>
 800a54c:	6023      	str	r3, [r4, #0]
 800a54e:	bd38      	pop	{r3, r4, r5, pc}
 800a550:	20000f4c 	.word	0x20000f4c

0800a554 <_read_r>:
 800a554:	b538      	push	{r3, r4, r5, lr}
 800a556:	4d07      	ldr	r5, [pc, #28]	@ (800a574 <_read_r+0x20>)
 800a558:	4604      	mov	r4, r0
 800a55a:	4608      	mov	r0, r1
 800a55c:	4611      	mov	r1, r2
 800a55e:	2200      	movs	r2, #0
 800a560:	602a      	str	r2, [r5, #0]
 800a562:	461a      	mov	r2, r3
 800a564:	f7f9 f9e3 	bl	800392e <_read>
 800a568:	1c43      	adds	r3, r0, #1
 800a56a:	d102      	bne.n	800a572 <_read_r+0x1e>
 800a56c:	682b      	ldr	r3, [r5, #0]
 800a56e:	b103      	cbz	r3, 800a572 <_read_r+0x1e>
 800a570:	6023      	str	r3, [r4, #0]
 800a572:	bd38      	pop	{r3, r4, r5, pc}
 800a574:	20000f4c 	.word	0x20000f4c

0800a578 <_write_r>:
 800a578:	b538      	push	{r3, r4, r5, lr}
 800a57a:	4d07      	ldr	r5, [pc, #28]	@ (800a598 <_write_r+0x20>)
 800a57c:	4604      	mov	r4, r0
 800a57e:	4608      	mov	r0, r1
 800a580:	4611      	mov	r1, r2
 800a582:	2200      	movs	r2, #0
 800a584:	602a      	str	r2, [r5, #0]
 800a586:	461a      	mov	r2, r3
 800a588:	f7f9 f9ee 	bl	8003968 <_write>
 800a58c:	1c43      	adds	r3, r0, #1
 800a58e:	d102      	bne.n	800a596 <_write_r+0x1e>
 800a590:	682b      	ldr	r3, [r5, #0]
 800a592:	b103      	cbz	r3, 800a596 <_write_r+0x1e>
 800a594:	6023      	str	r3, [r4, #0]
 800a596:	bd38      	pop	{r3, r4, r5, pc}
 800a598:	20000f4c 	.word	0x20000f4c

0800a59c <__errno>:
 800a59c:	4b01      	ldr	r3, [pc, #4]	@ (800a5a4 <__errno+0x8>)
 800a59e:	6818      	ldr	r0, [r3, #0]
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	20000184 	.word	0x20000184

0800a5a8 <__libc_init_array>:
 800a5a8:	b570      	push	{r4, r5, r6, lr}
 800a5aa:	4d0d      	ldr	r5, [pc, #52]	@ (800a5e0 <__libc_init_array+0x38>)
 800a5ac:	4c0d      	ldr	r4, [pc, #52]	@ (800a5e4 <__libc_init_array+0x3c>)
 800a5ae:	1b64      	subs	r4, r4, r5
 800a5b0:	10a4      	asrs	r4, r4, #2
 800a5b2:	2600      	movs	r6, #0
 800a5b4:	42a6      	cmp	r6, r4
 800a5b6:	d109      	bne.n	800a5cc <__libc_init_array+0x24>
 800a5b8:	4d0b      	ldr	r5, [pc, #44]	@ (800a5e8 <__libc_init_array+0x40>)
 800a5ba:	4c0c      	ldr	r4, [pc, #48]	@ (800a5ec <__libc_init_array+0x44>)
 800a5bc:	f002 fccc 	bl	800cf58 <_init>
 800a5c0:	1b64      	subs	r4, r4, r5
 800a5c2:	10a4      	asrs	r4, r4, #2
 800a5c4:	2600      	movs	r6, #0
 800a5c6:	42a6      	cmp	r6, r4
 800a5c8:	d105      	bne.n	800a5d6 <__libc_init_array+0x2e>
 800a5ca:	bd70      	pop	{r4, r5, r6, pc}
 800a5cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5d0:	4798      	blx	r3
 800a5d2:	3601      	adds	r6, #1
 800a5d4:	e7ee      	b.n	800a5b4 <__libc_init_array+0xc>
 800a5d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5da:	4798      	blx	r3
 800a5dc:	3601      	adds	r6, #1
 800a5de:	e7f2      	b.n	800a5c6 <__libc_init_array+0x1e>
 800a5e0:	0800d750 	.word	0x0800d750
 800a5e4:	0800d750 	.word	0x0800d750
 800a5e8:	0800d750 	.word	0x0800d750
 800a5ec:	0800d754 	.word	0x0800d754

0800a5f0 <__retarget_lock_init_recursive>:
 800a5f0:	4770      	bx	lr

0800a5f2 <__retarget_lock_acquire_recursive>:
 800a5f2:	4770      	bx	lr

0800a5f4 <__retarget_lock_release_recursive>:
 800a5f4:	4770      	bx	lr

0800a5f6 <memcpy>:
 800a5f6:	440a      	add	r2, r1
 800a5f8:	4291      	cmp	r1, r2
 800a5fa:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5fe:	d100      	bne.n	800a602 <memcpy+0xc>
 800a600:	4770      	bx	lr
 800a602:	b510      	push	{r4, lr}
 800a604:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a608:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a60c:	4291      	cmp	r1, r2
 800a60e:	d1f9      	bne.n	800a604 <memcpy+0xe>
 800a610:	bd10      	pop	{r4, pc}
 800a612:	0000      	movs	r0, r0
 800a614:	0000      	movs	r0, r0
	...

0800a618 <nan>:
 800a618:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a620 <nan+0x8>
 800a61c:	4770      	bx	lr
 800a61e:	bf00      	nop
 800a620:	00000000 	.word	0x00000000
 800a624:	7ff80000 	.word	0x7ff80000

0800a628 <nanf>:
 800a628:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a630 <nanf+0x8>
 800a62c:	4770      	bx	lr
 800a62e:	bf00      	nop
 800a630:	7fc00000 	.word	0x7fc00000

0800a634 <quorem>:
 800a634:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a638:	6903      	ldr	r3, [r0, #16]
 800a63a:	690c      	ldr	r4, [r1, #16]
 800a63c:	42a3      	cmp	r3, r4
 800a63e:	4607      	mov	r7, r0
 800a640:	db7e      	blt.n	800a740 <quorem+0x10c>
 800a642:	3c01      	subs	r4, #1
 800a644:	f101 0814 	add.w	r8, r1, #20
 800a648:	00a3      	lsls	r3, r4, #2
 800a64a:	f100 0514 	add.w	r5, r0, #20
 800a64e:	9300      	str	r3, [sp, #0]
 800a650:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a654:	9301      	str	r3, [sp, #4]
 800a656:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a65a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a65e:	3301      	adds	r3, #1
 800a660:	429a      	cmp	r2, r3
 800a662:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a666:	fbb2 f6f3 	udiv	r6, r2, r3
 800a66a:	d32e      	bcc.n	800a6ca <quorem+0x96>
 800a66c:	f04f 0a00 	mov.w	sl, #0
 800a670:	46c4      	mov	ip, r8
 800a672:	46ae      	mov	lr, r5
 800a674:	46d3      	mov	fp, sl
 800a676:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a67a:	b298      	uxth	r0, r3
 800a67c:	fb06 a000 	mla	r0, r6, r0, sl
 800a680:	0c02      	lsrs	r2, r0, #16
 800a682:	0c1b      	lsrs	r3, r3, #16
 800a684:	fb06 2303 	mla	r3, r6, r3, r2
 800a688:	f8de 2000 	ldr.w	r2, [lr]
 800a68c:	b280      	uxth	r0, r0
 800a68e:	b292      	uxth	r2, r2
 800a690:	1a12      	subs	r2, r2, r0
 800a692:	445a      	add	r2, fp
 800a694:	f8de 0000 	ldr.w	r0, [lr]
 800a698:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a6a2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a6a6:	b292      	uxth	r2, r2
 800a6a8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a6ac:	45e1      	cmp	r9, ip
 800a6ae:	f84e 2b04 	str.w	r2, [lr], #4
 800a6b2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a6b6:	d2de      	bcs.n	800a676 <quorem+0x42>
 800a6b8:	9b00      	ldr	r3, [sp, #0]
 800a6ba:	58eb      	ldr	r3, [r5, r3]
 800a6bc:	b92b      	cbnz	r3, 800a6ca <quorem+0x96>
 800a6be:	9b01      	ldr	r3, [sp, #4]
 800a6c0:	3b04      	subs	r3, #4
 800a6c2:	429d      	cmp	r5, r3
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	d32f      	bcc.n	800a728 <quorem+0xf4>
 800a6c8:	613c      	str	r4, [r7, #16]
 800a6ca:	4638      	mov	r0, r7
 800a6cc:	f001 fd14 	bl	800c0f8 <__mcmp>
 800a6d0:	2800      	cmp	r0, #0
 800a6d2:	db25      	blt.n	800a720 <quorem+0xec>
 800a6d4:	4629      	mov	r1, r5
 800a6d6:	2000      	movs	r0, #0
 800a6d8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a6dc:	f8d1 c000 	ldr.w	ip, [r1]
 800a6e0:	fa1f fe82 	uxth.w	lr, r2
 800a6e4:	fa1f f38c 	uxth.w	r3, ip
 800a6e8:	eba3 030e 	sub.w	r3, r3, lr
 800a6ec:	4403      	add	r3, r0
 800a6ee:	0c12      	lsrs	r2, r2, #16
 800a6f0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a6f4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6fe:	45c1      	cmp	r9, r8
 800a700:	f841 3b04 	str.w	r3, [r1], #4
 800a704:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a708:	d2e6      	bcs.n	800a6d8 <quorem+0xa4>
 800a70a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a70e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a712:	b922      	cbnz	r2, 800a71e <quorem+0xea>
 800a714:	3b04      	subs	r3, #4
 800a716:	429d      	cmp	r5, r3
 800a718:	461a      	mov	r2, r3
 800a71a:	d30b      	bcc.n	800a734 <quorem+0x100>
 800a71c:	613c      	str	r4, [r7, #16]
 800a71e:	3601      	adds	r6, #1
 800a720:	4630      	mov	r0, r6
 800a722:	b003      	add	sp, #12
 800a724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a728:	6812      	ldr	r2, [r2, #0]
 800a72a:	3b04      	subs	r3, #4
 800a72c:	2a00      	cmp	r2, #0
 800a72e:	d1cb      	bne.n	800a6c8 <quorem+0x94>
 800a730:	3c01      	subs	r4, #1
 800a732:	e7c6      	b.n	800a6c2 <quorem+0x8e>
 800a734:	6812      	ldr	r2, [r2, #0]
 800a736:	3b04      	subs	r3, #4
 800a738:	2a00      	cmp	r2, #0
 800a73a:	d1ef      	bne.n	800a71c <quorem+0xe8>
 800a73c:	3c01      	subs	r4, #1
 800a73e:	e7ea      	b.n	800a716 <quorem+0xe2>
 800a740:	2000      	movs	r0, #0
 800a742:	e7ee      	b.n	800a722 <quorem+0xee>
 800a744:	0000      	movs	r0, r0
	...

0800a748 <_dtoa_r>:
 800a748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a74c:	69c7      	ldr	r7, [r0, #28]
 800a74e:	b097      	sub	sp, #92	@ 0x5c
 800a750:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a754:	ec55 4b10 	vmov	r4, r5, d0
 800a758:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a75a:	9107      	str	r1, [sp, #28]
 800a75c:	4681      	mov	r9, r0
 800a75e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a760:	9311      	str	r3, [sp, #68]	@ 0x44
 800a762:	b97f      	cbnz	r7, 800a784 <_dtoa_r+0x3c>
 800a764:	2010      	movs	r0, #16
 800a766:	f001 f943 	bl	800b9f0 <malloc>
 800a76a:	4602      	mov	r2, r0
 800a76c:	f8c9 001c 	str.w	r0, [r9, #28]
 800a770:	b920      	cbnz	r0, 800a77c <_dtoa_r+0x34>
 800a772:	4ba9      	ldr	r3, [pc, #676]	@ (800aa18 <_dtoa_r+0x2d0>)
 800a774:	21ef      	movs	r1, #239	@ 0xef
 800a776:	48a9      	ldr	r0, [pc, #676]	@ (800aa1c <_dtoa_r+0x2d4>)
 800a778:	f002 fb28 	bl	800cdcc <__assert_func>
 800a77c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a780:	6007      	str	r7, [r0, #0]
 800a782:	60c7      	str	r7, [r0, #12]
 800a784:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a788:	6819      	ldr	r1, [r3, #0]
 800a78a:	b159      	cbz	r1, 800a7a4 <_dtoa_r+0x5c>
 800a78c:	685a      	ldr	r2, [r3, #4]
 800a78e:	604a      	str	r2, [r1, #4]
 800a790:	2301      	movs	r3, #1
 800a792:	4093      	lsls	r3, r2
 800a794:	608b      	str	r3, [r1, #8]
 800a796:	4648      	mov	r0, r9
 800a798:	f001 fa32 	bl	800bc00 <_Bfree>
 800a79c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	601a      	str	r2, [r3, #0]
 800a7a4:	1e2b      	subs	r3, r5, #0
 800a7a6:	bfb9      	ittee	lt
 800a7a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a7ac:	9305      	strlt	r3, [sp, #20]
 800a7ae:	2300      	movge	r3, #0
 800a7b0:	6033      	strge	r3, [r6, #0]
 800a7b2:	9f05      	ldr	r7, [sp, #20]
 800a7b4:	4b9a      	ldr	r3, [pc, #616]	@ (800aa20 <_dtoa_r+0x2d8>)
 800a7b6:	bfbc      	itt	lt
 800a7b8:	2201      	movlt	r2, #1
 800a7ba:	6032      	strlt	r2, [r6, #0]
 800a7bc:	43bb      	bics	r3, r7
 800a7be:	d112      	bne.n	800a7e6 <_dtoa_r+0x9e>
 800a7c0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a7c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a7c6:	6013      	str	r3, [r2, #0]
 800a7c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a7cc:	4323      	orrs	r3, r4
 800a7ce:	f000 855a 	beq.w	800b286 <_dtoa_r+0xb3e>
 800a7d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a7d4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800aa34 <_dtoa_r+0x2ec>
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f000 855c 	beq.w	800b296 <_dtoa_r+0xb4e>
 800a7de:	f10a 0303 	add.w	r3, sl, #3
 800a7e2:	f000 bd56 	b.w	800b292 <_dtoa_r+0xb4a>
 800a7e6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	ec51 0b17 	vmov	r0, r1, d7
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a7f6:	f7f6 f987 	bl	8000b08 <__aeabi_dcmpeq>
 800a7fa:	4680      	mov	r8, r0
 800a7fc:	b158      	cbz	r0, 800a816 <_dtoa_r+0xce>
 800a7fe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a800:	2301      	movs	r3, #1
 800a802:	6013      	str	r3, [r2, #0]
 800a804:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a806:	b113      	cbz	r3, 800a80e <_dtoa_r+0xc6>
 800a808:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a80a:	4b86      	ldr	r3, [pc, #536]	@ (800aa24 <_dtoa_r+0x2dc>)
 800a80c:	6013      	str	r3, [r2, #0]
 800a80e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800aa38 <_dtoa_r+0x2f0>
 800a812:	f000 bd40 	b.w	800b296 <_dtoa_r+0xb4e>
 800a816:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a81a:	aa14      	add	r2, sp, #80	@ 0x50
 800a81c:	a915      	add	r1, sp, #84	@ 0x54
 800a81e:	4648      	mov	r0, r9
 800a820:	f001 fd8a 	bl	800c338 <__d2b>
 800a824:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a828:	9002      	str	r0, [sp, #8]
 800a82a:	2e00      	cmp	r6, #0
 800a82c:	d078      	beq.n	800a920 <_dtoa_r+0x1d8>
 800a82e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a830:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a838:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a83c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a840:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a844:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a848:	4619      	mov	r1, r3
 800a84a:	2200      	movs	r2, #0
 800a84c:	4b76      	ldr	r3, [pc, #472]	@ (800aa28 <_dtoa_r+0x2e0>)
 800a84e:	f7f5 fd3b 	bl	80002c8 <__aeabi_dsub>
 800a852:	a36b      	add	r3, pc, #428	@ (adr r3, 800aa00 <_dtoa_r+0x2b8>)
 800a854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a858:	f7f5 feee 	bl	8000638 <__aeabi_dmul>
 800a85c:	a36a      	add	r3, pc, #424	@ (adr r3, 800aa08 <_dtoa_r+0x2c0>)
 800a85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a862:	f7f5 fd33 	bl	80002cc <__adddf3>
 800a866:	4604      	mov	r4, r0
 800a868:	4630      	mov	r0, r6
 800a86a:	460d      	mov	r5, r1
 800a86c:	f7f5 fe7a 	bl	8000564 <__aeabi_i2d>
 800a870:	a367      	add	r3, pc, #412	@ (adr r3, 800aa10 <_dtoa_r+0x2c8>)
 800a872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a876:	f7f5 fedf 	bl	8000638 <__aeabi_dmul>
 800a87a:	4602      	mov	r2, r0
 800a87c:	460b      	mov	r3, r1
 800a87e:	4620      	mov	r0, r4
 800a880:	4629      	mov	r1, r5
 800a882:	f7f5 fd23 	bl	80002cc <__adddf3>
 800a886:	4604      	mov	r4, r0
 800a888:	460d      	mov	r5, r1
 800a88a:	f7f6 f985 	bl	8000b98 <__aeabi_d2iz>
 800a88e:	2200      	movs	r2, #0
 800a890:	4607      	mov	r7, r0
 800a892:	2300      	movs	r3, #0
 800a894:	4620      	mov	r0, r4
 800a896:	4629      	mov	r1, r5
 800a898:	f7f6 f940 	bl	8000b1c <__aeabi_dcmplt>
 800a89c:	b140      	cbz	r0, 800a8b0 <_dtoa_r+0x168>
 800a89e:	4638      	mov	r0, r7
 800a8a0:	f7f5 fe60 	bl	8000564 <__aeabi_i2d>
 800a8a4:	4622      	mov	r2, r4
 800a8a6:	462b      	mov	r3, r5
 800a8a8:	f7f6 f92e 	bl	8000b08 <__aeabi_dcmpeq>
 800a8ac:	b900      	cbnz	r0, 800a8b0 <_dtoa_r+0x168>
 800a8ae:	3f01      	subs	r7, #1
 800a8b0:	2f16      	cmp	r7, #22
 800a8b2:	d852      	bhi.n	800a95a <_dtoa_r+0x212>
 800a8b4:	4b5d      	ldr	r3, [pc, #372]	@ (800aa2c <_dtoa_r+0x2e4>)
 800a8b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a8c2:	f7f6 f92b 	bl	8000b1c <__aeabi_dcmplt>
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	d049      	beq.n	800a95e <_dtoa_r+0x216>
 800a8ca:	3f01      	subs	r7, #1
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	9310      	str	r3, [sp, #64]	@ 0x40
 800a8d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a8d2:	1b9b      	subs	r3, r3, r6
 800a8d4:	1e5a      	subs	r2, r3, #1
 800a8d6:	bf45      	ittet	mi
 800a8d8:	f1c3 0301 	rsbmi	r3, r3, #1
 800a8dc:	9300      	strmi	r3, [sp, #0]
 800a8de:	2300      	movpl	r3, #0
 800a8e0:	2300      	movmi	r3, #0
 800a8e2:	9206      	str	r2, [sp, #24]
 800a8e4:	bf54      	ite	pl
 800a8e6:	9300      	strpl	r3, [sp, #0]
 800a8e8:	9306      	strmi	r3, [sp, #24]
 800a8ea:	2f00      	cmp	r7, #0
 800a8ec:	db39      	blt.n	800a962 <_dtoa_r+0x21a>
 800a8ee:	9b06      	ldr	r3, [sp, #24]
 800a8f0:	970d      	str	r7, [sp, #52]	@ 0x34
 800a8f2:	443b      	add	r3, r7
 800a8f4:	9306      	str	r3, [sp, #24]
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	9308      	str	r3, [sp, #32]
 800a8fa:	9b07      	ldr	r3, [sp, #28]
 800a8fc:	2b09      	cmp	r3, #9
 800a8fe:	d863      	bhi.n	800a9c8 <_dtoa_r+0x280>
 800a900:	2b05      	cmp	r3, #5
 800a902:	bfc4      	itt	gt
 800a904:	3b04      	subgt	r3, #4
 800a906:	9307      	strgt	r3, [sp, #28]
 800a908:	9b07      	ldr	r3, [sp, #28]
 800a90a:	f1a3 0302 	sub.w	r3, r3, #2
 800a90e:	bfcc      	ite	gt
 800a910:	2400      	movgt	r4, #0
 800a912:	2401      	movle	r4, #1
 800a914:	2b03      	cmp	r3, #3
 800a916:	d863      	bhi.n	800a9e0 <_dtoa_r+0x298>
 800a918:	e8df f003 	tbb	[pc, r3]
 800a91c:	2b375452 	.word	0x2b375452
 800a920:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a924:	441e      	add	r6, r3
 800a926:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a92a:	2b20      	cmp	r3, #32
 800a92c:	bfc1      	itttt	gt
 800a92e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a932:	409f      	lslgt	r7, r3
 800a934:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a938:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a93c:	bfd6      	itet	le
 800a93e:	f1c3 0320 	rsble	r3, r3, #32
 800a942:	ea47 0003 	orrgt.w	r0, r7, r3
 800a946:	fa04 f003 	lslle.w	r0, r4, r3
 800a94a:	f7f5 fdfb 	bl	8000544 <__aeabi_ui2d>
 800a94e:	2201      	movs	r2, #1
 800a950:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a954:	3e01      	subs	r6, #1
 800a956:	9212      	str	r2, [sp, #72]	@ 0x48
 800a958:	e776      	b.n	800a848 <_dtoa_r+0x100>
 800a95a:	2301      	movs	r3, #1
 800a95c:	e7b7      	b.n	800a8ce <_dtoa_r+0x186>
 800a95e:	9010      	str	r0, [sp, #64]	@ 0x40
 800a960:	e7b6      	b.n	800a8d0 <_dtoa_r+0x188>
 800a962:	9b00      	ldr	r3, [sp, #0]
 800a964:	1bdb      	subs	r3, r3, r7
 800a966:	9300      	str	r3, [sp, #0]
 800a968:	427b      	negs	r3, r7
 800a96a:	9308      	str	r3, [sp, #32]
 800a96c:	2300      	movs	r3, #0
 800a96e:	930d      	str	r3, [sp, #52]	@ 0x34
 800a970:	e7c3      	b.n	800a8fa <_dtoa_r+0x1b2>
 800a972:	2301      	movs	r3, #1
 800a974:	9309      	str	r3, [sp, #36]	@ 0x24
 800a976:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a978:	eb07 0b03 	add.w	fp, r7, r3
 800a97c:	f10b 0301 	add.w	r3, fp, #1
 800a980:	2b01      	cmp	r3, #1
 800a982:	9303      	str	r3, [sp, #12]
 800a984:	bfb8      	it	lt
 800a986:	2301      	movlt	r3, #1
 800a988:	e006      	b.n	800a998 <_dtoa_r+0x250>
 800a98a:	2301      	movs	r3, #1
 800a98c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a98e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a990:	2b00      	cmp	r3, #0
 800a992:	dd28      	ble.n	800a9e6 <_dtoa_r+0x29e>
 800a994:	469b      	mov	fp, r3
 800a996:	9303      	str	r3, [sp, #12]
 800a998:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a99c:	2100      	movs	r1, #0
 800a99e:	2204      	movs	r2, #4
 800a9a0:	f102 0514 	add.w	r5, r2, #20
 800a9a4:	429d      	cmp	r5, r3
 800a9a6:	d926      	bls.n	800a9f6 <_dtoa_r+0x2ae>
 800a9a8:	6041      	str	r1, [r0, #4]
 800a9aa:	4648      	mov	r0, r9
 800a9ac:	f001 f8e8 	bl	800bb80 <_Balloc>
 800a9b0:	4682      	mov	sl, r0
 800a9b2:	2800      	cmp	r0, #0
 800a9b4:	d142      	bne.n	800aa3c <_dtoa_r+0x2f4>
 800a9b6:	4b1e      	ldr	r3, [pc, #120]	@ (800aa30 <_dtoa_r+0x2e8>)
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	f240 11af 	movw	r1, #431	@ 0x1af
 800a9be:	e6da      	b.n	800a776 <_dtoa_r+0x2e>
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	e7e3      	b.n	800a98c <_dtoa_r+0x244>
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	e7d5      	b.n	800a974 <_dtoa_r+0x22c>
 800a9c8:	2401      	movs	r4, #1
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	9307      	str	r3, [sp, #28]
 800a9ce:	9409      	str	r4, [sp, #36]	@ 0x24
 800a9d0:	f04f 3bff 	mov.w	fp, #4294967295
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	f8cd b00c 	str.w	fp, [sp, #12]
 800a9da:	2312      	movs	r3, #18
 800a9dc:	920c      	str	r2, [sp, #48]	@ 0x30
 800a9de:	e7db      	b.n	800a998 <_dtoa_r+0x250>
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9e4:	e7f4      	b.n	800a9d0 <_dtoa_r+0x288>
 800a9e6:	f04f 0b01 	mov.w	fp, #1
 800a9ea:	f8cd b00c 	str.w	fp, [sp, #12]
 800a9ee:	465b      	mov	r3, fp
 800a9f0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a9f4:	e7d0      	b.n	800a998 <_dtoa_r+0x250>
 800a9f6:	3101      	adds	r1, #1
 800a9f8:	0052      	lsls	r2, r2, #1
 800a9fa:	e7d1      	b.n	800a9a0 <_dtoa_r+0x258>
 800a9fc:	f3af 8000 	nop.w
 800aa00:	636f4361 	.word	0x636f4361
 800aa04:	3fd287a7 	.word	0x3fd287a7
 800aa08:	8b60c8b3 	.word	0x8b60c8b3
 800aa0c:	3fc68a28 	.word	0x3fc68a28
 800aa10:	509f79fb 	.word	0x509f79fb
 800aa14:	3fd34413 	.word	0x3fd34413
 800aa18:	0800d370 	.word	0x0800d370
 800aa1c:	0800d387 	.word	0x0800d387
 800aa20:	7ff00000 	.word	0x7ff00000
 800aa24:	0800d333 	.word	0x0800d333
 800aa28:	3ff80000 	.word	0x3ff80000
 800aa2c:	0800d680 	.word	0x0800d680
 800aa30:	0800d3df 	.word	0x0800d3df
 800aa34:	0800d36c 	.word	0x0800d36c
 800aa38:	0800d332 	.word	0x0800d332
 800aa3c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aa40:	6018      	str	r0, [r3, #0]
 800aa42:	9b03      	ldr	r3, [sp, #12]
 800aa44:	2b0e      	cmp	r3, #14
 800aa46:	f200 80a1 	bhi.w	800ab8c <_dtoa_r+0x444>
 800aa4a:	2c00      	cmp	r4, #0
 800aa4c:	f000 809e 	beq.w	800ab8c <_dtoa_r+0x444>
 800aa50:	2f00      	cmp	r7, #0
 800aa52:	dd33      	ble.n	800aabc <_dtoa_r+0x374>
 800aa54:	4b9c      	ldr	r3, [pc, #624]	@ (800acc8 <_dtoa_r+0x580>)
 800aa56:	f007 020f 	and.w	r2, r7, #15
 800aa5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa5e:	ed93 7b00 	vldr	d7, [r3]
 800aa62:	05f8      	lsls	r0, r7, #23
 800aa64:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800aa68:	ea4f 1427 	mov.w	r4, r7, asr #4
 800aa6c:	d516      	bpl.n	800aa9c <_dtoa_r+0x354>
 800aa6e:	4b97      	ldr	r3, [pc, #604]	@ (800accc <_dtoa_r+0x584>)
 800aa70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800aa74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa78:	f7f5 ff08 	bl	800088c <__aeabi_ddiv>
 800aa7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa80:	f004 040f 	and.w	r4, r4, #15
 800aa84:	2603      	movs	r6, #3
 800aa86:	4d91      	ldr	r5, [pc, #580]	@ (800accc <_dtoa_r+0x584>)
 800aa88:	b954      	cbnz	r4, 800aaa0 <_dtoa_r+0x358>
 800aa8a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aa8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa92:	f7f5 fefb 	bl	800088c <__aeabi_ddiv>
 800aa96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa9a:	e028      	b.n	800aaee <_dtoa_r+0x3a6>
 800aa9c:	2602      	movs	r6, #2
 800aa9e:	e7f2      	b.n	800aa86 <_dtoa_r+0x33e>
 800aaa0:	07e1      	lsls	r1, r4, #31
 800aaa2:	d508      	bpl.n	800aab6 <_dtoa_r+0x36e>
 800aaa4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800aaa8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aaac:	f7f5 fdc4 	bl	8000638 <__aeabi_dmul>
 800aab0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800aab4:	3601      	adds	r6, #1
 800aab6:	1064      	asrs	r4, r4, #1
 800aab8:	3508      	adds	r5, #8
 800aaba:	e7e5      	b.n	800aa88 <_dtoa_r+0x340>
 800aabc:	f000 80af 	beq.w	800ac1e <_dtoa_r+0x4d6>
 800aac0:	427c      	negs	r4, r7
 800aac2:	4b81      	ldr	r3, [pc, #516]	@ (800acc8 <_dtoa_r+0x580>)
 800aac4:	4d81      	ldr	r5, [pc, #516]	@ (800accc <_dtoa_r+0x584>)
 800aac6:	f004 020f 	and.w	r2, r4, #15
 800aaca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800aad6:	f7f5 fdaf 	bl	8000638 <__aeabi_dmul>
 800aada:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aade:	1124      	asrs	r4, r4, #4
 800aae0:	2300      	movs	r3, #0
 800aae2:	2602      	movs	r6, #2
 800aae4:	2c00      	cmp	r4, #0
 800aae6:	f040 808f 	bne.w	800ac08 <_dtoa_r+0x4c0>
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d1d3      	bne.n	800aa96 <_dtoa_r+0x34e>
 800aaee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aaf0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	f000 8094 	beq.w	800ac22 <_dtoa_r+0x4da>
 800aafa:	4b75      	ldr	r3, [pc, #468]	@ (800acd0 <_dtoa_r+0x588>)
 800aafc:	2200      	movs	r2, #0
 800aafe:	4620      	mov	r0, r4
 800ab00:	4629      	mov	r1, r5
 800ab02:	f7f6 f80b 	bl	8000b1c <__aeabi_dcmplt>
 800ab06:	2800      	cmp	r0, #0
 800ab08:	f000 808b 	beq.w	800ac22 <_dtoa_r+0x4da>
 800ab0c:	9b03      	ldr	r3, [sp, #12]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	f000 8087 	beq.w	800ac22 <_dtoa_r+0x4da>
 800ab14:	f1bb 0f00 	cmp.w	fp, #0
 800ab18:	dd34      	ble.n	800ab84 <_dtoa_r+0x43c>
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	4b6d      	ldr	r3, [pc, #436]	@ (800acd4 <_dtoa_r+0x58c>)
 800ab1e:	2200      	movs	r2, #0
 800ab20:	4629      	mov	r1, r5
 800ab22:	f7f5 fd89 	bl	8000638 <__aeabi_dmul>
 800ab26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab2a:	f107 38ff 	add.w	r8, r7, #4294967295
 800ab2e:	3601      	adds	r6, #1
 800ab30:	465c      	mov	r4, fp
 800ab32:	4630      	mov	r0, r6
 800ab34:	f7f5 fd16 	bl	8000564 <__aeabi_i2d>
 800ab38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab3c:	f7f5 fd7c 	bl	8000638 <__aeabi_dmul>
 800ab40:	4b65      	ldr	r3, [pc, #404]	@ (800acd8 <_dtoa_r+0x590>)
 800ab42:	2200      	movs	r2, #0
 800ab44:	f7f5 fbc2 	bl	80002cc <__adddf3>
 800ab48:	4605      	mov	r5, r0
 800ab4a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ab4e:	2c00      	cmp	r4, #0
 800ab50:	d16a      	bne.n	800ac28 <_dtoa_r+0x4e0>
 800ab52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab56:	4b61      	ldr	r3, [pc, #388]	@ (800acdc <_dtoa_r+0x594>)
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f7f5 fbb5 	bl	80002c8 <__aeabi_dsub>
 800ab5e:	4602      	mov	r2, r0
 800ab60:	460b      	mov	r3, r1
 800ab62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab66:	462a      	mov	r2, r5
 800ab68:	4633      	mov	r3, r6
 800ab6a:	f7f5 fff5 	bl	8000b58 <__aeabi_dcmpgt>
 800ab6e:	2800      	cmp	r0, #0
 800ab70:	f040 8298 	bne.w	800b0a4 <_dtoa_r+0x95c>
 800ab74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab78:	462a      	mov	r2, r5
 800ab7a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ab7e:	f7f5 ffcd 	bl	8000b1c <__aeabi_dcmplt>
 800ab82:	bb38      	cbnz	r0, 800abd4 <_dtoa_r+0x48c>
 800ab84:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ab88:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ab8c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f2c0 8157 	blt.w	800ae42 <_dtoa_r+0x6fa>
 800ab94:	2f0e      	cmp	r7, #14
 800ab96:	f300 8154 	bgt.w	800ae42 <_dtoa_r+0x6fa>
 800ab9a:	4b4b      	ldr	r3, [pc, #300]	@ (800acc8 <_dtoa_r+0x580>)
 800ab9c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aba0:	ed93 7b00 	vldr	d7, [r3]
 800aba4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	ed8d 7b00 	vstr	d7, [sp]
 800abac:	f280 80e5 	bge.w	800ad7a <_dtoa_r+0x632>
 800abb0:	9b03      	ldr	r3, [sp, #12]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	f300 80e1 	bgt.w	800ad7a <_dtoa_r+0x632>
 800abb8:	d10c      	bne.n	800abd4 <_dtoa_r+0x48c>
 800abba:	4b48      	ldr	r3, [pc, #288]	@ (800acdc <_dtoa_r+0x594>)
 800abbc:	2200      	movs	r2, #0
 800abbe:	ec51 0b17 	vmov	r0, r1, d7
 800abc2:	f7f5 fd39 	bl	8000638 <__aeabi_dmul>
 800abc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abca:	f7f5 ffbb 	bl	8000b44 <__aeabi_dcmpge>
 800abce:	2800      	cmp	r0, #0
 800abd0:	f000 8266 	beq.w	800b0a0 <_dtoa_r+0x958>
 800abd4:	2400      	movs	r4, #0
 800abd6:	4625      	mov	r5, r4
 800abd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800abda:	4656      	mov	r6, sl
 800abdc:	ea6f 0803 	mvn.w	r8, r3
 800abe0:	2700      	movs	r7, #0
 800abe2:	4621      	mov	r1, r4
 800abe4:	4648      	mov	r0, r9
 800abe6:	f001 f80b 	bl	800bc00 <_Bfree>
 800abea:	2d00      	cmp	r5, #0
 800abec:	f000 80bd 	beq.w	800ad6a <_dtoa_r+0x622>
 800abf0:	b12f      	cbz	r7, 800abfe <_dtoa_r+0x4b6>
 800abf2:	42af      	cmp	r7, r5
 800abf4:	d003      	beq.n	800abfe <_dtoa_r+0x4b6>
 800abf6:	4639      	mov	r1, r7
 800abf8:	4648      	mov	r0, r9
 800abfa:	f001 f801 	bl	800bc00 <_Bfree>
 800abfe:	4629      	mov	r1, r5
 800ac00:	4648      	mov	r0, r9
 800ac02:	f000 fffd 	bl	800bc00 <_Bfree>
 800ac06:	e0b0      	b.n	800ad6a <_dtoa_r+0x622>
 800ac08:	07e2      	lsls	r2, r4, #31
 800ac0a:	d505      	bpl.n	800ac18 <_dtoa_r+0x4d0>
 800ac0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ac10:	f7f5 fd12 	bl	8000638 <__aeabi_dmul>
 800ac14:	3601      	adds	r6, #1
 800ac16:	2301      	movs	r3, #1
 800ac18:	1064      	asrs	r4, r4, #1
 800ac1a:	3508      	adds	r5, #8
 800ac1c:	e762      	b.n	800aae4 <_dtoa_r+0x39c>
 800ac1e:	2602      	movs	r6, #2
 800ac20:	e765      	b.n	800aaee <_dtoa_r+0x3a6>
 800ac22:	9c03      	ldr	r4, [sp, #12]
 800ac24:	46b8      	mov	r8, r7
 800ac26:	e784      	b.n	800ab32 <_dtoa_r+0x3ea>
 800ac28:	4b27      	ldr	r3, [pc, #156]	@ (800acc8 <_dtoa_r+0x580>)
 800ac2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac34:	4454      	add	r4, sl
 800ac36:	2900      	cmp	r1, #0
 800ac38:	d054      	beq.n	800ace4 <_dtoa_r+0x59c>
 800ac3a:	4929      	ldr	r1, [pc, #164]	@ (800ace0 <_dtoa_r+0x598>)
 800ac3c:	2000      	movs	r0, #0
 800ac3e:	f7f5 fe25 	bl	800088c <__aeabi_ddiv>
 800ac42:	4633      	mov	r3, r6
 800ac44:	462a      	mov	r2, r5
 800ac46:	f7f5 fb3f 	bl	80002c8 <__aeabi_dsub>
 800ac4a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ac4e:	4656      	mov	r6, sl
 800ac50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac54:	f7f5 ffa0 	bl	8000b98 <__aeabi_d2iz>
 800ac58:	4605      	mov	r5, r0
 800ac5a:	f7f5 fc83 	bl	8000564 <__aeabi_i2d>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	460b      	mov	r3, r1
 800ac62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac66:	f7f5 fb2f 	bl	80002c8 <__aeabi_dsub>
 800ac6a:	3530      	adds	r5, #48	@ 0x30
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	460b      	mov	r3, r1
 800ac70:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ac74:	f806 5b01 	strb.w	r5, [r6], #1
 800ac78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ac7c:	f7f5 ff4e 	bl	8000b1c <__aeabi_dcmplt>
 800ac80:	2800      	cmp	r0, #0
 800ac82:	d172      	bne.n	800ad6a <_dtoa_r+0x622>
 800ac84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac88:	4911      	ldr	r1, [pc, #68]	@ (800acd0 <_dtoa_r+0x588>)
 800ac8a:	2000      	movs	r0, #0
 800ac8c:	f7f5 fb1c 	bl	80002c8 <__aeabi_dsub>
 800ac90:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ac94:	f7f5 ff42 	bl	8000b1c <__aeabi_dcmplt>
 800ac98:	2800      	cmp	r0, #0
 800ac9a:	f040 80b4 	bne.w	800ae06 <_dtoa_r+0x6be>
 800ac9e:	42a6      	cmp	r6, r4
 800aca0:	f43f af70 	beq.w	800ab84 <_dtoa_r+0x43c>
 800aca4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800aca8:	4b0a      	ldr	r3, [pc, #40]	@ (800acd4 <_dtoa_r+0x58c>)
 800acaa:	2200      	movs	r2, #0
 800acac:	f7f5 fcc4 	bl	8000638 <__aeabi_dmul>
 800acb0:	4b08      	ldr	r3, [pc, #32]	@ (800acd4 <_dtoa_r+0x58c>)
 800acb2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800acb6:	2200      	movs	r2, #0
 800acb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acbc:	f7f5 fcbc 	bl	8000638 <__aeabi_dmul>
 800acc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800acc4:	e7c4      	b.n	800ac50 <_dtoa_r+0x508>
 800acc6:	bf00      	nop
 800acc8:	0800d680 	.word	0x0800d680
 800accc:	0800d658 	.word	0x0800d658
 800acd0:	3ff00000 	.word	0x3ff00000
 800acd4:	40240000 	.word	0x40240000
 800acd8:	401c0000 	.word	0x401c0000
 800acdc:	40140000 	.word	0x40140000
 800ace0:	3fe00000 	.word	0x3fe00000
 800ace4:	4631      	mov	r1, r6
 800ace6:	4628      	mov	r0, r5
 800ace8:	f7f5 fca6 	bl	8000638 <__aeabi_dmul>
 800acec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800acf0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800acf2:	4656      	mov	r6, sl
 800acf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acf8:	f7f5 ff4e 	bl	8000b98 <__aeabi_d2iz>
 800acfc:	4605      	mov	r5, r0
 800acfe:	f7f5 fc31 	bl	8000564 <__aeabi_i2d>
 800ad02:	4602      	mov	r2, r0
 800ad04:	460b      	mov	r3, r1
 800ad06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad0a:	f7f5 fadd 	bl	80002c8 <__aeabi_dsub>
 800ad0e:	3530      	adds	r5, #48	@ 0x30
 800ad10:	f806 5b01 	strb.w	r5, [r6], #1
 800ad14:	4602      	mov	r2, r0
 800ad16:	460b      	mov	r3, r1
 800ad18:	42a6      	cmp	r6, r4
 800ad1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ad1e:	f04f 0200 	mov.w	r2, #0
 800ad22:	d124      	bne.n	800ad6e <_dtoa_r+0x626>
 800ad24:	4baf      	ldr	r3, [pc, #700]	@ (800afe4 <_dtoa_r+0x89c>)
 800ad26:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ad2a:	f7f5 facf 	bl	80002cc <__adddf3>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	460b      	mov	r3, r1
 800ad32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad36:	f7f5 ff0f 	bl	8000b58 <__aeabi_dcmpgt>
 800ad3a:	2800      	cmp	r0, #0
 800ad3c:	d163      	bne.n	800ae06 <_dtoa_r+0x6be>
 800ad3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ad42:	49a8      	ldr	r1, [pc, #672]	@ (800afe4 <_dtoa_r+0x89c>)
 800ad44:	2000      	movs	r0, #0
 800ad46:	f7f5 fabf 	bl	80002c8 <__aeabi_dsub>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad52:	f7f5 fee3 	bl	8000b1c <__aeabi_dcmplt>
 800ad56:	2800      	cmp	r0, #0
 800ad58:	f43f af14 	beq.w	800ab84 <_dtoa_r+0x43c>
 800ad5c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ad5e:	1e73      	subs	r3, r6, #1
 800ad60:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ad62:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ad66:	2b30      	cmp	r3, #48	@ 0x30
 800ad68:	d0f8      	beq.n	800ad5c <_dtoa_r+0x614>
 800ad6a:	4647      	mov	r7, r8
 800ad6c:	e03b      	b.n	800ade6 <_dtoa_r+0x69e>
 800ad6e:	4b9e      	ldr	r3, [pc, #632]	@ (800afe8 <_dtoa_r+0x8a0>)
 800ad70:	f7f5 fc62 	bl	8000638 <__aeabi_dmul>
 800ad74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad78:	e7bc      	b.n	800acf4 <_dtoa_r+0x5ac>
 800ad7a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ad7e:	4656      	mov	r6, sl
 800ad80:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad84:	4620      	mov	r0, r4
 800ad86:	4629      	mov	r1, r5
 800ad88:	f7f5 fd80 	bl	800088c <__aeabi_ddiv>
 800ad8c:	f7f5 ff04 	bl	8000b98 <__aeabi_d2iz>
 800ad90:	4680      	mov	r8, r0
 800ad92:	f7f5 fbe7 	bl	8000564 <__aeabi_i2d>
 800ad96:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad9a:	f7f5 fc4d 	bl	8000638 <__aeabi_dmul>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	460b      	mov	r3, r1
 800ada2:	4620      	mov	r0, r4
 800ada4:	4629      	mov	r1, r5
 800ada6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800adaa:	f7f5 fa8d 	bl	80002c8 <__aeabi_dsub>
 800adae:	f806 4b01 	strb.w	r4, [r6], #1
 800adb2:	9d03      	ldr	r5, [sp, #12]
 800adb4:	eba6 040a 	sub.w	r4, r6, sl
 800adb8:	42a5      	cmp	r5, r4
 800adba:	4602      	mov	r2, r0
 800adbc:	460b      	mov	r3, r1
 800adbe:	d133      	bne.n	800ae28 <_dtoa_r+0x6e0>
 800adc0:	f7f5 fa84 	bl	80002cc <__adddf3>
 800adc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adc8:	4604      	mov	r4, r0
 800adca:	460d      	mov	r5, r1
 800adcc:	f7f5 fec4 	bl	8000b58 <__aeabi_dcmpgt>
 800add0:	b9c0      	cbnz	r0, 800ae04 <_dtoa_r+0x6bc>
 800add2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800add6:	4620      	mov	r0, r4
 800add8:	4629      	mov	r1, r5
 800adda:	f7f5 fe95 	bl	8000b08 <__aeabi_dcmpeq>
 800adde:	b110      	cbz	r0, 800ade6 <_dtoa_r+0x69e>
 800ade0:	f018 0f01 	tst.w	r8, #1
 800ade4:	d10e      	bne.n	800ae04 <_dtoa_r+0x6bc>
 800ade6:	9902      	ldr	r1, [sp, #8]
 800ade8:	4648      	mov	r0, r9
 800adea:	f000 ff09 	bl	800bc00 <_Bfree>
 800adee:	2300      	movs	r3, #0
 800adf0:	7033      	strb	r3, [r6, #0]
 800adf2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800adf4:	3701      	adds	r7, #1
 800adf6:	601f      	str	r7, [r3, #0]
 800adf8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	f000 824b 	beq.w	800b296 <_dtoa_r+0xb4e>
 800ae00:	601e      	str	r6, [r3, #0]
 800ae02:	e248      	b.n	800b296 <_dtoa_r+0xb4e>
 800ae04:	46b8      	mov	r8, r7
 800ae06:	4633      	mov	r3, r6
 800ae08:	461e      	mov	r6, r3
 800ae0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae0e:	2a39      	cmp	r2, #57	@ 0x39
 800ae10:	d106      	bne.n	800ae20 <_dtoa_r+0x6d8>
 800ae12:	459a      	cmp	sl, r3
 800ae14:	d1f8      	bne.n	800ae08 <_dtoa_r+0x6c0>
 800ae16:	2230      	movs	r2, #48	@ 0x30
 800ae18:	f108 0801 	add.w	r8, r8, #1
 800ae1c:	f88a 2000 	strb.w	r2, [sl]
 800ae20:	781a      	ldrb	r2, [r3, #0]
 800ae22:	3201      	adds	r2, #1
 800ae24:	701a      	strb	r2, [r3, #0]
 800ae26:	e7a0      	b.n	800ad6a <_dtoa_r+0x622>
 800ae28:	4b6f      	ldr	r3, [pc, #444]	@ (800afe8 <_dtoa_r+0x8a0>)
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f7f5 fc04 	bl	8000638 <__aeabi_dmul>
 800ae30:	2200      	movs	r2, #0
 800ae32:	2300      	movs	r3, #0
 800ae34:	4604      	mov	r4, r0
 800ae36:	460d      	mov	r5, r1
 800ae38:	f7f5 fe66 	bl	8000b08 <__aeabi_dcmpeq>
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	d09f      	beq.n	800ad80 <_dtoa_r+0x638>
 800ae40:	e7d1      	b.n	800ade6 <_dtoa_r+0x69e>
 800ae42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae44:	2a00      	cmp	r2, #0
 800ae46:	f000 80ea 	beq.w	800b01e <_dtoa_r+0x8d6>
 800ae4a:	9a07      	ldr	r2, [sp, #28]
 800ae4c:	2a01      	cmp	r2, #1
 800ae4e:	f300 80cd 	bgt.w	800afec <_dtoa_r+0x8a4>
 800ae52:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ae54:	2a00      	cmp	r2, #0
 800ae56:	f000 80c1 	beq.w	800afdc <_dtoa_r+0x894>
 800ae5a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ae5e:	9c08      	ldr	r4, [sp, #32]
 800ae60:	9e00      	ldr	r6, [sp, #0]
 800ae62:	9a00      	ldr	r2, [sp, #0]
 800ae64:	441a      	add	r2, r3
 800ae66:	9200      	str	r2, [sp, #0]
 800ae68:	9a06      	ldr	r2, [sp, #24]
 800ae6a:	2101      	movs	r1, #1
 800ae6c:	441a      	add	r2, r3
 800ae6e:	4648      	mov	r0, r9
 800ae70:	9206      	str	r2, [sp, #24]
 800ae72:	f000 ffc3 	bl	800bdfc <__i2b>
 800ae76:	4605      	mov	r5, r0
 800ae78:	b166      	cbz	r6, 800ae94 <_dtoa_r+0x74c>
 800ae7a:	9b06      	ldr	r3, [sp, #24]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	dd09      	ble.n	800ae94 <_dtoa_r+0x74c>
 800ae80:	42b3      	cmp	r3, r6
 800ae82:	9a00      	ldr	r2, [sp, #0]
 800ae84:	bfa8      	it	ge
 800ae86:	4633      	movge	r3, r6
 800ae88:	1ad2      	subs	r2, r2, r3
 800ae8a:	9200      	str	r2, [sp, #0]
 800ae8c:	9a06      	ldr	r2, [sp, #24]
 800ae8e:	1af6      	subs	r6, r6, r3
 800ae90:	1ad3      	subs	r3, r2, r3
 800ae92:	9306      	str	r3, [sp, #24]
 800ae94:	9b08      	ldr	r3, [sp, #32]
 800ae96:	b30b      	cbz	r3, 800aedc <_dtoa_r+0x794>
 800ae98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f000 80c6 	beq.w	800b02c <_dtoa_r+0x8e4>
 800aea0:	2c00      	cmp	r4, #0
 800aea2:	f000 80c0 	beq.w	800b026 <_dtoa_r+0x8de>
 800aea6:	4629      	mov	r1, r5
 800aea8:	4622      	mov	r2, r4
 800aeaa:	4648      	mov	r0, r9
 800aeac:	f001 f85e 	bl	800bf6c <__pow5mult>
 800aeb0:	9a02      	ldr	r2, [sp, #8]
 800aeb2:	4601      	mov	r1, r0
 800aeb4:	4605      	mov	r5, r0
 800aeb6:	4648      	mov	r0, r9
 800aeb8:	f000 ffb6 	bl	800be28 <__multiply>
 800aebc:	9902      	ldr	r1, [sp, #8]
 800aebe:	4680      	mov	r8, r0
 800aec0:	4648      	mov	r0, r9
 800aec2:	f000 fe9d 	bl	800bc00 <_Bfree>
 800aec6:	9b08      	ldr	r3, [sp, #32]
 800aec8:	1b1b      	subs	r3, r3, r4
 800aeca:	9308      	str	r3, [sp, #32]
 800aecc:	f000 80b1 	beq.w	800b032 <_dtoa_r+0x8ea>
 800aed0:	9a08      	ldr	r2, [sp, #32]
 800aed2:	4641      	mov	r1, r8
 800aed4:	4648      	mov	r0, r9
 800aed6:	f001 f849 	bl	800bf6c <__pow5mult>
 800aeda:	9002      	str	r0, [sp, #8]
 800aedc:	2101      	movs	r1, #1
 800aede:	4648      	mov	r0, r9
 800aee0:	f000 ff8c 	bl	800bdfc <__i2b>
 800aee4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aee6:	4604      	mov	r4, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	f000 81d8 	beq.w	800b29e <_dtoa_r+0xb56>
 800aeee:	461a      	mov	r2, r3
 800aef0:	4601      	mov	r1, r0
 800aef2:	4648      	mov	r0, r9
 800aef4:	f001 f83a 	bl	800bf6c <__pow5mult>
 800aef8:	9b07      	ldr	r3, [sp, #28]
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	4604      	mov	r4, r0
 800aefe:	f300 809f 	bgt.w	800b040 <_dtoa_r+0x8f8>
 800af02:	9b04      	ldr	r3, [sp, #16]
 800af04:	2b00      	cmp	r3, #0
 800af06:	f040 8097 	bne.w	800b038 <_dtoa_r+0x8f0>
 800af0a:	9b05      	ldr	r3, [sp, #20]
 800af0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af10:	2b00      	cmp	r3, #0
 800af12:	f040 8093 	bne.w	800b03c <_dtoa_r+0x8f4>
 800af16:	9b05      	ldr	r3, [sp, #20]
 800af18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800af1c:	0d1b      	lsrs	r3, r3, #20
 800af1e:	051b      	lsls	r3, r3, #20
 800af20:	b133      	cbz	r3, 800af30 <_dtoa_r+0x7e8>
 800af22:	9b00      	ldr	r3, [sp, #0]
 800af24:	3301      	adds	r3, #1
 800af26:	9300      	str	r3, [sp, #0]
 800af28:	9b06      	ldr	r3, [sp, #24]
 800af2a:	3301      	adds	r3, #1
 800af2c:	9306      	str	r3, [sp, #24]
 800af2e:	2301      	movs	r3, #1
 800af30:	9308      	str	r3, [sp, #32]
 800af32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af34:	2b00      	cmp	r3, #0
 800af36:	f000 81b8 	beq.w	800b2aa <_dtoa_r+0xb62>
 800af3a:	6923      	ldr	r3, [r4, #16]
 800af3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800af40:	6918      	ldr	r0, [r3, #16]
 800af42:	f000 ff0f 	bl	800bd64 <__hi0bits>
 800af46:	f1c0 0020 	rsb	r0, r0, #32
 800af4a:	9b06      	ldr	r3, [sp, #24]
 800af4c:	4418      	add	r0, r3
 800af4e:	f010 001f 	ands.w	r0, r0, #31
 800af52:	f000 8082 	beq.w	800b05a <_dtoa_r+0x912>
 800af56:	f1c0 0320 	rsb	r3, r0, #32
 800af5a:	2b04      	cmp	r3, #4
 800af5c:	dd73      	ble.n	800b046 <_dtoa_r+0x8fe>
 800af5e:	9b00      	ldr	r3, [sp, #0]
 800af60:	f1c0 001c 	rsb	r0, r0, #28
 800af64:	4403      	add	r3, r0
 800af66:	9300      	str	r3, [sp, #0]
 800af68:	9b06      	ldr	r3, [sp, #24]
 800af6a:	4403      	add	r3, r0
 800af6c:	4406      	add	r6, r0
 800af6e:	9306      	str	r3, [sp, #24]
 800af70:	9b00      	ldr	r3, [sp, #0]
 800af72:	2b00      	cmp	r3, #0
 800af74:	dd05      	ble.n	800af82 <_dtoa_r+0x83a>
 800af76:	9902      	ldr	r1, [sp, #8]
 800af78:	461a      	mov	r2, r3
 800af7a:	4648      	mov	r0, r9
 800af7c:	f001 f850 	bl	800c020 <__lshift>
 800af80:	9002      	str	r0, [sp, #8]
 800af82:	9b06      	ldr	r3, [sp, #24]
 800af84:	2b00      	cmp	r3, #0
 800af86:	dd05      	ble.n	800af94 <_dtoa_r+0x84c>
 800af88:	4621      	mov	r1, r4
 800af8a:	461a      	mov	r2, r3
 800af8c:	4648      	mov	r0, r9
 800af8e:	f001 f847 	bl	800c020 <__lshift>
 800af92:	4604      	mov	r4, r0
 800af94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800af96:	2b00      	cmp	r3, #0
 800af98:	d061      	beq.n	800b05e <_dtoa_r+0x916>
 800af9a:	9802      	ldr	r0, [sp, #8]
 800af9c:	4621      	mov	r1, r4
 800af9e:	f001 f8ab 	bl	800c0f8 <__mcmp>
 800afa2:	2800      	cmp	r0, #0
 800afa4:	da5b      	bge.n	800b05e <_dtoa_r+0x916>
 800afa6:	2300      	movs	r3, #0
 800afa8:	9902      	ldr	r1, [sp, #8]
 800afaa:	220a      	movs	r2, #10
 800afac:	4648      	mov	r0, r9
 800afae:	f000 fe49 	bl	800bc44 <__multadd>
 800afb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afb4:	9002      	str	r0, [sp, #8]
 800afb6:	f107 38ff 	add.w	r8, r7, #4294967295
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f000 8177 	beq.w	800b2ae <_dtoa_r+0xb66>
 800afc0:	4629      	mov	r1, r5
 800afc2:	2300      	movs	r3, #0
 800afc4:	220a      	movs	r2, #10
 800afc6:	4648      	mov	r0, r9
 800afc8:	f000 fe3c 	bl	800bc44 <__multadd>
 800afcc:	f1bb 0f00 	cmp.w	fp, #0
 800afd0:	4605      	mov	r5, r0
 800afd2:	dc6f      	bgt.n	800b0b4 <_dtoa_r+0x96c>
 800afd4:	9b07      	ldr	r3, [sp, #28]
 800afd6:	2b02      	cmp	r3, #2
 800afd8:	dc49      	bgt.n	800b06e <_dtoa_r+0x926>
 800afda:	e06b      	b.n	800b0b4 <_dtoa_r+0x96c>
 800afdc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800afde:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800afe2:	e73c      	b.n	800ae5e <_dtoa_r+0x716>
 800afe4:	3fe00000 	.word	0x3fe00000
 800afe8:	40240000 	.word	0x40240000
 800afec:	9b03      	ldr	r3, [sp, #12]
 800afee:	1e5c      	subs	r4, r3, #1
 800aff0:	9b08      	ldr	r3, [sp, #32]
 800aff2:	42a3      	cmp	r3, r4
 800aff4:	db09      	blt.n	800b00a <_dtoa_r+0x8c2>
 800aff6:	1b1c      	subs	r4, r3, r4
 800aff8:	9b03      	ldr	r3, [sp, #12]
 800affa:	2b00      	cmp	r3, #0
 800affc:	f6bf af30 	bge.w	800ae60 <_dtoa_r+0x718>
 800b000:	9b00      	ldr	r3, [sp, #0]
 800b002:	9a03      	ldr	r2, [sp, #12]
 800b004:	1a9e      	subs	r6, r3, r2
 800b006:	2300      	movs	r3, #0
 800b008:	e72b      	b.n	800ae62 <_dtoa_r+0x71a>
 800b00a:	9b08      	ldr	r3, [sp, #32]
 800b00c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b00e:	9408      	str	r4, [sp, #32]
 800b010:	1ae3      	subs	r3, r4, r3
 800b012:	441a      	add	r2, r3
 800b014:	9e00      	ldr	r6, [sp, #0]
 800b016:	9b03      	ldr	r3, [sp, #12]
 800b018:	920d      	str	r2, [sp, #52]	@ 0x34
 800b01a:	2400      	movs	r4, #0
 800b01c:	e721      	b.n	800ae62 <_dtoa_r+0x71a>
 800b01e:	9c08      	ldr	r4, [sp, #32]
 800b020:	9e00      	ldr	r6, [sp, #0]
 800b022:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b024:	e728      	b.n	800ae78 <_dtoa_r+0x730>
 800b026:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b02a:	e751      	b.n	800aed0 <_dtoa_r+0x788>
 800b02c:	9a08      	ldr	r2, [sp, #32]
 800b02e:	9902      	ldr	r1, [sp, #8]
 800b030:	e750      	b.n	800aed4 <_dtoa_r+0x78c>
 800b032:	f8cd 8008 	str.w	r8, [sp, #8]
 800b036:	e751      	b.n	800aedc <_dtoa_r+0x794>
 800b038:	2300      	movs	r3, #0
 800b03a:	e779      	b.n	800af30 <_dtoa_r+0x7e8>
 800b03c:	9b04      	ldr	r3, [sp, #16]
 800b03e:	e777      	b.n	800af30 <_dtoa_r+0x7e8>
 800b040:	2300      	movs	r3, #0
 800b042:	9308      	str	r3, [sp, #32]
 800b044:	e779      	b.n	800af3a <_dtoa_r+0x7f2>
 800b046:	d093      	beq.n	800af70 <_dtoa_r+0x828>
 800b048:	9a00      	ldr	r2, [sp, #0]
 800b04a:	331c      	adds	r3, #28
 800b04c:	441a      	add	r2, r3
 800b04e:	9200      	str	r2, [sp, #0]
 800b050:	9a06      	ldr	r2, [sp, #24]
 800b052:	441a      	add	r2, r3
 800b054:	441e      	add	r6, r3
 800b056:	9206      	str	r2, [sp, #24]
 800b058:	e78a      	b.n	800af70 <_dtoa_r+0x828>
 800b05a:	4603      	mov	r3, r0
 800b05c:	e7f4      	b.n	800b048 <_dtoa_r+0x900>
 800b05e:	9b03      	ldr	r3, [sp, #12]
 800b060:	2b00      	cmp	r3, #0
 800b062:	46b8      	mov	r8, r7
 800b064:	dc20      	bgt.n	800b0a8 <_dtoa_r+0x960>
 800b066:	469b      	mov	fp, r3
 800b068:	9b07      	ldr	r3, [sp, #28]
 800b06a:	2b02      	cmp	r3, #2
 800b06c:	dd1e      	ble.n	800b0ac <_dtoa_r+0x964>
 800b06e:	f1bb 0f00 	cmp.w	fp, #0
 800b072:	f47f adb1 	bne.w	800abd8 <_dtoa_r+0x490>
 800b076:	4621      	mov	r1, r4
 800b078:	465b      	mov	r3, fp
 800b07a:	2205      	movs	r2, #5
 800b07c:	4648      	mov	r0, r9
 800b07e:	f000 fde1 	bl	800bc44 <__multadd>
 800b082:	4601      	mov	r1, r0
 800b084:	4604      	mov	r4, r0
 800b086:	9802      	ldr	r0, [sp, #8]
 800b088:	f001 f836 	bl	800c0f8 <__mcmp>
 800b08c:	2800      	cmp	r0, #0
 800b08e:	f77f ada3 	ble.w	800abd8 <_dtoa_r+0x490>
 800b092:	4656      	mov	r6, sl
 800b094:	2331      	movs	r3, #49	@ 0x31
 800b096:	f806 3b01 	strb.w	r3, [r6], #1
 800b09a:	f108 0801 	add.w	r8, r8, #1
 800b09e:	e59f      	b.n	800abe0 <_dtoa_r+0x498>
 800b0a0:	9c03      	ldr	r4, [sp, #12]
 800b0a2:	46b8      	mov	r8, r7
 800b0a4:	4625      	mov	r5, r4
 800b0a6:	e7f4      	b.n	800b092 <_dtoa_r+0x94a>
 800b0a8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b0ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	f000 8101 	beq.w	800b2b6 <_dtoa_r+0xb6e>
 800b0b4:	2e00      	cmp	r6, #0
 800b0b6:	dd05      	ble.n	800b0c4 <_dtoa_r+0x97c>
 800b0b8:	4629      	mov	r1, r5
 800b0ba:	4632      	mov	r2, r6
 800b0bc:	4648      	mov	r0, r9
 800b0be:	f000 ffaf 	bl	800c020 <__lshift>
 800b0c2:	4605      	mov	r5, r0
 800b0c4:	9b08      	ldr	r3, [sp, #32]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d05c      	beq.n	800b184 <_dtoa_r+0xa3c>
 800b0ca:	6869      	ldr	r1, [r5, #4]
 800b0cc:	4648      	mov	r0, r9
 800b0ce:	f000 fd57 	bl	800bb80 <_Balloc>
 800b0d2:	4606      	mov	r6, r0
 800b0d4:	b928      	cbnz	r0, 800b0e2 <_dtoa_r+0x99a>
 800b0d6:	4b82      	ldr	r3, [pc, #520]	@ (800b2e0 <_dtoa_r+0xb98>)
 800b0d8:	4602      	mov	r2, r0
 800b0da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b0de:	f7ff bb4a 	b.w	800a776 <_dtoa_r+0x2e>
 800b0e2:	692a      	ldr	r2, [r5, #16]
 800b0e4:	3202      	adds	r2, #2
 800b0e6:	0092      	lsls	r2, r2, #2
 800b0e8:	f105 010c 	add.w	r1, r5, #12
 800b0ec:	300c      	adds	r0, #12
 800b0ee:	f7ff fa82 	bl	800a5f6 <memcpy>
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	4631      	mov	r1, r6
 800b0f6:	4648      	mov	r0, r9
 800b0f8:	f000 ff92 	bl	800c020 <__lshift>
 800b0fc:	f10a 0301 	add.w	r3, sl, #1
 800b100:	9300      	str	r3, [sp, #0]
 800b102:	eb0a 030b 	add.w	r3, sl, fp
 800b106:	9308      	str	r3, [sp, #32]
 800b108:	9b04      	ldr	r3, [sp, #16]
 800b10a:	f003 0301 	and.w	r3, r3, #1
 800b10e:	462f      	mov	r7, r5
 800b110:	9306      	str	r3, [sp, #24]
 800b112:	4605      	mov	r5, r0
 800b114:	9b00      	ldr	r3, [sp, #0]
 800b116:	9802      	ldr	r0, [sp, #8]
 800b118:	4621      	mov	r1, r4
 800b11a:	f103 3bff 	add.w	fp, r3, #4294967295
 800b11e:	f7ff fa89 	bl	800a634 <quorem>
 800b122:	4603      	mov	r3, r0
 800b124:	3330      	adds	r3, #48	@ 0x30
 800b126:	9003      	str	r0, [sp, #12]
 800b128:	4639      	mov	r1, r7
 800b12a:	9802      	ldr	r0, [sp, #8]
 800b12c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b12e:	f000 ffe3 	bl	800c0f8 <__mcmp>
 800b132:	462a      	mov	r2, r5
 800b134:	9004      	str	r0, [sp, #16]
 800b136:	4621      	mov	r1, r4
 800b138:	4648      	mov	r0, r9
 800b13a:	f000 fff9 	bl	800c130 <__mdiff>
 800b13e:	68c2      	ldr	r2, [r0, #12]
 800b140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b142:	4606      	mov	r6, r0
 800b144:	bb02      	cbnz	r2, 800b188 <_dtoa_r+0xa40>
 800b146:	4601      	mov	r1, r0
 800b148:	9802      	ldr	r0, [sp, #8]
 800b14a:	f000 ffd5 	bl	800c0f8 <__mcmp>
 800b14e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b150:	4602      	mov	r2, r0
 800b152:	4631      	mov	r1, r6
 800b154:	4648      	mov	r0, r9
 800b156:	920c      	str	r2, [sp, #48]	@ 0x30
 800b158:	9309      	str	r3, [sp, #36]	@ 0x24
 800b15a:	f000 fd51 	bl	800bc00 <_Bfree>
 800b15e:	9b07      	ldr	r3, [sp, #28]
 800b160:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b162:	9e00      	ldr	r6, [sp, #0]
 800b164:	ea42 0103 	orr.w	r1, r2, r3
 800b168:	9b06      	ldr	r3, [sp, #24]
 800b16a:	4319      	orrs	r1, r3
 800b16c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b16e:	d10d      	bne.n	800b18c <_dtoa_r+0xa44>
 800b170:	2b39      	cmp	r3, #57	@ 0x39
 800b172:	d027      	beq.n	800b1c4 <_dtoa_r+0xa7c>
 800b174:	9a04      	ldr	r2, [sp, #16]
 800b176:	2a00      	cmp	r2, #0
 800b178:	dd01      	ble.n	800b17e <_dtoa_r+0xa36>
 800b17a:	9b03      	ldr	r3, [sp, #12]
 800b17c:	3331      	adds	r3, #49	@ 0x31
 800b17e:	f88b 3000 	strb.w	r3, [fp]
 800b182:	e52e      	b.n	800abe2 <_dtoa_r+0x49a>
 800b184:	4628      	mov	r0, r5
 800b186:	e7b9      	b.n	800b0fc <_dtoa_r+0x9b4>
 800b188:	2201      	movs	r2, #1
 800b18a:	e7e2      	b.n	800b152 <_dtoa_r+0xa0a>
 800b18c:	9904      	ldr	r1, [sp, #16]
 800b18e:	2900      	cmp	r1, #0
 800b190:	db04      	blt.n	800b19c <_dtoa_r+0xa54>
 800b192:	9807      	ldr	r0, [sp, #28]
 800b194:	4301      	orrs	r1, r0
 800b196:	9806      	ldr	r0, [sp, #24]
 800b198:	4301      	orrs	r1, r0
 800b19a:	d120      	bne.n	800b1de <_dtoa_r+0xa96>
 800b19c:	2a00      	cmp	r2, #0
 800b19e:	ddee      	ble.n	800b17e <_dtoa_r+0xa36>
 800b1a0:	9902      	ldr	r1, [sp, #8]
 800b1a2:	9300      	str	r3, [sp, #0]
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	4648      	mov	r0, r9
 800b1a8:	f000 ff3a 	bl	800c020 <__lshift>
 800b1ac:	4621      	mov	r1, r4
 800b1ae:	9002      	str	r0, [sp, #8]
 800b1b0:	f000 ffa2 	bl	800c0f8 <__mcmp>
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	9b00      	ldr	r3, [sp, #0]
 800b1b8:	dc02      	bgt.n	800b1c0 <_dtoa_r+0xa78>
 800b1ba:	d1e0      	bne.n	800b17e <_dtoa_r+0xa36>
 800b1bc:	07da      	lsls	r2, r3, #31
 800b1be:	d5de      	bpl.n	800b17e <_dtoa_r+0xa36>
 800b1c0:	2b39      	cmp	r3, #57	@ 0x39
 800b1c2:	d1da      	bne.n	800b17a <_dtoa_r+0xa32>
 800b1c4:	2339      	movs	r3, #57	@ 0x39
 800b1c6:	f88b 3000 	strb.w	r3, [fp]
 800b1ca:	4633      	mov	r3, r6
 800b1cc:	461e      	mov	r6, r3
 800b1ce:	3b01      	subs	r3, #1
 800b1d0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b1d4:	2a39      	cmp	r2, #57	@ 0x39
 800b1d6:	d04e      	beq.n	800b276 <_dtoa_r+0xb2e>
 800b1d8:	3201      	adds	r2, #1
 800b1da:	701a      	strb	r2, [r3, #0]
 800b1dc:	e501      	b.n	800abe2 <_dtoa_r+0x49a>
 800b1de:	2a00      	cmp	r2, #0
 800b1e0:	dd03      	ble.n	800b1ea <_dtoa_r+0xaa2>
 800b1e2:	2b39      	cmp	r3, #57	@ 0x39
 800b1e4:	d0ee      	beq.n	800b1c4 <_dtoa_r+0xa7c>
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	e7c9      	b.n	800b17e <_dtoa_r+0xa36>
 800b1ea:	9a00      	ldr	r2, [sp, #0]
 800b1ec:	9908      	ldr	r1, [sp, #32]
 800b1ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b1f2:	428a      	cmp	r2, r1
 800b1f4:	d028      	beq.n	800b248 <_dtoa_r+0xb00>
 800b1f6:	9902      	ldr	r1, [sp, #8]
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	220a      	movs	r2, #10
 800b1fc:	4648      	mov	r0, r9
 800b1fe:	f000 fd21 	bl	800bc44 <__multadd>
 800b202:	42af      	cmp	r7, r5
 800b204:	9002      	str	r0, [sp, #8]
 800b206:	f04f 0300 	mov.w	r3, #0
 800b20a:	f04f 020a 	mov.w	r2, #10
 800b20e:	4639      	mov	r1, r7
 800b210:	4648      	mov	r0, r9
 800b212:	d107      	bne.n	800b224 <_dtoa_r+0xadc>
 800b214:	f000 fd16 	bl	800bc44 <__multadd>
 800b218:	4607      	mov	r7, r0
 800b21a:	4605      	mov	r5, r0
 800b21c:	9b00      	ldr	r3, [sp, #0]
 800b21e:	3301      	adds	r3, #1
 800b220:	9300      	str	r3, [sp, #0]
 800b222:	e777      	b.n	800b114 <_dtoa_r+0x9cc>
 800b224:	f000 fd0e 	bl	800bc44 <__multadd>
 800b228:	4629      	mov	r1, r5
 800b22a:	4607      	mov	r7, r0
 800b22c:	2300      	movs	r3, #0
 800b22e:	220a      	movs	r2, #10
 800b230:	4648      	mov	r0, r9
 800b232:	f000 fd07 	bl	800bc44 <__multadd>
 800b236:	4605      	mov	r5, r0
 800b238:	e7f0      	b.n	800b21c <_dtoa_r+0xad4>
 800b23a:	f1bb 0f00 	cmp.w	fp, #0
 800b23e:	bfcc      	ite	gt
 800b240:	465e      	movgt	r6, fp
 800b242:	2601      	movle	r6, #1
 800b244:	4456      	add	r6, sl
 800b246:	2700      	movs	r7, #0
 800b248:	9902      	ldr	r1, [sp, #8]
 800b24a:	9300      	str	r3, [sp, #0]
 800b24c:	2201      	movs	r2, #1
 800b24e:	4648      	mov	r0, r9
 800b250:	f000 fee6 	bl	800c020 <__lshift>
 800b254:	4621      	mov	r1, r4
 800b256:	9002      	str	r0, [sp, #8]
 800b258:	f000 ff4e 	bl	800c0f8 <__mcmp>
 800b25c:	2800      	cmp	r0, #0
 800b25e:	dcb4      	bgt.n	800b1ca <_dtoa_r+0xa82>
 800b260:	d102      	bne.n	800b268 <_dtoa_r+0xb20>
 800b262:	9b00      	ldr	r3, [sp, #0]
 800b264:	07db      	lsls	r3, r3, #31
 800b266:	d4b0      	bmi.n	800b1ca <_dtoa_r+0xa82>
 800b268:	4633      	mov	r3, r6
 800b26a:	461e      	mov	r6, r3
 800b26c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b270:	2a30      	cmp	r2, #48	@ 0x30
 800b272:	d0fa      	beq.n	800b26a <_dtoa_r+0xb22>
 800b274:	e4b5      	b.n	800abe2 <_dtoa_r+0x49a>
 800b276:	459a      	cmp	sl, r3
 800b278:	d1a8      	bne.n	800b1cc <_dtoa_r+0xa84>
 800b27a:	2331      	movs	r3, #49	@ 0x31
 800b27c:	f108 0801 	add.w	r8, r8, #1
 800b280:	f88a 3000 	strb.w	r3, [sl]
 800b284:	e4ad      	b.n	800abe2 <_dtoa_r+0x49a>
 800b286:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b288:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b2e4 <_dtoa_r+0xb9c>
 800b28c:	b11b      	cbz	r3, 800b296 <_dtoa_r+0xb4e>
 800b28e:	f10a 0308 	add.w	r3, sl, #8
 800b292:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b294:	6013      	str	r3, [r2, #0]
 800b296:	4650      	mov	r0, sl
 800b298:	b017      	add	sp, #92	@ 0x5c
 800b29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b29e:	9b07      	ldr	r3, [sp, #28]
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	f77f ae2e 	ble.w	800af02 <_dtoa_r+0x7ba>
 800b2a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2a8:	9308      	str	r3, [sp, #32]
 800b2aa:	2001      	movs	r0, #1
 800b2ac:	e64d      	b.n	800af4a <_dtoa_r+0x802>
 800b2ae:	f1bb 0f00 	cmp.w	fp, #0
 800b2b2:	f77f aed9 	ble.w	800b068 <_dtoa_r+0x920>
 800b2b6:	4656      	mov	r6, sl
 800b2b8:	9802      	ldr	r0, [sp, #8]
 800b2ba:	4621      	mov	r1, r4
 800b2bc:	f7ff f9ba 	bl	800a634 <quorem>
 800b2c0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b2c4:	f806 3b01 	strb.w	r3, [r6], #1
 800b2c8:	eba6 020a 	sub.w	r2, r6, sl
 800b2cc:	4593      	cmp	fp, r2
 800b2ce:	ddb4      	ble.n	800b23a <_dtoa_r+0xaf2>
 800b2d0:	9902      	ldr	r1, [sp, #8]
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	220a      	movs	r2, #10
 800b2d6:	4648      	mov	r0, r9
 800b2d8:	f000 fcb4 	bl	800bc44 <__multadd>
 800b2dc:	9002      	str	r0, [sp, #8]
 800b2de:	e7eb      	b.n	800b2b8 <_dtoa_r+0xb70>
 800b2e0:	0800d3df 	.word	0x0800d3df
 800b2e4:	0800d363 	.word	0x0800d363

0800b2e8 <_free_r>:
 800b2e8:	b538      	push	{r3, r4, r5, lr}
 800b2ea:	4605      	mov	r5, r0
 800b2ec:	2900      	cmp	r1, #0
 800b2ee:	d041      	beq.n	800b374 <_free_r+0x8c>
 800b2f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2f4:	1f0c      	subs	r4, r1, #4
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	bfb8      	it	lt
 800b2fa:	18e4      	addlt	r4, r4, r3
 800b2fc:	f000 fc34 	bl	800bb68 <__malloc_lock>
 800b300:	4a1d      	ldr	r2, [pc, #116]	@ (800b378 <_free_r+0x90>)
 800b302:	6813      	ldr	r3, [r2, #0]
 800b304:	b933      	cbnz	r3, 800b314 <_free_r+0x2c>
 800b306:	6063      	str	r3, [r4, #4]
 800b308:	6014      	str	r4, [r2, #0]
 800b30a:	4628      	mov	r0, r5
 800b30c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b310:	f000 bc30 	b.w	800bb74 <__malloc_unlock>
 800b314:	42a3      	cmp	r3, r4
 800b316:	d908      	bls.n	800b32a <_free_r+0x42>
 800b318:	6820      	ldr	r0, [r4, #0]
 800b31a:	1821      	adds	r1, r4, r0
 800b31c:	428b      	cmp	r3, r1
 800b31e:	bf01      	itttt	eq
 800b320:	6819      	ldreq	r1, [r3, #0]
 800b322:	685b      	ldreq	r3, [r3, #4]
 800b324:	1809      	addeq	r1, r1, r0
 800b326:	6021      	streq	r1, [r4, #0]
 800b328:	e7ed      	b.n	800b306 <_free_r+0x1e>
 800b32a:	461a      	mov	r2, r3
 800b32c:	685b      	ldr	r3, [r3, #4]
 800b32e:	b10b      	cbz	r3, 800b334 <_free_r+0x4c>
 800b330:	42a3      	cmp	r3, r4
 800b332:	d9fa      	bls.n	800b32a <_free_r+0x42>
 800b334:	6811      	ldr	r1, [r2, #0]
 800b336:	1850      	adds	r0, r2, r1
 800b338:	42a0      	cmp	r0, r4
 800b33a:	d10b      	bne.n	800b354 <_free_r+0x6c>
 800b33c:	6820      	ldr	r0, [r4, #0]
 800b33e:	4401      	add	r1, r0
 800b340:	1850      	adds	r0, r2, r1
 800b342:	4283      	cmp	r3, r0
 800b344:	6011      	str	r1, [r2, #0]
 800b346:	d1e0      	bne.n	800b30a <_free_r+0x22>
 800b348:	6818      	ldr	r0, [r3, #0]
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	6053      	str	r3, [r2, #4]
 800b34e:	4408      	add	r0, r1
 800b350:	6010      	str	r0, [r2, #0]
 800b352:	e7da      	b.n	800b30a <_free_r+0x22>
 800b354:	d902      	bls.n	800b35c <_free_r+0x74>
 800b356:	230c      	movs	r3, #12
 800b358:	602b      	str	r3, [r5, #0]
 800b35a:	e7d6      	b.n	800b30a <_free_r+0x22>
 800b35c:	6820      	ldr	r0, [r4, #0]
 800b35e:	1821      	adds	r1, r4, r0
 800b360:	428b      	cmp	r3, r1
 800b362:	bf04      	itt	eq
 800b364:	6819      	ldreq	r1, [r3, #0]
 800b366:	685b      	ldreq	r3, [r3, #4]
 800b368:	6063      	str	r3, [r4, #4]
 800b36a:	bf04      	itt	eq
 800b36c:	1809      	addeq	r1, r1, r0
 800b36e:	6021      	streq	r1, [r4, #0]
 800b370:	6054      	str	r4, [r2, #4]
 800b372:	e7ca      	b.n	800b30a <_free_r+0x22>
 800b374:	bd38      	pop	{r3, r4, r5, pc}
 800b376:	bf00      	nop
 800b378:	20000f58 	.word	0x20000f58

0800b37c <rshift>:
 800b37c:	6903      	ldr	r3, [r0, #16]
 800b37e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b382:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b386:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b38a:	f100 0414 	add.w	r4, r0, #20
 800b38e:	dd45      	ble.n	800b41c <rshift+0xa0>
 800b390:	f011 011f 	ands.w	r1, r1, #31
 800b394:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b398:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b39c:	d10c      	bne.n	800b3b8 <rshift+0x3c>
 800b39e:	f100 0710 	add.w	r7, r0, #16
 800b3a2:	4629      	mov	r1, r5
 800b3a4:	42b1      	cmp	r1, r6
 800b3a6:	d334      	bcc.n	800b412 <rshift+0x96>
 800b3a8:	1a9b      	subs	r3, r3, r2
 800b3aa:	009b      	lsls	r3, r3, #2
 800b3ac:	1eea      	subs	r2, r5, #3
 800b3ae:	4296      	cmp	r6, r2
 800b3b0:	bf38      	it	cc
 800b3b2:	2300      	movcc	r3, #0
 800b3b4:	4423      	add	r3, r4
 800b3b6:	e015      	b.n	800b3e4 <rshift+0x68>
 800b3b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b3bc:	f1c1 0820 	rsb	r8, r1, #32
 800b3c0:	40cf      	lsrs	r7, r1
 800b3c2:	f105 0e04 	add.w	lr, r5, #4
 800b3c6:	46a1      	mov	r9, r4
 800b3c8:	4576      	cmp	r6, lr
 800b3ca:	46f4      	mov	ip, lr
 800b3cc:	d815      	bhi.n	800b3fa <rshift+0x7e>
 800b3ce:	1a9a      	subs	r2, r3, r2
 800b3d0:	0092      	lsls	r2, r2, #2
 800b3d2:	3a04      	subs	r2, #4
 800b3d4:	3501      	adds	r5, #1
 800b3d6:	42ae      	cmp	r6, r5
 800b3d8:	bf38      	it	cc
 800b3da:	2200      	movcc	r2, #0
 800b3dc:	18a3      	adds	r3, r4, r2
 800b3de:	50a7      	str	r7, [r4, r2]
 800b3e0:	b107      	cbz	r7, 800b3e4 <rshift+0x68>
 800b3e2:	3304      	adds	r3, #4
 800b3e4:	1b1a      	subs	r2, r3, r4
 800b3e6:	42a3      	cmp	r3, r4
 800b3e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b3ec:	bf08      	it	eq
 800b3ee:	2300      	moveq	r3, #0
 800b3f0:	6102      	str	r2, [r0, #16]
 800b3f2:	bf08      	it	eq
 800b3f4:	6143      	streq	r3, [r0, #20]
 800b3f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3fa:	f8dc c000 	ldr.w	ip, [ip]
 800b3fe:	fa0c fc08 	lsl.w	ip, ip, r8
 800b402:	ea4c 0707 	orr.w	r7, ip, r7
 800b406:	f849 7b04 	str.w	r7, [r9], #4
 800b40a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b40e:	40cf      	lsrs	r7, r1
 800b410:	e7da      	b.n	800b3c8 <rshift+0x4c>
 800b412:	f851 cb04 	ldr.w	ip, [r1], #4
 800b416:	f847 cf04 	str.w	ip, [r7, #4]!
 800b41a:	e7c3      	b.n	800b3a4 <rshift+0x28>
 800b41c:	4623      	mov	r3, r4
 800b41e:	e7e1      	b.n	800b3e4 <rshift+0x68>

0800b420 <__hexdig_fun>:
 800b420:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b424:	2b09      	cmp	r3, #9
 800b426:	d802      	bhi.n	800b42e <__hexdig_fun+0xe>
 800b428:	3820      	subs	r0, #32
 800b42a:	b2c0      	uxtb	r0, r0
 800b42c:	4770      	bx	lr
 800b42e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b432:	2b05      	cmp	r3, #5
 800b434:	d801      	bhi.n	800b43a <__hexdig_fun+0x1a>
 800b436:	3847      	subs	r0, #71	@ 0x47
 800b438:	e7f7      	b.n	800b42a <__hexdig_fun+0xa>
 800b43a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b43e:	2b05      	cmp	r3, #5
 800b440:	d801      	bhi.n	800b446 <__hexdig_fun+0x26>
 800b442:	3827      	subs	r0, #39	@ 0x27
 800b444:	e7f1      	b.n	800b42a <__hexdig_fun+0xa>
 800b446:	2000      	movs	r0, #0
 800b448:	4770      	bx	lr
	...

0800b44c <__gethex>:
 800b44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b450:	b085      	sub	sp, #20
 800b452:	468a      	mov	sl, r1
 800b454:	9302      	str	r3, [sp, #8]
 800b456:	680b      	ldr	r3, [r1, #0]
 800b458:	9001      	str	r0, [sp, #4]
 800b45a:	4690      	mov	r8, r2
 800b45c:	1c9c      	adds	r4, r3, #2
 800b45e:	46a1      	mov	r9, r4
 800b460:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b464:	2830      	cmp	r0, #48	@ 0x30
 800b466:	d0fa      	beq.n	800b45e <__gethex+0x12>
 800b468:	eba9 0303 	sub.w	r3, r9, r3
 800b46c:	f1a3 0b02 	sub.w	fp, r3, #2
 800b470:	f7ff ffd6 	bl	800b420 <__hexdig_fun>
 800b474:	4605      	mov	r5, r0
 800b476:	2800      	cmp	r0, #0
 800b478:	d168      	bne.n	800b54c <__gethex+0x100>
 800b47a:	49a0      	ldr	r1, [pc, #640]	@ (800b6fc <__gethex+0x2b0>)
 800b47c:	2201      	movs	r2, #1
 800b47e:	4648      	mov	r0, r9
 800b480:	f7ff f805 	bl	800a48e <strncmp>
 800b484:	4607      	mov	r7, r0
 800b486:	2800      	cmp	r0, #0
 800b488:	d167      	bne.n	800b55a <__gethex+0x10e>
 800b48a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b48e:	4626      	mov	r6, r4
 800b490:	f7ff ffc6 	bl	800b420 <__hexdig_fun>
 800b494:	2800      	cmp	r0, #0
 800b496:	d062      	beq.n	800b55e <__gethex+0x112>
 800b498:	4623      	mov	r3, r4
 800b49a:	7818      	ldrb	r0, [r3, #0]
 800b49c:	2830      	cmp	r0, #48	@ 0x30
 800b49e:	4699      	mov	r9, r3
 800b4a0:	f103 0301 	add.w	r3, r3, #1
 800b4a4:	d0f9      	beq.n	800b49a <__gethex+0x4e>
 800b4a6:	f7ff ffbb 	bl	800b420 <__hexdig_fun>
 800b4aa:	fab0 f580 	clz	r5, r0
 800b4ae:	096d      	lsrs	r5, r5, #5
 800b4b0:	f04f 0b01 	mov.w	fp, #1
 800b4b4:	464a      	mov	r2, r9
 800b4b6:	4616      	mov	r6, r2
 800b4b8:	3201      	adds	r2, #1
 800b4ba:	7830      	ldrb	r0, [r6, #0]
 800b4bc:	f7ff ffb0 	bl	800b420 <__hexdig_fun>
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	d1f8      	bne.n	800b4b6 <__gethex+0x6a>
 800b4c4:	498d      	ldr	r1, [pc, #564]	@ (800b6fc <__gethex+0x2b0>)
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	4630      	mov	r0, r6
 800b4ca:	f7fe ffe0 	bl	800a48e <strncmp>
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	d13f      	bne.n	800b552 <__gethex+0x106>
 800b4d2:	b944      	cbnz	r4, 800b4e6 <__gethex+0x9a>
 800b4d4:	1c74      	adds	r4, r6, #1
 800b4d6:	4622      	mov	r2, r4
 800b4d8:	4616      	mov	r6, r2
 800b4da:	3201      	adds	r2, #1
 800b4dc:	7830      	ldrb	r0, [r6, #0]
 800b4de:	f7ff ff9f 	bl	800b420 <__hexdig_fun>
 800b4e2:	2800      	cmp	r0, #0
 800b4e4:	d1f8      	bne.n	800b4d8 <__gethex+0x8c>
 800b4e6:	1ba4      	subs	r4, r4, r6
 800b4e8:	00a7      	lsls	r7, r4, #2
 800b4ea:	7833      	ldrb	r3, [r6, #0]
 800b4ec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b4f0:	2b50      	cmp	r3, #80	@ 0x50
 800b4f2:	d13e      	bne.n	800b572 <__gethex+0x126>
 800b4f4:	7873      	ldrb	r3, [r6, #1]
 800b4f6:	2b2b      	cmp	r3, #43	@ 0x2b
 800b4f8:	d033      	beq.n	800b562 <__gethex+0x116>
 800b4fa:	2b2d      	cmp	r3, #45	@ 0x2d
 800b4fc:	d034      	beq.n	800b568 <__gethex+0x11c>
 800b4fe:	1c71      	adds	r1, r6, #1
 800b500:	2400      	movs	r4, #0
 800b502:	7808      	ldrb	r0, [r1, #0]
 800b504:	f7ff ff8c 	bl	800b420 <__hexdig_fun>
 800b508:	1e43      	subs	r3, r0, #1
 800b50a:	b2db      	uxtb	r3, r3
 800b50c:	2b18      	cmp	r3, #24
 800b50e:	d830      	bhi.n	800b572 <__gethex+0x126>
 800b510:	f1a0 0210 	sub.w	r2, r0, #16
 800b514:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b518:	f7ff ff82 	bl	800b420 <__hexdig_fun>
 800b51c:	f100 3cff 	add.w	ip, r0, #4294967295
 800b520:	fa5f fc8c 	uxtb.w	ip, ip
 800b524:	f1bc 0f18 	cmp.w	ip, #24
 800b528:	f04f 030a 	mov.w	r3, #10
 800b52c:	d91e      	bls.n	800b56c <__gethex+0x120>
 800b52e:	b104      	cbz	r4, 800b532 <__gethex+0xe6>
 800b530:	4252      	negs	r2, r2
 800b532:	4417      	add	r7, r2
 800b534:	f8ca 1000 	str.w	r1, [sl]
 800b538:	b1ed      	cbz	r5, 800b576 <__gethex+0x12a>
 800b53a:	f1bb 0f00 	cmp.w	fp, #0
 800b53e:	bf0c      	ite	eq
 800b540:	2506      	moveq	r5, #6
 800b542:	2500      	movne	r5, #0
 800b544:	4628      	mov	r0, r5
 800b546:	b005      	add	sp, #20
 800b548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b54c:	2500      	movs	r5, #0
 800b54e:	462c      	mov	r4, r5
 800b550:	e7b0      	b.n	800b4b4 <__gethex+0x68>
 800b552:	2c00      	cmp	r4, #0
 800b554:	d1c7      	bne.n	800b4e6 <__gethex+0x9a>
 800b556:	4627      	mov	r7, r4
 800b558:	e7c7      	b.n	800b4ea <__gethex+0x9e>
 800b55a:	464e      	mov	r6, r9
 800b55c:	462f      	mov	r7, r5
 800b55e:	2501      	movs	r5, #1
 800b560:	e7c3      	b.n	800b4ea <__gethex+0x9e>
 800b562:	2400      	movs	r4, #0
 800b564:	1cb1      	adds	r1, r6, #2
 800b566:	e7cc      	b.n	800b502 <__gethex+0xb6>
 800b568:	2401      	movs	r4, #1
 800b56a:	e7fb      	b.n	800b564 <__gethex+0x118>
 800b56c:	fb03 0002 	mla	r0, r3, r2, r0
 800b570:	e7ce      	b.n	800b510 <__gethex+0xc4>
 800b572:	4631      	mov	r1, r6
 800b574:	e7de      	b.n	800b534 <__gethex+0xe8>
 800b576:	eba6 0309 	sub.w	r3, r6, r9
 800b57a:	3b01      	subs	r3, #1
 800b57c:	4629      	mov	r1, r5
 800b57e:	2b07      	cmp	r3, #7
 800b580:	dc0a      	bgt.n	800b598 <__gethex+0x14c>
 800b582:	9801      	ldr	r0, [sp, #4]
 800b584:	f000 fafc 	bl	800bb80 <_Balloc>
 800b588:	4604      	mov	r4, r0
 800b58a:	b940      	cbnz	r0, 800b59e <__gethex+0x152>
 800b58c:	4b5c      	ldr	r3, [pc, #368]	@ (800b700 <__gethex+0x2b4>)
 800b58e:	4602      	mov	r2, r0
 800b590:	21e4      	movs	r1, #228	@ 0xe4
 800b592:	485c      	ldr	r0, [pc, #368]	@ (800b704 <__gethex+0x2b8>)
 800b594:	f001 fc1a 	bl	800cdcc <__assert_func>
 800b598:	3101      	adds	r1, #1
 800b59a:	105b      	asrs	r3, r3, #1
 800b59c:	e7ef      	b.n	800b57e <__gethex+0x132>
 800b59e:	f100 0a14 	add.w	sl, r0, #20
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	4655      	mov	r5, sl
 800b5a6:	469b      	mov	fp, r3
 800b5a8:	45b1      	cmp	r9, r6
 800b5aa:	d337      	bcc.n	800b61c <__gethex+0x1d0>
 800b5ac:	f845 bb04 	str.w	fp, [r5], #4
 800b5b0:	eba5 050a 	sub.w	r5, r5, sl
 800b5b4:	10ad      	asrs	r5, r5, #2
 800b5b6:	6125      	str	r5, [r4, #16]
 800b5b8:	4658      	mov	r0, fp
 800b5ba:	f000 fbd3 	bl	800bd64 <__hi0bits>
 800b5be:	016d      	lsls	r5, r5, #5
 800b5c0:	f8d8 6000 	ldr.w	r6, [r8]
 800b5c4:	1a2d      	subs	r5, r5, r0
 800b5c6:	42b5      	cmp	r5, r6
 800b5c8:	dd54      	ble.n	800b674 <__gethex+0x228>
 800b5ca:	1bad      	subs	r5, r5, r6
 800b5cc:	4629      	mov	r1, r5
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	f000 ff5f 	bl	800c492 <__any_on>
 800b5d4:	4681      	mov	r9, r0
 800b5d6:	b178      	cbz	r0, 800b5f8 <__gethex+0x1ac>
 800b5d8:	1e6b      	subs	r3, r5, #1
 800b5da:	1159      	asrs	r1, r3, #5
 800b5dc:	f003 021f 	and.w	r2, r3, #31
 800b5e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b5e4:	f04f 0901 	mov.w	r9, #1
 800b5e8:	fa09 f202 	lsl.w	r2, r9, r2
 800b5ec:	420a      	tst	r2, r1
 800b5ee:	d003      	beq.n	800b5f8 <__gethex+0x1ac>
 800b5f0:	454b      	cmp	r3, r9
 800b5f2:	dc36      	bgt.n	800b662 <__gethex+0x216>
 800b5f4:	f04f 0902 	mov.w	r9, #2
 800b5f8:	4629      	mov	r1, r5
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	f7ff febe 	bl	800b37c <rshift>
 800b600:	442f      	add	r7, r5
 800b602:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b606:	42bb      	cmp	r3, r7
 800b608:	da42      	bge.n	800b690 <__gethex+0x244>
 800b60a:	9801      	ldr	r0, [sp, #4]
 800b60c:	4621      	mov	r1, r4
 800b60e:	f000 faf7 	bl	800bc00 <_Bfree>
 800b612:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b614:	2300      	movs	r3, #0
 800b616:	6013      	str	r3, [r2, #0]
 800b618:	25a3      	movs	r5, #163	@ 0xa3
 800b61a:	e793      	b.n	800b544 <__gethex+0xf8>
 800b61c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b620:	2a2e      	cmp	r2, #46	@ 0x2e
 800b622:	d012      	beq.n	800b64a <__gethex+0x1fe>
 800b624:	2b20      	cmp	r3, #32
 800b626:	d104      	bne.n	800b632 <__gethex+0x1e6>
 800b628:	f845 bb04 	str.w	fp, [r5], #4
 800b62c:	f04f 0b00 	mov.w	fp, #0
 800b630:	465b      	mov	r3, fp
 800b632:	7830      	ldrb	r0, [r6, #0]
 800b634:	9303      	str	r3, [sp, #12]
 800b636:	f7ff fef3 	bl	800b420 <__hexdig_fun>
 800b63a:	9b03      	ldr	r3, [sp, #12]
 800b63c:	f000 000f 	and.w	r0, r0, #15
 800b640:	4098      	lsls	r0, r3
 800b642:	ea4b 0b00 	orr.w	fp, fp, r0
 800b646:	3304      	adds	r3, #4
 800b648:	e7ae      	b.n	800b5a8 <__gethex+0x15c>
 800b64a:	45b1      	cmp	r9, r6
 800b64c:	d8ea      	bhi.n	800b624 <__gethex+0x1d8>
 800b64e:	492b      	ldr	r1, [pc, #172]	@ (800b6fc <__gethex+0x2b0>)
 800b650:	9303      	str	r3, [sp, #12]
 800b652:	2201      	movs	r2, #1
 800b654:	4630      	mov	r0, r6
 800b656:	f7fe ff1a 	bl	800a48e <strncmp>
 800b65a:	9b03      	ldr	r3, [sp, #12]
 800b65c:	2800      	cmp	r0, #0
 800b65e:	d1e1      	bne.n	800b624 <__gethex+0x1d8>
 800b660:	e7a2      	b.n	800b5a8 <__gethex+0x15c>
 800b662:	1ea9      	subs	r1, r5, #2
 800b664:	4620      	mov	r0, r4
 800b666:	f000 ff14 	bl	800c492 <__any_on>
 800b66a:	2800      	cmp	r0, #0
 800b66c:	d0c2      	beq.n	800b5f4 <__gethex+0x1a8>
 800b66e:	f04f 0903 	mov.w	r9, #3
 800b672:	e7c1      	b.n	800b5f8 <__gethex+0x1ac>
 800b674:	da09      	bge.n	800b68a <__gethex+0x23e>
 800b676:	1b75      	subs	r5, r6, r5
 800b678:	4621      	mov	r1, r4
 800b67a:	9801      	ldr	r0, [sp, #4]
 800b67c:	462a      	mov	r2, r5
 800b67e:	f000 fccf 	bl	800c020 <__lshift>
 800b682:	1b7f      	subs	r7, r7, r5
 800b684:	4604      	mov	r4, r0
 800b686:	f100 0a14 	add.w	sl, r0, #20
 800b68a:	f04f 0900 	mov.w	r9, #0
 800b68e:	e7b8      	b.n	800b602 <__gethex+0x1b6>
 800b690:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b694:	42bd      	cmp	r5, r7
 800b696:	dd6f      	ble.n	800b778 <__gethex+0x32c>
 800b698:	1bed      	subs	r5, r5, r7
 800b69a:	42ae      	cmp	r6, r5
 800b69c:	dc34      	bgt.n	800b708 <__gethex+0x2bc>
 800b69e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b6a2:	2b02      	cmp	r3, #2
 800b6a4:	d022      	beq.n	800b6ec <__gethex+0x2a0>
 800b6a6:	2b03      	cmp	r3, #3
 800b6a8:	d024      	beq.n	800b6f4 <__gethex+0x2a8>
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d115      	bne.n	800b6da <__gethex+0x28e>
 800b6ae:	42ae      	cmp	r6, r5
 800b6b0:	d113      	bne.n	800b6da <__gethex+0x28e>
 800b6b2:	2e01      	cmp	r6, #1
 800b6b4:	d10b      	bne.n	800b6ce <__gethex+0x282>
 800b6b6:	9a02      	ldr	r2, [sp, #8]
 800b6b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b6bc:	6013      	str	r3, [r2, #0]
 800b6be:	2301      	movs	r3, #1
 800b6c0:	6123      	str	r3, [r4, #16]
 800b6c2:	f8ca 3000 	str.w	r3, [sl]
 800b6c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6c8:	2562      	movs	r5, #98	@ 0x62
 800b6ca:	601c      	str	r4, [r3, #0]
 800b6cc:	e73a      	b.n	800b544 <__gethex+0xf8>
 800b6ce:	1e71      	subs	r1, r6, #1
 800b6d0:	4620      	mov	r0, r4
 800b6d2:	f000 fede 	bl	800c492 <__any_on>
 800b6d6:	2800      	cmp	r0, #0
 800b6d8:	d1ed      	bne.n	800b6b6 <__gethex+0x26a>
 800b6da:	9801      	ldr	r0, [sp, #4]
 800b6dc:	4621      	mov	r1, r4
 800b6de:	f000 fa8f 	bl	800bc00 <_Bfree>
 800b6e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	6013      	str	r3, [r2, #0]
 800b6e8:	2550      	movs	r5, #80	@ 0x50
 800b6ea:	e72b      	b.n	800b544 <__gethex+0xf8>
 800b6ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d1f3      	bne.n	800b6da <__gethex+0x28e>
 800b6f2:	e7e0      	b.n	800b6b6 <__gethex+0x26a>
 800b6f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d1dd      	bne.n	800b6b6 <__gethex+0x26a>
 800b6fa:	e7ee      	b.n	800b6da <__gethex+0x28e>
 800b6fc:	0800d320 	.word	0x0800d320
 800b700:	0800d3df 	.word	0x0800d3df
 800b704:	0800d3f0 	.word	0x0800d3f0
 800b708:	1e6f      	subs	r7, r5, #1
 800b70a:	f1b9 0f00 	cmp.w	r9, #0
 800b70e:	d130      	bne.n	800b772 <__gethex+0x326>
 800b710:	b127      	cbz	r7, 800b71c <__gethex+0x2d0>
 800b712:	4639      	mov	r1, r7
 800b714:	4620      	mov	r0, r4
 800b716:	f000 febc 	bl	800c492 <__any_on>
 800b71a:	4681      	mov	r9, r0
 800b71c:	117a      	asrs	r2, r7, #5
 800b71e:	2301      	movs	r3, #1
 800b720:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b724:	f007 071f 	and.w	r7, r7, #31
 800b728:	40bb      	lsls	r3, r7
 800b72a:	4213      	tst	r3, r2
 800b72c:	4629      	mov	r1, r5
 800b72e:	4620      	mov	r0, r4
 800b730:	bf18      	it	ne
 800b732:	f049 0902 	orrne.w	r9, r9, #2
 800b736:	f7ff fe21 	bl	800b37c <rshift>
 800b73a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b73e:	1b76      	subs	r6, r6, r5
 800b740:	2502      	movs	r5, #2
 800b742:	f1b9 0f00 	cmp.w	r9, #0
 800b746:	d047      	beq.n	800b7d8 <__gethex+0x38c>
 800b748:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b74c:	2b02      	cmp	r3, #2
 800b74e:	d015      	beq.n	800b77c <__gethex+0x330>
 800b750:	2b03      	cmp	r3, #3
 800b752:	d017      	beq.n	800b784 <__gethex+0x338>
 800b754:	2b01      	cmp	r3, #1
 800b756:	d109      	bne.n	800b76c <__gethex+0x320>
 800b758:	f019 0f02 	tst.w	r9, #2
 800b75c:	d006      	beq.n	800b76c <__gethex+0x320>
 800b75e:	f8da 3000 	ldr.w	r3, [sl]
 800b762:	ea49 0903 	orr.w	r9, r9, r3
 800b766:	f019 0f01 	tst.w	r9, #1
 800b76a:	d10e      	bne.n	800b78a <__gethex+0x33e>
 800b76c:	f045 0510 	orr.w	r5, r5, #16
 800b770:	e032      	b.n	800b7d8 <__gethex+0x38c>
 800b772:	f04f 0901 	mov.w	r9, #1
 800b776:	e7d1      	b.n	800b71c <__gethex+0x2d0>
 800b778:	2501      	movs	r5, #1
 800b77a:	e7e2      	b.n	800b742 <__gethex+0x2f6>
 800b77c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b77e:	f1c3 0301 	rsb	r3, r3, #1
 800b782:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b784:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b786:	2b00      	cmp	r3, #0
 800b788:	d0f0      	beq.n	800b76c <__gethex+0x320>
 800b78a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b78e:	f104 0314 	add.w	r3, r4, #20
 800b792:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b796:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b79a:	f04f 0c00 	mov.w	ip, #0
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b7a8:	d01b      	beq.n	800b7e2 <__gethex+0x396>
 800b7aa:	3201      	adds	r2, #1
 800b7ac:	6002      	str	r2, [r0, #0]
 800b7ae:	2d02      	cmp	r5, #2
 800b7b0:	f104 0314 	add.w	r3, r4, #20
 800b7b4:	d13c      	bne.n	800b830 <__gethex+0x3e4>
 800b7b6:	f8d8 2000 	ldr.w	r2, [r8]
 800b7ba:	3a01      	subs	r2, #1
 800b7bc:	42b2      	cmp	r2, r6
 800b7be:	d109      	bne.n	800b7d4 <__gethex+0x388>
 800b7c0:	1171      	asrs	r1, r6, #5
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b7c8:	f006 061f 	and.w	r6, r6, #31
 800b7cc:	fa02 f606 	lsl.w	r6, r2, r6
 800b7d0:	421e      	tst	r6, r3
 800b7d2:	d13a      	bne.n	800b84a <__gethex+0x3fe>
 800b7d4:	f045 0520 	orr.w	r5, r5, #32
 800b7d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7da:	601c      	str	r4, [r3, #0]
 800b7dc:	9b02      	ldr	r3, [sp, #8]
 800b7de:	601f      	str	r7, [r3, #0]
 800b7e0:	e6b0      	b.n	800b544 <__gethex+0xf8>
 800b7e2:	4299      	cmp	r1, r3
 800b7e4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b7e8:	d8d9      	bhi.n	800b79e <__gethex+0x352>
 800b7ea:	68a3      	ldr	r3, [r4, #8]
 800b7ec:	459b      	cmp	fp, r3
 800b7ee:	db17      	blt.n	800b820 <__gethex+0x3d4>
 800b7f0:	6861      	ldr	r1, [r4, #4]
 800b7f2:	9801      	ldr	r0, [sp, #4]
 800b7f4:	3101      	adds	r1, #1
 800b7f6:	f000 f9c3 	bl	800bb80 <_Balloc>
 800b7fa:	4681      	mov	r9, r0
 800b7fc:	b918      	cbnz	r0, 800b806 <__gethex+0x3ba>
 800b7fe:	4b1a      	ldr	r3, [pc, #104]	@ (800b868 <__gethex+0x41c>)
 800b800:	4602      	mov	r2, r0
 800b802:	2184      	movs	r1, #132	@ 0x84
 800b804:	e6c5      	b.n	800b592 <__gethex+0x146>
 800b806:	6922      	ldr	r2, [r4, #16]
 800b808:	3202      	adds	r2, #2
 800b80a:	f104 010c 	add.w	r1, r4, #12
 800b80e:	0092      	lsls	r2, r2, #2
 800b810:	300c      	adds	r0, #12
 800b812:	f7fe fef0 	bl	800a5f6 <memcpy>
 800b816:	4621      	mov	r1, r4
 800b818:	9801      	ldr	r0, [sp, #4]
 800b81a:	f000 f9f1 	bl	800bc00 <_Bfree>
 800b81e:	464c      	mov	r4, r9
 800b820:	6923      	ldr	r3, [r4, #16]
 800b822:	1c5a      	adds	r2, r3, #1
 800b824:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b828:	6122      	str	r2, [r4, #16]
 800b82a:	2201      	movs	r2, #1
 800b82c:	615a      	str	r2, [r3, #20]
 800b82e:	e7be      	b.n	800b7ae <__gethex+0x362>
 800b830:	6922      	ldr	r2, [r4, #16]
 800b832:	455a      	cmp	r2, fp
 800b834:	dd0b      	ble.n	800b84e <__gethex+0x402>
 800b836:	2101      	movs	r1, #1
 800b838:	4620      	mov	r0, r4
 800b83a:	f7ff fd9f 	bl	800b37c <rshift>
 800b83e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b842:	3701      	adds	r7, #1
 800b844:	42bb      	cmp	r3, r7
 800b846:	f6ff aee0 	blt.w	800b60a <__gethex+0x1be>
 800b84a:	2501      	movs	r5, #1
 800b84c:	e7c2      	b.n	800b7d4 <__gethex+0x388>
 800b84e:	f016 061f 	ands.w	r6, r6, #31
 800b852:	d0fa      	beq.n	800b84a <__gethex+0x3fe>
 800b854:	4453      	add	r3, sl
 800b856:	f1c6 0620 	rsb	r6, r6, #32
 800b85a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b85e:	f000 fa81 	bl	800bd64 <__hi0bits>
 800b862:	42b0      	cmp	r0, r6
 800b864:	dbe7      	blt.n	800b836 <__gethex+0x3ea>
 800b866:	e7f0      	b.n	800b84a <__gethex+0x3fe>
 800b868:	0800d3df 	.word	0x0800d3df

0800b86c <L_shift>:
 800b86c:	f1c2 0208 	rsb	r2, r2, #8
 800b870:	0092      	lsls	r2, r2, #2
 800b872:	b570      	push	{r4, r5, r6, lr}
 800b874:	f1c2 0620 	rsb	r6, r2, #32
 800b878:	6843      	ldr	r3, [r0, #4]
 800b87a:	6804      	ldr	r4, [r0, #0]
 800b87c:	fa03 f506 	lsl.w	r5, r3, r6
 800b880:	432c      	orrs	r4, r5
 800b882:	40d3      	lsrs	r3, r2
 800b884:	6004      	str	r4, [r0, #0]
 800b886:	f840 3f04 	str.w	r3, [r0, #4]!
 800b88a:	4288      	cmp	r0, r1
 800b88c:	d3f4      	bcc.n	800b878 <L_shift+0xc>
 800b88e:	bd70      	pop	{r4, r5, r6, pc}

0800b890 <__match>:
 800b890:	b530      	push	{r4, r5, lr}
 800b892:	6803      	ldr	r3, [r0, #0]
 800b894:	3301      	adds	r3, #1
 800b896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b89a:	b914      	cbnz	r4, 800b8a2 <__match+0x12>
 800b89c:	6003      	str	r3, [r0, #0]
 800b89e:	2001      	movs	r0, #1
 800b8a0:	bd30      	pop	{r4, r5, pc}
 800b8a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b8aa:	2d19      	cmp	r5, #25
 800b8ac:	bf98      	it	ls
 800b8ae:	3220      	addls	r2, #32
 800b8b0:	42a2      	cmp	r2, r4
 800b8b2:	d0f0      	beq.n	800b896 <__match+0x6>
 800b8b4:	2000      	movs	r0, #0
 800b8b6:	e7f3      	b.n	800b8a0 <__match+0x10>

0800b8b8 <__hexnan>:
 800b8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8bc:	680b      	ldr	r3, [r1, #0]
 800b8be:	6801      	ldr	r1, [r0, #0]
 800b8c0:	115e      	asrs	r6, r3, #5
 800b8c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b8c6:	f013 031f 	ands.w	r3, r3, #31
 800b8ca:	b087      	sub	sp, #28
 800b8cc:	bf18      	it	ne
 800b8ce:	3604      	addne	r6, #4
 800b8d0:	2500      	movs	r5, #0
 800b8d2:	1f37      	subs	r7, r6, #4
 800b8d4:	4682      	mov	sl, r0
 800b8d6:	4690      	mov	r8, r2
 800b8d8:	9301      	str	r3, [sp, #4]
 800b8da:	f846 5c04 	str.w	r5, [r6, #-4]
 800b8de:	46b9      	mov	r9, r7
 800b8e0:	463c      	mov	r4, r7
 800b8e2:	9502      	str	r5, [sp, #8]
 800b8e4:	46ab      	mov	fp, r5
 800b8e6:	784a      	ldrb	r2, [r1, #1]
 800b8e8:	1c4b      	adds	r3, r1, #1
 800b8ea:	9303      	str	r3, [sp, #12]
 800b8ec:	b342      	cbz	r2, 800b940 <__hexnan+0x88>
 800b8ee:	4610      	mov	r0, r2
 800b8f0:	9105      	str	r1, [sp, #20]
 800b8f2:	9204      	str	r2, [sp, #16]
 800b8f4:	f7ff fd94 	bl	800b420 <__hexdig_fun>
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	d151      	bne.n	800b9a0 <__hexnan+0xe8>
 800b8fc:	9a04      	ldr	r2, [sp, #16]
 800b8fe:	9905      	ldr	r1, [sp, #20]
 800b900:	2a20      	cmp	r2, #32
 800b902:	d818      	bhi.n	800b936 <__hexnan+0x7e>
 800b904:	9b02      	ldr	r3, [sp, #8]
 800b906:	459b      	cmp	fp, r3
 800b908:	dd13      	ble.n	800b932 <__hexnan+0x7a>
 800b90a:	454c      	cmp	r4, r9
 800b90c:	d206      	bcs.n	800b91c <__hexnan+0x64>
 800b90e:	2d07      	cmp	r5, #7
 800b910:	dc04      	bgt.n	800b91c <__hexnan+0x64>
 800b912:	462a      	mov	r2, r5
 800b914:	4649      	mov	r1, r9
 800b916:	4620      	mov	r0, r4
 800b918:	f7ff ffa8 	bl	800b86c <L_shift>
 800b91c:	4544      	cmp	r4, r8
 800b91e:	d952      	bls.n	800b9c6 <__hexnan+0x10e>
 800b920:	2300      	movs	r3, #0
 800b922:	f1a4 0904 	sub.w	r9, r4, #4
 800b926:	f844 3c04 	str.w	r3, [r4, #-4]
 800b92a:	f8cd b008 	str.w	fp, [sp, #8]
 800b92e:	464c      	mov	r4, r9
 800b930:	461d      	mov	r5, r3
 800b932:	9903      	ldr	r1, [sp, #12]
 800b934:	e7d7      	b.n	800b8e6 <__hexnan+0x2e>
 800b936:	2a29      	cmp	r2, #41	@ 0x29
 800b938:	d157      	bne.n	800b9ea <__hexnan+0x132>
 800b93a:	3102      	adds	r1, #2
 800b93c:	f8ca 1000 	str.w	r1, [sl]
 800b940:	f1bb 0f00 	cmp.w	fp, #0
 800b944:	d051      	beq.n	800b9ea <__hexnan+0x132>
 800b946:	454c      	cmp	r4, r9
 800b948:	d206      	bcs.n	800b958 <__hexnan+0xa0>
 800b94a:	2d07      	cmp	r5, #7
 800b94c:	dc04      	bgt.n	800b958 <__hexnan+0xa0>
 800b94e:	462a      	mov	r2, r5
 800b950:	4649      	mov	r1, r9
 800b952:	4620      	mov	r0, r4
 800b954:	f7ff ff8a 	bl	800b86c <L_shift>
 800b958:	4544      	cmp	r4, r8
 800b95a:	d936      	bls.n	800b9ca <__hexnan+0x112>
 800b95c:	f1a8 0204 	sub.w	r2, r8, #4
 800b960:	4623      	mov	r3, r4
 800b962:	f853 1b04 	ldr.w	r1, [r3], #4
 800b966:	f842 1f04 	str.w	r1, [r2, #4]!
 800b96a:	429f      	cmp	r7, r3
 800b96c:	d2f9      	bcs.n	800b962 <__hexnan+0xaa>
 800b96e:	1b3b      	subs	r3, r7, r4
 800b970:	f023 0303 	bic.w	r3, r3, #3
 800b974:	3304      	adds	r3, #4
 800b976:	3401      	adds	r4, #1
 800b978:	3e03      	subs	r6, #3
 800b97a:	42b4      	cmp	r4, r6
 800b97c:	bf88      	it	hi
 800b97e:	2304      	movhi	r3, #4
 800b980:	4443      	add	r3, r8
 800b982:	2200      	movs	r2, #0
 800b984:	f843 2b04 	str.w	r2, [r3], #4
 800b988:	429f      	cmp	r7, r3
 800b98a:	d2fb      	bcs.n	800b984 <__hexnan+0xcc>
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	b91b      	cbnz	r3, 800b998 <__hexnan+0xe0>
 800b990:	4547      	cmp	r7, r8
 800b992:	d128      	bne.n	800b9e6 <__hexnan+0x12e>
 800b994:	2301      	movs	r3, #1
 800b996:	603b      	str	r3, [r7, #0]
 800b998:	2005      	movs	r0, #5
 800b99a:	b007      	add	sp, #28
 800b99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9a0:	3501      	adds	r5, #1
 800b9a2:	2d08      	cmp	r5, #8
 800b9a4:	f10b 0b01 	add.w	fp, fp, #1
 800b9a8:	dd06      	ble.n	800b9b8 <__hexnan+0x100>
 800b9aa:	4544      	cmp	r4, r8
 800b9ac:	d9c1      	bls.n	800b932 <__hexnan+0x7a>
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b9b4:	2501      	movs	r5, #1
 800b9b6:	3c04      	subs	r4, #4
 800b9b8:	6822      	ldr	r2, [r4, #0]
 800b9ba:	f000 000f 	and.w	r0, r0, #15
 800b9be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b9c2:	6020      	str	r0, [r4, #0]
 800b9c4:	e7b5      	b.n	800b932 <__hexnan+0x7a>
 800b9c6:	2508      	movs	r5, #8
 800b9c8:	e7b3      	b.n	800b932 <__hexnan+0x7a>
 800b9ca:	9b01      	ldr	r3, [sp, #4]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d0dd      	beq.n	800b98c <__hexnan+0xd4>
 800b9d0:	f1c3 0320 	rsb	r3, r3, #32
 800b9d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9d8:	40da      	lsrs	r2, r3
 800b9da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b9de:	4013      	ands	r3, r2
 800b9e0:	f846 3c04 	str.w	r3, [r6, #-4]
 800b9e4:	e7d2      	b.n	800b98c <__hexnan+0xd4>
 800b9e6:	3f04      	subs	r7, #4
 800b9e8:	e7d0      	b.n	800b98c <__hexnan+0xd4>
 800b9ea:	2004      	movs	r0, #4
 800b9ec:	e7d5      	b.n	800b99a <__hexnan+0xe2>
	...

0800b9f0 <malloc>:
 800b9f0:	4b02      	ldr	r3, [pc, #8]	@ (800b9fc <malloc+0xc>)
 800b9f2:	4601      	mov	r1, r0
 800b9f4:	6818      	ldr	r0, [r3, #0]
 800b9f6:	f000 b825 	b.w	800ba44 <_malloc_r>
 800b9fa:	bf00      	nop
 800b9fc:	20000184 	.word	0x20000184

0800ba00 <sbrk_aligned>:
 800ba00:	b570      	push	{r4, r5, r6, lr}
 800ba02:	4e0f      	ldr	r6, [pc, #60]	@ (800ba40 <sbrk_aligned+0x40>)
 800ba04:	460c      	mov	r4, r1
 800ba06:	6831      	ldr	r1, [r6, #0]
 800ba08:	4605      	mov	r5, r0
 800ba0a:	b911      	cbnz	r1, 800ba12 <sbrk_aligned+0x12>
 800ba0c:	f001 f9ce 	bl	800cdac <_sbrk_r>
 800ba10:	6030      	str	r0, [r6, #0]
 800ba12:	4621      	mov	r1, r4
 800ba14:	4628      	mov	r0, r5
 800ba16:	f001 f9c9 	bl	800cdac <_sbrk_r>
 800ba1a:	1c43      	adds	r3, r0, #1
 800ba1c:	d103      	bne.n	800ba26 <sbrk_aligned+0x26>
 800ba1e:	f04f 34ff 	mov.w	r4, #4294967295
 800ba22:	4620      	mov	r0, r4
 800ba24:	bd70      	pop	{r4, r5, r6, pc}
 800ba26:	1cc4      	adds	r4, r0, #3
 800ba28:	f024 0403 	bic.w	r4, r4, #3
 800ba2c:	42a0      	cmp	r0, r4
 800ba2e:	d0f8      	beq.n	800ba22 <sbrk_aligned+0x22>
 800ba30:	1a21      	subs	r1, r4, r0
 800ba32:	4628      	mov	r0, r5
 800ba34:	f001 f9ba 	bl	800cdac <_sbrk_r>
 800ba38:	3001      	adds	r0, #1
 800ba3a:	d1f2      	bne.n	800ba22 <sbrk_aligned+0x22>
 800ba3c:	e7ef      	b.n	800ba1e <sbrk_aligned+0x1e>
 800ba3e:	bf00      	nop
 800ba40:	20000f54 	.word	0x20000f54

0800ba44 <_malloc_r>:
 800ba44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba48:	1ccd      	adds	r5, r1, #3
 800ba4a:	f025 0503 	bic.w	r5, r5, #3
 800ba4e:	3508      	adds	r5, #8
 800ba50:	2d0c      	cmp	r5, #12
 800ba52:	bf38      	it	cc
 800ba54:	250c      	movcc	r5, #12
 800ba56:	2d00      	cmp	r5, #0
 800ba58:	4606      	mov	r6, r0
 800ba5a:	db01      	blt.n	800ba60 <_malloc_r+0x1c>
 800ba5c:	42a9      	cmp	r1, r5
 800ba5e:	d904      	bls.n	800ba6a <_malloc_r+0x26>
 800ba60:	230c      	movs	r3, #12
 800ba62:	6033      	str	r3, [r6, #0]
 800ba64:	2000      	movs	r0, #0
 800ba66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bb40 <_malloc_r+0xfc>
 800ba6e:	f000 f87b 	bl	800bb68 <__malloc_lock>
 800ba72:	f8d8 3000 	ldr.w	r3, [r8]
 800ba76:	461c      	mov	r4, r3
 800ba78:	bb44      	cbnz	r4, 800bacc <_malloc_r+0x88>
 800ba7a:	4629      	mov	r1, r5
 800ba7c:	4630      	mov	r0, r6
 800ba7e:	f7ff ffbf 	bl	800ba00 <sbrk_aligned>
 800ba82:	1c43      	adds	r3, r0, #1
 800ba84:	4604      	mov	r4, r0
 800ba86:	d158      	bne.n	800bb3a <_malloc_r+0xf6>
 800ba88:	f8d8 4000 	ldr.w	r4, [r8]
 800ba8c:	4627      	mov	r7, r4
 800ba8e:	2f00      	cmp	r7, #0
 800ba90:	d143      	bne.n	800bb1a <_malloc_r+0xd6>
 800ba92:	2c00      	cmp	r4, #0
 800ba94:	d04b      	beq.n	800bb2e <_malloc_r+0xea>
 800ba96:	6823      	ldr	r3, [r4, #0]
 800ba98:	4639      	mov	r1, r7
 800ba9a:	4630      	mov	r0, r6
 800ba9c:	eb04 0903 	add.w	r9, r4, r3
 800baa0:	f001 f984 	bl	800cdac <_sbrk_r>
 800baa4:	4581      	cmp	r9, r0
 800baa6:	d142      	bne.n	800bb2e <_malloc_r+0xea>
 800baa8:	6821      	ldr	r1, [r4, #0]
 800baaa:	1a6d      	subs	r5, r5, r1
 800baac:	4629      	mov	r1, r5
 800baae:	4630      	mov	r0, r6
 800bab0:	f7ff ffa6 	bl	800ba00 <sbrk_aligned>
 800bab4:	3001      	adds	r0, #1
 800bab6:	d03a      	beq.n	800bb2e <_malloc_r+0xea>
 800bab8:	6823      	ldr	r3, [r4, #0]
 800baba:	442b      	add	r3, r5
 800babc:	6023      	str	r3, [r4, #0]
 800babe:	f8d8 3000 	ldr.w	r3, [r8]
 800bac2:	685a      	ldr	r2, [r3, #4]
 800bac4:	bb62      	cbnz	r2, 800bb20 <_malloc_r+0xdc>
 800bac6:	f8c8 7000 	str.w	r7, [r8]
 800baca:	e00f      	b.n	800baec <_malloc_r+0xa8>
 800bacc:	6822      	ldr	r2, [r4, #0]
 800bace:	1b52      	subs	r2, r2, r5
 800bad0:	d420      	bmi.n	800bb14 <_malloc_r+0xd0>
 800bad2:	2a0b      	cmp	r2, #11
 800bad4:	d917      	bls.n	800bb06 <_malloc_r+0xc2>
 800bad6:	1961      	adds	r1, r4, r5
 800bad8:	42a3      	cmp	r3, r4
 800bada:	6025      	str	r5, [r4, #0]
 800badc:	bf18      	it	ne
 800bade:	6059      	strne	r1, [r3, #4]
 800bae0:	6863      	ldr	r3, [r4, #4]
 800bae2:	bf08      	it	eq
 800bae4:	f8c8 1000 	streq.w	r1, [r8]
 800bae8:	5162      	str	r2, [r4, r5]
 800baea:	604b      	str	r3, [r1, #4]
 800baec:	4630      	mov	r0, r6
 800baee:	f000 f841 	bl	800bb74 <__malloc_unlock>
 800baf2:	f104 000b 	add.w	r0, r4, #11
 800baf6:	1d23      	adds	r3, r4, #4
 800baf8:	f020 0007 	bic.w	r0, r0, #7
 800bafc:	1ac2      	subs	r2, r0, r3
 800bafe:	bf1c      	itt	ne
 800bb00:	1a1b      	subne	r3, r3, r0
 800bb02:	50a3      	strne	r3, [r4, r2]
 800bb04:	e7af      	b.n	800ba66 <_malloc_r+0x22>
 800bb06:	6862      	ldr	r2, [r4, #4]
 800bb08:	42a3      	cmp	r3, r4
 800bb0a:	bf0c      	ite	eq
 800bb0c:	f8c8 2000 	streq.w	r2, [r8]
 800bb10:	605a      	strne	r2, [r3, #4]
 800bb12:	e7eb      	b.n	800baec <_malloc_r+0xa8>
 800bb14:	4623      	mov	r3, r4
 800bb16:	6864      	ldr	r4, [r4, #4]
 800bb18:	e7ae      	b.n	800ba78 <_malloc_r+0x34>
 800bb1a:	463c      	mov	r4, r7
 800bb1c:	687f      	ldr	r7, [r7, #4]
 800bb1e:	e7b6      	b.n	800ba8e <_malloc_r+0x4a>
 800bb20:	461a      	mov	r2, r3
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	42a3      	cmp	r3, r4
 800bb26:	d1fb      	bne.n	800bb20 <_malloc_r+0xdc>
 800bb28:	2300      	movs	r3, #0
 800bb2a:	6053      	str	r3, [r2, #4]
 800bb2c:	e7de      	b.n	800baec <_malloc_r+0xa8>
 800bb2e:	230c      	movs	r3, #12
 800bb30:	6033      	str	r3, [r6, #0]
 800bb32:	4630      	mov	r0, r6
 800bb34:	f000 f81e 	bl	800bb74 <__malloc_unlock>
 800bb38:	e794      	b.n	800ba64 <_malloc_r+0x20>
 800bb3a:	6005      	str	r5, [r0, #0]
 800bb3c:	e7d6      	b.n	800baec <_malloc_r+0xa8>
 800bb3e:	bf00      	nop
 800bb40:	20000f58 	.word	0x20000f58

0800bb44 <__ascii_mbtowc>:
 800bb44:	b082      	sub	sp, #8
 800bb46:	b901      	cbnz	r1, 800bb4a <__ascii_mbtowc+0x6>
 800bb48:	a901      	add	r1, sp, #4
 800bb4a:	b142      	cbz	r2, 800bb5e <__ascii_mbtowc+0x1a>
 800bb4c:	b14b      	cbz	r3, 800bb62 <__ascii_mbtowc+0x1e>
 800bb4e:	7813      	ldrb	r3, [r2, #0]
 800bb50:	600b      	str	r3, [r1, #0]
 800bb52:	7812      	ldrb	r2, [r2, #0]
 800bb54:	1e10      	subs	r0, r2, #0
 800bb56:	bf18      	it	ne
 800bb58:	2001      	movne	r0, #1
 800bb5a:	b002      	add	sp, #8
 800bb5c:	4770      	bx	lr
 800bb5e:	4610      	mov	r0, r2
 800bb60:	e7fb      	b.n	800bb5a <__ascii_mbtowc+0x16>
 800bb62:	f06f 0001 	mvn.w	r0, #1
 800bb66:	e7f8      	b.n	800bb5a <__ascii_mbtowc+0x16>

0800bb68 <__malloc_lock>:
 800bb68:	4801      	ldr	r0, [pc, #4]	@ (800bb70 <__malloc_lock+0x8>)
 800bb6a:	f7fe bd42 	b.w	800a5f2 <__retarget_lock_acquire_recursive>
 800bb6e:	bf00      	nop
 800bb70:	20000f50 	.word	0x20000f50

0800bb74 <__malloc_unlock>:
 800bb74:	4801      	ldr	r0, [pc, #4]	@ (800bb7c <__malloc_unlock+0x8>)
 800bb76:	f7fe bd3d 	b.w	800a5f4 <__retarget_lock_release_recursive>
 800bb7a:	bf00      	nop
 800bb7c:	20000f50 	.word	0x20000f50

0800bb80 <_Balloc>:
 800bb80:	b570      	push	{r4, r5, r6, lr}
 800bb82:	69c6      	ldr	r6, [r0, #28]
 800bb84:	4604      	mov	r4, r0
 800bb86:	460d      	mov	r5, r1
 800bb88:	b976      	cbnz	r6, 800bba8 <_Balloc+0x28>
 800bb8a:	2010      	movs	r0, #16
 800bb8c:	f7ff ff30 	bl	800b9f0 <malloc>
 800bb90:	4602      	mov	r2, r0
 800bb92:	61e0      	str	r0, [r4, #28]
 800bb94:	b920      	cbnz	r0, 800bba0 <_Balloc+0x20>
 800bb96:	4b18      	ldr	r3, [pc, #96]	@ (800bbf8 <_Balloc+0x78>)
 800bb98:	4818      	ldr	r0, [pc, #96]	@ (800bbfc <_Balloc+0x7c>)
 800bb9a:	216b      	movs	r1, #107	@ 0x6b
 800bb9c:	f001 f916 	bl	800cdcc <__assert_func>
 800bba0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bba4:	6006      	str	r6, [r0, #0]
 800bba6:	60c6      	str	r6, [r0, #12]
 800bba8:	69e6      	ldr	r6, [r4, #28]
 800bbaa:	68f3      	ldr	r3, [r6, #12]
 800bbac:	b183      	cbz	r3, 800bbd0 <_Balloc+0x50>
 800bbae:	69e3      	ldr	r3, [r4, #28]
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bbb6:	b9b8      	cbnz	r0, 800bbe8 <_Balloc+0x68>
 800bbb8:	2101      	movs	r1, #1
 800bbba:	fa01 f605 	lsl.w	r6, r1, r5
 800bbbe:	1d72      	adds	r2, r6, #5
 800bbc0:	0092      	lsls	r2, r2, #2
 800bbc2:	4620      	mov	r0, r4
 800bbc4:	f001 f920 	bl	800ce08 <_calloc_r>
 800bbc8:	b160      	cbz	r0, 800bbe4 <_Balloc+0x64>
 800bbca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bbce:	e00e      	b.n	800bbee <_Balloc+0x6e>
 800bbd0:	2221      	movs	r2, #33	@ 0x21
 800bbd2:	2104      	movs	r1, #4
 800bbd4:	4620      	mov	r0, r4
 800bbd6:	f001 f917 	bl	800ce08 <_calloc_r>
 800bbda:	69e3      	ldr	r3, [r4, #28]
 800bbdc:	60f0      	str	r0, [r6, #12]
 800bbde:	68db      	ldr	r3, [r3, #12]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d1e4      	bne.n	800bbae <_Balloc+0x2e>
 800bbe4:	2000      	movs	r0, #0
 800bbe6:	bd70      	pop	{r4, r5, r6, pc}
 800bbe8:	6802      	ldr	r2, [r0, #0]
 800bbea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bbee:	2300      	movs	r3, #0
 800bbf0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bbf4:	e7f7      	b.n	800bbe6 <_Balloc+0x66>
 800bbf6:	bf00      	nop
 800bbf8:	0800d370 	.word	0x0800d370
 800bbfc:	0800d450 	.word	0x0800d450

0800bc00 <_Bfree>:
 800bc00:	b570      	push	{r4, r5, r6, lr}
 800bc02:	69c6      	ldr	r6, [r0, #28]
 800bc04:	4605      	mov	r5, r0
 800bc06:	460c      	mov	r4, r1
 800bc08:	b976      	cbnz	r6, 800bc28 <_Bfree+0x28>
 800bc0a:	2010      	movs	r0, #16
 800bc0c:	f7ff fef0 	bl	800b9f0 <malloc>
 800bc10:	4602      	mov	r2, r0
 800bc12:	61e8      	str	r0, [r5, #28]
 800bc14:	b920      	cbnz	r0, 800bc20 <_Bfree+0x20>
 800bc16:	4b09      	ldr	r3, [pc, #36]	@ (800bc3c <_Bfree+0x3c>)
 800bc18:	4809      	ldr	r0, [pc, #36]	@ (800bc40 <_Bfree+0x40>)
 800bc1a:	218f      	movs	r1, #143	@ 0x8f
 800bc1c:	f001 f8d6 	bl	800cdcc <__assert_func>
 800bc20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc24:	6006      	str	r6, [r0, #0]
 800bc26:	60c6      	str	r6, [r0, #12]
 800bc28:	b13c      	cbz	r4, 800bc3a <_Bfree+0x3a>
 800bc2a:	69eb      	ldr	r3, [r5, #28]
 800bc2c:	6862      	ldr	r2, [r4, #4]
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bc34:	6021      	str	r1, [r4, #0]
 800bc36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bc3a:	bd70      	pop	{r4, r5, r6, pc}
 800bc3c:	0800d370 	.word	0x0800d370
 800bc40:	0800d450 	.word	0x0800d450

0800bc44 <__multadd>:
 800bc44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc48:	690d      	ldr	r5, [r1, #16]
 800bc4a:	4607      	mov	r7, r0
 800bc4c:	460c      	mov	r4, r1
 800bc4e:	461e      	mov	r6, r3
 800bc50:	f101 0c14 	add.w	ip, r1, #20
 800bc54:	2000      	movs	r0, #0
 800bc56:	f8dc 3000 	ldr.w	r3, [ip]
 800bc5a:	b299      	uxth	r1, r3
 800bc5c:	fb02 6101 	mla	r1, r2, r1, r6
 800bc60:	0c1e      	lsrs	r6, r3, #16
 800bc62:	0c0b      	lsrs	r3, r1, #16
 800bc64:	fb02 3306 	mla	r3, r2, r6, r3
 800bc68:	b289      	uxth	r1, r1
 800bc6a:	3001      	adds	r0, #1
 800bc6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bc70:	4285      	cmp	r5, r0
 800bc72:	f84c 1b04 	str.w	r1, [ip], #4
 800bc76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bc7a:	dcec      	bgt.n	800bc56 <__multadd+0x12>
 800bc7c:	b30e      	cbz	r6, 800bcc2 <__multadd+0x7e>
 800bc7e:	68a3      	ldr	r3, [r4, #8]
 800bc80:	42ab      	cmp	r3, r5
 800bc82:	dc19      	bgt.n	800bcb8 <__multadd+0x74>
 800bc84:	6861      	ldr	r1, [r4, #4]
 800bc86:	4638      	mov	r0, r7
 800bc88:	3101      	adds	r1, #1
 800bc8a:	f7ff ff79 	bl	800bb80 <_Balloc>
 800bc8e:	4680      	mov	r8, r0
 800bc90:	b928      	cbnz	r0, 800bc9e <__multadd+0x5a>
 800bc92:	4602      	mov	r2, r0
 800bc94:	4b0c      	ldr	r3, [pc, #48]	@ (800bcc8 <__multadd+0x84>)
 800bc96:	480d      	ldr	r0, [pc, #52]	@ (800bccc <__multadd+0x88>)
 800bc98:	21ba      	movs	r1, #186	@ 0xba
 800bc9a:	f001 f897 	bl	800cdcc <__assert_func>
 800bc9e:	6922      	ldr	r2, [r4, #16]
 800bca0:	3202      	adds	r2, #2
 800bca2:	f104 010c 	add.w	r1, r4, #12
 800bca6:	0092      	lsls	r2, r2, #2
 800bca8:	300c      	adds	r0, #12
 800bcaa:	f7fe fca4 	bl	800a5f6 <memcpy>
 800bcae:	4621      	mov	r1, r4
 800bcb0:	4638      	mov	r0, r7
 800bcb2:	f7ff ffa5 	bl	800bc00 <_Bfree>
 800bcb6:	4644      	mov	r4, r8
 800bcb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bcbc:	3501      	adds	r5, #1
 800bcbe:	615e      	str	r6, [r3, #20]
 800bcc0:	6125      	str	r5, [r4, #16]
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcc8:	0800d3df 	.word	0x0800d3df
 800bccc:	0800d450 	.word	0x0800d450

0800bcd0 <__s2b>:
 800bcd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcd4:	460c      	mov	r4, r1
 800bcd6:	4615      	mov	r5, r2
 800bcd8:	461f      	mov	r7, r3
 800bcda:	2209      	movs	r2, #9
 800bcdc:	3308      	adds	r3, #8
 800bcde:	4606      	mov	r6, r0
 800bce0:	fb93 f3f2 	sdiv	r3, r3, r2
 800bce4:	2100      	movs	r1, #0
 800bce6:	2201      	movs	r2, #1
 800bce8:	429a      	cmp	r2, r3
 800bcea:	db09      	blt.n	800bd00 <__s2b+0x30>
 800bcec:	4630      	mov	r0, r6
 800bcee:	f7ff ff47 	bl	800bb80 <_Balloc>
 800bcf2:	b940      	cbnz	r0, 800bd06 <__s2b+0x36>
 800bcf4:	4602      	mov	r2, r0
 800bcf6:	4b19      	ldr	r3, [pc, #100]	@ (800bd5c <__s2b+0x8c>)
 800bcf8:	4819      	ldr	r0, [pc, #100]	@ (800bd60 <__s2b+0x90>)
 800bcfa:	21d3      	movs	r1, #211	@ 0xd3
 800bcfc:	f001 f866 	bl	800cdcc <__assert_func>
 800bd00:	0052      	lsls	r2, r2, #1
 800bd02:	3101      	adds	r1, #1
 800bd04:	e7f0      	b.n	800bce8 <__s2b+0x18>
 800bd06:	9b08      	ldr	r3, [sp, #32]
 800bd08:	6143      	str	r3, [r0, #20]
 800bd0a:	2d09      	cmp	r5, #9
 800bd0c:	f04f 0301 	mov.w	r3, #1
 800bd10:	6103      	str	r3, [r0, #16]
 800bd12:	dd16      	ble.n	800bd42 <__s2b+0x72>
 800bd14:	f104 0909 	add.w	r9, r4, #9
 800bd18:	46c8      	mov	r8, r9
 800bd1a:	442c      	add	r4, r5
 800bd1c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bd20:	4601      	mov	r1, r0
 800bd22:	3b30      	subs	r3, #48	@ 0x30
 800bd24:	220a      	movs	r2, #10
 800bd26:	4630      	mov	r0, r6
 800bd28:	f7ff ff8c 	bl	800bc44 <__multadd>
 800bd2c:	45a0      	cmp	r8, r4
 800bd2e:	d1f5      	bne.n	800bd1c <__s2b+0x4c>
 800bd30:	f1a5 0408 	sub.w	r4, r5, #8
 800bd34:	444c      	add	r4, r9
 800bd36:	1b2d      	subs	r5, r5, r4
 800bd38:	1963      	adds	r3, r4, r5
 800bd3a:	42bb      	cmp	r3, r7
 800bd3c:	db04      	blt.n	800bd48 <__s2b+0x78>
 800bd3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd42:	340a      	adds	r4, #10
 800bd44:	2509      	movs	r5, #9
 800bd46:	e7f6      	b.n	800bd36 <__s2b+0x66>
 800bd48:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bd4c:	4601      	mov	r1, r0
 800bd4e:	3b30      	subs	r3, #48	@ 0x30
 800bd50:	220a      	movs	r2, #10
 800bd52:	4630      	mov	r0, r6
 800bd54:	f7ff ff76 	bl	800bc44 <__multadd>
 800bd58:	e7ee      	b.n	800bd38 <__s2b+0x68>
 800bd5a:	bf00      	nop
 800bd5c:	0800d3df 	.word	0x0800d3df
 800bd60:	0800d450 	.word	0x0800d450

0800bd64 <__hi0bits>:
 800bd64:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bd68:	4603      	mov	r3, r0
 800bd6a:	bf36      	itet	cc
 800bd6c:	0403      	lslcc	r3, r0, #16
 800bd6e:	2000      	movcs	r0, #0
 800bd70:	2010      	movcc	r0, #16
 800bd72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bd76:	bf3c      	itt	cc
 800bd78:	021b      	lslcc	r3, r3, #8
 800bd7a:	3008      	addcc	r0, #8
 800bd7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd80:	bf3c      	itt	cc
 800bd82:	011b      	lslcc	r3, r3, #4
 800bd84:	3004      	addcc	r0, #4
 800bd86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd8a:	bf3c      	itt	cc
 800bd8c:	009b      	lslcc	r3, r3, #2
 800bd8e:	3002      	addcc	r0, #2
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	db05      	blt.n	800bda0 <__hi0bits+0x3c>
 800bd94:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bd98:	f100 0001 	add.w	r0, r0, #1
 800bd9c:	bf08      	it	eq
 800bd9e:	2020      	moveq	r0, #32
 800bda0:	4770      	bx	lr

0800bda2 <__lo0bits>:
 800bda2:	6803      	ldr	r3, [r0, #0]
 800bda4:	4602      	mov	r2, r0
 800bda6:	f013 0007 	ands.w	r0, r3, #7
 800bdaa:	d00b      	beq.n	800bdc4 <__lo0bits+0x22>
 800bdac:	07d9      	lsls	r1, r3, #31
 800bdae:	d421      	bmi.n	800bdf4 <__lo0bits+0x52>
 800bdb0:	0798      	lsls	r0, r3, #30
 800bdb2:	bf49      	itett	mi
 800bdb4:	085b      	lsrmi	r3, r3, #1
 800bdb6:	089b      	lsrpl	r3, r3, #2
 800bdb8:	2001      	movmi	r0, #1
 800bdba:	6013      	strmi	r3, [r2, #0]
 800bdbc:	bf5c      	itt	pl
 800bdbe:	6013      	strpl	r3, [r2, #0]
 800bdc0:	2002      	movpl	r0, #2
 800bdc2:	4770      	bx	lr
 800bdc4:	b299      	uxth	r1, r3
 800bdc6:	b909      	cbnz	r1, 800bdcc <__lo0bits+0x2a>
 800bdc8:	0c1b      	lsrs	r3, r3, #16
 800bdca:	2010      	movs	r0, #16
 800bdcc:	b2d9      	uxtb	r1, r3
 800bdce:	b909      	cbnz	r1, 800bdd4 <__lo0bits+0x32>
 800bdd0:	3008      	adds	r0, #8
 800bdd2:	0a1b      	lsrs	r3, r3, #8
 800bdd4:	0719      	lsls	r1, r3, #28
 800bdd6:	bf04      	itt	eq
 800bdd8:	091b      	lsreq	r3, r3, #4
 800bdda:	3004      	addeq	r0, #4
 800bddc:	0799      	lsls	r1, r3, #30
 800bdde:	bf04      	itt	eq
 800bde0:	089b      	lsreq	r3, r3, #2
 800bde2:	3002      	addeq	r0, #2
 800bde4:	07d9      	lsls	r1, r3, #31
 800bde6:	d403      	bmi.n	800bdf0 <__lo0bits+0x4e>
 800bde8:	085b      	lsrs	r3, r3, #1
 800bdea:	f100 0001 	add.w	r0, r0, #1
 800bdee:	d003      	beq.n	800bdf8 <__lo0bits+0x56>
 800bdf0:	6013      	str	r3, [r2, #0]
 800bdf2:	4770      	bx	lr
 800bdf4:	2000      	movs	r0, #0
 800bdf6:	4770      	bx	lr
 800bdf8:	2020      	movs	r0, #32
 800bdfa:	4770      	bx	lr

0800bdfc <__i2b>:
 800bdfc:	b510      	push	{r4, lr}
 800bdfe:	460c      	mov	r4, r1
 800be00:	2101      	movs	r1, #1
 800be02:	f7ff febd 	bl	800bb80 <_Balloc>
 800be06:	4602      	mov	r2, r0
 800be08:	b928      	cbnz	r0, 800be16 <__i2b+0x1a>
 800be0a:	4b05      	ldr	r3, [pc, #20]	@ (800be20 <__i2b+0x24>)
 800be0c:	4805      	ldr	r0, [pc, #20]	@ (800be24 <__i2b+0x28>)
 800be0e:	f240 1145 	movw	r1, #325	@ 0x145
 800be12:	f000 ffdb 	bl	800cdcc <__assert_func>
 800be16:	2301      	movs	r3, #1
 800be18:	6144      	str	r4, [r0, #20]
 800be1a:	6103      	str	r3, [r0, #16]
 800be1c:	bd10      	pop	{r4, pc}
 800be1e:	bf00      	nop
 800be20:	0800d3df 	.word	0x0800d3df
 800be24:	0800d450 	.word	0x0800d450

0800be28 <__multiply>:
 800be28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be2c:	4617      	mov	r7, r2
 800be2e:	690a      	ldr	r2, [r1, #16]
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	429a      	cmp	r2, r3
 800be34:	bfa8      	it	ge
 800be36:	463b      	movge	r3, r7
 800be38:	4689      	mov	r9, r1
 800be3a:	bfa4      	itt	ge
 800be3c:	460f      	movge	r7, r1
 800be3e:	4699      	movge	r9, r3
 800be40:	693d      	ldr	r5, [r7, #16]
 800be42:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	6879      	ldr	r1, [r7, #4]
 800be4a:	eb05 060a 	add.w	r6, r5, sl
 800be4e:	42b3      	cmp	r3, r6
 800be50:	b085      	sub	sp, #20
 800be52:	bfb8      	it	lt
 800be54:	3101      	addlt	r1, #1
 800be56:	f7ff fe93 	bl	800bb80 <_Balloc>
 800be5a:	b930      	cbnz	r0, 800be6a <__multiply+0x42>
 800be5c:	4602      	mov	r2, r0
 800be5e:	4b41      	ldr	r3, [pc, #260]	@ (800bf64 <__multiply+0x13c>)
 800be60:	4841      	ldr	r0, [pc, #260]	@ (800bf68 <__multiply+0x140>)
 800be62:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800be66:	f000 ffb1 	bl	800cdcc <__assert_func>
 800be6a:	f100 0414 	add.w	r4, r0, #20
 800be6e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800be72:	4623      	mov	r3, r4
 800be74:	2200      	movs	r2, #0
 800be76:	4573      	cmp	r3, lr
 800be78:	d320      	bcc.n	800bebc <__multiply+0x94>
 800be7a:	f107 0814 	add.w	r8, r7, #20
 800be7e:	f109 0114 	add.w	r1, r9, #20
 800be82:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800be86:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800be8a:	9302      	str	r3, [sp, #8]
 800be8c:	1beb      	subs	r3, r5, r7
 800be8e:	3b15      	subs	r3, #21
 800be90:	f023 0303 	bic.w	r3, r3, #3
 800be94:	3304      	adds	r3, #4
 800be96:	3715      	adds	r7, #21
 800be98:	42bd      	cmp	r5, r7
 800be9a:	bf38      	it	cc
 800be9c:	2304      	movcc	r3, #4
 800be9e:	9301      	str	r3, [sp, #4]
 800bea0:	9b02      	ldr	r3, [sp, #8]
 800bea2:	9103      	str	r1, [sp, #12]
 800bea4:	428b      	cmp	r3, r1
 800bea6:	d80c      	bhi.n	800bec2 <__multiply+0x9a>
 800bea8:	2e00      	cmp	r6, #0
 800beaa:	dd03      	ble.n	800beb4 <__multiply+0x8c>
 800beac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d055      	beq.n	800bf60 <__multiply+0x138>
 800beb4:	6106      	str	r6, [r0, #16]
 800beb6:	b005      	add	sp, #20
 800beb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bebc:	f843 2b04 	str.w	r2, [r3], #4
 800bec0:	e7d9      	b.n	800be76 <__multiply+0x4e>
 800bec2:	f8b1 a000 	ldrh.w	sl, [r1]
 800bec6:	f1ba 0f00 	cmp.w	sl, #0
 800beca:	d01f      	beq.n	800bf0c <__multiply+0xe4>
 800becc:	46c4      	mov	ip, r8
 800bece:	46a1      	mov	r9, r4
 800bed0:	2700      	movs	r7, #0
 800bed2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bed6:	f8d9 3000 	ldr.w	r3, [r9]
 800beda:	fa1f fb82 	uxth.w	fp, r2
 800bede:	b29b      	uxth	r3, r3
 800bee0:	fb0a 330b 	mla	r3, sl, fp, r3
 800bee4:	443b      	add	r3, r7
 800bee6:	f8d9 7000 	ldr.w	r7, [r9]
 800beea:	0c12      	lsrs	r2, r2, #16
 800beec:	0c3f      	lsrs	r7, r7, #16
 800beee:	fb0a 7202 	mla	r2, sl, r2, r7
 800bef2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800bef6:	b29b      	uxth	r3, r3
 800bef8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800befc:	4565      	cmp	r5, ip
 800befe:	f849 3b04 	str.w	r3, [r9], #4
 800bf02:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bf06:	d8e4      	bhi.n	800bed2 <__multiply+0xaa>
 800bf08:	9b01      	ldr	r3, [sp, #4]
 800bf0a:	50e7      	str	r7, [r4, r3]
 800bf0c:	9b03      	ldr	r3, [sp, #12]
 800bf0e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bf12:	3104      	adds	r1, #4
 800bf14:	f1b9 0f00 	cmp.w	r9, #0
 800bf18:	d020      	beq.n	800bf5c <__multiply+0x134>
 800bf1a:	6823      	ldr	r3, [r4, #0]
 800bf1c:	4647      	mov	r7, r8
 800bf1e:	46a4      	mov	ip, r4
 800bf20:	f04f 0a00 	mov.w	sl, #0
 800bf24:	f8b7 b000 	ldrh.w	fp, [r7]
 800bf28:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bf2c:	fb09 220b 	mla	r2, r9, fp, r2
 800bf30:	4452      	add	r2, sl
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf38:	f84c 3b04 	str.w	r3, [ip], #4
 800bf3c:	f857 3b04 	ldr.w	r3, [r7], #4
 800bf40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf44:	f8bc 3000 	ldrh.w	r3, [ip]
 800bf48:	fb09 330a 	mla	r3, r9, sl, r3
 800bf4c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800bf50:	42bd      	cmp	r5, r7
 800bf52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf56:	d8e5      	bhi.n	800bf24 <__multiply+0xfc>
 800bf58:	9a01      	ldr	r2, [sp, #4]
 800bf5a:	50a3      	str	r3, [r4, r2]
 800bf5c:	3404      	adds	r4, #4
 800bf5e:	e79f      	b.n	800bea0 <__multiply+0x78>
 800bf60:	3e01      	subs	r6, #1
 800bf62:	e7a1      	b.n	800bea8 <__multiply+0x80>
 800bf64:	0800d3df 	.word	0x0800d3df
 800bf68:	0800d450 	.word	0x0800d450

0800bf6c <__pow5mult>:
 800bf6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf70:	4615      	mov	r5, r2
 800bf72:	f012 0203 	ands.w	r2, r2, #3
 800bf76:	4607      	mov	r7, r0
 800bf78:	460e      	mov	r6, r1
 800bf7a:	d007      	beq.n	800bf8c <__pow5mult+0x20>
 800bf7c:	4c25      	ldr	r4, [pc, #148]	@ (800c014 <__pow5mult+0xa8>)
 800bf7e:	3a01      	subs	r2, #1
 800bf80:	2300      	movs	r3, #0
 800bf82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bf86:	f7ff fe5d 	bl	800bc44 <__multadd>
 800bf8a:	4606      	mov	r6, r0
 800bf8c:	10ad      	asrs	r5, r5, #2
 800bf8e:	d03d      	beq.n	800c00c <__pow5mult+0xa0>
 800bf90:	69fc      	ldr	r4, [r7, #28]
 800bf92:	b97c      	cbnz	r4, 800bfb4 <__pow5mult+0x48>
 800bf94:	2010      	movs	r0, #16
 800bf96:	f7ff fd2b 	bl	800b9f0 <malloc>
 800bf9a:	4602      	mov	r2, r0
 800bf9c:	61f8      	str	r0, [r7, #28]
 800bf9e:	b928      	cbnz	r0, 800bfac <__pow5mult+0x40>
 800bfa0:	4b1d      	ldr	r3, [pc, #116]	@ (800c018 <__pow5mult+0xac>)
 800bfa2:	481e      	ldr	r0, [pc, #120]	@ (800c01c <__pow5mult+0xb0>)
 800bfa4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bfa8:	f000 ff10 	bl	800cdcc <__assert_func>
 800bfac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bfb0:	6004      	str	r4, [r0, #0]
 800bfb2:	60c4      	str	r4, [r0, #12]
 800bfb4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bfb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bfbc:	b94c      	cbnz	r4, 800bfd2 <__pow5mult+0x66>
 800bfbe:	f240 2171 	movw	r1, #625	@ 0x271
 800bfc2:	4638      	mov	r0, r7
 800bfc4:	f7ff ff1a 	bl	800bdfc <__i2b>
 800bfc8:	2300      	movs	r3, #0
 800bfca:	f8c8 0008 	str.w	r0, [r8, #8]
 800bfce:	4604      	mov	r4, r0
 800bfd0:	6003      	str	r3, [r0, #0]
 800bfd2:	f04f 0900 	mov.w	r9, #0
 800bfd6:	07eb      	lsls	r3, r5, #31
 800bfd8:	d50a      	bpl.n	800bff0 <__pow5mult+0x84>
 800bfda:	4631      	mov	r1, r6
 800bfdc:	4622      	mov	r2, r4
 800bfde:	4638      	mov	r0, r7
 800bfe0:	f7ff ff22 	bl	800be28 <__multiply>
 800bfe4:	4631      	mov	r1, r6
 800bfe6:	4680      	mov	r8, r0
 800bfe8:	4638      	mov	r0, r7
 800bfea:	f7ff fe09 	bl	800bc00 <_Bfree>
 800bfee:	4646      	mov	r6, r8
 800bff0:	106d      	asrs	r5, r5, #1
 800bff2:	d00b      	beq.n	800c00c <__pow5mult+0xa0>
 800bff4:	6820      	ldr	r0, [r4, #0]
 800bff6:	b938      	cbnz	r0, 800c008 <__pow5mult+0x9c>
 800bff8:	4622      	mov	r2, r4
 800bffa:	4621      	mov	r1, r4
 800bffc:	4638      	mov	r0, r7
 800bffe:	f7ff ff13 	bl	800be28 <__multiply>
 800c002:	6020      	str	r0, [r4, #0]
 800c004:	f8c0 9000 	str.w	r9, [r0]
 800c008:	4604      	mov	r4, r0
 800c00a:	e7e4      	b.n	800bfd6 <__pow5mult+0x6a>
 800c00c:	4630      	mov	r0, r6
 800c00e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c012:	bf00      	nop
 800c014:	0800d64c 	.word	0x0800d64c
 800c018:	0800d370 	.word	0x0800d370
 800c01c:	0800d450 	.word	0x0800d450

0800c020 <__lshift>:
 800c020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c024:	460c      	mov	r4, r1
 800c026:	6849      	ldr	r1, [r1, #4]
 800c028:	6923      	ldr	r3, [r4, #16]
 800c02a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c02e:	68a3      	ldr	r3, [r4, #8]
 800c030:	4607      	mov	r7, r0
 800c032:	4691      	mov	r9, r2
 800c034:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c038:	f108 0601 	add.w	r6, r8, #1
 800c03c:	42b3      	cmp	r3, r6
 800c03e:	db0b      	blt.n	800c058 <__lshift+0x38>
 800c040:	4638      	mov	r0, r7
 800c042:	f7ff fd9d 	bl	800bb80 <_Balloc>
 800c046:	4605      	mov	r5, r0
 800c048:	b948      	cbnz	r0, 800c05e <__lshift+0x3e>
 800c04a:	4602      	mov	r2, r0
 800c04c:	4b28      	ldr	r3, [pc, #160]	@ (800c0f0 <__lshift+0xd0>)
 800c04e:	4829      	ldr	r0, [pc, #164]	@ (800c0f4 <__lshift+0xd4>)
 800c050:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c054:	f000 feba 	bl	800cdcc <__assert_func>
 800c058:	3101      	adds	r1, #1
 800c05a:	005b      	lsls	r3, r3, #1
 800c05c:	e7ee      	b.n	800c03c <__lshift+0x1c>
 800c05e:	2300      	movs	r3, #0
 800c060:	f100 0114 	add.w	r1, r0, #20
 800c064:	f100 0210 	add.w	r2, r0, #16
 800c068:	4618      	mov	r0, r3
 800c06a:	4553      	cmp	r3, sl
 800c06c:	db33      	blt.n	800c0d6 <__lshift+0xb6>
 800c06e:	6920      	ldr	r0, [r4, #16]
 800c070:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c074:	f104 0314 	add.w	r3, r4, #20
 800c078:	f019 091f 	ands.w	r9, r9, #31
 800c07c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c080:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c084:	d02b      	beq.n	800c0de <__lshift+0xbe>
 800c086:	f1c9 0e20 	rsb	lr, r9, #32
 800c08a:	468a      	mov	sl, r1
 800c08c:	2200      	movs	r2, #0
 800c08e:	6818      	ldr	r0, [r3, #0]
 800c090:	fa00 f009 	lsl.w	r0, r0, r9
 800c094:	4310      	orrs	r0, r2
 800c096:	f84a 0b04 	str.w	r0, [sl], #4
 800c09a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c09e:	459c      	cmp	ip, r3
 800c0a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800c0a4:	d8f3      	bhi.n	800c08e <__lshift+0x6e>
 800c0a6:	ebac 0304 	sub.w	r3, ip, r4
 800c0aa:	3b15      	subs	r3, #21
 800c0ac:	f023 0303 	bic.w	r3, r3, #3
 800c0b0:	3304      	adds	r3, #4
 800c0b2:	f104 0015 	add.w	r0, r4, #21
 800c0b6:	4560      	cmp	r0, ip
 800c0b8:	bf88      	it	hi
 800c0ba:	2304      	movhi	r3, #4
 800c0bc:	50ca      	str	r2, [r1, r3]
 800c0be:	b10a      	cbz	r2, 800c0c4 <__lshift+0xa4>
 800c0c0:	f108 0602 	add.w	r6, r8, #2
 800c0c4:	3e01      	subs	r6, #1
 800c0c6:	4638      	mov	r0, r7
 800c0c8:	612e      	str	r6, [r5, #16]
 800c0ca:	4621      	mov	r1, r4
 800c0cc:	f7ff fd98 	bl	800bc00 <_Bfree>
 800c0d0:	4628      	mov	r0, r5
 800c0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c0da:	3301      	adds	r3, #1
 800c0dc:	e7c5      	b.n	800c06a <__lshift+0x4a>
 800c0de:	3904      	subs	r1, #4
 800c0e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c0e8:	459c      	cmp	ip, r3
 800c0ea:	d8f9      	bhi.n	800c0e0 <__lshift+0xc0>
 800c0ec:	e7ea      	b.n	800c0c4 <__lshift+0xa4>
 800c0ee:	bf00      	nop
 800c0f0:	0800d3df 	.word	0x0800d3df
 800c0f4:	0800d450 	.word	0x0800d450

0800c0f8 <__mcmp>:
 800c0f8:	690a      	ldr	r2, [r1, #16]
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	6900      	ldr	r0, [r0, #16]
 800c0fe:	1a80      	subs	r0, r0, r2
 800c100:	b530      	push	{r4, r5, lr}
 800c102:	d10e      	bne.n	800c122 <__mcmp+0x2a>
 800c104:	3314      	adds	r3, #20
 800c106:	3114      	adds	r1, #20
 800c108:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c10c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c110:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c114:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c118:	4295      	cmp	r5, r2
 800c11a:	d003      	beq.n	800c124 <__mcmp+0x2c>
 800c11c:	d205      	bcs.n	800c12a <__mcmp+0x32>
 800c11e:	f04f 30ff 	mov.w	r0, #4294967295
 800c122:	bd30      	pop	{r4, r5, pc}
 800c124:	42a3      	cmp	r3, r4
 800c126:	d3f3      	bcc.n	800c110 <__mcmp+0x18>
 800c128:	e7fb      	b.n	800c122 <__mcmp+0x2a>
 800c12a:	2001      	movs	r0, #1
 800c12c:	e7f9      	b.n	800c122 <__mcmp+0x2a>
	...

0800c130 <__mdiff>:
 800c130:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c134:	4689      	mov	r9, r1
 800c136:	4606      	mov	r6, r0
 800c138:	4611      	mov	r1, r2
 800c13a:	4648      	mov	r0, r9
 800c13c:	4614      	mov	r4, r2
 800c13e:	f7ff ffdb 	bl	800c0f8 <__mcmp>
 800c142:	1e05      	subs	r5, r0, #0
 800c144:	d112      	bne.n	800c16c <__mdiff+0x3c>
 800c146:	4629      	mov	r1, r5
 800c148:	4630      	mov	r0, r6
 800c14a:	f7ff fd19 	bl	800bb80 <_Balloc>
 800c14e:	4602      	mov	r2, r0
 800c150:	b928      	cbnz	r0, 800c15e <__mdiff+0x2e>
 800c152:	4b3f      	ldr	r3, [pc, #252]	@ (800c250 <__mdiff+0x120>)
 800c154:	f240 2137 	movw	r1, #567	@ 0x237
 800c158:	483e      	ldr	r0, [pc, #248]	@ (800c254 <__mdiff+0x124>)
 800c15a:	f000 fe37 	bl	800cdcc <__assert_func>
 800c15e:	2301      	movs	r3, #1
 800c160:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c164:	4610      	mov	r0, r2
 800c166:	b003      	add	sp, #12
 800c168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c16c:	bfbc      	itt	lt
 800c16e:	464b      	movlt	r3, r9
 800c170:	46a1      	movlt	r9, r4
 800c172:	4630      	mov	r0, r6
 800c174:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c178:	bfba      	itte	lt
 800c17a:	461c      	movlt	r4, r3
 800c17c:	2501      	movlt	r5, #1
 800c17e:	2500      	movge	r5, #0
 800c180:	f7ff fcfe 	bl	800bb80 <_Balloc>
 800c184:	4602      	mov	r2, r0
 800c186:	b918      	cbnz	r0, 800c190 <__mdiff+0x60>
 800c188:	4b31      	ldr	r3, [pc, #196]	@ (800c250 <__mdiff+0x120>)
 800c18a:	f240 2145 	movw	r1, #581	@ 0x245
 800c18e:	e7e3      	b.n	800c158 <__mdiff+0x28>
 800c190:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c194:	6926      	ldr	r6, [r4, #16]
 800c196:	60c5      	str	r5, [r0, #12]
 800c198:	f109 0310 	add.w	r3, r9, #16
 800c19c:	f109 0514 	add.w	r5, r9, #20
 800c1a0:	f104 0e14 	add.w	lr, r4, #20
 800c1a4:	f100 0b14 	add.w	fp, r0, #20
 800c1a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c1ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c1b0:	9301      	str	r3, [sp, #4]
 800c1b2:	46d9      	mov	r9, fp
 800c1b4:	f04f 0c00 	mov.w	ip, #0
 800c1b8:	9b01      	ldr	r3, [sp, #4]
 800c1ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c1be:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c1c2:	9301      	str	r3, [sp, #4]
 800c1c4:	fa1f f38a 	uxth.w	r3, sl
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	b283      	uxth	r3, r0
 800c1cc:	1acb      	subs	r3, r1, r3
 800c1ce:	0c00      	lsrs	r0, r0, #16
 800c1d0:	4463      	add	r3, ip
 800c1d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c1d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c1da:	b29b      	uxth	r3, r3
 800c1dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c1e0:	4576      	cmp	r6, lr
 800c1e2:	f849 3b04 	str.w	r3, [r9], #4
 800c1e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c1ea:	d8e5      	bhi.n	800c1b8 <__mdiff+0x88>
 800c1ec:	1b33      	subs	r3, r6, r4
 800c1ee:	3b15      	subs	r3, #21
 800c1f0:	f023 0303 	bic.w	r3, r3, #3
 800c1f4:	3415      	adds	r4, #21
 800c1f6:	3304      	adds	r3, #4
 800c1f8:	42a6      	cmp	r6, r4
 800c1fa:	bf38      	it	cc
 800c1fc:	2304      	movcc	r3, #4
 800c1fe:	441d      	add	r5, r3
 800c200:	445b      	add	r3, fp
 800c202:	461e      	mov	r6, r3
 800c204:	462c      	mov	r4, r5
 800c206:	4544      	cmp	r4, r8
 800c208:	d30e      	bcc.n	800c228 <__mdiff+0xf8>
 800c20a:	f108 0103 	add.w	r1, r8, #3
 800c20e:	1b49      	subs	r1, r1, r5
 800c210:	f021 0103 	bic.w	r1, r1, #3
 800c214:	3d03      	subs	r5, #3
 800c216:	45a8      	cmp	r8, r5
 800c218:	bf38      	it	cc
 800c21a:	2100      	movcc	r1, #0
 800c21c:	440b      	add	r3, r1
 800c21e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c222:	b191      	cbz	r1, 800c24a <__mdiff+0x11a>
 800c224:	6117      	str	r7, [r2, #16]
 800c226:	e79d      	b.n	800c164 <__mdiff+0x34>
 800c228:	f854 1b04 	ldr.w	r1, [r4], #4
 800c22c:	46e6      	mov	lr, ip
 800c22e:	0c08      	lsrs	r0, r1, #16
 800c230:	fa1c fc81 	uxtah	ip, ip, r1
 800c234:	4471      	add	r1, lr
 800c236:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c23a:	b289      	uxth	r1, r1
 800c23c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c240:	f846 1b04 	str.w	r1, [r6], #4
 800c244:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c248:	e7dd      	b.n	800c206 <__mdiff+0xd6>
 800c24a:	3f01      	subs	r7, #1
 800c24c:	e7e7      	b.n	800c21e <__mdiff+0xee>
 800c24e:	bf00      	nop
 800c250:	0800d3df 	.word	0x0800d3df
 800c254:	0800d450 	.word	0x0800d450

0800c258 <__ulp>:
 800c258:	b082      	sub	sp, #8
 800c25a:	ed8d 0b00 	vstr	d0, [sp]
 800c25e:	9a01      	ldr	r2, [sp, #4]
 800c260:	4b0f      	ldr	r3, [pc, #60]	@ (800c2a0 <__ulp+0x48>)
 800c262:	4013      	ands	r3, r2
 800c264:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c268:	2b00      	cmp	r3, #0
 800c26a:	dc08      	bgt.n	800c27e <__ulp+0x26>
 800c26c:	425b      	negs	r3, r3
 800c26e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c272:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c276:	da04      	bge.n	800c282 <__ulp+0x2a>
 800c278:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c27c:	4113      	asrs	r3, r2
 800c27e:	2200      	movs	r2, #0
 800c280:	e008      	b.n	800c294 <__ulp+0x3c>
 800c282:	f1a2 0314 	sub.w	r3, r2, #20
 800c286:	2b1e      	cmp	r3, #30
 800c288:	bfda      	itte	le
 800c28a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c28e:	40da      	lsrle	r2, r3
 800c290:	2201      	movgt	r2, #1
 800c292:	2300      	movs	r3, #0
 800c294:	4619      	mov	r1, r3
 800c296:	4610      	mov	r0, r2
 800c298:	ec41 0b10 	vmov	d0, r0, r1
 800c29c:	b002      	add	sp, #8
 800c29e:	4770      	bx	lr
 800c2a0:	7ff00000 	.word	0x7ff00000

0800c2a4 <__b2d>:
 800c2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2a8:	6906      	ldr	r6, [r0, #16]
 800c2aa:	f100 0814 	add.w	r8, r0, #20
 800c2ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c2b2:	1f37      	subs	r7, r6, #4
 800c2b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c2b8:	4610      	mov	r0, r2
 800c2ba:	f7ff fd53 	bl	800bd64 <__hi0bits>
 800c2be:	f1c0 0320 	rsb	r3, r0, #32
 800c2c2:	280a      	cmp	r0, #10
 800c2c4:	600b      	str	r3, [r1, #0]
 800c2c6:	491b      	ldr	r1, [pc, #108]	@ (800c334 <__b2d+0x90>)
 800c2c8:	dc15      	bgt.n	800c2f6 <__b2d+0x52>
 800c2ca:	f1c0 0c0b 	rsb	ip, r0, #11
 800c2ce:	fa22 f30c 	lsr.w	r3, r2, ip
 800c2d2:	45b8      	cmp	r8, r7
 800c2d4:	ea43 0501 	orr.w	r5, r3, r1
 800c2d8:	bf34      	ite	cc
 800c2da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c2de:	2300      	movcs	r3, #0
 800c2e0:	3015      	adds	r0, #21
 800c2e2:	fa02 f000 	lsl.w	r0, r2, r0
 800c2e6:	fa23 f30c 	lsr.w	r3, r3, ip
 800c2ea:	4303      	orrs	r3, r0
 800c2ec:	461c      	mov	r4, r3
 800c2ee:	ec45 4b10 	vmov	d0, r4, r5
 800c2f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2f6:	45b8      	cmp	r8, r7
 800c2f8:	bf3a      	itte	cc
 800c2fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c2fe:	f1a6 0708 	subcc.w	r7, r6, #8
 800c302:	2300      	movcs	r3, #0
 800c304:	380b      	subs	r0, #11
 800c306:	d012      	beq.n	800c32e <__b2d+0x8a>
 800c308:	f1c0 0120 	rsb	r1, r0, #32
 800c30c:	fa23 f401 	lsr.w	r4, r3, r1
 800c310:	4082      	lsls	r2, r0
 800c312:	4322      	orrs	r2, r4
 800c314:	4547      	cmp	r7, r8
 800c316:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c31a:	bf8c      	ite	hi
 800c31c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c320:	2200      	movls	r2, #0
 800c322:	4083      	lsls	r3, r0
 800c324:	40ca      	lsrs	r2, r1
 800c326:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c32a:	4313      	orrs	r3, r2
 800c32c:	e7de      	b.n	800c2ec <__b2d+0x48>
 800c32e:	ea42 0501 	orr.w	r5, r2, r1
 800c332:	e7db      	b.n	800c2ec <__b2d+0x48>
 800c334:	3ff00000 	.word	0x3ff00000

0800c338 <__d2b>:
 800c338:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c33c:	460f      	mov	r7, r1
 800c33e:	2101      	movs	r1, #1
 800c340:	ec59 8b10 	vmov	r8, r9, d0
 800c344:	4616      	mov	r6, r2
 800c346:	f7ff fc1b 	bl	800bb80 <_Balloc>
 800c34a:	4604      	mov	r4, r0
 800c34c:	b930      	cbnz	r0, 800c35c <__d2b+0x24>
 800c34e:	4602      	mov	r2, r0
 800c350:	4b23      	ldr	r3, [pc, #140]	@ (800c3e0 <__d2b+0xa8>)
 800c352:	4824      	ldr	r0, [pc, #144]	@ (800c3e4 <__d2b+0xac>)
 800c354:	f240 310f 	movw	r1, #783	@ 0x30f
 800c358:	f000 fd38 	bl	800cdcc <__assert_func>
 800c35c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c360:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c364:	b10d      	cbz	r5, 800c36a <__d2b+0x32>
 800c366:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c36a:	9301      	str	r3, [sp, #4]
 800c36c:	f1b8 0300 	subs.w	r3, r8, #0
 800c370:	d023      	beq.n	800c3ba <__d2b+0x82>
 800c372:	4668      	mov	r0, sp
 800c374:	9300      	str	r3, [sp, #0]
 800c376:	f7ff fd14 	bl	800bda2 <__lo0bits>
 800c37a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c37e:	b1d0      	cbz	r0, 800c3b6 <__d2b+0x7e>
 800c380:	f1c0 0320 	rsb	r3, r0, #32
 800c384:	fa02 f303 	lsl.w	r3, r2, r3
 800c388:	430b      	orrs	r3, r1
 800c38a:	40c2      	lsrs	r2, r0
 800c38c:	6163      	str	r3, [r4, #20]
 800c38e:	9201      	str	r2, [sp, #4]
 800c390:	9b01      	ldr	r3, [sp, #4]
 800c392:	61a3      	str	r3, [r4, #24]
 800c394:	2b00      	cmp	r3, #0
 800c396:	bf0c      	ite	eq
 800c398:	2201      	moveq	r2, #1
 800c39a:	2202      	movne	r2, #2
 800c39c:	6122      	str	r2, [r4, #16]
 800c39e:	b1a5      	cbz	r5, 800c3ca <__d2b+0x92>
 800c3a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c3a4:	4405      	add	r5, r0
 800c3a6:	603d      	str	r5, [r7, #0]
 800c3a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c3ac:	6030      	str	r0, [r6, #0]
 800c3ae:	4620      	mov	r0, r4
 800c3b0:	b003      	add	sp, #12
 800c3b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3b6:	6161      	str	r1, [r4, #20]
 800c3b8:	e7ea      	b.n	800c390 <__d2b+0x58>
 800c3ba:	a801      	add	r0, sp, #4
 800c3bc:	f7ff fcf1 	bl	800bda2 <__lo0bits>
 800c3c0:	9b01      	ldr	r3, [sp, #4]
 800c3c2:	6163      	str	r3, [r4, #20]
 800c3c4:	3020      	adds	r0, #32
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	e7e8      	b.n	800c39c <__d2b+0x64>
 800c3ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c3ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c3d2:	6038      	str	r0, [r7, #0]
 800c3d4:	6918      	ldr	r0, [r3, #16]
 800c3d6:	f7ff fcc5 	bl	800bd64 <__hi0bits>
 800c3da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c3de:	e7e5      	b.n	800c3ac <__d2b+0x74>
 800c3e0:	0800d3df 	.word	0x0800d3df
 800c3e4:	0800d450 	.word	0x0800d450

0800c3e8 <__ratio>:
 800c3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ec:	b085      	sub	sp, #20
 800c3ee:	e9cd 1000 	strd	r1, r0, [sp]
 800c3f2:	a902      	add	r1, sp, #8
 800c3f4:	f7ff ff56 	bl	800c2a4 <__b2d>
 800c3f8:	9800      	ldr	r0, [sp, #0]
 800c3fa:	a903      	add	r1, sp, #12
 800c3fc:	ec55 4b10 	vmov	r4, r5, d0
 800c400:	f7ff ff50 	bl	800c2a4 <__b2d>
 800c404:	9b01      	ldr	r3, [sp, #4]
 800c406:	6919      	ldr	r1, [r3, #16]
 800c408:	9b00      	ldr	r3, [sp, #0]
 800c40a:	691b      	ldr	r3, [r3, #16]
 800c40c:	1ac9      	subs	r1, r1, r3
 800c40e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c412:	1a9b      	subs	r3, r3, r2
 800c414:	ec5b ab10 	vmov	sl, fp, d0
 800c418:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	bfce      	itee	gt
 800c420:	462a      	movgt	r2, r5
 800c422:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c426:	465a      	movle	r2, fp
 800c428:	462f      	mov	r7, r5
 800c42a:	46d9      	mov	r9, fp
 800c42c:	bfcc      	ite	gt
 800c42e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c432:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c436:	464b      	mov	r3, r9
 800c438:	4652      	mov	r2, sl
 800c43a:	4620      	mov	r0, r4
 800c43c:	4639      	mov	r1, r7
 800c43e:	f7f4 fa25 	bl	800088c <__aeabi_ddiv>
 800c442:	ec41 0b10 	vmov	d0, r0, r1
 800c446:	b005      	add	sp, #20
 800c448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c44c <__copybits>:
 800c44c:	3901      	subs	r1, #1
 800c44e:	b570      	push	{r4, r5, r6, lr}
 800c450:	1149      	asrs	r1, r1, #5
 800c452:	6914      	ldr	r4, [r2, #16]
 800c454:	3101      	adds	r1, #1
 800c456:	f102 0314 	add.w	r3, r2, #20
 800c45a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c45e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c462:	1f05      	subs	r5, r0, #4
 800c464:	42a3      	cmp	r3, r4
 800c466:	d30c      	bcc.n	800c482 <__copybits+0x36>
 800c468:	1aa3      	subs	r3, r4, r2
 800c46a:	3b11      	subs	r3, #17
 800c46c:	f023 0303 	bic.w	r3, r3, #3
 800c470:	3211      	adds	r2, #17
 800c472:	42a2      	cmp	r2, r4
 800c474:	bf88      	it	hi
 800c476:	2300      	movhi	r3, #0
 800c478:	4418      	add	r0, r3
 800c47a:	2300      	movs	r3, #0
 800c47c:	4288      	cmp	r0, r1
 800c47e:	d305      	bcc.n	800c48c <__copybits+0x40>
 800c480:	bd70      	pop	{r4, r5, r6, pc}
 800c482:	f853 6b04 	ldr.w	r6, [r3], #4
 800c486:	f845 6f04 	str.w	r6, [r5, #4]!
 800c48a:	e7eb      	b.n	800c464 <__copybits+0x18>
 800c48c:	f840 3b04 	str.w	r3, [r0], #4
 800c490:	e7f4      	b.n	800c47c <__copybits+0x30>

0800c492 <__any_on>:
 800c492:	f100 0214 	add.w	r2, r0, #20
 800c496:	6900      	ldr	r0, [r0, #16]
 800c498:	114b      	asrs	r3, r1, #5
 800c49a:	4298      	cmp	r0, r3
 800c49c:	b510      	push	{r4, lr}
 800c49e:	db11      	blt.n	800c4c4 <__any_on+0x32>
 800c4a0:	dd0a      	ble.n	800c4b8 <__any_on+0x26>
 800c4a2:	f011 011f 	ands.w	r1, r1, #31
 800c4a6:	d007      	beq.n	800c4b8 <__any_on+0x26>
 800c4a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c4ac:	fa24 f001 	lsr.w	r0, r4, r1
 800c4b0:	fa00 f101 	lsl.w	r1, r0, r1
 800c4b4:	428c      	cmp	r4, r1
 800c4b6:	d10b      	bne.n	800c4d0 <__any_on+0x3e>
 800c4b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d803      	bhi.n	800c4c8 <__any_on+0x36>
 800c4c0:	2000      	movs	r0, #0
 800c4c2:	bd10      	pop	{r4, pc}
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	e7f7      	b.n	800c4b8 <__any_on+0x26>
 800c4c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c4cc:	2900      	cmp	r1, #0
 800c4ce:	d0f5      	beq.n	800c4bc <__any_on+0x2a>
 800c4d0:	2001      	movs	r0, #1
 800c4d2:	e7f6      	b.n	800c4c2 <__any_on+0x30>

0800c4d4 <_strtol_l.isra.0>:
 800c4d4:	2b24      	cmp	r3, #36	@ 0x24
 800c4d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4da:	4686      	mov	lr, r0
 800c4dc:	4690      	mov	r8, r2
 800c4de:	d801      	bhi.n	800c4e4 <_strtol_l.isra.0+0x10>
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d106      	bne.n	800c4f2 <_strtol_l.isra.0+0x1e>
 800c4e4:	f7fe f85a 	bl	800a59c <__errno>
 800c4e8:	2316      	movs	r3, #22
 800c4ea:	6003      	str	r3, [r0, #0]
 800c4ec:	2000      	movs	r0, #0
 800c4ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4f2:	4834      	ldr	r0, [pc, #208]	@ (800c5c4 <_strtol_l.isra.0+0xf0>)
 800c4f4:	460d      	mov	r5, r1
 800c4f6:	462a      	mov	r2, r5
 800c4f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c4fc:	5d06      	ldrb	r6, [r0, r4]
 800c4fe:	f016 0608 	ands.w	r6, r6, #8
 800c502:	d1f8      	bne.n	800c4f6 <_strtol_l.isra.0+0x22>
 800c504:	2c2d      	cmp	r4, #45	@ 0x2d
 800c506:	d110      	bne.n	800c52a <_strtol_l.isra.0+0x56>
 800c508:	782c      	ldrb	r4, [r5, #0]
 800c50a:	2601      	movs	r6, #1
 800c50c:	1c95      	adds	r5, r2, #2
 800c50e:	f033 0210 	bics.w	r2, r3, #16
 800c512:	d115      	bne.n	800c540 <_strtol_l.isra.0+0x6c>
 800c514:	2c30      	cmp	r4, #48	@ 0x30
 800c516:	d10d      	bne.n	800c534 <_strtol_l.isra.0+0x60>
 800c518:	782a      	ldrb	r2, [r5, #0]
 800c51a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c51e:	2a58      	cmp	r2, #88	@ 0x58
 800c520:	d108      	bne.n	800c534 <_strtol_l.isra.0+0x60>
 800c522:	786c      	ldrb	r4, [r5, #1]
 800c524:	3502      	adds	r5, #2
 800c526:	2310      	movs	r3, #16
 800c528:	e00a      	b.n	800c540 <_strtol_l.isra.0+0x6c>
 800c52a:	2c2b      	cmp	r4, #43	@ 0x2b
 800c52c:	bf04      	itt	eq
 800c52e:	782c      	ldrbeq	r4, [r5, #0]
 800c530:	1c95      	addeq	r5, r2, #2
 800c532:	e7ec      	b.n	800c50e <_strtol_l.isra.0+0x3a>
 800c534:	2b00      	cmp	r3, #0
 800c536:	d1f6      	bne.n	800c526 <_strtol_l.isra.0+0x52>
 800c538:	2c30      	cmp	r4, #48	@ 0x30
 800c53a:	bf14      	ite	ne
 800c53c:	230a      	movne	r3, #10
 800c53e:	2308      	moveq	r3, #8
 800c540:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c544:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c548:	2200      	movs	r2, #0
 800c54a:	fbbc f9f3 	udiv	r9, ip, r3
 800c54e:	4610      	mov	r0, r2
 800c550:	fb03 ca19 	mls	sl, r3, r9, ip
 800c554:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c558:	2f09      	cmp	r7, #9
 800c55a:	d80f      	bhi.n	800c57c <_strtol_l.isra.0+0xa8>
 800c55c:	463c      	mov	r4, r7
 800c55e:	42a3      	cmp	r3, r4
 800c560:	dd1b      	ble.n	800c59a <_strtol_l.isra.0+0xc6>
 800c562:	1c57      	adds	r7, r2, #1
 800c564:	d007      	beq.n	800c576 <_strtol_l.isra.0+0xa2>
 800c566:	4581      	cmp	r9, r0
 800c568:	d314      	bcc.n	800c594 <_strtol_l.isra.0+0xc0>
 800c56a:	d101      	bne.n	800c570 <_strtol_l.isra.0+0x9c>
 800c56c:	45a2      	cmp	sl, r4
 800c56e:	db11      	blt.n	800c594 <_strtol_l.isra.0+0xc0>
 800c570:	fb00 4003 	mla	r0, r0, r3, r4
 800c574:	2201      	movs	r2, #1
 800c576:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c57a:	e7eb      	b.n	800c554 <_strtol_l.isra.0+0x80>
 800c57c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c580:	2f19      	cmp	r7, #25
 800c582:	d801      	bhi.n	800c588 <_strtol_l.isra.0+0xb4>
 800c584:	3c37      	subs	r4, #55	@ 0x37
 800c586:	e7ea      	b.n	800c55e <_strtol_l.isra.0+0x8a>
 800c588:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c58c:	2f19      	cmp	r7, #25
 800c58e:	d804      	bhi.n	800c59a <_strtol_l.isra.0+0xc6>
 800c590:	3c57      	subs	r4, #87	@ 0x57
 800c592:	e7e4      	b.n	800c55e <_strtol_l.isra.0+0x8a>
 800c594:	f04f 32ff 	mov.w	r2, #4294967295
 800c598:	e7ed      	b.n	800c576 <_strtol_l.isra.0+0xa2>
 800c59a:	1c53      	adds	r3, r2, #1
 800c59c:	d108      	bne.n	800c5b0 <_strtol_l.isra.0+0xdc>
 800c59e:	2322      	movs	r3, #34	@ 0x22
 800c5a0:	f8ce 3000 	str.w	r3, [lr]
 800c5a4:	4660      	mov	r0, ip
 800c5a6:	f1b8 0f00 	cmp.w	r8, #0
 800c5aa:	d0a0      	beq.n	800c4ee <_strtol_l.isra.0+0x1a>
 800c5ac:	1e69      	subs	r1, r5, #1
 800c5ae:	e006      	b.n	800c5be <_strtol_l.isra.0+0xea>
 800c5b0:	b106      	cbz	r6, 800c5b4 <_strtol_l.isra.0+0xe0>
 800c5b2:	4240      	negs	r0, r0
 800c5b4:	f1b8 0f00 	cmp.w	r8, #0
 800c5b8:	d099      	beq.n	800c4ee <_strtol_l.isra.0+0x1a>
 800c5ba:	2a00      	cmp	r2, #0
 800c5bc:	d1f6      	bne.n	800c5ac <_strtol_l.isra.0+0xd8>
 800c5be:	f8c8 1000 	str.w	r1, [r8]
 800c5c2:	e794      	b.n	800c4ee <_strtol_l.isra.0+0x1a>
 800c5c4:	0800d549 	.word	0x0800d549

0800c5c8 <_strtol_r>:
 800c5c8:	f7ff bf84 	b.w	800c4d4 <_strtol_l.isra.0>

0800c5cc <__ascii_wctomb>:
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	4608      	mov	r0, r1
 800c5d0:	b141      	cbz	r1, 800c5e4 <__ascii_wctomb+0x18>
 800c5d2:	2aff      	cmp	r2, #255	@ 0xff
 800c5d4:	d904      	bls.n	800c5e0 <__ascii_wctomb+0x14>
 800c5d6:	228a      	movs	r2, #138	@ 0x8a
 800c5d8:	601a      	str	r2, [r3, #0]
 800c5da:	f04f 30ff 	mov.w	r0, #4294967295
 800c5de:	4770      	bx	lr
 800c5e0:	700a      	strb	r2, [r1, #0]
 800c5e2:	2001      	movs	r0, #1
 800c5e4:	4770      	bx	lr

0800c5e6 <__ssputs_r>:
 800c5e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5ea:	688e      	ldr	r6, [r1, #8]
 800c5ec:	461f      	mov	r7, r3
 800c5ee:	42be      	cmp	r6, r7
 800c5f0:	680b      	ldr	r3, [r1, #0]
 800c5f2:	4682      	mov	sl, r0
 800c5f4:	460c      	mov	r4, r1
 800c5f6:	4690      	mov	r8, r2
 800c5f8:	d82d      	bhi.n	800c656 <__ssputs_r+0x70>
 800c5fa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c5fe:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c602:	d026      	beq.n	800c652 <__ssputs_r+0x6c>
 800c604:	6965      	ldr	r5, [r4, #20]
 800c606:	6909      	ldr	r1, [r1, #16]
 800c608:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c60c:	eba3 0901 	sub.w	r9, r3, r1
 800c610:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c614:	1c7b      	adds	r3, r7, #1
 800c616:	444b      	add	r3, r9
 800c618:	106d      	asrs	r5, r5, #1
 800c61a:	429d      	cmp	r5, r3
 800c61c:	bf38      	it	cc
 800c61e:	461d      	movcc	r5, r3
 800c620:	0553      	lsls	r3, r2, #21
 800c622:	d527      	bpl.n	800c674 <__ssputs_r+0x8e>
 800c624:	4629      	mov	r1, r5
 800c626:	f7ff fa0d 	bl	800ba44 <_malloc_r>
 800c62a:	4606      	mov	r6, r0
 800c62c:	b360      	cbz	r0, 800c688 <__ssputs_r+0xa2>
 800c62e:	6921      	ldr	r1, [r4, #16]
 800c630:	464a      	mov	r2, r9
 800c632:	f7fd ffe0 	bl	800a5f6 <memcpy>
 800c636:	89a3      	ldrh	r3, [r4, #12]
 800c638:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c63c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c640:	81a3      	strh	r3, [r4, #12]
 800c642:	6126      	str	r6, [r4, #16]
 800c644:	6165      	str	r5, [r4, #20]
 800c646:	444e      	add	r6, r9
 800c648:	eba5 0509 	sub.w	r5, r5, r9
 800c64c:	6026      	str	r6, [r4, #0]
 800c64e:	60a5      	str	r5, [r4, #8]
 800c650:	463e      	mov	r6, r7
 800c652:	42be      	cmp	r6, r7
 800c654:	d900      	bls.n	800c658 <__ssputs_r+0x72>
 800c656:	463e      	mov	r6, r7
 800c658:	6820      	ldr	r0, [r4, #0]
 800c65a:	4632      	mov	r2, r6
 800c65c:	4641      	mov	r1, r8
 800c65e:	f000 fb69 	bl	800cd34 <memmove>
 800c662:	68a3      	ldr	r3, [r4, #8]
 800c664:	1b9b      	subs	r3, r3, r6
 800c666:	60a3      	str	r3, [r4, #8]
 800c668:	6823      	ldr	r3, [r4, #0]
 800c66a:	4433      	add	r3, r6
 800c66c:	6023      	str	r3, [r4, #0]
 800c66e:	2000      	movs	r0, #0
 800c670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c674:	462a      	mov	r2, r5
 800c676:	f000 fbdb 	bl	800ce30 <_realloc_r>
 800c67a:	4606      	mov	r6, r0
 800c67c:	2800      	cmp	r0, #0
 800c67e:	d1e0      	bne.n	800c642 <__ssputs_r+0x5c>
 800c680:	6921      	ldr	r1, [r4, #16]
 800c682:	4650      	mov	r0, sl
 800c684:	f7fe fe30 	bl	800b2e8 <_free_r>
 800c688:	230c      	movs	r3, #12
 800c68a:	f8ca 3000 	str.w	r3, [sl]
 800c68e:	89a3      	ldrh	r3, [r4, #12]
 800c690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c694:	81a3      	strh	r3, [r4, #12]
 800c696:	f04f 30ff 	mov.w	r0, #4294967295
 800c69a:	e7e9      	b.n	800c670 <__ssputs_r+0x8a>

0800c69c <_svfiprintf_r>:
 800c69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6a0:	4698      	mov	r8, r3
 800c6a2:	898b      	ldrh	r3, [r1, #12]
 800c6a4:	061b      	lsls	r3, r3, #24
 800c6a6:	b09d      	sub	sp, #116	@ 0x74
 800c6a8:	4607      	mov	r7, r0
 800c6aa:	460d      	mov	r5, r1
 800c6ac:	4614      	mov	r4, r2
 800c6ae:	d510      	bpl.n	800c6d2 <_svfiprintf_r+0x36>
 800c6b0:	690b      	ldr	r3, [r1, #16]
 800c6b2:	b973      	cbnz	r3, 800c6d2 <_svfiprintf_r+0x36>
 800c6b4:	2140      	movs	r1, #64	@ 0x40
 800c6b6:	f7ff f9c5 	bl	800ba44 <_malloc_r>
 800c6ba:	6028      	str	r0, [r5, #0]
 800c6bc:	6128      	str	r0, [r5, #16]
 800c6be:	b930      	cbnz	r0, 800c6ce <_svfiprintf_r+0x32>
 800c6c0:	230c      	movs	r3, #12
 800c6c2:	603b      	str	r3, [r7, #0]
 800c6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6c8:	b01d      	add	sp, #116	@ 0x74
 800c6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ce:	2340      	movs	r3, #64	@ 0x40
 800c6d0:	616b      	str	r3, [r5, #20]
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6d6:	2320      	movs	r3, #32
 800c6d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c6dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6e0:	2330      	movs	r3, #48	@ 0x30
 800c6e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c880 <_svfiprintf_r+0x1e4>
 800c6e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c6ea:	f04f 0901 	mov.w	r9, #1
 800c6ee:	4623      	mov	r3, r4
 800c6f0:	469a      	mov	sl, r3
 800c6f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6f6:	b10a      	cbz	r2, 800c6fc <_svfiprintf_r+0x60>
 800c6f8:	2a25      	cmp	r2, #37	@ 0x25
 800c6fa:	d1f9      	bne.n	800c6f0 <_svfiprintf_r+0x54>
 800c6fc:	ebba 0b04 	subs.w	fp, sl, r4
 800c700:	d00b      	beq.n	800c71a <_svfiprintf_r+0x7e>
 800c702:	465b      	mov	r3, fp
 800c704:	4622      	mov	r2, r4
 800c706:	4629      	mov	r1, r5
 800c708:	4638      	mov	r0, r7
 800c70a:	f7ff ff6c 	bl	800c5e6 <__ssputs_r>
 800c70e:	3001      	adds	r0, #1
 800c710:	f000 80a7 	beq.w	800c862 <_svfiprintf_r+0x1c6>
 800c714:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c716:	445a      	add	r2, fp
 800c718:	9209      	str	r2, [sp, #36]	@ 0x24
 800c71a:	f89a 3000 	ldrb.w	r3, [sl]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	f000 809f 	beq.w	800c862 <_svfiprintf_r+0x1c6>
 800c724:	2300      	movs	r3, #0
 800c726:	f04f 32ff 	mov.w	r2, #4294967295
 800c72a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c72e:	f10a 0a01 	add.w	sl, sl, #1
 800c732:	9304      	str	r3, [sp, #16]
 800c734:	9307      	str	r3, [sp, #28]
 800c736:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c73a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c73c:	4654      	mov	r4, sl
 800c73e:	2205      	movs	r2, #5
 800c740:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c744:	484e      	ldr	r0, [pc, #312]	@ (800c880 <_svfiprintf_r+0x1e4>)
 800c746:	f7f3 fd63 	bl	8000210 <memchr>
 800c74a:	9a04      	ldr	r2, [sp, #16]
 800c74c:	b9d8      	cbnz	r0, 800c786 <_svfiprintf_r+0xea>
 800c74e:	06d0      	lsls	r0, r2, #27
 800c750:	bf44      	itt	mi
 800c752:	2320      	movmi	r3, #32
 800c754:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c758:	0711      	lsls	r1, r2, #28
 800c75a:	bf44      	itt	mi
 800c75c:	232b      	movmi	r3, #43	@ 0x2b
 800c75e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c762:	f89a 3000 	ldrb.w	r3, [sl]
 800c766:	2b2a      	cmp	r3, #42	@ 0x2a
 800c768:	d015      	beq.n	800c796 <_svfiprintf_r+0xfa>
 800c76a:	9a07      	ldr	r2, [sp, #28]
 800c76c:	4654      	mov	r4, sl
 800c76e:	2000      	movs	r0, #0
 800c770:	f04f 0c0a 	mov.w	ip, #10
 800c774:	4621      	mov	r1, r4
 800c776:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c77a:	3b30      	subs	r3, #48	@ 0x30
 800c77c:	2b09      	cmp	r3, #9
 800c77e:	d94b      	bls.n	800c818 <_svfiprintf_r+0x17c>
 800c780:	b1b0      	cbz	r0, 800c7b0 <_svfiprintf_r+0x114>
 800c782:	9207      	str	r2, [sp, #28]
 800c784:	e014      	b.n	800c7b0 <_svfiprintf_r+0x114>
 800c786:	eba0 0308 	sub.w	r3, r0, r8
 800c78a:	fa09 f303 	lsl.w	r3, r9, r3
 800c78e:	4313      	orrs	r3, r2
 800c790:	9304      	str	r3, [sp, #16]
 800c792:	46a2      	mov	sl, r4
 800c794:	e7d2      	b.n	800c73c <_svfiprintf_r+0xa0>
 800c796:	9b03      	ldr	r3, [sp, #12]
 800c798:	1d19      	adds	r1, r3, #4
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	9103      	str	r1, [sp, #12]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	bfbb      	ittet	lt
 800c7a2:	425b      	neglt	r3, r3
 800c7a4:	f042 0202 	orrlt.w	r2, r2, #2
 800c7a8:	9307      	strge	r3, [sp, #28]
 800c7aa:	9307      	strlt	r3, [sp, #28]
 800c7ac:	bfb8      	it	lt
 800c7ae:	9204      	strlt	r2, [sp, #16]
 800c7b0:	7823      	ldrb	r3, [r4, #0]
 800c7b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c7b4:	d10a      	bne.n	800c7cc <_svfiprintf_r+0x130>
 800c7b6:	7863      	ldrb	r3, [r4, #1]
 800c7b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7ba:	d132      	bne.n	800c822 <_svfiprintf_r+0x186>
 800c7bc:	9b03      	ldr	r3, [sp, #12]
 800c7be:	1d1a      	adds	r2, r3, #4
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	9203      	str	r2, [sp, #12]
 800c7c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c7c8:	3402      	adds	r4, #2
 800c7ca:	9305      	str	r3, [sp, #20]
 800c7cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c890 <_svfiprintf_r+0x1f4>
 800c7d0:	7821      	ldrb	r1, [r4, #0]
 800c7d2:	2203      	movs	r2, #3
 800c7d4:	4650      	mov	r0, sl
 800c7d6:	f7f3 fd1b 	bl	8000210 <memchr>
 800c7da:	b138      	cbz	r0, 800c7ec <_svfiprintf_r+0x150>
 800c7dc:	9b04      	ldr	r3, [sp, #16]
 800c7de:	eba0 000a 	sub.w	r0, r0, sl
 800c7e2:	2240      	movs	r2, #64	@ 0x40
 800c7e4:	4082      	lsls	r2, r0
 800c7e6:	4313      	orrs	r3, r2
 800c7e8:	3401      	adds	r4, #1
 800c7ea:	9304      	str	r3, [sp, #16]
 800c7ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7f0:	4824      	ldr	r0, [pc, #144]	@ (800c884 <_svfiprintf_r+0x1e8>)
 800c7f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c7f6:	2206      	movs	r2, #6
 800c7f8:	f7f3 fd0a 	bl	8000210 <memchr>
 800c7fc:	2800      	cmp	r0, #0
 800c7fe:	d036      	beq.n	800c86e <_svfiprintf_r+0x1d2>
 800c800:	4b21      	ldr	r3, [pc, #132]	@ (800c888 <_svfiprintf_r+0x1ec>)
 800c802:	bb1b      	cbnz	r3, 800c84c <_svfiprintf_r+0x1b0>
 800c804:	9b03      	ldr	r3, [sp, #12]
 800c806:	3307      	adds	r3, #7
 800c808:	f023 0307 	bic.w	r3, r3, #7
 800c80c:	3308      	adds	r3, #8
 800c80e:	9303      	str	r3, [sp, #12]
 800c810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c812:	4433      	add	r3, r6
 800c814:	9309      	str	r3, [sp, #36]	@ 0x24
 800c816:	e76a      	b.n	800c6ee <_svfiprintf_r+0x52>
 800c818:	fb0c 3202 	mla	r2, ip, r2, r3
 800c81c:	460c      	mov	r4, r1
 800c81e:	2001      	movs	r0, #1
 800c820:	e7a8      	b.n	800c774 <_svfiprintf_r+0xd8>
 800c822:	2300      	movs	r3, #0
 800c824:	3401      	adds	r4, #1
 800c826:	9305      	str	r3, [sp, #20]
 800c828:	4619      	mov	r1, r3
 800c82a:	f04f 0c0a 	mov.w	ip, #10
 800c82e:	4620      	mov	r0, r4
 800c830:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c834:	3a30      	subs	r2, #48	@ 0x30
 800c836:	2a09      	cmp	r2, #9
 800c838:	d903      	bls.n	800c842 <_svfiprintf_r+0x1a6>
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d0c6      	beq.n	800c7cc <_svfiprintf_r+0x130>
 800c83e:	9105      	str	r1, [sp, #20]
 800c840:	e7c4      	b.n	800c7cc <_svfiprintf_r+0x130>
 800c842:	fb0c 2101 	mla	r1, ip, r1, r2
 800c846:	4604      	mov	r4, r0
 800c848:	2301      	movs	r3, #1
 800c84a:	e7f0      	b.n	800c82e <_svfiprintf_r+0x192>
 800c84c:	ab03      	add	r3, sp, #12
 800c84e:	9300      	str	r3, [sp, #0]
 800c850:	462a      	mov	r2, r5
 800c852:	4b0e      	ldr	r3, [pc, #56]	@ (800c88c <_svfiprintf_r+0x1f0>)
 800c854:	a904      	add	r1, sp, #16
 800c856:	4638      	mov	r0, r7
 800c858:	f7fc fdd8 	bl	800940c <_printf_float>
 800c85c:	1c42      	adds	r2, r0, #1
 800c85e:	4606      	mov	r6, r0
 800c860:	d1d6      	bne.n	800c810 <_svfiprintf_r+0x174>
 800c862:	89ab      	ldrh	r3, [r5, #12]
 800c864:	065b      	lsls	r3, r3, #25
 800c866:	f53f af2d 	bmi.w	800c6c4 <_svfiprintf_r+0x28>
 800c86a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c86c:	e72c      	b.n	800c6c8 <_svfiprintf_r+0x2c>
 800c86e:	ab03      	add	r3, sp, #12
 800c870:	9300      	str	r3, [sp, #0]
 800c872:	462a      	mov	r2, r5
 800c874:	4b05      	ldr	r3, [pc, #20]	@ (800c88c <_svfiprintf_r+0x1f0>)
 800c876:	a904      	add	r1, sp, #16
 800c878:	4638      	mov	r0, r7
 800c87a:	f7fd f85f 	bl	800993c <_printf_i>
 800c87e:	e7ed      	b.n	800c85c <_svfiprintf_r+0x1c0>
 800c880:	0800d4a9 	.word	0x0800d4a9
 800c884:	0800d4b3 	.word	0x0800d4b3
 800c888:	0800940d 	.word	0x0800940d
 800c88c:	0800c5e7 	.word	0x0800c5e7
 800c890:	0800d4af 	.word	0x0800d4af

0800c894 <__sfputc_r>:
 800c894:	6893      	ldr	r3, [r2, #8]
 800c896:	3b01      	subs	r3, #1
 800c898:	2b00      	cmp	r3, #0
 800c89a:	b410      	push	{r4}
 800c89c:	6093      	str	r3, [r2, #8]
 800c89e:	da08      	bge.n	800c8b2 <__sfputc_r+0x1e>
 800c8a0:	6994      	ldr	r4, [r2, #24]
 800c8a2:	42a3      	cmp	r3, r4
 800c8a4:	db01      	blt.n	800c8aa <__sfputc_r+0x16>
 800c8a6:	290a      	cmp	r1, #10
 800c8a8:	d103      	bne.n	800c8b2 <__sfputc_r+0x1e>
 800c8aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8ae:	f7fd bd45 	b.w	800a33c <__swbuf_r>
 800c8b2:	6813      	ldr	r3, [r2, #0]
 800c8b4:	1c58      	adds	r0, r3, #1
 800c8b6:	6010      	str	r0, [r2, #0]
 800c8b8:	7019      	strb	r1, [r3, #0]
 800c8ba:	4608      	mov	r0, r1
 800c8bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8c0:	4770      	bx	lr

0800c8c2 <__sfputs_r>:
 800c8c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8c4:	4606      	mov	r6, r0
 800c8c6:	460f      	mov	r7, r1
 800c8c8:	4614      	mov	r4, r2
 800c8ca:	18d5      	adds	r5, r2, r3
 800c8cc:	42ac      	cmp	r4, r5
 800c8ce:	d101      	bne.n	800c8d4 <__sfputs_r+0x12>
 800c8d0:	2000      	movs	r0, #0
 800c8d2:	e007      	b.n	800c8e4 <__sfputs_r+0x22>
 800c8d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8d8:	463a      	mov	r2, r7
 800c8da:	4630      	mov	r0, r6
 800c8dc:	f7ff ffda 	bl	800c894 <__sfputc_r>
 800c8e0:	1c43      	adds	r3, r0, #1
 800c8e2:	d1f3      	bne.n	800c8cc <__sfputs_r+0xa>
 800c8e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c8e8 <_vfiprintf_r>:
 800c8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8ec:	460d      	mov	r5, r1
 800c8ee:	b09d      	sub	sp, #116	@ 0x74
 800c8f0:	4614      	mov	r4, r2
 800c8f2:	4698      	mov	r8, r3
 800c8f4:	4606      	mov	r6, r0
 800c8f6:	b118      	cbz	r0, 800c900 <_vfiprintf_r+0x18>
 800c8f8:	6a03      	ldr	r3, [r0, #32]
 800c8fa:	b90b      	cbnz	r3, 800c900 <_vfiprintf_r+0x18>
 800c8fc:	f7fd fbd6 	bl	800a0ac <__sinit>
 800c900:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c902:	07d9      	lsls	r1, r3, #31
 800c904:	d405      	bmi.n	800c912 <_vfiprintf_r+0x2a>
 800c906:	89ab      	ldrh	r3, [r5, #12]
 800c908:	059a      	lsls	r2, r3, #22
 800c90a:	d402      	bmi.n	800c912 <_vfiprintf_r+0x2a>
 800c90c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c90e:	f7fd fe70 	bl	800a5f2 <__retarget_lock_acquire_recursive>
 800c912:	89ab      	ldrh	r3, [r5, #12]
 800c914:	071b      	lsls	r3, r3, #28
 800c916:	d501      	bpl.n	800c91c <_vfiprintf_r+0x34>
 800c918:	692b      	ldr	r3, [r5, #16]
 800c91a:	b99b      	cbnz	r3, 800c944 <_vfiprintf_r+0x5c>
 800c91c:	4629      	mov	r1, r5
 800c91e:	4630      	mov	r0, r6
 800c920:	f7fd fd4a 	bl	800a3b8 <__swsetup_r>
 800c924:	b170      	cbz	r0, 800c944 <_vfiprintf_r+0x5c>
 800c926:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c928:	07dc      	lsls	r4, r3, #31
 800c92a:	d504      	bpl.n	800c936 <_vfiprintf_r+0x4e>
 800c92c:	f04f 30ff 	mov.w	r0, #4294967295
 800c930:	b01d      	add	sp, #116	@ 0x74
 800c932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c936:	89ab      	ldrh	r3, [r5, #12]
 800c938:	0598      	lsls	r0, r3, #22
 800c93a:	d4f7      	bmi.n	800c92c <_vfiprintf_r+0x44>
 800c93c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c93e:	f7fd fe59 	bl	800a5f4 <__retarget_lock_release_recursive>
 800c942:	e7f3      	b.n	800c92c <_vfiprintf_r+0x44>
 800c944:	2300      	movs	r3, #0
 800c946:	9309      	str	r3, [sp, #36]	@ 0x24
 800c948:	2320      	movs	r3, #32
 800c94a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c94e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c952:	2330      	movs	r3, #48	@ 0x30
 800c954:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cb04 <_vfiprintf_r+0x21c>
 800c958:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c95c:	f04f 0901 	mov.w	r9, #1
 800c960:	4623      	mov	r3, r4
 800c962:	469a      	mov	sl, r3
 800c964:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c968:	b10a      	cbz	r2, 800c96e <_vfiprintf_r+0x86>
 800c96a:	2a25      	cmp	r2, #37	@ 0x25
 800c96c:	d1f9      	bne.n	800c962 <_vfiprintf_r+0x7a>
 800c96e:	ebba 0b04 	subs.w	fp, sl, r4
 800c972:	d00b      	beq.n	800c98c <_vfiprintf_r+0xa4>
 800c974:	465b      	mov	r3, fp
 800c976:	4622      	mov	r2, r4
 800c978:	4629      	mov	r1, r5
 800c97a:	4630      	mov	r0, r6
 800c97c:	f7ff ffa1 	bl	800c8c2 <__sfputs_r>
 800c980:	3001      	adds	r0, #1
 800c982:	f000 80a7 	beq.w	800cad4 <_vfiprintf_r+0x1ec>
 800c986:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c988:	445a      	add	r2, fp
 800c98a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c98c:	f89a 3000 	ldrb.w	r3, [sl]
 800c990:	2b00      	cmp	r3, #0
 800c992:	f000 809f 	beq.w	800cad4 <_vfiprintf_r+0x1ec>
 800c996:	2300      	movs	r3, #0
 800c998:	f04f 32ff 	mov.w	r2, #4294967295
 800c99c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9a0:	f10a 0a01 	add.w	sl, sl, #1
 800c9a4:	9304      	str	r3, [sp, #16]
 800c9a6:	9307      	str	r3, [sp, #28]
 800c9a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c9ac:	931a      	str	r3, [sp, #104]	@ 0x68
 800c9ae:	4654      	mov	r4, sl
 800c9b0:	2205      	movs	r2, #5
 800c9b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9b6:	4853      	ldr	r0, [pc, #332]	@ (800cb04 <_vfiprintf_r+0x21c>)
 800c9b8:	f7f3 fc2a 	bl	8000210 <memchr>
 800c9bc:	9a04      	ldr	r2, [sp, #16]
 800c9be:	b9d8      	cbnz	r0, 800c9f8 <_vfiprintf_r+0x110>
 800c9c0:	06d1      	lsls	r1, r2, #27
 800c9c2:	bf44      	itt	mi
 800c9c4:	2320      	movmi	r3, #32
 800c9c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9ca:	0713      	lsls	r3, r2, #28
 800c9cc:	bf44      	itt	mi
 800c9ce:	232b      	movmi	r3, #43	@ 0x2b
 800c9d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9d4:	f89a 3000 	ldrb.w	r3, [sl]
 800c9d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c9da:	d015      	beq.n	800ca08 <_vfiprintf_r+0x120>
 800c9dc:	9a07      	ldr	r2, [sp, #28]
 800c9de:	4654      	mov	r4, sl
 800c9e0:	2000      	movs	r0, #0
 800c9e2:	f04f 0c0a 	mov.w	ip, #10
 800c9e6:	4621      	mov	r1, r4
 800c9e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9ec:	3b30      	subs	r3, #48	@ 0x30
 800c9ee:	2b09      	cmp	r3, #9
 800c9f0:	d94b      	bls.n	800ca8a <_vfiprintf_r+0x1a2>
 800c9f2:	b1b0      	cbz	r0, 800ca22 <_vfiprintf_r+0x13a>
 800c9f4:	9207      	str	r2, [sp, #28]
 800c9f6:	e014      	b.n	800ca22 <_vfiprintf_r+0x13a>
 800c9f8:	eba0 0308 	sub.w	r3, r0, r8
 800c9fc:	fa09 f303 	lsl.w	r3, r9, r3
 800ca00:	4313      	orrs	r3, r2
 800ca02:	9304      	str	r3, [sp, #16]
 800ca04:	46a2      	mov	sl, r4
 800ca06:	e7d2      	b.n	800c9ae <_vfiprintf_r+0xc6>
 800ca08:	9b03      	ldr	r3, [sp, #12]
 800ca0a:	1d19      	adds	r1, r3, #4
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	9103      	str	r1, [sp, #12]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	bfbb      	ittet	lt
 800ca14:	425b      	neglt	r3, r3
 800ca16:	f042 0202 	orrlt.w	r2, r2, #2
 800ca1a:	9307      	strge	r3, [sp, #28]
 800ca1c:	9307      	strlt	r3, [sp, #28]
 800ca1e:	bfb8      	it	lt
 800ca20:	9204      	strlt	r2, [sp, #16]
 800ca22:	7823      	ldrb	r3, [r4, #0]
 800ca24:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca26:	d10a      	bne.n	800ca3e <_vfiprintf_r+0x156>
 800ca28:	7863      	ldrb	r3, [r4, #1]
 800ca2a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca2c:	d132      	bne.n	800ca94 <_vfiprintf_r+0x1ac>
 800ca2e:	9b03      	ldr	r3, [sp, #12]
 800ca30:	1d1a      	adds	r2, r3, #4
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	9203      	str	r2, [sp, #12]
 800ca36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ca3a:	3402      	adds	r4, #2
 800ca3c:	9305      	str	r3, [sp, #20]
 800ca3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cb14 <_vfiprintf_r+0x22c>
 800ca42:	7821      	ldrb	r1, [r4, #0]
 800ca44:	2203      	movs	r2, #3
 800ca46:	4650      	mov	r0, sl
 800ca48:	f7f3 fbe2 	bl	8000210 <memchr>
 800ca4c:	b138      	cbz	r0, 800ca5e <_vfiprintf_r+0x176>
 800ca4e:	9b04      	ldr	r3, [sp, #16]
 800ca50:	eba0 000a 	sub.w	r0, r0, sl
 800ca54:	2240      	movs	r2, #64	@ 0x40
 800ca56:	4082      	lsls	r2, r0
 800ca58:	4313      	orrs	r3, r2
 800ca5a:	3401      	adds	r4, #1
 800ca5c:	9304      	str	r3, [sp, #16]
 800ca5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca62:	4829      	ldr	r0, [pc, #164]	@ (800cb08 <_vfiprintf_r+0x220>)
 800ca64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ca68:	2206      	movs	r2, #6
 800ca6a:	f7f3 fbd1 	bl	8000210 <memchr>
 800ca6e:	2800      	cmp	r0, #0
 800ca70:	d03f      	beq.n	800caf2 <_vfiprintf_r+0x20a>
 800ca72:	4b26      	ldr	r3, [pc, #152]	@ (800cb0c <_vfiprintf_r+0x224>)
 800ca74:	bb1b      	cbnz	r3, 800cabe <_vfiprintf_r+0x1d6>
 800ca76:	9b03      	ldr	r3, [sp, #12]
 800ca78:	3307      	adds	r3, #7
 800ca7a:	f023 0307 	bic.w	r3, r3, #7
 800ca7e:	3308      	adds	r3, #8
 800ca80:	9303      	str	r3, [sp, #12]
 800ca82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca84:	443b      	add	r3, r7
 800ca86:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca88:	e76a      	b.n	800c960 <_vfiprintf_r+0x78>
 800ca8a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca8e:	460c      	mov	r4, r1
 800ca90:	2001      	movs	r0, #1
 800ca92:	e7a8      	b.n	800c9e6 <_vfiprintf_r+0xfe>
 800ca94:	2300      	movs	r3, #0
 800ca96:	3401      	adds	r4, #1
 800ca98:	9305      	str	r3, [sp, #20]
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	f04f 0c0a 	mov.w	ip, #10
 800caa0:	4620      	mov	r0, r4
 800caa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800caa6:	3a30      	subs	r2, #48	@ 0x30
 800caa8:	2a09      	cmp	r2, #9
 800caaa:	d903      	bls.n	800cab4 <_vfiprintf_r+0x1cc>
 800caac:	2b00      	cmp	r3, #0
 800caae:	d0c6      	beq.n	800ca3e <_vfiprintf_r+0x156>
 800cab0:	9105      	str	r1, [sp, #20]
 800cab2:	e7c4      	b.n	800ca3e <_vfiprintf_r+0x156>
 800cab4:	fb0c 2101 	mla	r1, ip, r1, r2
 800cab8:	4604      	mov	r4, r0
 800caba:	2301      	movs	r3, #1
 800cabc:	e7f0      	b.n	800caa0 <_vfiprintf_r+0x1b8>
 800cabe:	ab03      	add	r3, sp, #12
 800cac0:	9300      	str	r3, [sp, #0]
 800cac2:	462a      	mov	r2, r5
 800cac4:	4b12      	ldr	r3, [pc, #72]	@ (800cb10 <_vfiprintf_r+0x228>)
 800cac6:	a904      	add	r1, sp, #16
 800cac8:	4630      	mov	r0, r6
 800caca:	f7fc fc9f 	bl	800940c <_printf_float>
 800cace:	4607      	mov	r7, r0
 800cad0:	1c78      	adds	r0, r7, #1
 800cad2:	d1d6      	bne.n	800ca82 <_vfiprintf_r+0x19a>
 800cad4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cad6:	07d9      	lsls	r1, r3, #31
 800cad8:	d405      	bmi.n	800cae6 <_vfiprintf_r+0x1fe>
 800cada:	89ab      	ldrh	r3, [r5, #12]
 800cadc:	059a      	lsls	r2, r3, #22
 800cade:	d402      	bmi.n	800cae6 <_vfiprintf_r+0x1fe>
 800cae0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cae2:	f7fd fd87 	bl	800a5f4 <__retarget_lock_release_recursive>
 800cae6:	89ab      	ldrh	r3, [r5, #12]
 800cae8:	065b      	lsls	r3, r3, #25
 800caea:	f53f af1f 	bmi.w	800c92c <_vfiprintf_r+0x44>
 800caee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800caf0:	e71e      	b.n	800c930 <_vfiprintf_r+0x48>
 800caf2:	ab03      	add	r3, sp, #12
 800caf4:	9300      	str	r3, [sp, #0]
 800caf6:	462a      	mov	r2, r5
 800caf8:	4b05      	ldr	r3, [pc, #20]	@ (800cb10 <_vfiprintf_r+0x228>)
 800cafa:	a904      	add	r1, sp, #16
 800cafc:	4630      	mov	r0, r6
 800cafe:	f7fc ff1d 	bl	800993c <_printf_i>
 800cb02:	e7e4      	b.n	800cace <_vfiprintf_r+0x1e6>
 800cb04:	0800d4a9 	.word	0x0800d4a9
 800cb08:	0800d4b3 	.word	0x0800d4b3
 800cb0c:	0800940d 	.word	0x0800940d
 800cb10:	0800c8c3 	.word	0x0800c8c3
 800cb14:	0800d4af 	.word	0x0800d4af

0800cb18 <__sflush_r>:
 800cb18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb20:	0716      	lsls	r6, r2, #28
 800cb22:	4605      	mov	r5, r0
 800cb24:	460c      	mov	r4, r1
 800cb26:	d454      	bmi.n	800cbd2 <__sflush_r+0xba>
 800cb28:	684b      	ldr	r3, [r1, #4]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	dc02      	bgt.n	800cb34 <__sflush_r+0x1c>
 800cb2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	dd48      	ble.n	800cbc6 <__sflush_r+0xae>
 800cb34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb36:	2e00      	cmp	r6, #0
 800cb38:	d045      	beq.n	800cbc6 <__sflush_r+0xae>
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cb40:	682f      	ldr	r7, [r5, #0]
 800cb42:	6a21      	ldr	r1, [r4, #32]
 800cb44:	602b      	str	r3, [r5, #0]
 800cb46:	d030      	beq.n	800cbaa <__sflush_r+0x92>
 800cb48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cb4a:	89a3      	ldrh	r3, [r4, #12]
 800cb4c:	0759      	lsls	r1, r3, #29
 800cb4e:	d505      	bpl.n	800cb5c <__sflush_r+0x44>
 800cb50:	6863      	ldr	r3, [r4, #4]
 800cb52:	1ad2      	subs	r2, r2, r3
 800cb54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cb56:	b10b      	cbz	r3, 800cb5c <__sflush_r+0x44>
 800cb58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cb5a:	1ad2      	subs	r2, r2, r3
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb60:	6a21      	ldr	r1, [r4, #32]
 800cb62:	4628      	mov	r0, r5
 800cb64:	47b0      	blx	r6
 800cb66:	1c43      	adds	r3, r0, #1
 800cb68:	89a3      	ldrh	r3, [r4, #12]
 800cb6a:	d106      	bne.n	800cb7a <__sflush_r+0x62>
 800cb6c:	6829      	ldr	r1, [r5, #0]
 800cb6e:	291d      	cmp	r1, #29
 800cb70:	d82b      	bhi.n	800cbca <__sflush_r+0xb2>
 800cb72:	4a2a      	ldr	r2, [pc, #168]	@ (800cc1c <__sflush_r+0x104>)
 800cb74:	40ca      	lsrs	r2, r1
 800cb76:	07d6      	lsls	r6, r2, #31
 800cb78:	d527      	bpl.n	800cbca <__sflush_r+0xb2>
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	6062      	str	r2, [r4, #4]
 800cb7e:	04d9      	lsls	r1, r3, #19
 800cb80:	6922      	ldr	r2, [r4, #16]
 800cb82:	6022      	str	r2, [r4, #0]
 800cb84:	d504      	bpl.n	800cb90 <__sflush_r+0x78>
 800cb86:	1c42      	adds	r2, r0, #1
 800cb88:	d101      	bne.n	800cb8e <__sflush_r+0x76>
 800cb8a:	682b      	ldr	r3, [r5, #0]
 800cb8c:	b903      	cbnz	r3, 800cb90 <__sflush_r+0x78>
 800cb8e:	6560      	str	r0, [r4, #84]	@ 0x54
 800cb90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb92:	602f      	str	r7, [r5, #0]
 800cb94:	b1b9      	cbz	r1, 800cbc6 <__sflush_r+0xae>
 800cb96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cb9a:	4299      	cmp	r1, r3
 800cb9c:	d002      	beq.n	800cba4 <__sflush_r+0x8c>
 800cb9e:	4628      	mov	r0, r5
 800cba0:	f7fe fba2 	bl	800b2e8 <_free_r>
 800cba4:	2300      	movs	r3, #0
 800cba6:	6363      	str	r3, [r4, #52]	@ 0x34
 800cba8:	e00d      	b.n	800cbc6 <__sflush_r+0xae>
 800cbaa:	2301      	movs	r3, #1
 800cbac:	4628      	mov	r0, r5
 800cbae:	47b0      	blx	r6
 800cbb0:	4602      	mov	r2, r0
 800cbb2:	1c50      	adds	r0, r2, #1
 800cbb4:	d1c9      	bne.n	800cb4a <__sflush_r+0x32>
 800cbb6:	682b      	ldr	r3, [r5, #0]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d0c6      	beq.n	800cb4a <__sflush_r+0x32>
 800cbbc:	2b1d      	cmp	r3, #29
 800cbbe:	d001      	beq.n	800cbc4 <__sflush_r+0xac>
 800cbc0:	2b16      	cmp	r3, #22
 800cbc2:	d11e      	bne.n	800cc02 <__sflush_r+0xea>
 800cbc4:	602f      	str	r7, [r5, #0]
 800cbc6:	2000      	movs	r0, #0
 800cbc8:	e022      	b.n	800cc10 <__sflush_r+0xf8>
 800cbca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbce:	b21b      	sxth	r3, r3
 800cbd0:	e01b      	b.n	800cc0a <__sflush_r+0xf2>
 800cbd2:	690f      	ldr	r7, [r1, #16]
 800cbd4:	2f00      	cmp	r7, #0
 800cbd6:	d0f6      	beq.n	800cbc6 <__sflush_r+0xae>
 800cbd8:	0793      	lsls	r3, r2, #30
 800cbda:	680e      	ldr	r6, [r1, #0]
 800cbdc:	bf08      	it	eq
 800cbde:	694b      	ldreq	r3, [r1, #20]
 800cbe0:	600f      	str	r7, [r1, #0]
 800cbe2:	bf18      	it	ne
 800cbe4:	2300      	movne	r3, #0
 800cbe6:	eba6 0807 	sub.w	r8, r6, r7
 800cbea:	608b      	str	r3, [r1, #8]
 800cbec:	f1b8 0f00 	cmp.w	r8, #0
 800cbf0:	dde9      	ble.n	800cbc6 <__sflush_r+0xae>
 800cbf2:	6a21      	ldr	r1, [r4, #32]
 800cbf4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cbf6:	4643      	mov	r3, r8
 800cbf8:	463a      	mov	r2, r7
 800cbfa:	4628      	mov	r0, r5
 800cbfc:	47b0      	blx	r6
 800cbfe:	2800      	cmp	r0, #0
 800cc00:	dc08      	bgt.n	800cc14 <__sflush_r+0xfc>
 800cc02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc0a:	81a3      	strh	r3, [r4, #12]
 800cc0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc14:	4407      	add	r7, r0
 800cc16:	eba8 0800 	sub.w	r8, r8, r0
 800cc1a:	e7e7      	b.n	800cbec <__sflush_r+0xd4>
 800cc1c:	20400001 	.word	0x20400001

0800cc20 <_fflush_r>:
 800cc20:	b538      	push	{r3, r4, r5, lr}
 800cc22:	690b      	ldr	r3, [r1, #16]
 800cc24:	4605      	mov	r5, r0
 800cc26:	460c      	mov	r4, r1
 800cc28:	b913      	cbnz	r3, 800cc30 <_fflush_r+0x10>
 800cc2a:	2500      	movs	r5, #0
 800cc2c:	4628      	mov	r0, r5
 800cc2e:	bd38      	pop	{r3, r4, r5, pc}
 800cc30:	b118      	cbz	r0, 800cc3a <_fflush_r+0x1a>
 800cc32:	6a03      	ldr	r3, [r0, #32]
 800cc34:	b90b      	cbnz	r3, 800cc3a <_fflush_r+0x1a>
 800cc36:	f7fd fa39 	bl	800a0ac <__sinit>
 800cc3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d0f3      	beq.n	800cc2a <_fflush_r+0xa>
 800cc42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cc44:	07d0      	lsls	r0, r2, #31
 800cc46:	d404      	bmi.n	800cc52 <_fflush_r+0x32>
 800cc48:	0599      	lsls	r1, r3, #22
 800cc4a:	d402      	bmi.n	800cc52 <_fflush_r+0x32>
 800cc4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc4e:	f7fd fcd0 	bl	800a5f2 <__retarget_lock_acquire_recursive>
 800cc52:	4628      	mov	r0, r5
 800cc54:	4621      	mov	r1, r4
 800cc56:	f7ff ff5f 	bl	800cb18 <__sflush_r>
 800cc5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc5c:	07da      	lsls	r2, r3, #31
 800cc5e:	4605      	mov	r5, r0
 800cc60:	d4e4      	bmi.n	800cc2c <_fflush_r+0xc>
 800cc62:	89a3      	ldrh	r3, [r4, #12]
 800cc64:	059b      	lsls	r3, r3, #22
 800cc66:	d4e1      	bmi.n	800cc2c <_fflush_r+0xc>
 800cc68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc6a:	f7fd fcc3 	bl	800a5f4 <__retarget_lock_release_recursive>
 800cc6e:	e7dd      	b.n	800cc2c <_fflush_r+0xc>

0800cc70 <__swhatbuf_r>:
 800cc70:	b570      	push	{r4, r5, r6, lr}
 800cc72:	460c      	mov	r4, r1
 800cc74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc78:	2900      	cmp	r1, #0
 800cc7a:	b096      	sub	sp, #88	@ 0x58
 800cc7c:	4615      	mov	r5, r2
 800cc7e:	461e      	mov	r6, r3
 800cc80:	da0d      	bge.n	800cc9e <__swhatbuf_r+0x2e>
 800cc82:	89a3      	ldrh	r3, [r4, #12]
 800cc84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cc88:	f04f 0100 	mov.w	r1, #0
 800cc8c:	bf14      	ite	ne
 800cc8e:	2340      	movne	r3, #64	@ 0x40
 800cc90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cc94:	2000      	movs	r0, #0
 800cc96:	6031      	str	r1, [r6, #0]
 800cc98:	602b      	str	r3, [r5, #0]
 800cc9a:	b016      	add	sp, #88	@ 0x58
 800cc9c:	bd70      	pop	{r4, r5, r6, pc}
 800cc9e:	466a      	mov	r2, sp
 800cca0:	f000 f862 	bl	800cd68 <_fstat_r>
 800cca4:	2800      	cmp	r0, #0
 800cca6:	dbec      	blt.n	800cc82 <__swhatbuf_r+0x12>
 800cca8:	9901      	ldr	r1, [sp, #4]
 800ccaa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ccae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ccb2:	4259      	negs	r1, r3
 800ccb4:	4159      	adcs	r1, r3
 800ccb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ccba:	e7eb      	b.n	800cc94 <__swhatbuf_r+0x24>

0800ccbc <__smakebuf_r>:
 800ccbc:	898b      	ldrh	r3, [r1, #12]
 800ccbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ccc0:	079d      	lsls	r5, r3, #30
 800ccc2:	4606      	mov	r6, r0
 800ccc4:	460c      	mov	r4, r1
 800ccc6:	d507      	bpl.n	800ccd8 <__smakebuf_r+0x1c>
 800ccc8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cccc:	6023      	str	r3, [r4, #0]
 800ccce:	6123      	str	r3, [r4, #16]
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	6163      	str	r3, [r4, #20]
 800ccd4:	b003      	add	sp, #12
 800ccd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccd8:	ab01      	add	r3, sp, #4
 800ccda:	466a      	mov	r2, sp
 800ccdc:	f7ff ffc8 	bl	800cc70 <__swhatbuf_r>
 800cce0:	9f00      	ldr	r7, [sp, #0]
 800cce2:	4605      	mov	r5, r0
 800cce4:	4639      	mov	r1, r7
 800cce6:	4630      	mov	r0, r6
 800cce8:	f7fe feac 	bl	800ba44 <_malloc_r>
 800ccec:	b948      	cbnz	r0, 800cd02 <__smakebuf_r+0x46>
 800ccee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccf2:	059a      	lsls	r2, r3, #22
 800ccf4:	d4ee      	bmi.n	800ccd4 <__smakebuf_r+0x18>
 800ccf6:	f023 0303 	bic.w	r3, r3, #3
 800ccfa:	f043 0302 	orr.w	r3, r3, #2
 800ccfe:	81a3      	strh	r3, [r4, #12]
 800cd00:	e7e2      	b.n	800ccc8 <__smakebuf_r+0xc>
 800cd02:	89a3      	ldrh	r3, [r4, #12]
 800cd04:	6020      	str	r0, [r4, #0]
 800cd06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd0a:	81a3      	strh	r3, [r4, #12]
 800cd0c:	9b01      	ldr	r3, [sp, #4]
 800cd0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cd12:	b15b      	cbz	r3, 800cd2c <__smakebuf_r+0x70>
 800cd14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd18:	4630      	mov	r0, r6
 800cd1a:	f000 f837 	bl	800cd8c <_isatty_r>
 800cd1e:	b128      	cbz	r0, 800cd2c <__smakebuf_r+0x70>
 800cd20:	89a3      	ldrh	r3, [r4, #12]
 800cd22:	f023 0303 	bic.w	r3, r3, #3
 800cd26:	f043 0301 	orr.w	r3, r3, #1
 800cd2a:	81a3      	strh	r3, [r4, #12]
 800cd2c:	89a3      	ldrh	r3, [r4, #12]
 800cd2e:	431d      	orrs	r5, r3
 800cd30:	81a5      	strh	r5, [r4, #12]
 800cd32:	e7cf      	b.n	800ccd4 <__smakebuf_r+0x18>

0800cd34 <memmove>:
 800cd34:	4288      	cmp	r0, r1
 800cd36:	b510      	push	{r4, lr}
 800cd38:	eb01 0402 	add.w	r4, r1, r2
 800cd3c:	d902      	bls.n	800cd44 <memmove+0x10>
 800cd3e:	4284      	cmp	r4, r0
 800cd40:	4623      	mov	r3, r4
 800cd42:	d807      	bhi.n	800cd54 <memmove+0x20>
 800cd44:	1e43      	subs	r3, r0, #1
 800cd46:	42a1      	cmp	r1, r4
 800cd48:	d008      	beq.n	800cd5c <memmove+0x28>
 800cd4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd52:	e7f8      	b.n	800cd46 <memmove+0x12>
 800cd54:	4402      	add	r2, r0
 800cd56:	4601      	mov	r1, r0
 800cd58:	428a      	cmp	r2, r1
 800cd5a:	d100      	bne.n	800cd5e <memmove+0x2a>
 800cd5c:	bd10      	pop	{r4, pc}
 800cd5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd66:	e7f7      	b.n	800cd58 <memmove+0x24>

0800cd68 <_fstat_r>:
 800cd68:	b538      	push	{r3, r4, r5, lr}
 800cd6a:	4d07      	ldr	r5, [pc, #28]	@ (800cd88 <_fstat_r+0x20>)
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	4604      	mov	r4, r0
 800cd70:	4608      	mov	r0, r1
 800cd72:	4611      	mov	r1, r2
 800cd74:	602b      	str	r3, [r5, #0]
 800cd76:	f7f6 fe1f 	bl	80039b8 <_fstat>
 800cd7a:	1c43      	adds	r3, r0, #1
 800cd7c:	d102      	bne.n	800cd84 <_fstat_r+0x1c>
 800cd7e:	682b      	ldr	r3, [r5, #0]
 800cd80:	b103      	cbz	r3, 800cd84 <_fstat_r+0x1c>
 800cd82:	6023      	str	r3, [r4, #0]
 800cd84:	bd38      	pop	{r3, r4, r5, pc}
 800cd86:	bf00      	nop
 800cd88:	20000f4c 	.word	0x20000f4c

0800cd8c <_isatty_r>:
 800cd8c:	b538      	push	{r3, r4, r5, lr}
 800cd8e:	4d06      	ldr	r5, [pc, #24]	@ (800cda8 <_isatty_r+0x1c>)
 800cd90:	2300      	movs	r3, #0
 800cd92:	4604      	mov	r4, r0
 800cd94:	4608      	mov	r0, r1
 800cd96:	602b      	str	r3, [r5, #0]
 800cd98:	f7f6 fe1e 	bl	80039d8 <_isatty>
 800cd9c:	1c43      	adds	r3, r0, #1
 800cd9e:	d102      	bne.n	800cda6 <_isatty_r+0x1a>
 800cda0:	682b      	ldr	r3, [r5, #0]
 800cda2:	b103      	cbz	r3, 800cda6 <_isatty_r+0x1a>
 800cda4:	6023      	str	r3, [r4, #0]
 800cda6:	bd38      	pop	{r3, r4, r5, pc}
 800cda8:	20000f4c 	.word	0x20000f4c

0800cdac <_sbrk_r>:
 800cdac:	b538      	push	{r3, r4, r5, lr}
 800cdae:	4d06      	ldr	r5, [pc, #24]	@ (800cdc8 <_sbrk_r+0x1c>)
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	4604      	mov	r4, r0
 800cdb4:	4608      	mov	r0, r1
 800cdb6:	602b      	str	r3, [r5, #0]
 800cdb8:	f7f6 fe26 	bl	8003a08 <_sbrk>
 800cdbc:	1c43      	adds	r3, r0, #1
 800cdbe:	d102      	bne.n	800cdc6 <_sbrk_r+0x1a>
 800cdc0:	682b      	ldr	r3, [r5, #0]
 800cdc2:	b103      	cbz	r3, 800cdc6 <_sbrk_r+0x1a>
 800cdc4:	6023      	str	r3, [r4, #0]
 800cdc6:	bd38      	pop	{r3, r4, r5, pc}
 800cdc8:	20000f4c 	.word	0x20000f4c

0800cdcc <__assert_func>:
 800cdcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cdce:	4614      	mov	r4, r2
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	4b09      	ldr	r3, [pc, #36]	@ (800cdf8 <__assert_func+0x2c>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	4605      	mov	r5, r0
 800cdd8:	68d8      	ldr	r0, [r3, #12]
 800cdda:	b14c      	cbz	r4, 800cdf0 <__assert_func+0x24>
 800cddc:	4b07      	ldr	r3, [pc, #28]	@ (800cdfc <__assert_func+0x30>)
 800cdde:	9100      	str	r1, [sp, #0]
 800cde0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cde4:	4906      	ldr	r1, [pc, #24]	@ (800ce00 <__assert_func+0x34>)
 800cde6:	462b      	mov	r3, r5
 800cde8:	f000 f850 	bl	800ce8c <fiprintf>
 800cdec:	f000 f860 	bl	800ceb0 <abort>
 800cdf0:	4b04      	ldr	r3, [pc, #16]	@ (800ce04 <__assert_func+0x38>)
 800cdf2:	461c      	mov	r4, r3
 800cdf4:	e7f3      	b.n	800cdde <__assert_func+0x12>
 800cdf6:	bf00      	nop
 800cdf8:	20000184 	.word	0x20000184
 800cdfc:	0800d4ba 	.word	0x0800d4ba
 800ce00:	0800d4c7 	.word	0x0800d4c7
 800ce04:	0800d4f5 	.word	0x0800d4f5

0800ce08 <_calloc_r>:
 800ce08:	b570      	push	{r4, r5, r6, lr}
 800ce0a:	fba1 5402 	umull	r5, r4, r1, r2
 800ce0e:	b934      	cbnz	r4, 800ce1e <_calloc_r+0x16>
 800ce10:	4629      	mov	r1, r5
 800ce12:	f7fe fe17 	bl	800ba44 <_malloc_r>
 800ce16:	4606      	mov	r6, r0
 800ce18:	b928      	cbnz	r0, 800ce26 <_calloc_r+0x1e>
 800ce1a:	4630      	mov	r0, r6
 800ce1c:	bd70      	pop	{r4, r5, r6, pc}
 800ce1e:	220c      	movs	r2, #12
 800ce20:	6002      	str	r2, [r0, #0]
 800ce22:	2600      	movs	r6, #0
 800ce24:	e7f9      	b.n	800ce1a <_calloc_r+0x12>
 800ce26:	462a      	mov	r2, r5
 800ce28:	4621      	mov	r1, r4
 800ce2a:	f7fd fb1b 	bl	800a464 <memset>
 800ce2e:	e7f4      	b.n	800ce1a <_calloc_r+0x12>

0800ce30 <_realloc_r>:
 800ce30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce34:	4607      	mov	r7, r0
 800ce36:	4614      	mov	r4, r2
 800ce38:	460d      	mov	r5, r1
 800ce3a:	b921      	cbnz	r1, 800ce46 <_realloc_r+0x16>
 800ce3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce40:	4611      	mov	r1, r2
 800ce42:	f7fe bdff 	b.w	800ba44 <_malloc_r>
 800ce46:	b92a      	cbnz	r2, 800ce54 <_realloc_r+0x24>
 800ce48:	f7fe fa4e 	bl	800b2e8 <_free_r>
 800ce4c:	4625      	mov	r5, r4
 800ce4e:	4628      	mov	r0, r5
 800ce50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce54:	f000 f833 	bl	800cebe <_malloc_usable_size_r>
 800ce58:	4284      	cmp	r4, r0
 800ce5a:	4606      	mov	r6, r0
 800ce5c:	d802      	bhi.n	800ce64 <_realloc_r+0x34>
 800ce5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ce62:	d8f4      	bhi.n	800ce4e <_realloc_r+0x1e>
 800ce64:	4621      	mov	r1, r4
 800ce66:	4638      	mov	r0, r7
 800ce68:	f7fe fdec 	bl	800ba44 <_malloc_r>
 800ce6c:	4680      	mov	r8, r0
 800ce6e:	b908      	cbnz	r0, 800ce74 <_realloc_r+0x44>
 800ce70:	4645      	mov	r5, r8
 800ce72:	e7ec      	b.n	800ce4e <_realloc_r+0x1e>
 800ce74:	42b4      	cmp	r4, r6
 800ce76:	4622      	mov	r2, r4
 800ce78:	4629      	mov	r1, r5
 800ce7a:	bf28      	it	cs
 800ce7c:	4632      	movcs	r2, r6
 800ce7e:	f7fd fbba 	bl	800a5f6 <memcpy>
 800ce82:	4629      	mov	r1, r5
 800ce84:	4638      	mov	r0, r7
 800ce86:	f7fe fa2f 	bl	800b2e8 <_free_r>
 800ce8a:	e7f1      	b.n	800ce70 <_realloc_r+0x40>

0800ce8c <fiprintf>:
 800ce8c:	b40e      	push	{r1, r2, r3}
 800ce8e:	b503      	push	{r0, r1, lr}
 800ce90:	4601      	mov	r1, r0
 800ce92:	ab03      	add	r3, sp, #12
 800ce94:	4805      	ldr	r0, [pc, #20]	@ (800ceac <fiprintf+0x20>)
 800ce96:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce9a:	6800      	ldr	r0, [r0, #0]
 800ce9c:	9301      	str	r3, [sp, #4]
 800ce9e:	f7ff fd23 	bl	800c8e8 <_vfiprintf_r>
 800cea2:	b002      	add	sp, #8
 800cea4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cea8:	b003      	add	sp, #12
 800ceaa:	4770      	bx	lr
 800ceac:	20000184 	.word	0x20000184

0800ceb0 <abort>:
 800ceb0:	b508      	push	{r3, lr}
 800ceb2:	2006      	movs	r0, #6
 800ceb4:	f000 f834 	bl	800cf20 <raise>
 800ceb8:	2001      	movs	r0, #1
 800ceba:	f7f6 fd2d 	bl	8003918 <_exit>

0800cebe <_malloc_usable_size_r>:
 800cebe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cec2:	1f18      	subs	r0, r3, #4
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	bfbc      	itt	lt
 800cec8:	580b      	ldrlt	r3, [r1, r0]
 800ceca:	18c0      	addlt	r0, r0, r3
 800cecc:	4770      	bx	lr

0800cece <_raise_r>:
 800cece:	291f      	cmp	r1, #31
 800ced0:	b538      	push	{r3, r4, r5, lr}
 800ced2:	4605      	mov	r5, r0
 800ced4:	460c      	mov	r4, r1
 800ced6:	d904      	bls.n	800cee2 <_raise_r+0x14>
 800ced8:	2316      	movs	r3, #22
 800ceda:	6003      	str	r3, [r0, #0]
 800cedc:	f04f 30ff 	mov.w	r0, #4294967295
 800cee0:	bd38      	pop	{r3, r4, r5, pc}
 800cee2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cee4:	b112      	cbz	r2, 800ceec <_raise_r+0x1e>
 800cee6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ceea:	b94b      	cbnz	r3, 800cf00 <_raise_r+0x32>
 800ceec:	4628      	mov	r0, r5
 800ceee:	f000 f831 	bl	800cf54 <_getpid_r>
 800cef2:	4622      	mov	r2, r4
 800cef4:	4601      	mov	r1, r0
 800cef6:	4628      	mov	r0, r5
 800cef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cefc:	f000 b818 	b.w	800cf30 <_kill_r>
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d00a      	beq.n	800cf1a <_raise_r+0x4c>
 800cf04:	1c59      	adds	r1, r3, #1
 800cf06:	d103      	bne.n	800cf10 <_raise_r+0x42>
 800cf08:	2316      	movs	r3, #22
 800cf0a:	6003      	str	r3, [r0, #0]
 800cf0c:	2001      	movs	r0, #1
 800cf0e:	e7e7      	b.n	800cee0 <_raise_r+0x12>
 800cf10:	2100      	movs	r1, #0
 800cf12:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cf16:	4620      	mov	r0, r4
 800cf18:	4798      	blx	r3
 800cf1a:	2000      	movs	r0, #0
 800cf1c:	e7e0      	b.n	800cee0 <_raise_r+0x12>
	...

0800cf20 <raise>:
 800cf20:	4b02      	ldr	r3, [pc, #8]	@ (800cf2c <raise+0xc>)
 800cf22:	4601      	mov	r1, r0
 800cf24:	6818      	ldr	r0, [r3, #0]
 800cf26:	f7ff bfd2 	b.w	800cece <_raise_r>
 800cf2a:	bf00      	nop
 800cf2c:	20000184 	.word	0x20000184

0800cf30 <_kill_r>:
 800cf30:	b538      	push	{r3, r4, r5, lr}
 800cf32:	4d07      	ldr	r5, [pc, #28]	@ (800cf50 <_kill_r+0x20>)
 800cf34:	2300      	movs	r3, #0
 800cf36:	4604      	mov	r4, r0
 800cf38:	4608      	mov	r0, r1
 800cf3a:	4611      	mov	r1, r2
 800cf3c:	602b      	str	r3, [r5, #0]
 800cf3e:	f7f6 fcdb 	bl	80038f8 <_kill>
 800cf42:	1c43      	adds	r3, r0, #1
 800cf44:	d102      	bne.n	800cf4c <_kill_r+0x1c>
 800cf46:	682b      	ldr	r3, [r5, #0]
 800cf48:	b103      	cbz	r3, 800cf4c <_kill_r+0x1c>
 800cf4a:	6023      	str	r3, [r4, #0]
 800cf4c:	bd38      	pop	{r3, r4, r5, pc}
 800cf4e:	bf00      	nop
 800cf50:	20000f4c 	.word	0x20000f4c

0800cf54 <_getpid_r>:
 800cf54:	f7f6 bcc8 	b.w	80038e8 <_getpid>

0800cf58 <_init>:
 800cf58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf5a:	bf00      	nop
 800cf5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf5e:	bc08      	pop	{r3}
 800cf60:	469e      	mov	lr, r3
 800cf62:	4770      	bx	lr

0800cf64 <_fini>:
 800cf64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf66:	bf00      	nop
 800cf68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf6a:	bc08      	pop	{r3}
 800cf6c:	469e      	mov	lr, r3
 800cf6e:	4770      	bx	lr
