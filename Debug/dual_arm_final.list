
dual_arm_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c728  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000818  0800c8f8  0800c8f8  0000d8f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d110  0800d110  0000f1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d110  0800d110  0000e110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d118  0800d118  0000f1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d118  0800d118  0000e118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d11c  0800d11c  0000e11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800d120  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cd0  200001d4  0800d2f4  0000f1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ea4  0800d2f4  0000fea4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144ee  00000000  00000000  0000f204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000380a  00000000  00000000  000236f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  00026f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d88  00000000  00000000  00028078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026253  00000000  00000000  00028e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a14  00000000  00000000  0004f053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1420  00000000  00000000  00067a67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00148e87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d28  00000000  00000000  00148ecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0014ebf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c8e0 	.word	0x0800c8e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800c8e0 	.word	0x0800c8e0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001066:	463b      	mov	r3, r7
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001072:	4b21      	ldr	r3, [pc, #132]	@ (80010f8 <MX_ADC1_Init+0x98>)
 8001074:	4a21      	ldr	r2, [pc, #132]	@ (80010fc <MX_ADC1_Init+0x9c>)
 8001076:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001078:	4b1f      	ldr	r3, [pc, #124]	@ (80010f8 <MX_ADC1_Init+0x98>)
 800107a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800107e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001080:	4b1d      	ldr	r3, [pc, #116]	@ (80010f8 <MX_ADC1_Init+0x98>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001086:	4b1c      	ldr	r3, [pc, #112]	@ (80010f8 <MX_ADC1_Init+0x98>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800108c:	4b1a      	ldr	r3, [pc, #104]	@ (80010f8 <MX_ADC1_Init+0x98>)
 800108e:	2200      	movs	r2, #0
 8001090:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001092:	4b19      	ldr	r3, [pc, #100]	@ (80010f8 <MX_ADC1_Init+0x98>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800109a:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <MX_ADC1_Init+0x98>)
 800109c:	2200      	movs	r2, #0
 800109e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a0:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010a2:	4a17      	ldr	r2, [pc, #92]	@ (8001100 <MX_ADC1_Init+0xa0>)
 80010a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a6:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010ac:	4b12      	ldr	r3, [pc, #72]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b2:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ba:	4b0f      	ldr	r3, [pc, #60]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010bc:	2201      	movs	r2, #1
 80010be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c0:	480d      	ldr	r0, [pc, #52]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010c2:	f002 fdb3 	bl	8003c2c <HAL_ADC_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010cc:	f000 ff54 	bl	8001f78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010d0:	230a      	movs	r3, #10
 80010d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010d4:	2301      	movs	r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010dc:	463b      	mov	r3, r7
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010e2:	f002 fde7 	bl	8003cb4 <HAL_ADC_ConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010ec:	f000 ff44 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	200001f0 	.word	0x200001f0
 80010fc:	40012000 	.word	0x40012000
 8001100:	0f000001 	.word	0x0f000001

08001104 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800110a:	463b      	mov	r3, r7
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001116:	4b21      	ldr	r3, [pc, #132]	@ (800119c <MX_ADC2_Init+0x98>)
 8001118:	4a21      	ldr	r2, [pc, #132]	@ (80011a0 <MX_ADC2_Init+0x9c>)
 800111a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800111c:	4b1f      	ldr	r3, [pc, #124]	@ (800119c <MX_ADC2_Init+0x98>)
 800111e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001122:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001124:	4b1d      	ldr	r3, [pc, #116]	@ (800119c <MX_ADC2_Init+0x98>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800112a:	4b1c      	ldr	r3, [pc, #112]	@ (800119c <MX_ADC2_Init+0x98>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001130:	4b1a      	ldr	r3, [pc, #104]	@ (800119c <MX_ADC2_Init+0x98>)
 8001132:	2200      	movs	r2, #0
 8001134:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001136:	4b19      	ldr	r3, [pc, #100]	@ (800119c <MX_ADC2_Init+0x98>)
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800113e:	4b17      	ldr	r3, [pc, #92]	@ (800119c <MX_ADC2_Init+0x98>)
 8001140:	2200      	movs	r2, #0
 8001142:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001144:	4b15      	ldr	r3, [pc, #84]	@ (800119c <MX_ADC2_Init+0x98>)
 8001146:	4a17      	ldr	r2, [pc, #92]	@ (80011a4 <MX_ADC2_Init+0xa0>)
 8001148:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800114a:	4b14      	ldr	r3, [pc, #80]	@ (800119c <MX_ADC2_Init+0x98>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001150:	4b12      	ldr	r3, [pc, #72]	@ (800119c <MX_ADC2_Init+0x98>)
 8001152:	2201      	movs	r2, #1
 8001154:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001156:	4b11      	ldr	r3, [pc, #68]	@ (800119c <MX_ADC2_Init+0x98>)
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800115e:	4b0f      	ldr	r3, [pc, #60]	@ (800119c <MX_ADC2_Init+0x98>)
 8001160:	2201      	movs	r2, #1
 8001162:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001164:	480d      	ldr	r0, [pc, #52]	@ (800119c <MX_ADC2_Init+0x98>)
 8001166:	f002 fd61 	bl	8003c2c <HAL_ADC_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001170:	f000 ff02 	bl	8001f78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001174:	230b      	movs	r3, #11
 8001176:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001180:	463b      	mov	r3, r7
 8001182:	4619      	mov	r1, r3
 8001184:	4805      	ldr	r0, [pc, #20]	@ (800119c <MX_ADC2_Init+0x98>)
 8001186:	f002 fd95 	bl	8003cb4 <HAL_ADC_ConfigChannel>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001190:	f000 fef2 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000238 	.word	0x20000238
 80011a0:	40012100 	.word	0x40012100
 80011a4:	0f000001 	.word	0x0f000001

080011a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08c      	sub	sp, #48	@ 0x30
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a2e      	ldr	r2, [pc, #184]	@ (8001280 <HAL_ADC_MspInit+0xd8>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d128      	bne.n	800121c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
 80011ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d2:	4a2c      	ldr	r2, [pc, #176]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 80011d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011da:	4b2a      	ldr	r3, [pc, #168]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011e2:	61bb      	str	r3, [r7, #24]
 80011e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	4b26      	ldr	r3, [pc, #152]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a25      	ldr	r2, [pc, #148]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 80011f0:	f043 0304 	orr.w	r3, r3, #4
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b23      	ldr	r3, [pc, #140]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0304 	and.w	r3, r3, #4
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001202:	2301      	movs	r3, #1
 8001204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001206:	2303      	movs	r3, #3
 8001208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4619      	mov	r1, r3
 8001214:	481c      	ldr	r0, [pc, #112]	@ (8001288 <HAL_ADC_MspInit+0xe0>)
 8001216:	f003 fc8f 	bl	8004b38 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800121a:	e02c      	b.n	8001276 <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a1a      	ldr	r2, [pc, #104]	@ (800128c <HAL_ADC_MspInit+0xe4>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d127      	bne.n	8001276 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122e:	4a15      	ldr	r2, [pc, #84]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 8001230:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001234:	6453      	str	r3, [r2, #68]	@ 0x44
 8001236:	4b13      	ldr	r3, [pc, #76]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	4a0e      	ldr	r2, [pc, #56]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	6313      	str	r3, [r2, #48]	@ 0x30
 8001252:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800125e:	2302      	movs	r3, #2
 8001260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001262:	2303      	movs	r3, #3
 8001264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126a:	f107 031c 	add.w	r3, r7, #28
 800126e:	4619      	mov	r1, r3
 8001270:	4805      	ldr	r0, [pc, #20]	@ (8001288 <HAL_ADC_MspInit+0xe0>)
 8001272:	f003 fc61 	bl	8004b38 <HAL_GPIO_Init>
}
 8001276:	bf00      	nop
 8001278:	3730      	adds	r7, #48	@ 0x30
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40012000 	.word	0x40012000
 8001284:	40023800 	.word	0x40023800
 8001288:	40020800 	.word	0x40020800
 800128c:	40012100 	.word	0x40012100

08001290 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	4b17      	ldr	r3, [pc, #92]	@ (80012f8 <MX_DMA_Init+0x68>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	4a16      	ldr	r2, [pc, #88]	@ (80012f8 <MX_DMA_Init+0x68>)
 80012a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a6:	4b14      	ldr	r3, [pc, #80]	@ (80012f8 <MX_DMA_Init+0x68>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <MX_DMA_Init+0x68>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	4a0f      	ldr	r2, [pc, #60]	@ (80012f8 <MX_DMA_Init+0x68>)
 80012bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c2:	4b0d      	ldr	r3, [pc, #52]	@ (80012f8 <MX_DMA_Init+0x68>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	200d      	movs	r0, #13
 80012d4:	f002 fff7 	bl	80042c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80012d8:	200d      	movs	r0, #13
 80012da:	f003 f810 	bl	80042fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	2039      	movs	r0, #57	@ 0x39
 80012e4:	f002 ffef 	bl	80042c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80012e8:	2039      	movs	r0, #57	@ 0x39
 80012ea:	f003 f808 	bl	80042fe <HAL_NVIC_EnableIRQ>

}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800

080012fc <DWT_Init>:

#include "dwt_util.h"
#include "stm32f4xx_hal.h"

void DWT_Init(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8001300:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <DWT_Init+0x38>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d105      	bne.n	8001318 <DWT_Init+0x1c>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800130c:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <DWT_Init+0x38>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	4a08      	ldr	r2, [pc, #32]	@ (8001334 <DWT_Init+0x38>)
 8001312:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001316:	60d3      	str	r3, [r2, #12]
    }
    DWT->CYCCNT = 0;
 8001318:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <DWT_Init+0x3c>)
 800131a:	2200      	movs	r2, #0
 800131c:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <DWT_Init+0x3c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a05      	ldr	r2, [pc, #20]	@ (8001338 <DWT_Init+0x3c>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6013      	str	r3, [r2, #0]
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000edf0 	.word	0xe000edf0
 8001338:	e0001000 	.word	0xe0001000

0800133c <Dynamixel_begin>:
#include "dynamixel.h"
#include <string.h>

Dynamixel_t Dynamixel_Handle;

void Dynamixel_begin(UART_HandleTypeDef* uart, GPIO_TypeDef* dir_port, uint16_t pin) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	4613      	mov	r3, r2
 8001348:	80fb      	strh	r3, [r7, #6]
    Dynamixel_Handle.huart = uart;
 800134a:	4a0b      	ldr	r2, [pc, #44]	@ (8001378 <Dynamixel_begin+0x3c>)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6013      	str	r3, [r2, #0]
    Dynamixel_Handle.dir_port = dir_port;
 8001350:	4a09      	ldr	r2, [pc, #36]	@ (8001378 <Dynamixel_begin+0x3c>)
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	6053      	str	r3, [r2, #4]
    Dynamixel_Handle.dir_pin = pin;
 8001356:	4a08      	ldr	r2, [pc, #32]	@ (8001378 <Dynamixel_begin+0x3c>)
 8001358:	88fb      	ldrh	r3, [r7, #6]
 800135a:	8113      	strh	r3, [r2, #8]
    Dynamixel_Handle.dma_rx_complete_flag = false;
 800135c:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <Dynamixel_begin+0x3c>)
 800135e:	2200      	movs	r2, #0
 8001360:	729a      	strb	r2, [r3, #10]
    HAL_GPIO_WritePin(dir_port, pin, GPIO_PIN_RESET);
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	2200      	movs	r2, #0
 8001366:	4619      	mov	r1, r3
 8001368:	68b8      	ldr	r0, [r7, #8]
 800136a:	f003 fd79 	bl	8004e60 <HAL_GPIO_WritePin>
}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000280 	.word	0x20000280

0800137c <Dynamixel_setDirPin>:

void Dynamixel_setDirPin(bool is_tx) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(Dynamixel_Handle.dir_port, Dynamixel_Handle.dir_pin, is_tx ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001386:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <Dynamixel_setDirPin+0x24>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	4a05      	ldr	r2, [pc, #20]	@ (80013a0 <Dynamixel_setDirPin+0x24>)
 800138c:	8911      	ldrh	r1, [r2, #8]
 800138e:	79fa      	ldrb	r2, [r7, #7]
 8001390:	4618      	mov	r0, r3
 8001392:	f003 fd65 	bl	8004e60 <HAL_GPIO_WritePin>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000280 	.word	0x20000280

080013a4 <Dynamixel_transmitPacket>:

void Dynamixel_transmitPacket(uint8_t id, uint8_t instruction, const uint8_t* params, uint16_t param_len) {
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b0cf      	sub	sp, #316	@ 0x13c
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4604      	mov	r4, r0
 80013ac:	4608      	mov	r0, r1
 80013ae:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80013b2:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 80013b6:	600a      	str	r2, [r1, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80013be:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80013c2:	4622      	mov	r2, r4
 80013c4:	701a      	strb	r2, [r3, #0]
 80013c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80013ca:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80013ce:	4602      	mov	r2, r0
 80013d0:	701a      	strb	r2, [r3, #0]
 80013d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80013d6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80013da:	460a      	mov	r2, r1
 80013dc:	801a      	strh	r2, [r3, #0]
    uint8_t packet[300];
    if (param_len > sizeof(packet) - 14) return;
 80013de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80013e2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	f5b3 7f8f 	cmp.w	r3, #286	@ 0x11e
 80013ec:	f200 80ac 	bhi.w	8001548 <Dynamixel_transmitPacket+0x1a4>
    uint16_t len = param_len + 10;
 80013f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80013f4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	330a      	adds	r3, #10
 80013fc:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
    packet[0]=0xFF; packet[1]=0xFF; packet[2]=0xFD; packet[3]=0x00;
 8001400:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001404:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001408:	22ff      	movs	r2, #255	@ 0xff
 800140a:	701a      	strb	r2, [r3, #0]
 800140c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001410:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001414:	22ff      	movs	r2, #255	@ 0xff
 8001416:	705a      	strb	r2, [r3, #1]
 8001418:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800141c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001420:	22fd      	movs	r2, #253	@ 0xfd
 8001422:	709a      	strb	r2, [r3, #2]
 8001424:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001428:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800142c:	2200      	movs	r2, #0
 800142e:	70da      	strb	r2, [r3, #3]
    packet[4]=id;
 8001430:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001434:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001438:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800143c:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8001440:	7812      	ldrb	r2, [r2, #0]
 8001442:	711a      	strb	r2, [r3, #4]
    packet[5]=(param_len+3)&0xFF;
 8001444:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001448:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	3303      	adds	r3, #3
 8001452:	b2da      	uxtb	r2, r3
 8001454:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001458:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800145c:	715a      	strb	r2, [r3, #5]
    packet[6]=((param_len+3)>>8)&0xFF;
 800145e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001462:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	3303      	adds	r3, #3
 800146a:	121b      	asrs	r3, r3, #8
 800146c:	b2da      	uxtb	r2, r3
 800146e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001472:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001476:	719a      	strb	r2, [r3, #6]
    packet[7]=instruction;
 8001478:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800147c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001480:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8001484:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8001488:	7812      	ldrb	r2, [r2, #0]
 800148a:	71da      	strb	r2, [r3, #7]
    if(param_len>0 && params) memcpy(&packet[8],params,param_len);
 800148c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001490:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d017      	beq.n	80014ca <Dynamixel_transmitPacket+0x126>
 800149a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800149e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d010      	beq.n	80014ca <Dynamixel_transmitPacket+0x126>
 80014a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80014ac:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80014b0:	8819      	ldrh	r1, [r3, #0]
 80014b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80014b6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80014ba:	f107 0208 	add.w	r2, r7, #8
 80014be:	f102 0008 	add.w	r0, r2, #8
 80014c2:	460a      	mov	r2, r1
 80014c4:	6819      	ldr	r1, [r3, #0]
 80014c6:	f008 fd5a 	bl	8009f7e <memcpy>
    uint16_t crc=update_crc(0,packet,len-2);
 80014ca:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 80014ce:	3b02      	subs	r3, #2
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	f107 0308 	add.w	r3, r7, #8
 80014d6:	4619      	mov	r1, r3
 80014d8:	2000      	movs	r0, #0
 80014da:	f000 fa01 	bl	80018e0 <update_crc>
 80014de:	4603      	mov	r3, r0
 80014e0:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
    packet[len-2]=crc&0xFF;
 80014e4:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 80014e8:	3b02      	subs	r3, #2
 80014ea:	f8b7 2134 	ldrh.w	r2, [r7, #308]	@ 0x134
 80014ee:	b2d1      	uxtb	r1, r2
 80014f0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80014f4:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80014f8:	54d1      	strb	r1, [r2, r3]
    packet[len-1]=(crc>>8)&0xFF;
 80014fa:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80014fe:	0a1b      	lsrs	r3, r3, #8
 8001500:	b29a      	uxth	r2, r3
 8001502:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8001506:	3b01      	subs	r3, #1
 8001508:	b2d1      	uxtb	r1, r2
 800150a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800150e:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8001512:	54d1      	strb	r1, [r2, r3]
    Dynamixel_setDirPin(true);
 8001514:	2001      	movs	r0, #1
 8001516:	f7ff ff31 	bl	800137c <Dynamixel_setDirPin>
    HAL_UART_Transmit(Dynamixel_Handle.huart,packet,len,HAL_MAX_DELAY);
 800151a:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <Dynamixel_transmitPacket+0x1b0>)
 800151c:	6818      	ldr	r0, [r3, #0]
 800151e:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 8001522:	f107 0108 	add.w	r1, r7, #8
 8001526:	f04f 33ff 	mov.w	r3, #4294967295
 800152a:	f005 f9c7 	bl	80068bc <HAL_UART_Transmit>
    while(__HAL_UART_GET_FLAG(Dynamixel_Handle.huart,UART_FLAG_TC)==RESET);
 800152e:	bf00      	nop
 8001530:	4b08      	ldr	r3, [pc, #32]	@ (8001554 <Dynamixel_transmitPacket+0x1b0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800153c:	2b40      	cmp	r3, #64	@ 0x40
 800153e:	d1f7      	bne.n	8001530 <Dynamixel_transmitPacket+0x18c>
    Dynamixel_setDirPin(false);
 8001540:	2000      	movs	r0, #0
 8001542:	f7ff ff1b 	bl	800137c <Dynamixel_setDirPin>
 8001546:	e000      	b.n	800154a <Dynamixel_transmitPacket+0x1a6>
    if (param_len > sizeof(packet) - 14) return;
 8001548:	bf00      	nop
}
 800154a:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800154e:	46bd      	mov	sp, r7
 8001550:	bd90      	pop	{r4, r7, pc}
 8001552:	bf00      	nop
 8001554:	20000280 	.word	0x20000280

08001558 <Dynamixel_receiveStatusPacket>:

bool Dynamixel_receiveStatusPacket(uint8_t* buf,uint16_t size,uint32_t tmo){
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	460b      	mov	r3, r1
 8001562:	607a      	str	r2, [r7, #4]
 8001564:	817b      	strh	r3, [r7, #10]
    Dynamixel_Handle.dma_rx_complete_flag=false;
 8001566:	4b2e      	ldr	r3, [pc, #184]	@ (8001620 <Dynamixel_receiveStatusPacket+0xc8>)
 8001568:	2200      	movs	r2, #0
 800156a:	729a      	strb	r2, [r3, #10]
    if(HAL_UART_GetState(Dynamixel_Handle.huart)!=HAL_UART_STATE_READY)
 800156c:	4b2c      	ldr	r3, [pc, #176]	@ (8001620 <Dynamixel_receiveStatusPacket+0xc8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f005 fe6b 	bl	800724c <HAL_UART_GetState>
 8001576:	4603      	mov	r3, r0
 8001578:	2b20      	cmp	r3, #32
 800157a:	d004      	beq.n	8001586 <Dynamixel_receiveStatusPacket+0x2e>
        HAL_UART_Abort_IT(Dynamixel_Handle.huart);
 800157c:	4b28      	ldr	r3, [pc, #160]	@ (8001620 <Dynamixel_receiveStatusPacket+0xc8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f005 fa71 	bl	8006a68 <HAL_UART_Abort_IT>
    if(HAL_UART_Receive_DMA(Dynamixel_Handle.huart,buf,size)!=HAL_OK) return false;
 8001586:	4b26      	ldr	r3, [pc, #152]	@ (8001620 <Dynamixel_receiveStatusPacket+0xc8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	897a      	ldrh	r2, [r7, #10]
 800158c:	68f9      	ldr	r1, [r7, #12]
 800158e:	4618      	mov	r0, r3
 8001590:	f005 fa44 	bl	8006a1c <HAL_UART_Receive_DMA>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <Dynamixel_receiveStatusPacket+0x46>
 800159a:	2300      	movs	r3, #0
 800159c:	e03b      	b.n	8001616 <Dynamixel_receiveStatusPacket+0xbe>
    uint32_t st=HAL_GetTick();
 800159e:	f002 fb15 	bl	8003bcc <HAL_GetTick>
 80015a2:	6178      	str	r0, [r7, #20]
    while(!Dynamixel_Handle.dma_rx_complete_flag && (HAL_GetTick()-st<tmo));
 80015a4:	bf00      	nop
 80015a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001620 <Dynamixel_receiveStatusPacket+0xc8>)
 80015a8:	7a9b      	ldrb	r3, [r3, #10]
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	f083 0301 	eor.w	r3, r3, #1
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d007      	beq.n	80015c6 <Dynamixel_receiveStatusPacket+0x6e>
 80015b6:	f002 fb09 	bl	8003bcc <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d8ef      	bhi.n	80015a6 <Dynamixel_receiveStatusPacket+0x4e>
    if(!Dynamixel_Handle.dma_rx_complete_flag){
 80015c6:	4b16      	ldr	r3, [pc, #88]	@ (8001620 <Dynamixel_receiveStatusPacket+0xc8>)
 80015c8:	7a9b      	ldrb	r3, [r3, #10]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	f083 0301 	eor.w	r3, r3, #1
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d006      	beq.n	80015e4 <Dynamixel_receiveStatusPacket+0x8c>
        HAL_UART_Abort_IT(Dynamixel_Handle.huart);
 80015d6:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <Dynamixel_receiveStatusPacket+0xc8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f005 fa44 	bl	8006a68 <HAL_UART_Abort_IT>
        return false;
 80015e0:	2300      	movs	r3, #0
 80015e2:	e018      	b.n	8001616 <Dynamixel_receiveStatusPacket+0xbe>
    }
    return (buf[0]==0xFF && buf[1]==0xFF && buf[2]==0xFD && buf[8]==0x00);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2bff      	cmp	r3, #255	@ 0xff
 80015ea:	d110      	bne.n	800160e <Dynamixel_receiveStatusPacket+0xb6>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	3301      	adds	r3, #1
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2bff      	cmp	r3, #255	@ 0xff
 80015f4:	d10b      	bne.n	800160e <Dynamixel_receiveStatusPacket+0xb6>
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	3302      	adds	r3, #2
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2bfd      	cmp	r3, #253	@ 0xfd
 80015fe:	d106      	bne.n	800160e <Dynamixel_receiveStatusPacket+0xb6>
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	3308      	adds	r3, #8
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <Dynamixel_receiveStatusPacket+0xb6>
 800160a:	2301      	movs	r3, #1
 800160c:	e000      	b.n	8001610 <Dynamixel_receiveStatusPacket+0xb8>
 800160e:	2300      	movs	r3, #0
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	b2db      	uxtb	r3, r3
}
 8001616:	4618      	mov	r0, r3
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000280 	.word	0x20000280

08001624 <Dynamixel_write>:
        if(b[4]==id && b[8]==0x00){*val=b[9];return true;}
    }
    return false;
}

void Dynamixel_write(uint8_t id,uint16_t addr,const uint8_t* d,uint16_t len){
 8001624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001628:	b089      	sub	sp, #36	@ 0x24
 800162a:	af00      	add	r7, sp, #0
 800162c:	60ba      	str	r2, [r7, #8]
 800162e:	461a      	mov	r2, r3
 8001630:	4603      	mov	r3, r0
 8001632:	73fb      	strb	r3, [r7, #15]
 8001634:	460b      	mov	r3, r1
 8001636:	81bb      	strh	r3, [r7, #12]
 8001638:	4613      	mov	r3, r2
 800163a:	80fb      	strh	r3, [r7, #6]
 800163c:	466b      	mov	r3, sp
 800163e:	461e      	mov	r6, r3
    const uint8_t INST_WRITE=0x03;
 8001640:	2303      	movs	r3, #3
 8001642:	77fb      	strb	r3, [r7, #31]
    uint8_t p[len+2];p[0]=addr&0xFF;p[1]=(addr>>8)&0xFF;
 8001644:	88fb      	ldrh	r3, [r7, #6]
 8001646:	1c99      	adds	r1, r3, #2
 8001648:	1e4b      	subs	r3, r1, #1
 800164a:	61bb      	str	r3, [r7, #24]
 800164c:	460a      	mov	r2, r1
 800164e:	2300      	movs	r3, #0
 8001650:	4690      	mov	r8, r2
 8001652:	4699      	mov	r9, r3
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001660:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001664:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001668:	460a      	mov	r2, r1
 800166a:	2300      	movs	r3, #0
 800166c:	4614      	mov	r4, r2
 800166e:	461d      	mov	r5, r3
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	00eb      	lsls	r3, r5, #3
 800167a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800167e:	00e2      	lsls	r2, r4, #3
 8001680:	460b      	mov	r3, r1
 8001682:	3307      	adds	r3, #7
 8001684:	08db      	lsrs	r3, r3, #3
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	ebad 0d03 	sub.w	sp, sp, r3
 800168c:	466b      	mov	r3, sp
 800168e:	3300      	adds	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	89bb      	ldrh	r3, [r7, #12]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	701a      	strb	r2, [r3, #0]
 800169a:	89bb      	ldrh	r3, [r7, #12]
 800169c:	0a1b      	lsrs	r3, r3, #8
 800169e:	b29b      	uxth	r3, r3
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	705a      	strb	r2, [r3, #1]
    memcpy(&p[2],d,len);
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	3302      	adds	r3, #2
 80016aa:	88fa      	ldrh	r2, [r7, #6]
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f008 fc65 	bl	8009f7e <memcpy>
    Dynamixel_transmitPacket(id,INST_WRITE,p,len+2);
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	3302      	adds	r3, #2
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	7ff9      	ldrb	r1, [r7, #31]
 80016bc:	7bf8      	ldrb	r0, [r7, #15]
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	f7ff fe70 	bl	80013a4 <Dynamixel_transmitPacket>
 80016c4:	46b5      	mov	sp, r6
}
 80016c6:	bf00      	nop
 80016c8:	3724      	adds	r7, #36	@ 0x24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080016d0 <Dynamixel_setOperatingMode>:

void Dynamixel_torqueOn(uint8_t id){uint8_t d=1;Dynamixel_write(id,64,&d,1);}
void Dynamixel_setOperatingMode(uint8_t id,uint8_t m){Dynamixel_write(id,11,&m,1);}
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	460a      	mov	r2, r1
 80016da:	71fb      	strb	r3, [r7, #7]
 80016dc:	4613      	mov	r3, r2
 80016de:	71bb      	strb	r3, [r7, #6]
 80016e0:	1dba      	adds	r2, r7, #6
 80016e2:	79f8      	ldrb	r0, [r7, #7]
 80016e4:	2301      	movs	r3, #1
 80016e6:	210b      	movs	r1, #11
 80016e8:	f7ff ff9c 	bl	8001624 <Dynamixel_write>
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <Dynamixel_SyncWrite>:
    if(Dynamixel_receiveStatusPacket(r,15,100))
        return (int32_t)(r[9]|(r[10]<<8)|(r[11]<<16)|(r[12]<<24));
    return -1;
}

void Dynamixel_SyncWrite(uint16_t addr,uint16_t len,const uint8_t* ids,uint8_t cnt,const uint8_t* data){
 80016f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016f8:	b089      	sub	sp, #36	@ 0x24
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	60ba      	str	r2, [r7, #8]
 80016fe:	461a      	mov	r2, r3
 8001700:	4603      	mov	r3, r0
 8001702:	81fb      	strh	r3, [r7, #14]
 8001704:	460b      	mov	r3, r1
 8001706:	81bb      	strh	r3, [r7, #12]
 8001708:	4613      	mov	r3, r2
 800170a:	71fb      	strb	r3, [r7, #7]
 800170c:	466b      	mov	r3, sp
 800170e:	461e      	mov	r6, r3
    const uint8_t INST_SYNC_WRITE=0x83;
 8001710:	2383      	movs	r3, #131	@ 0x83
 8001712:	773b      	strb	r3, [r7, #28]
    uint16_t plen=4+(len+1)*cnt;
 8001714:	89bb      	ldrh	r3, [r7, #12]
 8001716:	3301      	adds	r3, #1
 8001718:	b29a      	uxth	r2, r3
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	b29b      	uxth	r3, r3
 800171e:	fb12 f303 	smulbb	r3, r2, r3
 8001722:	b29b      	uxth	r3, r3
 8001724:	3304      	adds	r3, #4
 8001726:	837b      	strh	r3, [r7, #26]
    uint8_t p[plen];
 8001728:	8b79      	ldrh	r1, [r7, #26]
 800172a:	460b      	mov	r3, r1
 800172c:	3b01      	subs	r3, #1
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	b28b      	uxth	r3, r1
 8001732:	2200      	movs	r2, #0
 8001734:	4698      	mov	r8, r3
 8001736:	4691      	mov	r9, r2
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001744:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001748:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800174c:	b28b      	uxth	r3, r1
 800174e:	2200      	movs	r2, #0
 8001750:	461c      	mov	r4, r3
 8001752:	4615      	mov	r5, r2
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	f04f 0300 	mov.w	r3, #0
 800175c:	00eb      	lsls	r3, r5, #3
 800175e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001762:	00e2      	lsls	r2, r4, #3
 8001764:	460b      	mov	r3, r1
 8001766:	3307      	adds	r3, #7
 8001768:	08db      	lsrs	r3, r3, #3
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	ebad 0d03 	sub.w	sp, sp, r3
 8001770:	466b      	mov	r3, sp
 8001772:	3300      	adds	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
    p[0]=addr&0xFF;p[1]=(addr>>8)&0xFF;p[2]=len&0xFF;p[3]=(len>>8)&0xFF;
 8001776:	89fb      	ldrh	r3, [r7, #14]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	701a      	strb	r2, [r3, #0]
 800177e:	89fb      	ldrh	r3, [r7, #14]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	b29b      	uxth	r3, r3
 8001784:	b2da      	uxtb	r2, r3
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	705a      	strb	r2, [r3, #1]
 800178a:	89bb      	ldrh	r3, [r7, #12]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	709a      	strb	r2, [r3, #2]
 8001792:	89bb      	ldrh	r3, [r7, #12]
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	b29b      	uxth	r3, r3
 8001798:	b2da      	uxtb	r2, r3
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	70da      	strb	r2, [r3, #3]
    uint16_t pos=4;
 800179e:	2304      	movs	r3, #4
 80017a0:	83fb      	strh	r3, [r7, #30]
    for(uint8_t i=0;i<cnt;i++){p[pos++]=ids[i];memcpy(&p[pos],&data[i*len],len);pos+=len;}
 80017a2:	2300      	movs	r3, #0
 80017a4:	777b      	strb	r3, [r7, #29]
 80017a6:	e01e      	b.n	80017e6 <Dynamixel_SyncWrite+0xf2>
 80017a8:	7f7b      	ldrb	r3, [r7, #29]
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	441a      	add	r2, r3
 80017ae:	8bfb      	ldrh	r3, [r7, #30]
 80017b0:	1c59      	adds	r1, r3, #1
 80017b2:	83f9      	strh	r1, [r7, #30]
 80017b4:	4619      	mov	r1, r3
 80017b6:	7812      	ldrb	r2, [r2, #0]
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	545a      	strb	r2, [r3, r1]
 80017bc:	8bfb      	ldrh	r3, [r7, #30]
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	18d0      	adds	r0, r2, r3
 80017c2:	7f7b      	ldrb	r3, [r7, #29]
 80017c4:	89ba      	ldrh	r2, [r7, #12]
 80017c6:	fb02 f303 	mul.w	r3, r2, r3
 80017ca:	461a      	mov	r2, r3
 80017cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017ce:	4413      	add	r3, r2
 80017d0:	89ba      	ldrh	r2, [r7, #12]
 80017d2:	4619      	mov	r1, r3
 80017d4:	f008 fbd3 	bl	8009f7e <memcpy>
 80017d8:	8bfa      	ldrh	r2, [r7, #30]
 80017da:	89bb      	ldrh	r3, [r7, #12]
 80017dc:	4413      	add	r3, r2
 80017de:	83fb      	strh	r3, [r7, #30]
 80017e0:	7f7b      	ldrb	r3, [r7, #29]
 80017e2:	3301      	adds	r3, #1
 80017e4:	777b      	strb	r3, [r7, #29]
 80017e6:	7f7a      	ldrb	r2, [r7, #29]
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d3dc      	bcc.n	80017a8 <Dynamixel_SyncWrite+0xb4>
    Dynamixel_transmitPacket(0xFE,INST_SYNC_WRITE,p,plen);
 80017ee:	8b7b      	ldrh	r3, [r7, #26]
 80017f0:	7f39      	ldrb	r1, [r7, #28]
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	20fe      	movs	r0, #254	@ 0xfe
 80017f6:	f7ff fdd5 	bl	80013a4 <Dynamixel_transmitPacket>
 80017fa:	46b5      	mov	sp, r6
}
 80017fc:	bf00      	nop
 80017fe:	3724      	adds	r7, #36	@ 0x24
 8001800:	46bd      	mov	sp, r7
 8001802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001806 <Dynamixel_SyncRead>:

void Dynamixel_SyncRead(uint16_t addr,uint16_t len,const uint8_t* ids,uint8_t cnt){
 8001806:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800180a:	b089      	sub	sp, #36	@ 0x24
 800180c:	af00      	add	r7, sp, #0
 800180e:	60ba      	str	r2, [r7, #8]
 8001810:	461a      	mov	r2, r3
 8001812:	4603      	mov	r3, r0
 8001814:	81fb      	strh	r3, [r7, #14]
 8001816:	460b      	mov	r3, r1
 8001818:	81bb      	strh	r3, [r7, #12]
 800181a:	4613      	mov	r3, r2
 800181c:	71fb      	strb	r3, [r7, #7]
 800181e:	466b      	mov	r3, sp
 8001820:	461e      	mov	r6, r3
    const uint8_t INST_SYNC_READ=0x82;
 8001822:	2382      	movs	r3, #130	@ 0x82
 8001824:	77bb      	strb	r3, [r7, #30]
    uint16_t plen=4+cnt;
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	b29b      	uxth	r3, r3
 800182a:	3304      	adds	r3, #4
 800182c:	83bb      	strh	r3, [r7, #28]
    uint8_t p[plen];
 800182e:	8bb9      	ldrh	r1, [r7, #28]
 8001830:	460b      	mov	r3, r1
 8001832:	3b01      	subs	r3, #1
 8001834:	61bb      	str	r3, [r7, #24]
 8001836:	b28b      	uxth	r3, r1
 8001838:	2200      	movs	r2, #0
 800183a:	4698      	mov	r8, r3
 800183c:	4691      	mov	r9, r2
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800184a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800184e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001852:	b28b      	uxth	r3, r1
 8001854:	2200      	movs	r2, #0
 8001856:	461c      	mov	r4, r3
 8001858:	4615      	mov	r5, r2
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	00eb      	lsls	r3, r5, #3
 8001864:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001868:	00e2      	lsls	r2, r4, #3
 800186a:	460b      	mov	r3, r1
 800186c:	3307      	adds	r3, #7
 800186e:	08db      	lsrs	r3, r3, #3
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	ebad 0d03 	sub.w	sp, sp, r3
 8001876:	466b      	mov	r3, sp
 8001878:	3300      	adds	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
    p[0]=addr&0xFF;p[1]=(addr>>8)&0xFF;p[2]=len&0xFF;p[3]=(len>>8)&0xFF;
 800187c:	89fb      	ldrh	r3, [r7, #14]
 800187e:	b2da      	uxtb	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	701a      	strb	r2, [r3, #0]
 8001884:	89fb      	ldrh	r3, [r7, #14]
 8001886:	0a1b      	lsrs	r3, r3, #8
 8001888:	b29b      	uxth	r3, r3
 800188a:	b2da      	uxtb	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	705a      	strb	r2, [r3, #1]
 8001890:	89bb      	ldrh	r3, [r7, #12]
 8001892:	b2da      	uxtb	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	709a      	strb	r2, [r3, #2]
 8001898:	89bb      	ldrh	r3, [r7, #12]
 800189a:	0a1b      	lsrs	r3, r3, #8
 800189c:	b29b      	uxth	r3, r3
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	70da      	strb	r2, [r3, #3]
    for(uint8_t i=0;i<cnt;i++)p[4+i]=ids[i];
 80018a4:	2300      	movs	r3, #0
 80018a6:	77fb      	strb	r3, [r7, #31]
 80018a8:	e00a      	b.n	80018c0 <Dynamixel_SyncRead+0xba>
 80018aa:	7ffb      	ldrb	r3, [r7, #31]
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	441a      	add	r2, r3
 80018b0:	7ffb      	ldrb	r3, [r7, #31]
 80018b2:	3304      	adds	r3, #4
 80018b4:	7811      	ldrb	r1, [r2, #0]
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	54d1      	strb	r1, [r2, r3]
 80018ba:	7ffb      	ldrb	r3, [r7, #31]
 80018bc:	3301      	adds	r3, #1
 80018be:	77fb      	strb	r3, [r7, #31]
 80018c0:	7ffa      	ldrb	r2, [r7, #31]
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d3f0      	bcc.n	80018aa <Dynamixel_SyncRead+0xa4>
    Dynamixel_transmitPacket(0xFE,INST_SYNC_READ,p,plen);
 80018c8:	8bbb      	ldrh	r3, [r7, #28]
 80018ca:	7fb9      	ldrb	r1, [r7, #30]
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	20fe      	movs	r0, #254	@ 0xfe
 80018d0:	f7ff fd68 	bl	80013a4 <Dynamixel_transmitPacket>
 80018d4:	46b5      	mov	sp, r6
}
 80018d6:	bf00      	nop
 80018d8:	3724      	adds	r7, #36	@ 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080018e0 <update_crc>:

unsigned short update_crc(unsigned short c,unsigned char *d,unsigned short s){
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	6039      	str	r1, [r7, #0]
 80018ea:	80fb      	strh	r3, [r7, #6]
 80018ec:	4613      	mov	r3, r2
 80018ee:	80bb      	strh	r3, [r7, #4]
            0x03A6, 0x03AC, 0x83A9, 0x03B8, 0x83BD, 0x83B7, 0x03B2, 0x0390, 0x8395, 0x839F, 0x039A, 0x838B, 0x038E, 0x0384, 0x8381, 0x0280, 0x8285, 0x828F,
            0x028A, 0x829B, 0x029E, 0x0294, 0x8291, 0x82B3, 0x02B6, 0x02BC, 0x82B9, 0x02A8, 0x82AD, 0x82A7, 0x02A2, 0x82E3, 0x02E6, 0x02EC, 0x82E9, 0x02F8,
            0x82FD, 0x82F7, 0x02F2, 0x02D0, 0x82D5, 0x82DF, 0x02DA, 0x82CB, 0x02CE, 0x02C4, 0x82C1, 0x8243, 0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257,
            0x0252, 0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231, 0x8213,
            0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202};
    for(unsigned short j=0;j<s;j++){unsigned short i=((c>>8)^d[j])&0xFF;c=(c<<8)^t[i];}
 80018f0:	2300      	movs	r3, #0
 80018f2:	81fb      	strh	r3, [r7, #14]
 80018f4:	e019      	b.n	800192a <update_crc+0x4a>
 80018f6:	88fb      	ldrh	r3, [r7, #6]
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	89fa      	ldrh	r2, [r7, #14]
 80018fe:	6839      	ldr	r1, [r7, #0]
 8001900:	440a      	add	r2, r1
 8001902:	7812      	ldrb	r2, [r2, #0]
 8001904:	4053      	eors	r3, r2
 8001906:	b29b      	uxth	r3, r3
 8001908:	b2db      	uxtb	r3, r3
 800190a:	81bb      	strh	r3, [r7, #12]
 800190c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001910:	021b      	lsls	r3, r3, #8
 8001912:	b21a      	sxth	r2, r3
 8001914:	89bb      	ldrh	r3, [r7, #12]
 8001916:	490a      	ldr	r1, [pc, #40]	@ (8001940 <update_crc+0x60>)
 8001918:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800191c:	b21b      	sxth	r3, r3
 800191e:	4053      	eors	r3, r2
 8001920:	b21b      	sxth	r3, r3
 8001922:	80fb      	strh	r3, [r7, #6]
 8001924:	89fb      	ldrh	r3, [r7, #14]
 8001926:	3301      	adds	r3, #1
 8001928:	81fb      	strh	r3, [r7, #14]
 800192a:	89fa      	ldrh	r2, [r7, #14]
 800192c:	88bb      	ldrh	r3, [r7, #4]
 800192e:	429a      	cmp	r2, r3
 8001930:	d3e1      	bcc.n	80018f6 <update_crc+0x16>
    return c;
 8001932:	88fb      	ldrh	r3, [r7, #6]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	0800cabc 	.word	0x0800cabc

08001944 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194a:	f107 030c 	add.w	r3, r7, #12
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	4b1f      	ldr	r3, [pc, #124]	@ (80019dc <MX_GPIO_Init+0x98>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	4a1e      	ldr	r2, [pc, #120]	@ (80019dc <MX_GPIO_Init+0x98>)
 8001964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001968:	6313      	str	r3, [r2, #48]	@ 0x30
 800196a:	4b1c      	ldr	r3, [pc, #112]	@ (80019dc <MX_GPIO_Init+0x98>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	4b18      	ldr	r3, [pc, #96]	@ (80019dc <MX_GPIO_Init+0x98>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	4a17      	ldr	r2, [pc, #92]	@ (80019dc <MX_GPIO_Init+0x98>)
 8001980:	f043 0304 	orr.w	r3, r3, #4
 8001984:	6313      	str	r3, [r2, #48]	@ 0x30
 8001986:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <MX_GPIO_Init+0x98>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	603b      	str	r3, [r7, #0]
 8001996:	4b11      	ldr	r3, [pc, #68]	@ (80019dc <MX_GPIO_Init+0x98>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	4a10      	ldr	r2, [pc, #64]	@ (80019dc <MX_GPIO_Init+0x98>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a2:	4b0e      	ldr	r3, [pc, #56]	@ (80019dc <MX_GPIO_Init+0x98>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	603b      	str	r3, [r7, #0]
 80019ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2110      	movs	r1, #16
 80019b2:	480b      	ldr	r0, [pc, #44]	@ (80019e0 <MX_GPIO_Init+0x9c>)
 80019b4:	f003 fa54 	bl	8004e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019b8:	2310      	movs	r3, #16
 80019ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019bc:	2301      	movs	r3, #1
 80019be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	4619      	mov	r1, r3
 80019ce:	4804      	ldr	r0, [pc, #16]	@ (80019e0 <MX_GPIO_Init+0x9c>)
 80019d0:	f003 f8b2 	bl	8004b38 <HAL_GPIO_Init>

}
 80019d4:	bf00      	nop
 80019d6:	3720      	adds	r7, #32
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020000 	.word	0x40020000

080019e4 <GripStop_Init>:
                   uint8_t debounce_cnt_req,
                   float max_speed_dps,
                   float ema_alpha,
                   float tol_deg,
                   uint32_t timeout_ms)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	@ 0x28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6278      	str	r0, [r7, #36]	@ 0x24
 80019ec:	6239      	str	r1, [r7, #32]
 80019ee:	4611      	mov	r1, r2
 80019f0:	ed87 0a06 	vstr	s0, [r7, #24]
 80019f4:	edc7 0a05 	vstr	s1, [r7, #20]
 80019f8:	ed87 1a04 	vstr	s2, [r7, #16]
 80019fc:	461a      	mov	r2, r3
 80019fe:	edc7 1a03 	vstr	s3, [r7, #12]
 8001a02:	ed87 2a02 	vstr	s4, [r7, #8]
 8001a06:	edc7 2a01 	vstr	s5, [r7, #4]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	77fb      	strb	r3, [r7, #31]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	77bb      	strb	r3, [r7, #30]
  g->servo             = servo;
 8001a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a14:	6a3a      	ldr	r2, [r7, #32]
 8001a16:	601a      	str	r2, [r3, #0]
  g->side              = side;
 8001a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1a:	7ffa      	ldrb	r2, [r7, #31]
 8001a1c:	711a      	strb	r2, [r3, #4]
  g->start_deg         = start_deg;
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	60da      	str	r2, [r3, #12]
  g->target_deg        = target_deg;
 8001a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	611a      	str	r2, [r3, #16]
  g->press_thresh_raw  = press_thresh_raw;
 8001a2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a32:	ee17 3a90 	vmov	r3, s15
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3a:	80da      	strh	r2, [r3, #6]
  g->debounce_cnt_req  = (debounce_cnt_req == 0) ? 1 : debounce_cnt_req;
 8001a3c:	7fbb      	ldrb	r3, [r7, #30]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <GripStop_Init+0x62>
 8001a42:	7fba      	ldrb	r2, [r7, #30]
 8001a44:	e000      	b.n	8001a48 <GripStop_Init+0x64>
 8001a46:	2201      	movs	r2, #1
 8001a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4a:	721a      	strb	r2, [r3, #8]
  g->max_speed_dps     = (max_speed_dps < 1.0f) ? 1.0f : max_speed_dps;
 8001a4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001a54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5c:	d502      	bpl.n	8001a64 <GripStop_Init+0x80>
 8001a5e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001a62:	e000      	b.n	8001a66 <GripStop_Init+0x82>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a68:	6153      	str	r3, [r2, #20]
  g->ema_alpha         = (ema_alpha < 0.f) ? 0.f : (ema_alpha > 1.f ? 1.f : ema_alpha);
 8001a6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a76:	d502      	bpl.n	8001a7e <GripStop_Init+0x9a>
 8001a78:	f04f 0300 	mov.w	r3, #0
 8001a7c:	e00c      	b.n	8001a98 <GripStop_Init+0xb4>
 8001a7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001a86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8e:	dd02      	ble.n	8001a96 <GripStop_Init+0xb2>
 8001a90:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001a94:	e000      	b.n	8001a98 <GripStop_Init+0xb4>
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a9a:	6193      	str	r3, [r2, #24]
  g->tol_deg           = (tol_deg < 0.1f) ? 0.1f : tol_deg;
 8001a9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aa0:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001b14 <GripStop_Init+0x130>
 8001aa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aac:	d501      	bpl.n	8001ab2 <GripStop_Init+0xce>
 8001aae:	4b1a      	ldr	r3, [pc, #104]	@ (8001b18 <GripStop_Init+0x134>)
 8001ab0:	e000      	b.n	8001ab4 <GripStop_Init+0xd0>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ab6:	61d3      	str	r3, [r2, #28]
  g->timeout_ms        = timeout_ms;
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001abc:	621a      	str	r2, [r3, #32]

  g->hold_deg          = start_deg;
 8001abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	625a      	str	r2, [r3, #36]	@ 0x24
  g->last_pressure_pct = 0.f;
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	629a      	str	r2, [r3, #40]	@ 0x28

  g->stopped = 0;
 8001acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  g->deb_cnt = 0;
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  g->state   = GRIP_RUNNING;
 8001adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

  Servo_SetMaxSpeedDps(g->servo, g->max_speed_dps);
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aea:	edd3 7a05 	vldr	s15, [r3, #20]
 8001aee:	eeb0 0a67 	vmov.f32	s0, s15
 8001af2:	4610      	mov	r0, r2
 8001af4:	f001 f9f0 	bl	8002ed8 <Servo_SetMaxSpeedDps>
  Servo_SetEmaAlpha   (g->servo, g->ema_alpha);
 8001af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afe:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b02:	eeb0 0a67 	vmov.f32	s0, s15
 8001b06:	4610      	mov	r0, r2
 8001b08:	f001 fa14 	bl	8002f34 <Servo_SetEmaAlpha>
}
 8001b0c:	bf00      	nop
 8001b0e:	3728      	adds	r7, #40	@ 0x28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	3dcccccd 	.word	0x3dcccccd
 8001b18:	3dcccccd 	.word	0x3dcccccd

08001b1c <GripStop_Start>:

void GripStop_Start(GripStop* g)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  if (!g || !g->servo) return;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d042      	beq.n	8001bb0 <GripStop_Start+0x94>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d03e      	beq.n	8001bb0 <GripStop_Start+0x94>

  (void)Servo_MoveToBlocking(g->servo, g->start_deg, g->tol_deg,
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	edd3 6a05 	vldr	s13, [r3, #20]
                             g->max_speed_dps, g->timeout_ms ? g->timeout_ms : 5000);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
  (void)Servo_MoveToBlocking(g->servo, g->start_deg, g->tol_deg,
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d002      	beq.n	8001b56 <GripStop_Start+0x3a>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	e001      	b.n	8001b5a <GripStop_Start+0x3e>
 8001b56:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	eeb0 1a66 	vmov.f32	s2, s13
 8001b60:	eef0 0a47 	vmov.f32	s1, s14
 8001b64:	eeb0 0a67 	vmov.f32	s0, s15
 8001b68:	4610      	mov	r0, r2
 8001b6a:	f001 facb 	bl	8003104 <Servo_MoveToBlocking>

  Servo_SetMaxSpeedDps(g->servo, g->max_speed_dps);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b78:	eeb0 0a67 	vmov.f32	s0, s15
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	f001 f9ab 	bl	8002ed8 <Servo_SetMaxSpeedDps>
  Servo_SetTargetDegrees(g->servo, g->target_deg);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b90:	4610      	mov	r0, r2
 8001b92:	f001 f981 	bl	8002e98 <Servo_SetTargetDegrees>

  g->stopped = 0;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  g->deb_cnt = 0;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  g->state   = GRIP_RUNNING;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 8001bae:	e000      	b.n	8001bb2 <GripStop_Start+0x96>
  if (!g || !g->servo) return;
 8001bb0:	bf00      	nop
}
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <LinkComm_Init>:
uint8_t rx_char;
uint8_t rx_buffer[RX_BUFFER_SIZE];
uint16_t last_rx_index = 0;
volatile bool data_ready = false;

void LinkComm_Init(UART_HandleTypeDef* huart) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
    link_uart = huart;
 8001bc0:	4a0f      	ldr	r2, [pc, #60]	@ (8001c00 <LinkComm_Init+0x48>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_DMA(link_uart, rx_buffer, RX_BUFFER_SIZE);
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c00 <LinkComm_Init+0x48>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001bce:	490d      	ldr	r1, [pc, #52]	@ (8001c04 <LinkComm_Init+0x4c>)
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f004 ff23 	bl	8006a1c <HAL_UART_Receive_DMA>
    __HAL_UART_ENABLE_IT(link_uart, UART_IT_IDLE);
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c00 <LinkComm_Init+0x48>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	4b08      	ldr	r3, [pc, #32]	@ (8001c00 <LinkComm_Init+0x48>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f042 0210 	orr.w	r2, r2, #16
 8001be8:	60da      	str	r2, [r3, #12]
    HAL_UART_Receive_IT(link_uart, &rx_char, 1);
 8001bea:	4b05      	ldr	r3, [pc, #20]	@ (8001c00 <LinkComm_Init+0x48>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	4905      	ldr	r1, [pc, #20]	@ (8001c08 <LinkComm_Init+0x50>)
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f004 feed 	bl	80069d2 <HAL_UART_Receive_IT>
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	2000028c 	.word	0x2000028c
 8001c04:	20000294 	.word	0x20000294
 8001c08:	20000290 	.word	0x20000290

08001c0c <LinkComm_Task>:

void LinkComm_Task(void) {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
    if (data_ready) {
 8001c10:	4b09      	ldr	r3, [pc, #36]	@ (8001c38 <LinkComm_Task+0x2c>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00b      	beq.n	8001c32 <LinkComm_Task+0x26>
        data_ready = false;
 8001c1a:	4b07      	ldr	r3, [pc, #28]	@ (8001c38 <LinkComm_Task+0x2c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
        parse_and_control((char*)rx_buffer);
 8001c20:	4806      	ldr	r0, [pc, #24]	@ (8001c3c <LinkComm_Task+0x30>)
 8001c22:	f000 fbd9 	bl	80023d8 <parse_and_control>
        memset(rx_buffer, 0, sizeof(rx_buffer));
 8001c26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4803      	ldr	r0, [pc, #12]	@ (8001c3c <LinkComm_Task+0x30>)
 8001c2e:	f008 f8dd 	bl	8009dec <memset>
    }
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000a96 	.word	0x20000a96
 8001c3c:	20000294 	.word	0x20000294

08001c40 <print_to_link>:

void print_to_link(const char *fmt, ...) {
 8001c40:	b40f      	push	{r0, r1, r2, r3}
 8001c42:	b590      	push	{r4, r7, lr}
 8001c44:	b0c3      	sub	sp, #268	@ 0x10c
 8001c46:	af00      	add	r7, sp, #0
    char buff[256];
    va_list args;
    va_start(args, fmt);
 8001c48:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 8001c4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c54:	601a      	str	r2, [r3, #0]
    vsnprintf(buff, sizeof(buff), fmt, args);
 8001c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c5e:	f107 0008 	add.w	r0, r7, #8
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001c68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c6c:	f008 f81c 	bl	8009ca8 <vsniprintf>
    HAL_UART_Transmit(link_uart, (uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
 8001c70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca0 <print_to_link+0x60>)
 8001c72:	681c      	ldr	r4, [r3, #0]
 8001c74:	f107 0308 	add.w	r3, r7, #8
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fb19 	bl	80002b0 <strlen>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	f107 0108 	add.w	r1, r7, #8
 8001c86:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	f004 fe16 	bl	80068bc <HAL_UART_Transmit>
    va_end(args);
}
 8001c90:	bf00      	nop
 8001c92:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 8001c96:	46bd      	mov	sp, r7
 8001c98:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001c9c:	b004      	add	sp, #16
 8001c9e:	4770      	bx	lr
 8001ca0:	2000028c 	.word	0x2000028c

08001ca4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
    if (huart->Instance == link_uart->Instance) {
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d28 <HAL_UART_RxCpltCallback+0x84>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d12a      	bne.n	8001d10 <HAL_UART_RxCpltCallback+0x6c>
        uint8_t rx_data = rx_char;
 8001cba:	4b1c      	ldr	r3, [pc, #112]	@ (8001d2c <HAL_UART_RxCpltCallback+0x88>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	73fb      	strb	r3, [r7, #15]
        if (rx_data == '!' || last_rx_index >= RX_BUFFER_SIZE - 1) {
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	2b21      	cmp	r3, #33	@ 0x21
 8001cc4:	d005      	beq.n	8001cd2 <HAL_UART_RxCpltCallback+0x2e>
 8001cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d30 <HAL_UART_RxCpltCallback+0x8c>)
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d90c      	bls.n	8001cec <HAL_UART_RxCpltCallback+0x48>
            rx_buffer[last_rx_index] = '\0';
 8001cd2:	4b17      	ldr	r3, [pc, #92]	@ (8001d30 <HAL_UART_RxCpltCallback+0x8c>)
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4b16      	ldr	r3, [pc, #88]	@ (8001d34 <HAL_UART_RxCpltCallback+0x90>)
 8001cda:	2100      	movs	r1, #0
 8001cdc:	5499      	strb	r1, [r3, r2]
            last_rx_index = 0;
 8001cde:	4b14      	ldr	r3, [pc, #80]	@ (8001d30 <HAL_UART_RxCpltCallback+0x8c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	801a      	strh	r2, [r3, #0]
            data_ready = true;
 8001ce4:	4b14      	ldr	r3, [pc, #80]	@ (8001d38 <HAL_UART_RxCpltCallback+0x94>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	701a      	strb	r2, [r3, #0]
 8001cea:	e009      	b.n	8001d00 <HAL_UART_RxCpltCallback+0x5c>
        } else {
            rx_buffer[last_rx_index++] = rx_data;
 8001cec:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <HAL_UART_RxCpltCallback+0x8c>)
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	1c5a      	adds	r2, r3, #1
 8001cf2:	b291      	uxth	r1, r2
 8001cf4:	4a0e      	ldr	r2, [pc, #56]	@ (8001d30 <HAL_UART_RxCpltCallback+0x8c>)
 8001cf6:	8011      	strh	r1, [r2, #0]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4a0e      	ldr	r2, [pc, #56]	@ (8001d34 <HAL_UART_RxCpltCallback+0x90>)
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	5453      	strb	r3, [r2, r1]
        }
        HAL_UART_Receive_IT(link_uart, &rx_char, 1);
 8001d00:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <HAL_UART_RxCpltCallback+0x84>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2201      	movs	r2, #1
 8001d06:	4909      	ldr	r1, [pc, #36]	@ (8001d2c <HAL_UART_RxCpltCallback+0x88>)
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f004 fe62 	bl	80069d2 <HAL_UART_Receive_IT>
    } else if (huart->Instance == UART4) {
        Dynamixel_Handle.dma_rx_complete_flag = true;
    }
}
 8001d0e:	e007      	b.n	8001d20 <HAL_UART_RxCpltCallback+0x7c>
    } else if (huart->Instance == UART4) {
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a09      	ldr	r2, [pc, #36]	@ (8001d3c <HAL_UART_RxCpltCallback+0x98>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d102      	bne.n	8001d20 <HAL_UART_RxCpltCallback+0x7c>
        Dynamixel_Handle.dma_rx_complete_flag = true;
 8001d1a:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <HAL_UART_RxCpltCallback+0x9c>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	729a      	strb	r2, [r3, #10]
}
 8001d20:	bf00      	nop
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	2000028c 	.word	0x2000028c
 8001d2c:	20000290 	.word	0x20000290
 8001d30:	20000a94 	.word	0x20000a94
 8001d34:	20000294 	.word	0x20000294
 8001d38:	20000a96 	.word	0x20000a96
 8001d3c:	40004c00 	.word	0x40004c00
 8001d40:	20000280 	.word	0x20000280

08001d44 <HAL_UART_IDLE_Callback>:

void HAL_UART_IDLE_Callback(UART_HandleTypeDef *huart) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == link_uart->Instance) {
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b23      	ldr	r3, [pc, #140]	@ (8001de0 <HAL_UART_IDLE_Callback+0x9c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d13d      	bne.n	8001dd6 <HAL_UART_IDLE_Callback+0x92>
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
        uint16_t current_pos = RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001d7e:	81fb      	strh	r3, [r7, #14]
        uint16_t data_len = (current_pos >= last_rx_index) ?
 8001d80:	4b18      	ldr	r3, [pc, #96]	@ (8001de4 <HAL_UART_IDLE_Callback+0xa0>)
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	89fa      	ldrh	r2, [r7, #14]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d305      	bcc.n	8001d96 <HAL_UART_IDLE_Callback+0x52>
                             (current_pos - last_rx_index) :
 8001d8a:	4b16      	ldr	r3, [pc, #88]	@ (8001de4 <HAL_UART_IDLE_Callback+0xa0>)
 8001d8c:	881b      	ldrh	r3, [r3, #0]
        uint16_t data_len = (current_pos >= last_rx_index) ?
 8001d8e:	89fa      	ldrh	r2, [r7, #14]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	e007      	b.n	8001da6 <HAL_UART_IDLE_Callback+0x62>
                             (RX_BUFFER_SIZE - last_rx_index + current_pos);
 8001d96:	4b13      	ldr	r3, [pc, #76]	@ (8001de4 <HAL_UART_IDLE_Callback+0xa0>)
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	89fa      	ldrh	r2, [r7, #14]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	b29b      	uxth	r3, r3
        uint16_t data_len = (current_pos >= last_rx_index) ?
 8001da0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	81bb      	strh	r3, [r7, #12]
        if (data_len > 0) {
 8001da8:	89bb      	ldrh	r3, [r7, #12]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d010      	beq.n	8001dd0 <HAL_UART_IDLE_Callback+0x8c>
            memcpy(rx_buffer, &rx_buffer[last_rx_index], data_len);
 8001dae:	4b0d      	ldr	r3, [pc, #52]	@ (8001de4 <HAL_UART_IDLE_Callback+0xa0>)
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	4b0c      	ldr	r3, [pc, #48]	@ (8001de8 <HAL_UART_IDLE_Callback+0xa4>)
 8001db6:	4413      	add	r3, r2
 8001db8:	89ba      	ldrh	r2, [r7, #12]
 8001dba:	4619      	mov	r1, r3
 8001dbc:	480a      	ldr	r0, [pc, #40]	@ (8001de8 <HAL_UART_IDLE_Callback+0xa4>)
 8001dbe:	f008 f8de 	bl	8009f7e <memcpy>
            rx_buffer[data_len] = '\0';
 8001dc2:	89bb      	ldrh	r3, [r7, #12]
 8001dc4:	4a08      	ldr	r2, [pc, #32]	@ (8001de8 <HAL_UART_IDLE_Callback+0xa4>)
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	54d1      	strb	r1, [r2, r3]
            data_ready = true;
 8001dca:	4b08      	ldr	r3, [pc, #32]	@ (8001dec <HAL_UART_IDLE_Callback+0xa8>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	701a      	strb	r2, [r3, #0]
        }
        last_rx_index = current_pos;
 8001dd0:	4a04      	ldr	r2, [pc, #16]	@ (8001de4 <HAL_UART_IDLE_Callback+0xa0>)
 8001dd2:	89fb      	ldrh	r3, [r7, #14]
 8001dd4:	8013      	strh	r3, [r2, #0]
    }
}
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	2000028c 	.word	0x2000028c
 8001de4:	20000a94 	.word	0x20000a94
 8001de8:	20000294 	.word	0x20000294
 8001dec:	20000a96 	.word	0x20000a96

08001df0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001df8:	1d39      	adds	r1, r7, #4
 8001dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfe:	2201      	movs	r2, #1
 8001e00:	4803      	ldr	r0, [pc, #12]	@ (8001e10 <__io_putchar+0x20>)
 8001e02:	f004 fd5b 	bl	80068bc <HAL_UART_Transmit>
  return ch;
 8001e06:	687b      	ldr	r3, [r7, #4]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000c04 	.word	0x20000c04

08001e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e18:	f001 fe72 	bl	8003b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e1c:	f000 f83a 	bl	8001e94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e20:	f7ff fd90 	bl	8001944 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e24:	f7ff fa34 	bl	8001290 <MX_DMA_Init>
  MX_UART4_Init();
 8001e28:	f001 fc9a 	bl	8003760 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8001e2c:	f001 fcc2 	bl	80037b4 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001e30:	f001 fcea 	bl	8003808 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001e34:	f7ff f914 	bl	8001060 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001e38:	f7ff f964 	bl	8001104 <MX_ADC2_Init>
  MX_TIM3_Init();
 8001e3c:	f001 fbb0 	bl	80035a0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  #if defined(USE_MY_DWT)
  DWT_Init();
 8001e40:	f7ff fa5c 	bl	80012fc <DWT_Init>
  #endif

  Dynamixel_begin(&huart4, GPIOA, GPIO_PIN_4);
 8001e44:	2210      	movs	r2, #16
 8001e46:	490e      	ldr	r1, [pc, #56]	@ (8001e80 <main+0x6c>)
 8001e48:	480e      	ldr	r0, [pc, #56]	@ (8001e84 <main+0x70>)
 8001e4a:	f7ff fa77 	bl	800133c <Dynamixel_begin>
  LinkComm_Init(&huart6);
 8001e4e:	480e      	ldr	r0, [pc, #56]	@ (8001e88 <main+0x74>)
 8001e50:	f7ff feb2 	bl	8001bb8 <LinkComm_Init>
  init_dynamixels();
 8001e54:	f000 f896 	bl	8001f84 <init_dynamixels>

  #if DO_INIT_HOME
  print_to_link("Ready. Init homing...\r\n");
 8001e58:	480c      	ldr	r0, [pc, #48]	@ (8001e8c <main+0x78>)
 8001e5a:	f7ff fef1 	bl	8001c40 <print_to_link>
  init_move_all_to_180();
 8001e5e:	f000 fd2b 	bl	80028b8 <init_move_all_to_180>
  print_to_link("Init done.\r\n");
 8001e62:	480b      	ldr	r0, [pc, #44]	@ (8001e90 <main+0x7c>)
 8001e64:	f7ff feec 	bl	8001c40 <print_to_link>
  #endif

  ServoSystem_Init();
 8001e68:	f001 f9a2 	bl	80031b0 <ServoSystem_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	LinkComm_Task();
 8001e6c:	f7ff fece 	bl	8001c0c <LinkComm_Task>
    update_all_motors();
 8001e70:	f000 fda8 	bl	80029c4 <update_all_motors>
//    sample_and_print();
//    GripStop_Update(&g1);
//    GripStop_Update(&g2);
    HAL_Delay(2);
 8001e74:	2002      	movs	r0, #2
 8001e76:	f001 feb5 	bl	8003be4 <HAL_Delay>
	LinkComm_Task();
 8001e7a:	bf00      	nop
 8001e7c:	e7f6      	b.n	8001e6c <main+0x58>
 8001e7e:	bf00      	nop
 8001e80:	40020000 	.word	0x40020000
 8001e84:	20000bbc 	.word	0x20000bbc
 8001e88:	20000c4c 	.word	0x20000c4c
 8001e8c:	0800c8f8 	.word	0x0800c8f8
 8001e90:	0800c910 	.word	0x0800c910

08001e94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b094      	sub	sp, #80	@ 0x50
 8001e98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e9a:	f107 031c 	add.w	r3, r7, #28
 8001e9e:	2234      	movs	r2, #52	@ 0x34
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f007 ffa2 	bl	8009dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ea8:	f107 0308 	add.w	r3, r7, #8
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb8:	2300      	movs	r3, #0
 8001eba:	607b      	str	r3, [r7, #4]
 8001ebc:	4b2c      	ldr	r3, [pc, #176]	@ (8001f70 <SystemClock_Config+0xdc>)
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec0:	4a2b      	ldr	r2, [pc, #172]	@ (8001f70 <SystemClock_Config+0xdc>)
 8001ec2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ec6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ec8:	4b29      	ldr	r3, [pc, #164]	@ (8001f70 <SystemClock_Config+0xdc>)
 8001eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ecc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed0:	607b      	str	r3, [r7, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	603b      	str	r3, [r7, #0]
 8001ed8:	4b26      	ldr	r3, [pc, #152]	@ (8001f74 <SystemClock_Config+0xe0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a25      	ldr	r2, [pc, #148]	@ (8001f74 <SystemClock_Config+0xe0>)
 8001ede:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	4b23      	ldr	r3, [pc, #140]	@ (8001f74 <SystemClock_Config+0xe0>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001eec:	603b      	str	r3, [r7, #0]
 8001eee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001ef4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001ef8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001efa:	2302      	movs	r3, #2
 8001efc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001efe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f02:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f04:	2304      	movs	r3, #4
 8001f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001f08:	23b4      	movs	r3, #180	@ 0xb4
 8001f0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f10:	2302      	movs	r3, #2
 8001f12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f14:	2302      	movs	r3, #2
 8001f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f18:	f107 031c 	add.w	r3, r7, #28
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f003 fb53 	bl	80055c8 <HAL_RCC_OscConfig>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001f28:	f000 f826 	bl	8001f78 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f2c:	f002 ffb2 	bl	8004e94 <HAL_PWREx_EnableOverDrive>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001f36:	f000 f81f 	bl	8001f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f3a:	230f      	movs	r3, #15
 8001f3c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f46:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f50:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f52:	f107 0308 	add.w	r3, r7, #8
 8001f56:	2105      	movs	r1, #5
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f002 ffeb 	bl	8004f34 <HAL_RCC_ClockConfig>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001f64:	f000 f808 	bl	8001f78 <Error_Handler>
  }
}
 8001f68:	bf00      	nop
 8001f6a:	3750      	adds	r7, #80	@ 0x50
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40007000 	.word	0x40007000

08001f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f7c:	b672      	cpsid	i
}
 8001f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f80:	bf00      	nop
 8001f82:	e7fd      	b.n	8001f80 <Error_Handler+0x8>

08001f84 <init_dynamixels>:
extern const uint8_t DXL_ID_LIST[];
extern const float VEL_DPS[];
#define DXL_ID_CNT 7
static float g_target_deg[DXL_ID_CNT];

void init_dynamixels(void) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
    printf("Torque ON, setting Operating Mode 3 (Position Control)...\r\n");
 8001f8a:	482f      	ldr	r0, [pc, #188]	@ (8002048 <init_dynamixels+0xc4>)
 8001f8c:	f007 fdf0 	bl	8009b70 <puts>
    for (uint8_t i = 0; i < DXL_ID_CNT; i++) {
 8001f90:	2300      	movs	r3, #0
 8001f92:	73fb      	strb	r3, [r7, #15]
 8001f94:	e050      	b.n	8002038 <init_dynamixels+0xb4>
         uint8_t current_id = DXL_ID_LIST[i];
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
 8001f98:	4a2c      	ldr	r2, [pc, #176]	@ (800204c <init_dynamixels+0xc8>)
 8001f9a:	5cd3      	ldrb	r3, [r2, r3]
 8001f9c:	737b      	strb	r3, [r7, #13]
         Dynamixel_write(current_id, 64, (uint8_t[]){0}, 1);
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	733b      	strb	r3, [r7, #12]
 8001fa2:	f107 020c 	add.w	r2, r7, #12
 8001fa6:	7b78      	ldrb	r0, [r7, #13]
 8001fa8:	2301      	movs	r3, #1
 8001faa:	2140      	movs	r1, #64	@ 0x40
 8001fac:	f7ff fb3a 	bl	8001624 <Dynamixel_write>
         HAL_Delay(50);
 8001fb0:	2032      	movs	r0, #50	@ 0x32
 8001fb2:	f001 fe17 	bl	8003be4 <HAL_Delay>
         Dynamixel_setOperatingMode(current_id, 3);
 8001fb6:	7b7b      	ldrb	r3, [r7, #13]
 8001fb8:	2103      	movs	r1, #3
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fb88 	bl	80016d0 <Dynamixel_setOperatingMode>
         HAL_Delay(50);
 8001fc0:	2032      	movs	r0, #50	@ 0x32
 8001fc2:	f001 fe0f 	bl	8003be4 <HAL_Delay>
         uint16_t P = 1500, I = 60, D = 140;
 8001fc6:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001fca:	817b      	strh	r3, [r7, #10]
 8001fcc:	233c      	movs	r3, #60	@ 0x3c
 8001fce:	813b      	strh	r3, [r7, #8]
 8001fd0:	238c      	movs	r3, #140	@ 0x8c
 8001fd2:	80fb      	strh	r3, [r7, #6]
         Dynamixel_write(2, 84, (uint8_t*)&P, 2);
 8001fd4:	f107 020a 	add.w	r2, r7, #10
 8001fd8:	2302      	movs	r3, #2
 8001fda:	2154      	movs	r1, #84	@ 0x54
 8001fdc:	2002      	movs	r0, #2
 8001fde:	f7ff fb21 	bl	8001624 <Dynamixel_write>
         Dynamixel_write(2, 82, (uint8_t*)&I, 2);
 8001fe2:	f107 0208 	add.w	r2, r7, #8
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	2152      	movs	r1, #82	@ 0x52
 8001fea:	2002      	movs	r0, #2
 8001fec:	f7ff fb1a 	bl	8001624 <Dynamixel_write>
         Dynamixel_write(2, 80, (uint8_t*)&D, 2);
 8001ff0:	1dba      	adds	r2, r7, #6
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	2150      	movs	r1, #80	@ 0x50
 8001ff6:	2002      	movs	r0, #2
 8001ff8:	f7ff fb14 	bl	8001624 <Dynamixel_write>
         Dynamixel_write(current_id, 64, (uint8_t[]){1}, 1);
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	713b      	strb	r3, [r7, #4]
 8002000:	1d3a      	adds	r2, r7, #4
 8002002:	7b78      	ldrb	r0, [r7, #13]
 8002004:	2301      	movs	r3, #1
 8002006:	2140      	movs	r1, #64	@ 0x40
 8002008:	f7ff fb0c 	bl	8001624 <Dynamixel_write>
         HAL_Delay(300);
 800200c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002010:	f001 fde8 	bl	8003be4 <HAL_Delay>
         for (uint8_t i = 0; i < DXL_ID_CNT; ++i) {
 8002014:	2300      	movs	r3, #0
 8002016:	73bb      	strb	r3, [r7, #14]
 8002018:	e008      	b.n	800202c <init_dynamixels+0xa8>
             g_target_deg[i] = 180.0f;
 800201a:	7bbb      	ldrb	r3, [r7, #14]
 800201c:	4a0c      	ldr	r2, [pc, #48]	@ (8002050 <init_dynamixels+0xcc>)
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	4a0c      	ldr	r2, [pc, #48]	@ (8002054 <init_dynamixels+0xd0>)
 8002024:	601a      	str	r2, [r3, #0]
         for (uint8_t i = 0; i < DXL_ID_CNT; ++i) {
 8002026:	7bbb      	ldrb	r3, [r7, #14]
 8002028:	3301      	adds	r3, #1
 800202a:	73bb      	strb	r3, [r7, #14]
 800202c:	7bbb      	ldrb	r3, [r7, #14]
 800202e:	2b06      	cmp	r3, #6
 8002030:	d9f3      	bls.n	800201a <init_dynamixels+0x96>
    for (uint8_t i = 0; i < DXL_ID_CNT; i++) {
 8002032:	7bfb      	ldrb	r3, [r7, #15]
 8002034:	3301      	adds	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	2b06      	cmp	r3, #6
 800203c:	d9ab      	bls.n	8001f96 <init_dynamixels+0x12>
         }
    }
}
 800203e:	bf00      	nop
 8002040:	bf00      	nop
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	0800c920 	.word	0x0800c920
 800204c:	0800ccbc 	.word	0x0800ccbc
 8002050:	20000a98 	.word	0x20000a98
 8002054:	43340000 	.word	0x43340000

08002058 <cnt_to_deg360>:

float cnt_to_deg360(int32_t pos_cnt) {
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
	return (float)pos_cnt / 4096.0f * 360.0f;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	ee07 3a90 	vmov	s15, r3
 8002066:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800206a:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8002088 <cnt_to_deg360+0x30>
 800206e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002072:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800208c <cnt_to_deg360+0x34>
 8002076:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800207a:	eeb0 0a67 	vmov.f32	s0, s15
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	45800000 	.word	0x45800000
 800208c:	43b40000 	.word	0x43b40000

08002090 <deg0to360_to_cnt>:

int32_t deg0to360_to_cnt(float deg) {
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	ed87 0a01 	vstr	s0, [r7, #4]
	return (int32_t)(deg / 360.0f * 4096.0f);
 800209a:	ed97 7a01 	vldr	s14, [r7, #4]
 800209e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80020c4 <deg0to360_to_cnt+0x34>
 80020a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020a6:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80020c8 <deg0to360_to_cnt+0x38>
 80020aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020b2:	ee17 3a90 	vmov	r3, s15
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	43b40000 	.word	0x43b40000
 80020c8:	45800000 	.word	0x45800000

080020cc <wrap360>:

static inline float wrap360(float deg) {
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	ed87 0a01 	vstr	s0, [r7, #4]
  while (deg < 0.0f)   deg += 360.0f;
 80020d6:	e007      	b.n	80020e8 <wrap360+0x1c>
 80020d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80020dc:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002130 <wrap360+0x64>
 80020e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020e4:	edc7 7a01 	vstr	s15, [r7, #4]
 80020e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80020ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f4:	d4f0      	bmi.n	80020d8 <wrap360+0xc>
  while (deg >= 360.0f) deg -= 360.0f;
 80020f6:	e007      	b.n	8002108 <wrap360+0x3c>
 80020f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80020fc:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8002130 <wrap360+0x64>
 8002100:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002104:	edc7 7a01 	vstr	s15, [r7, #4]
 8002108:	edd7 7a01 	vldr	s15, [r7, #4]
 800210c:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002130 <wrap360+0x64>
 8002110:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002118:	daee      	bge.n	80020f8 <wrap360+0x2c>
  return deg;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	ee07 3a90 	vmov	s15, r3
}
 8002120:	eeb0 0a67 	vmov.f32	s0, s15
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	43b40000 	.word	0x43b40000

08002134 <pv_raw_from_deg_s>:

uint32_t pv_raw_from_deg_s(float deg_per_sec) {
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	ed87 0a01 	vstr	s0, [r7, #4]
    return (uint32_t)(deg_per_sec / 0.229f / 360.0f * 60.0f);
 800213e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002142:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8002170 <pv_raw_from_deg_s+0x3c>
 8002146:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800214a:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8002174 <pv_raw_from_deg_s+0x40>
 800214e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002152:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002178 <pv_raw_from_deg_s+0x44>
 8002156:	ee67 7a87 	vmul.f32	s15, s15, s14
 800215a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800215e:	ee17 3a90 	vmov	r3, s15
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	3e6a7efa 	.word	0x3e6a7efa
 8002174:	43b40000 	.word	0x43b40000
 8002178:	42700000 	.word	0x42700000

0800217c <idx_of_id>:

int8_t idx_of_id(uint8_t id) {
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < DXL_ID_CNT; i++){
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	e00c      	b.n	80021a6 <idx_of_id+0x2a>
		if(DXL_ID_LIST[i] == id) return i;
 800218c:	4a0b      	ldr	r2, [pc, #44]	@ (80021bc <idx_of_id+0x40>)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	4413      	add	r3, r2
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	79fa      	ldrb	r2, [r7, #7]
 8002196:	429a      	cmp	r2, r3
 8002198:	d102      	bne.n	80021a0 <idx_of_id+0x24>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	b25b      	sxtb	r3, r3
 800219e:	e007      	b.n	80021b0 <idx_of_id+0x34>
	for(int i = 0; i < DXL_ID_CNT; i++){
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	3301      	adds	r3, #1
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b06      	cmp	r3, #6
 80021aa:	ddef      	ble.n	800218c <idx_of_id+0x10>
	}
	return -1;
 80021ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	0800ccbc 	.word	0x0800ccbc

080021c0 <live_slowdown_until_reached>:

bool live_slowdown_until_reached(uint8_t target_count, const uint8_t* target_ids, const float* target_degs, uint32_t timeout) {
 80021c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021c2:	b099      	sub	sp, #100	@ 0x64
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	4603      	mov	r3, r0
 80021ce:	73fb      	strb	r3, [r7, #15]
    uint32_t start_time = HAL_GetTick();
 80021d0:	f001 fcfc 	bl	8003bcc <HAL_GetTick>
 80021d4:	6538      	str	r0, [r7, #80]	@ 0x50
    bool all_reached = false;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    const uint16_t ADDR_PRESENT_POSITION = 132;
 80021dc:	2384      	movs	r3, #132	@ 0x84
 80021de:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    const uint16_t POS_DATA_LEN = 4;
 80021e2:	2304      	movs	r3, #4
 80021e4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    int32_t current_positions[DXL_ID_CNT] = {0};
 80021e8:	f107 0320 	add.w	r3, r7, #32
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
 80021f8:	615a      	str	r2, [r3, #20]
 80021fa:	619a      	str	r2, [r3, #24]

    printf(".--------------------------\r\n");
 80021fc:	486f      	ldr	r0, [pc, #444]	@ (80023bc <live_slowdown_until_reached+0x1fc>)
 80021fe:	f007 fcb7 	bl	8009b70 <puts>
    while (HAL_GetTick() - start_time < timeout) {
 8002202:	e0ca      	b.n	800239a <live_slowdown_until_reached+0x1da>
        Dynamixel_SyncRead(ADDR_PRESENT_POSITION, POS_DATA_LEN, target_ids, target_count);
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 800220a:	f8b7 004e 	ldrh.w	r0, [r7, #78]	@ 0x4e
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	f7ff faf9 	bl	8001806 <Dynamixel_SyncRead>

        for (uint8_t i = 0; i < target_count; i++) {
 8002214:	2300      	movs	r3, #0
 8002216:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 800221a:	e03a      	b.n	8002292 <live_slowdown_until_reached+0xd2>
            uint8_t packet_buffer[15];
            current_positions[i] = -1;
 800221c:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	3358      	adds	r3, #88	@ 0x58
 8002224:	443b      	add	r3, r7
 8002226:	f04f 32ff 	mov.w	r2, #4294967295
 800222a:	f843 2c38 	str.w	r2, [r3, #-56]
            if (Dynamixel_receiveStatusPacket(packet_buffer, 15, 30)) {
 800222e:	f107 0310 	add.w	r3, r7, #16
 8002232:	221e      	movs	r2, #30
 8002234:	210f      	movs	r1, #15
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff f98e 	bl	8001558 <Dynamixel_receiveStatusPacket>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d022      	beq.n	8002288 <live_slowdown_until_reached+0xc8>
                uint8_t response_id = packet_buffer[4];
 8002242:	7d3b      	ldrb	r3, [r7, #20]
 8002244:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                int8_t response_idx = idx_of_id(response_id);
 8002248:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff95 	bl	800217c <idx_of_id>
 8002252:	4603      	mov	r3, r0
 8002254:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
                if(response_idx != -1){
 8002258:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002260:	d012      	beq.n	8002288 <live_slowdown_until_reached+0xc8>
                     current_positions[response_idx] =
                        (int32_t)(packet_buffer[9] | (packet_buffer[10] << 8) |
 8002262:	7e7b      	ldrb	r3, [r7, #25]
 8002264:	461a      	mov	r2, r3
 8002266:	7ebb      	ldrb	r3, [r7, #26]
 8002268:	021b      	lsls	r3, r3, #8
 800226a:	431a      	orrs	r2, r3
                                  (packet_buffer[11] << 16) | (packet_buffer[12] << 24));
 800226c:	7efb      	ldrb	r3, [r7, #27]
 800226e:	041b      	lsls	r3, r3, #16
                        (int32_t)(packet_buffer[9] | (packet_buffer[10] << 8) |
 8002270:	ea42 0103 	orr.w	r1, r2, r3
                                  (packet_buffer[11] << 16) | (packet_buffer[12] << 24));
 8002274:	7f3b      	ldrb	r3, [r7, #28]
 8002276:	061a      	lsls	r2, r3, #24
                     current_positions[response_idx] =
 8002278:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
                                  (packet_buffer[11] << 16) | (packet_buffer[12] << 24));
 800227c:	430a      	orrs	r2, r1
                     current_positions[response_idx] =
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	3358      	adds	r3, #88	@ 0x58
 8002282:	443b      	add	r3, r7
 8002284:	f843 2c38 	str.w	r2, [r3, #-56]
        for (uint8_t i = 0; i < target_count; i++) {
 8002288:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800228c:	3301      	adds	r3, #1
 800228e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8002292:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8002296:	7bfb      	ldrb	r3, [r7, #15]
 8002298:	429a      	cmp	r2, r3
 800229a:	d3bf      	bcc.n	800221c <live_slowdown_until_reached+0x5c>
                }
            }
        }

        all_reached = true;
 800229c:	2301      	movs	r3, #1
 800229e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        printf("Looping (t=%ld):", (long)(HAL_GetTick() - start_time));
 80022a2:	f001 fc93 	bl	8003bcc <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	4619      	mov	r1, r3
 80022ae:	4844      	ldr	r0, [pc, #272]	@ (80023c0 <live_slowdown_until_reached+0x200>)
 80022b0:	f007 fbf6 	bl	8009aa0 <iprintf>
        for (uint8_t i = 0; i < target_count; i++) {
 80022b4:	2300      	movs	r3, #0
 80022b6:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 80022ba:	e05a      	b.n	8002372 <live_slowdown_until_reached+0x1b2>
            uint8_t id = target_ids[i];
 80022bc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	4413      	add	r3, r2
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            if (current_positions[i] == -1) {
 80022ca:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	3358      	adds	r3, #88	@ 0x58
 80022d2:	443b      	add	r3, r7
 80022d4:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80022d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022dc:	d109      	bne.n	80022f2 <live_slowdown_until_reached+0x132>
                printf(" [ID %d Read FAILED!]", id);
 80022de:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80022e2:	4619      	mov	r1, r3
 80022e4:	4837      	ldr	r0, [pc, #220]	@ (80023c4 <live_slowdown_until_reached+0x204>)
 80022e6:	f007 fbdb 	bl	8009aa0 <iprintf>
                all_reached = false;
 80022ea:	2300      	movs	r3, #0
 80022ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80022f0:	e03a      	b.n	8002368 <live_slowdown_until_reached+0x1a8>
            } else {
                float current_deg = cnt_to_deg360(current_positions[i]);
 80022f2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	3358      	adds	r3, #88	@ 0x58
 80022fa:	443b      	add	r3, r7
 80022fc:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fea9 	bl	8002058 <cnt_to_deg360>
 8002306:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
                float error_deg = target_degs[i] - current_deg;
 800230a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	4413      	add	r3, r2
 8002314:	ed93 7a00 	vldr	s14, [r3]
 8002318:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800231c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002320:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
                printf(" [ID %d: %.1f, E:%.1f]", id, current_deg, error_deg);
 8002324:	f897 604b 	ldrb.w	r6, [r7, #75]	@ 0x4b
 8002328:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800232a:	f7fe f92d 	bl	8000588 <__aeabi_f2d>
 800232e:	4604      	mov	r4, r0
 8002330:	460d      	mov	r5, r1
 8002332:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002334:	f7fe f928 	bl	8000588 <__aeabi_f2d>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	e9cd 2300 	strd	r2, r3, [sp]
 8002340:	4622      	mov	r2, r4
 8002342:	462b      	mov	r3, r5
 8002344:	4631      	mov	r1, r6
 8002346:	4820      	ldr	r0, [pc, #128]	@ (80023c8 <live_slowdown_until_reached+0x208>)
 8002348:	f007 fbaa 	bl	8009aa0 <iprintf>
                if (fabs(error_deg) > 1.5f) {
 800234c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002350:	eef0 7ae7 	vabs.f32	s15, s15
 8002354:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8002358:	eef4 7ac7 	vcmpe.f32	s15, s14
 800235c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002360:	dd02      	ble.n	8002368 <live_slowdown_until_reached+0x1a8>
                    all_reached = false;
 8002362:	2300      	movs	r3, #0
 8002364:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        for (uint8_t i = 0; i < target_count; i++) {
 8002368:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800236c:	3301      	adds	r3, #1
 800236e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 8002372:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	429a      	cmp	r2, r3
 800237a:	d39f      	bcc.n	80022bc <live_slowdown_until_reached+0xfc>
                }
            }
        }
        printf(" \r\n");
 800237c:	4813      	ldr	r0, [pc, #76]	@ (80023cc <live_slowdown_until_reached+0x20c>)
 800237e:	f007 fbf7 	bl	8009b70 <puts>

        if (all_reached) {
 8002382:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002386:	2b00      	cmp	r3, #0
 8002388:	d004      	beq.n	8002394 <live_slowdown_until_reached+0x1d4>
            printf(".--- MOTORS REACHED ---\r\n");
 800238a:	4811      	ldr	r0, [pc, #68]	@ (80023d0 <live_slowdown_until_reached+0x210>)
 800238c:	f007 fbf0 	bl	8009b70 <puts>
            return true;
 8002390:	2301      	movs	r3, #1
 8002392:	e00f      	b.n	80023b4 <live_slowdown_until_reached+0x1f4>
        }
        HAL_Delay(80);
 8002394:	2050      	movs	r0, #80	@ 0x50
 8002396:	f001 fc25 	bl	8003be4 <HAL_Delay>
    while (HAL_GetTick() - start_time < timeout) {
 800239a:	f001 fc17 	bl	8003bcc <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	f63f af2c 	bhi.w	8002204 <live_slowdown_until_reached+0x44>
    }
    printf(".--- WAIT TIMEOUT ---\r\n");
 80023ac:	4809      	ldr	r0, [pc, #36]	@ (80023d4 <live_slowdown_until_reached+0x214>)
 80023ae:	f007 fbdf 	bl	8009b70 <puts>
    return false;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	375c      	adds	r7, #92	@ 0x5c
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023bc:	0800c95c 	.word	0x0800c95c
 80023c0:	0800c97c 	.word	0x0800c97c
 80023c4:	0800c990 	.word	0x0800c990
 80023c8:	0800c9a8 	.word	0x0800c9a8
 80023cc:	0800c9c0 	.word	0x0800c9c0
 80023d0:	0800c9c4 	.word	0x0800c9c4
 80023d4:	0800c9e0 	.word	0x0800c9e0

080023d8 <parse_and_control>:

void parse_and_control(char* input) {
 80023d8:	b590      	push	{r4, r7, lr}
 80023da:	b0d9      	sub	sp, #356	@ 0x164
 80023dc:	af02      	add	r7, sp, #8
 80023de:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80023e2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80023e6:	6018      	str	r0, [r3, #0]
    char *p = input;
 80023e8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80023ec:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    bool processed_any = false;
 80023f6:	2300      	movs	r3, #0
 80023f8:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

    while (1) {
        char *start = strchr(p, '[');
 80023fc:	215b      	movs	r1, #91	@ 0x5b
 80023fe:	f8d7 0154 	ldr.w	r0, [r7, #340]	@ 0x154
 8002402:	f007 fcfb 	bl	8009dfc <strchr>
 8002406:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
        if (!start) break;
 800240a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 8205 	beq.w	800281e <parse_and_control+0x446>
        char *end   = strchr(start, ']');
 8002414:	215d      	movs	r1, #93	@ 0x5d
 8002416:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 800241a:	f007 fcef 	bl	8009dfc <strchr>
 800241e:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
        if (!end) break;
 8002422:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 81fb 	beq.w	8002822 <parse_and_control+0x44a>

        char seg[160];
        size_t len = (size_t)(end - start - 1);
 800242c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8002430:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	3b01      	subs	r3, #1
 8002438:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
        if (len >= sizeof(seg)) len = sizeof(seg) - 1;
 800243c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002440:	2b9f      	cmp	r3, #159	@ 0x9f
 8002442:	d902      	bls.n	800244a <parse_and_control+0x72>
 8002444:	239f      	movs	r3, #159	@ 0x9f
 8002446:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
        memcpy(seg, start + 1, len);
 800244a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800244e:	1c59      	adds	r1, r3, #1
 8002450:	f107 030c 	add.w	r3, r7, #12
 8002454:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002458:	4618      	mov	r0, r3
 800245a:	f007 fd90 	bl	8009f7e <memcpy>
        seg[len] = '\0';
 800245e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002462:	f5a3 72a6 	sub.w	r2, r3, #332	@ 0x14c
 8002466:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800246a:	4413      	add	r3, r2
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]

        char *saveptr = NULL;
 8002470:	2300      	movs	r3, #0
 8002472:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        char *tok = strtok_r(seg, ",", &saveptr);
 8002476:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 800247a:	f107 030c 	add.w	r3, r7, #12
 800247e:	49a6      	ldr	r1, [pc, #664]	@ (8002718 <parse_and_control+0x340>)
 8002480:	4618      	mov	r0, r3
 8002482:	f007 fd02 	bl	8009e8a <strtok_r>
 8002486:	f8c7 0148 	str.w	r0, [r7, #328]	@ 0x148
        if (!tok) { p = end + 1; continue; }
 800248a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10a      	bne.n	80024a8 <parse_and_control+0xd0>
 8002492:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002496:	3301      	adds	r3, #1
 8002498:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800249c:	e1c7      	b.n	800282e <parse_and_control+0x456>
        while (*tok == ' ' || *tok == '\t' || *tok == '\r' || *tok == '\n')
            ++tok;
 800249e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80024a2:	3301      	adds	r3, #1
 80024a4:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
        while (*tok == ' ' || *tok == '\t' || *tok == '\r' || *tok == '\n')
 80024a8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b20      	cmp	r3, #32
 80024b0:	d0f5      	beq.n	800249e <parse_and_control+0xc6>
 80024b2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b09      	cmp	r3, #9
 80024ba:	d0f0      	beq.n	800249e <parse_and_control+0xc6>
 80024bc:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b0d      	cmp	r3, #13
 80024c4:	d0eb      	beq.n	800249e <parse_and_control+0xc6>
 80024c6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b0a      	cmp	r3, #10
 80024ce:	d0e6      	beq.n	800249e <parse_and_control+0xc6>
        char hand = (char)tolower((unsigned char)tok[0]);
 80024d0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 80024da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80024de:	3301      	adds	r3, #1
 80024e0:	4a8e      	ldr	r2, [pc, #568]	@ (800271c <parse_and_control+0x344>)
 80024e2:	4413      	add	r3, r2
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d103      	bne.n	80024f6 <parse_and_control+0x11e>
 80024ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80024f2:	3320      	adds	r3, #32
 80024f4:	e001      	b.n	80024fa <parse_and_control+0x122>
 80024f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80024fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
        bool is_right = (hand == 'r');
 80024fe:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8002502:	2b72      	cmp	r3, #114	@ 0x72
 8002504:	bf0c      	ite	eq
 8002506:	2301      	moveq	r3, #1
 8002508:	2300      	movne	r3, #0
 800250a:	f887 3125 	strb.w	r3, [r7, #293]	@ 0x125

        uint8_t ids[7];
        float   ang_rl[7];
        uint8_t n = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

        for (uint8_t j = 0; j < 7; j++) {
 8002514:	2300      	movs	r3, #0
 8002516:	f887 3146 	strb.w	r3, [r7, #326]	@ 0x146
 800251a:	e0e4      	b.n	80026e6 <parse_and_control+0x30e>
            tok = strtok_r(NULL, ",", &saveptr);
 800251c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002520:	461a      	mov	r2, r3
 8002522:	497d      	ldr	r1, [pc, #500]	@ (8002718 <parse_and_control+0x340>)
 8002524:	2000      	movs	r0, #0
 8002526:	f007 fcb0 	bl	8009e8a <strtok_r>
 800252a:	f8c7 0148 	str.w	r0, [r7, #328]	@ 0x148
            if (!tok) break;
 800252e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 80dd 	beq.w	80026f2 <parse_and_control+0x31a>
            while (*tok==' ' || *tok=='\t' || *tok=='\r' || *tok=='\n') ++tok;
 8002538:	e004      	b.n	8002544 <parse_and_control+0x16c>
 800253a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800253e:	3301      	adds	r3, #1
 8002540:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8002544:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b20      	cmp	r3, #32
 800254c:	d0f5      	beq.n	800253a <parse_and_control+0x162>
 800254e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b09      	cmp	r3, #9
 8002556:	d0f0      	beq.n	800253a <parse_and_control+0x162>
 8002558:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b0d      	cmp	r3, #13
 8002560:	d0eb      	beq.n	800253a <parse_and_control+0x162>
 8002562:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b0a      	cmp	r3, #10
 800256a:	d0e6      	beq.n	800253a <parse_and_control+0x162>
            char *endp = tok + strlen(tok);
 800256c:	f8d7 0148 	ldr.w	r0, [r7, #328]	@ 0x148
 8002570:	f7fd fe9e 	bl	80002b0 <strlen>
 8002574:	4602      	mov	r2, r0
 8002576:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800257a:	4413      	add	r3, r2
 800257c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
            while (endp > tok && (endp[-1]==' ' || endp[-1]=='\t' || endp[-1]=='\r' || endp[-1]=='\n'))
 8002580:	e008      	b.n	8002594 <parse_and_control+0x1bc>
                *--endp = '\0';
 8002582:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8002586:	3b01      	subs	r3, #1
 8002588:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800258c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
            while (endp > tok && (endp[-1]==' ' || endp[-1]=='\t' || endp[-1]=='\r' || endp[-1]=='\n'))
 8002594:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8002598:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800259c:	429a      	cmp	r2, r3
 800259e:	d917      	bls.n	80025d0 <parse_and_control+0x1f8>
 80025a0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80025a4:	3b01      	subs	r3, #1
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b20      	cmp	r3, #32
 80025aa:	d0ea      	beq.n	8002582 <parse_and_control+0x1aa>
 80025ac:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80025b0:	3b01      	subs	r3, #1
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b09      	cmp	r3, #9
 80025b6:	d0e4      	beq.n	8002582 <parse_and_control+0x1aa>
 80025b8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80025bc:	3b01      	subs	r3, #1
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b0d      	cmp	r3, #13
 80025c2:	d0de      	beq.n	8002582 <parse_and_control+0x1aa>
 80025c4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80025c8:	3b01      	subs	r3, #1
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b0a      	cmp	r3, #10
 80025ce:	d0d8      	beq.n	8002582 <parse_and_control+0x1aa>
            if (tok[0]=='x' || tok[0]=='X') continue;
 80025d0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b78      	cmp	r3, #120	@ 0x78
 80025d8:	d07d      	beq.n	80026d6 <parse_and_control+0x2fe>
 80025da:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b58      	cmp	r3, #88	@ 0x58
 80025e2:	d078      	beq.n	80026d6 <parse_and_control+0x2fe>
            bool has_digit = false;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
            for (char *pchk = tok; *pchk; ++pchk) {
 80025ea:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80025ee:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80025f2:	e012      	b.n	800261a <parse_and_control+0x242>
                if (*pchk >= '0' && *pchk <= '9') { has_digit = true; break; }
 80025f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b2f      	cmp	r3, #47	@ 0x2f
 80025fc:	d908      	bls.n	8002610 <parse_and_control+0x238>
 80025fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b39      	cmp	r3, #57	@ 0x39
 8002606:	d803      	bhi.n	8002610 <parse_and_control+0x238>
 8002608:	2301      	movs	r3, #1
 800260a:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800260e:	e009      	b.n	8002624 <parse_and_control+0x24c>
            for (char *pchk = tok; *pchk; ++pchk) {
 8002610:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002614:	3301      	adds	r3, #1
 8002616:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800261a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1e7      	bne.n	80025f4 <parse_and_control+0x21c>
            }
            if (!has_digit) continue;
 8002624:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8002628:	f083 0301 	eor.w	r3, r3, #1
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d153      	bne.n	80026da <parse_and_control+0x302>

            float a = (float)atof(tok);
 8002632:	f8d7 0148 	ldr.w	r0, [r7, #328]	@ 0x148
 8002636:	f005 fcf5 	bl	8008024 <atof>
 800263a:	ec53 2b10 	vmov	r2, r3, d0
 800263e:	4610      	mov	r0, r2
 8002640:	4619      	mov	r1, r3
 8002642:	f7fe faf1 	bl	8000c28 <__aeabi_d2f>
 8002646:	4603      	mov	r3, r0
 8002648:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
            if (a < -180.0f) a = -180.0f;
 800264c:	edd7 7a4d 	vldr	s15, [r7, #308]	@ 0x134
 8002650:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8002720 <parse_and_control+0x348>
 8002654:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800265c:	d502      	bpl.n	8002664 <parse_and_control+0x28c>
 800265e:	4b31      	ldr	r3, [pc, #196]	@ (8002724 <parse_and_control+0x34c>)
 8002660:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
            if (a >  180.0f) a =  180.0f;
 8002664:	edd7 7a4d 	vldr	s15, [r7, #308]	@ 0x134
 8002668:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800272c <parse_and_control+0x354>
 800266c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002674:	dd02      	ble.n	800267c <parse_and_control+0x2a4>
 8002676:	4b2c      	ldr	r3, [pc, #176]	@ (8002728 <parse_and_control+0x350>)
 8002678:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
            uint8_t baseL = 1 + 7;
 800267c:	2308      	movs	r3, #8
 800267e:	f887 3124 	strb.w	r3, [r7, #292]	@ 0x124
            uint8_t id = is_right ? (j + 1) : (baseL + j);
 8002682:	f897 3125 	ldrb.w	r3, [r7, #293]	@ 0x125
 8002686:	2b00      	cmp	r3, #0
 8002688:	d004      	beq.n	8002694 <parse_and_control+0x2bc>
 800268a:	f897 3146 	ldrb.w	r3, [r7, #326]	@ 0x146
 800268e:	3301      	adds	r3, #1
 8002690:	b2db      	uxtb	r3, r3
 8002692:	e005      	b.n	80026a0 <parse_and_control+0x2c8>
 8002694:	f897 2124 	ldrb.w	r2, [r7, #292]	@ 0x124
 8002698:	f897 3146 	ldrb.w	r3, [r7, #326]	@ 0x146
 800269c:	4413      	add	r3, r2
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
            ids[n]    = id;
 80026a4:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 80026a8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80026ac:	443b      	add	r3, r7
 80026ae:	f897 2123 	ldrb.w	r2, [r7, #291]	@ 0x123
 80026b2:	f803 2c54 	strb.w	r2, [r3, #-84]
            ang_rl[n] = a;
 80026b6:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80026c0:	443b      	add	r3, r7
 80026c2:	3b70      	subs	r3, #112	@ 0x70
 80026c4:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80026c8:	601a      	str	r2, [r3, #0]
            n++;
 80026ca:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 80026ce:	3301      	adds	r3, #1
 80026d0:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
 80026d4:	e002      	b.n	80026dc <parse_and_control+0x304>
            if (tok[0]=='x' || tok[0]=='X') continue;
 80026d6:	bf00      	nop
 80026d8:	e000      	b.n	80026dc <parse_and_control+0x304>
            if (!has_digit) continue;
 80026da:	bf00      	nop
        for (uint8_t j = 0; j < 7; j++) {
 80026dc:	f897 3146 	ldrb.w	r3, [r7, #326]	@ 0x146
 80026e0:	3301      	adds	r3, #1
 80026e2:	f887 3146 	strb.w	r3, [r7, #326]	@ 0x146
 80026e6:	f897 3146 	ldrb.w	r3, [r7, #326]	@ 0x146
 80026ea:	2b06      	cmp	r3, #6
 80026ec:	f67f af16 	bls.w	800251c <parse_and_control+0x144>
 80026f0:	e000      	b.n	80026f4 <parse_and_control+0x31c>
            if (!tok) break;
 80026f2:	bf00      	nop
        }

        if (n == 0) { p = end + 1; continue; }
 80026f4:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d105      	bne.n	8002708 <parse_and_control+0x330>
 80026fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002700:	3301      	adds	r3, #1
 8002702:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002706:	e092      	b.n	800282e <parse_and_control+0x456>

        const uint16_t ADDR_GOAL_POSITION = 116;
 8002708:	2374      	movs	r3, #116	@ 0x74
 800270a:	f8a7 3120 	strh.w	r3, [r7, #288]	@ 0x120
        float target_deg0_360[7];

        for (uint8_t k = 0; k < n; k++) {
 800270e:	2300      	movs	r3, #0
 8002710:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
 8002714:	e074      	b.n	8002800 <parse_and_control+0x428>
 8002716:	bf00      	nop
 8002718:	0800c9f8 	.word	0x0800c9f8
 800271c:	0800cf10 	.word	0x0800cf10
 8002720:	c3340000 	.word	0xc3340000
 8002724:	c3340000 	.word	0xc3340000
 8002728:	43340000 	.word	0x43340000
 800272c:	43340000 	.word	0x43340000
            float f0_360 = wrap360(ang_rl[k] + 180.0f);
 8002730:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800273a:	443b      	add	r3, r7
 800273c:	3b70      	subs	r3, #112	@ 0x70
 800273e:	edd3 7a00 	vldr	s15, [r3]
 8002742:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 800272c <parse_and_control+0x354>
 8002746:	ee77 7a87 	vadd.f32	s15, s15, s14
 800274a:	eeb0 0a67 	vmov.f32	s0, s15
 800274e:	f7ff fcbd 	bl	80020cc <wrap360>
 8002752:	ed87 0a47 	vstr	s0, [r7, #284]	@ 0x11c
            int32_t goal_cnt = deg0to360_to_cnt(f0_360);
 8002756:	ed97 0a47 	vldr	s0, [r7, #284]	@ 0x11c
 800275a:	f7ff fc99 	bl	8002090 <deg0to360_to_cnt>
 800275e:	4603      	mov	r3, r0
 8002760:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
            target_deg0_360[k] = f0_360;
 8002764:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800276e:	443b      	add	r3, r7
 8002770:	3b8c      	subs	r3, #140	@ 0x8c
 8002772:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002776:	601a      	str	r2, [r3, #0]

            printf("Moving ID %d to %.1f deg (cnt=%ld)\r\n", ids[k], f0_360, (long)goal_cnt);
 8002778:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800277c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8002780:	443b      	add	r3, r7
 8002782:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8002786:	461c      	mov	r4, r3
 8002788:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800278c:	f7fd fefc 	bl	8000588 <__aeabi_f2d>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8002798:	9100      	str	r1, [sp, #0]
 800279a:	4621      	mov	r1, r4
 800279c:	4841      	ldr	r0, [pc, #260]	@ (80028a4 <parse_and_control+0x4cc>)
 800279e:	f007 f97f 	bl	8009aa0 <iprintf>
            Dynamixel_write(ids[k], ADDR_GOAL_POSITION, (uint8_t*)&goal_cnt, 4);
 80027a2:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80027a6:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80027aa:	443b      	add	r3, r7
 80027ac:	f813 0c54 	ldrb.w	r0, [r3, #-84]
 80027b0:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 80027b4:	f8b7 1120 	ldrh.w	r1, [r7, #288]	@ 0x120
 80027b8:	2304      	movs	r3, #4
 80027ba:	f7fe ff33 	bl	8001624 <Dynamixel_write>
            HAL_Delay(5);
 80027be:	2005      	movs	r0, #5
 80027c0:	f001 fa10 	bl	8003be4 <HAL_Delay>

            int8_t idx = idx_of_id(ids[k]);
 80027c4:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80027c8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80027cc:	443b      	add	r3, r7
 80027ce:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff fcd2 	bl	800217c <idx_of_id>
 80027d8:	4603      	mov	r3, r0
 80027da:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            if (idx >= 0) {
 80027de:	f997 311b 	ldrsb.w	r3, [r7, #283]	@ 0x11b
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	db07      	blt.n	80027f6 <parse_and_control+0x41e>
                g_target_deg[idx] = f0_360;
 80027e6:	f997 311b 	ldrsb.w	r3, [r7, #283]	@ 0x11b
 80027ea:	4a2f      	ldr	r2, [pc, #188]	@ (80028a8 <parse_and_control+0x4d0>)
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80027f4:	601a      	str	r2, [r3, #0]
        for (uint8_t k = 0; k < n; k++) {
 80027f6:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80027fa:	3301      	adds	r3, #1
 80027fc:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
 8002800:	f897 2133 	ldrb.w	r2, [r7, #307]	@ 0x133
 8002804:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 8002808:	429a      	cmp	r2, r3
 800280a:	d391      	bcc.n	8002730 <parse_and_control+0x358>
            }
        }

        processed_any = true;
 800280c:	2301      	movs	r3, #1
 800280e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        p = end + 1;
 8002812:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002816:	3301      	adds	r3, #1
 8002818:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800281c:	e5ee      	b.n	80023fc <parse_and_control+0x24>
        if (!start) break;
 800281e:	bf00      	nop
 8002820:	e000      	b.n	8002824 <parse_and_control+0x44c>
        if (!end) break;
 8002822:	bf00      	nop
    }

    if (processed_any) {
 8002824:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <parse_and_control+0x458>
        bool ok = live_slowdown_until_reached(DXL_ID_CNT, DXL_ID_LIST, goal_all, TIMEOUT_MS);

        if (ok)  print_to_link("Done\r\n");
        else     print_to_link("timeout\r\n");
    }
}
 800282c:	e035      	b.n	800289a <parse_and_control+0x4c2>
    while (1) {
 800282e:	e5e5      	b.n	80023fc <parse_and_control+0x24>
        for (uint8_t i = 0; i < DXL_ID_CNT; i++)
 8002830:	2300      	movs	r3, #0
 8002832:	f887 3132 	strb.w	r3, [r7, #306]	@ 0x132
 8002836:	e012      	b.n	800285e <parse_and_control+0x486>
            goal_all[i] = g_target_deg[i];
 8002838:	f897 2132 	ldrb.w	r2, [r7, #306]	@ 0x132
 800283c:	f897 3132 	ldrb.w	r3, [r7, #306]	@ 0x132
 8002840:	4919      	ldr	r1, [pc, #100]	@ (80028a8 <parse_and_control+0x4d0>)
 8002842:	0092      	lsls	r2, r2, #2
 8002844:	440a      	add	r2, r1
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800284e:	443b      	add	r3, r7
 8002850:	3bac      	subs	r3, #172	@ 0xac
 8002852:	601a      	str	r2, [r3, #0]
        for (uint8_t i = 0; i < DXL_ID_CNT; i++)
 8002854:	f897 3132 	ldrb.w	r3, [r7, #306]	@ 0x132
 8002858:	3301      	adds	r3, #1
 800285a:	f887 3132 	strb.w	r3, [r7, #306]	@ 0x132
 800285e:	f897 3132 	ldrb.w	r3, [r7, #306]	@ 0x132
 8002862:	2b06      	cmp	r3, #6
 8002864:	d9e8      	bls.n	8002838 <parse_and_control+0x460>
        const uint32_t TIMEOUT_MS = 8000;
 8002866:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800286a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        bool ok = live_slowdown_until_reached(DXL_ID_CNT, DXL_ID_LIST, goal_all, TIMEOUT_MS);
 800286e:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8002872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002876:	490d      	ldr	r1, [pc, #52]	@ (80028ac <parse_and_control+0x4d4>)
 8002878:	2007      	movs	r0, #7
 800287a:	f7ff fca1 	bl	80021c0 <live_slowdown_until_reached>
 800287e:	4603      	mov	r3, r0
 8002880:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
        if (ok)  print_to_link("Done\r\n");
 8002884:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <parse_and_control+0x4bc>
 800288c:	4808      	ldr	r0, [pc, #32]	@ (80028b0 <parse_and_control+0x4d8>)
 800288e:	f7ff f9d7 	bl	8001c40 <print_to_link>
}
 8002892:	e002      	b.n	800289a <parse_and_control+0x4c2>
        else     print_to_link("timeout\r\n");
 8002894:	4807      	ldr	r0, [pc, #28]	@ (80028b4 <parse_and_control+0x4dc>)
 8002896:	f7ff f9d3 	bl	8001c40 <print_to_link>
}
 800289a:	bf00      	nop
 800289c:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd90      	pop	{r4, r7, pc}
 80028a4:	0800c9fc 	.word	0x0800c9fc
 80028a8:	20000a98 	.word	0x20000a98
 80028ac:	0800ccbc 	.word	0x0800ccbc
 80028b0:	0800ca24 	.word	0x0800ca24
 80028b4:	0800ca2c 	.word	0x0800ca2c

080028b8 <init_move_all_to_180>:

void init_move_all_to_180(void) {
 80028b8:	b590      	push	{r4, r7, lr}
 80028ba:	b09b      	sub	sp, #108	@ 0x6c
 80028bc:	af02      	add	r7, sp, #8
    const uint8_t ADDR_GOAL_POSITION = 116;
 80028be:	2374      	movs	r3, #116	@ 0x74
 80028c0:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    const uint8_t POS_DATA_LEN = 4;
 80028c4:	2304      	movs	r3, #4
 80028c6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    int32_t goal_pos_raw[DXL_ID_CNT];
    float target_degs[DXL_ID_CNT];

    const uint8_t ADDR_PROFILE_VELOCITY = 112;
 80028ca:	2370      	movs	r3, #112	@ 0x70
 80028cc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
    const uint8_t VEL_DATA_LEN = 4;
 80028d0:	2304      	movs	r3, #4
 80028d2:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    uint32_t vel_raw[DXL_ID_CNT];

    for (uint8_t i = 0; i < DXL_ID_CNT; i++) {
 80028d6:	2300      	movs	r3, #0
 80028d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80028dc:	e02c      	b.n	8002938 <init_move_all_to_180+0x80>
        target_degs[i] = 180.0f;
 80028de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	3360      	adds	r3, #96	@ 0x60
 80028e6:	443b      	add	r3, r7
 80028e8:	3b40      	subs	r3, #64	@ 0x40
 80028ea:	4a31      	ldr	r2, [pc, #196]	@ (80029b0 <init_move_all_to_180+0xf8>)
 80028ec:	601a      	str	r2, [r3, #0]
        goal_pos_raw[i] = deg0to360_to_cnt(target_degs[i]);
 80028ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	3360      	adds	r3, #96	@ 0x60
 80028f6:	443b      	add	r3, r7
 80028f8:	3b40      	subs	r3, #64	@ 0x40
 80028fa:	edd3 7a00 	vldr	s15, [r3]
 80028fe:	f897 405f 	ldrb.w	r4, [r7, #95]	@ 0x5f
 8002902:	eeb0 0a67 	vmov.f32	s0, s15
 8002906:	f7ff fbc3 	bl	8002090 <deg0to360_to_cnt>
 800290a:	4602      	mov	r2, r0
 800290c:	00a3      	lsls	r3, r4, #2
 800290e:	3360      	adds	r3, #96	@ 0x60
 8002910:	443b      	add	r3, r7
 8002912:	f843 2c24 	str.w	r2, [r3, #-36]
        vel_raw[i] = pv_raw_from_deg_s(20.0f);
 8002916:	f897 405f 	ldrb.w	r4, [r7, #95]	@ 0x5f
 800291a:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 800291e:	f7ff fc09 	bl	8002134 <pv_raw_from_deg_s>
 8002922:	4602      	mov	r2, r0
 8002924:	00a3      	lsls	r3, r4, #2
 8002926:	3360      	adds	r3, #96	@ 0x60
 8002928:	443b      	add	r3, r7
 800292a:	f843 2c5c 	str.w	r2, [r3, #-92]
    for (uint8_t i = 0; i < DXL_ID_CNT; i++) {
 800292e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002932:	3301      	adds	r3, #1
 8002934:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002938:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800293c:	2b06      	cmp	r3, #6
 800293e:	d9ce      	bls.n	80028de <init_move_all_to_180+0x26>
    }

    Dynamixel_SyncWrite(ADDR_PROFILE_VELOCITY, VEL_DATA_LEN, DXL_ID_LIST, DXL_ID_CNT, (uint8_t*)vel_raw);
 8002940:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8002944:	b298      	uxth	r0, r3
 8002946:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800294a:	b299      	uxth	r1, r3
 800294c:	1d3b      	adds	r3, r7, #4
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	2307      	movs	r3, #7
 8002952:	4a18      	ldr	r2, [pc, #96]	@ (80029b4 <init_move_all_to_180+0xfc>)
 8002954:	f7fe fece 	bl	80016f4 <Dynamixel_SyncWrite>
    HAL_Delay(20);
 8002958:	2014      	movs	r0, #20
 800295a:	f001 f943 	bl	8003be4 <HAL_Delay>
    Dynamixel_SyncWrite(ADDR_GOAL_POSITION, POS_DATA_LEN, DXL_ID_LIST, DXL_ID_CNT, (uint8_t*)goal_pos_raw);
 800295e:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002962:	b298      	uxth	r0, r3
 8002964:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8002968:	b299      	uxth	r1, r3
 800296a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	2307      	movs	r3, #7
 8002972:	4a10      	ldr	r2, [pc, #64]	@ (80029b4 <init_move_all_to_180+0xfc>)
 8002974:	f7fe febe 	bl	80016f4 <Dynamixel_SyncWrite>

    printf("All homing commands sent.\r\n--- WAITING FOR MOTORS ---\r\n");
 8002978:	480f      	ldr	r0, [pc, #60]	@ (80029b8 <init_move_all_to_180+0x100>)
 800297a:	f007 f8f9 	bl	8009b70 <puts>
    if(!live_slowdown_until_reached(DXL_ID_CNT, DXL_ID_LIST, target_degs, 15000)) {
 800297e:	f107 0220 	add.w	r2, r7, #32
 8002982:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8002986:	490b      	ldr	r1, [pc, #44]	@ (80029b4 <init_move_all_to_180+0xfc>)
 8002988:	2007      	movs	r0, #7
 800298a:	f7ff fc19 	bl	80021c0 <live_slowdown_until_reached>
 800298e:	4603      	mov	r3, r0
 8002990:	f083 0301 	eor.w	r3, r3, #1
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <init_move_all_to_180+0xea>
    	printf("Timeout waiting for homing completion!\r\n");
 800299a:	4808      	ldr	r0, [pc, #32]	@ (80029bc <init_move_all_to_180+0x104>)
 800299c:	f007 f8e8 	bl	8009b70 <puts>
    } else {
        printf("All motors reached home position.\r\n");
    }
}
 80029a0:	e002      	b.n	80029a8 <init_move_all_to_180+0xf0>
        printf("All motors reached home position.\r\n");
 80029a2:	4807      	ldr	r0, [pc, #28]	@ (80029c0 <init_move_all_to_180+0x108>)
 80029a4:	f007 f8e4 	bl	8009b70 <puts>
}
 80029a8:	bf00      	nop
 80029aa:	3764      	adds	r7, #100	@ 0x64
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd90      	pop	{r4, r7, pc}
 80029b0:	43340000 	.word	0x43340000
 80029b4:	0800ccbc 	.word	0x0800ccbc
 80029b8:	0800ca38 	.word	0x0800ca38
 80029bc:	0800ca70 	.word	0x0800ca70
 80029c0:	0800ca98 	.word	0x0800ca98

080029c4 <update_all_motors>:

void update_all_motors(void) {
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b09e      	sub	sp, #120	@ 0x78
 80029c8:	af02      	add	r7, sp, #8
    static uint32_t last_send_ms = 0;
    uint32_t now = HAL_GetTick();
 80029ca:	f001 f8ff 	bl	8003bcc <HAL_GetTick>
 80029ce:	66b8      	str	r0, [r7, #104]	@ 0x68
    if (now - last_send_ms < 30) return;
 80029d0:	4b42      	ldr	r3, [pc, #264]	@ (8002adc <update_all_motors+0x118>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b1d      	cmp	r3, #29
 80029da:	d97b      	bls.n	8002ad4 <update_all_motors+0x110>
    last_send_ms = now;
 80029dc:	4a3f      	ldr	r2, [pc, #252]	@ (8002adc <update_all_motors+0x118>)
 80029de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029e0:	6013      	str	r3, [r2, #0]

    const uint16_t ADDR_PROFILE_ACCEL     = 108;
 80029e2:	236c      	movs	r3, #108	@ 0x6c
 80029e4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    const uint16_t ADDR_PROFILE_VELOCITY  = 112;
 80029e8:	2370      	movs	r3, #112	@ 0x70
 80029ea:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
    const uint16_t ADDR_GOAL_POSITION     = 116;
 80029ee:	2374      	movs	r3, #116	@ 0x74
 80029f0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62

    uint32_t profile_accel[DXL_ID_CNT];
    uint32_t profile_vel[DXL_ID_CNT];
    int32_t  goal_pos[DXL_ID_CNT];

    const float accel_dps2 = 400.0f;
 80029f4:	4b3a      	ldr	r3, [pc, #232]	@ (8002ae0 <update_all_motors+0x11c>)
 80029f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const float vel_dps    = 60.0f;
 80029f8:	4b3a      	ldr	r3, [pc, #232]	@ (8002ae4 <update_all_motors+0x120>)
 80029fa:	65bb      	str	r3, [r7, #88]	@ 0x58

    for (int i = 0; i < DXL_ID_CNT; i++) {
 80029fc:	2300      	movs	r3, #0
 80029fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a00:	e041      	b.n	8002a86 <update_all_motors+0xc2>
        profile_accel[i] = (uint32_t)(accel_dps2 / 214.577f);
 8002a02:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8002a06:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002ae8 <update_all_motors+0x124>
 8002a0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a12:	ee17 2a90 	vmov	r2, s15
 8002a16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	3370      	adds	r3, #112	@ 0x70
 8002a1c:	443b      	add	r3, r7
 8002a1e:	f843 2c34 	str.w	r2, [r3, #-52]
        profile_vel[i]   = (uint32_t)(vel_dps / 0.229f / 360.0f * 60.0f);
 8002a22:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002a26:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8002aec <update_all_motors+0x128>
 8002a2a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a2e:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8002af0 <update_all_motors+0x12c>
 8002a32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a36:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002af4 <update_all_motors+0x130>
 8002a3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a42:	ee17 2a90 	vmov	r2, s15
 8002a46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	3370      	adds	r3, #112	@ 0x70
 8002a4c:	443b      	add	r3, r7
 8002a4e:	f843 2c50 	str.w	r2, [r3, #-80]
        goal_pos[i]      = deg0to360_to_cnt(wrap360(g_target_deg[i])); // 固定例
 8002a52:	4a29      	ldr	r2, [pc, #164]	@ (8002af8 <update_all_motors+0x134>)
 8002a54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	edd3 7a00 	vldr	s15, [r3]
 8002a5e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a62:	f7ff fb33 	bl	80020cc <wrap360>
 8002a66:	eef0 7a40 	vmov.f32	s15, s0
 8002a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a6e:	f7ff fb0f 	bl	8002090 <deg0to360_to_cnt>
 8002a72:	4602      	mov	r2, r0
 8002a74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	3370      	adds	r3, #112	@ 0x70
 8002a7a:	443b      	add	r3, r7
 8002a7c:	f843 2c6c 	str.w	r2, [r3, #-108]
    for (int i = 0; i < DXL_ID_CNT; i++) {
 8002a80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a82:	3301      	adds	r3, #1
 8002a84:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a88:	2b06      	cmp	r3, #6
 8002a8a:	ddba      	ble.n	8002a02 <update_all_motors+0x3e>
    }

    Dynamixel_SyncWrite(ADDR_PROFILE_ACCEL, 4, DXL_ID_LIST, DXL_ID_CNT, (uint8_t*)profile_accel);
 8002a8c:	f8b7 0066 	ldrh.w	r0, [r7, #102]	@ 0x66
 8002a90:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	2307      	movs	r3, #7
 8002a98:	4a18      	ldr	r2, [pc, #96]	@ (8002afc <update_all_motors+0x138>)
 8002a9a:	2104      	movs	r1, #4
 8002a9c:	f7fe fe2a 	bl	80016f4 <Dynamixel_SyncWrite>
    HAL_Delay(5);
 8002aa0:	2005      	movs	r0, #5
 8002aa2:	f001 f89f 	bl	8003be4 <HAL_Delay>
    Dynamixel_SyncWrite(ADDR_PROFILE_VELOCITY, 4, DXL_ID_LIST, DXL_ID_CNT, (uint8_t*)profile_vel);
 8002aa6:	f8b7 0064 	ldrh.w	r0, [r7, #100]	@ 0x64
 8002aaa:	f107 0320 	add.w	r3, r7, #32
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	2307      	movs	r3, #7
 8002ab2:	4a12      	ldr	r2, [pc, #72]	@ (8002afc <update_all_motors+0x138>)
 8002ab4:	2104      	movs	r1, #4
 8002ab6:	f7fe fe1d 	bl	80016f4 <Dynamixel_SyncWrite>
    HAL_Delay(5);
 8002aba:	2005      	movs	r0, #5
 8002abc:	f001 f892 	bl	8003be4 <HAL_Delay>
    Dynamixel_SyncWrite(ADDR_GOAL_POSITION, 4, DXL_ID_LIST, DXL_ID_CNT, (uint8_t*)goal_pos);
 8002ac0:	f8b7 0062 	ldrh.w	r0, [r7, #98]	@ 0x62
 8002ac4:	1d3b      	adds	r3, r7, #4
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	2307      	movs	r3, #7
 8002aca:	4a0c      	ldr	r2, [pc, #48]	@ (8002afc <update_all_motors+0x138>)
 8002acc:	2104      	movs	r1, #4
 8002ace:	f7fe fe11 	bl	80016f4 <Dynamixel_SyncWrite>
 8002ad2:	e000      	b.n	8002ad6 <update_all_motors+0x112>
    if (now - last_send_ms < 30) return;
 8002ad4:	bf00      	nop
}
 8002ad6:	3770      	adds	r7, #112	@ 0x70
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20000ab4 	.word	0x20000ab4
 8002ae0:	43c80000 	.word	0x43c80000
 8002ae4:	42700000 	.word	0x42700000
 8002ae8:	435693b6 	.word	0x435693b6
 8002aec:	3e6a7efa 	.word	0x3e6a7efa
 8002af0:	43b40000 	.word	0x43b40000
 8002af4:	42700000 	.word	0x42700000
 8002af8:	20000a98 	.word	0x20000a98
 8002afc:	0800ccbc 	.word	0x0800ccbc

08002b00 <clampf>:

ServoHandle_t s1, s2;
struct GripStop g1, g2;

// ---------- 小工具 ----------
static inline float clampf(float x, float lo, float hi) {
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	ed87 0a03 	vstr	s0, [r7, #12]
 8002b0a:	edc7 0a02 	vstr	s1, [r7, #8]
 8002b0e:	ed87 1a01 	vstr	s2, [r7, #4]
  if (x < lo) return lo;
 8002b12:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b16:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b22:	d501      	bpl.n	8002b28 <clampf+0x28>
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	e00b      	b.n	8002b40 <clampf+0x40>
  if (x > hi) return hi;
 8002b28:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b38:	dd01      	ble.n	8002b3e <clampf+0x3e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	e000      	b.n	8002b40 <clampf+0x40>
  return x;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
}
 8002b40:	ee07 3a90 	vmov	s15, r3
 8002b44:	eeb0 0a67 	vmov.f32	s0, s15
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <clamp_u16>:

static inline uint16_t clamp_u16(uint16_t v, uint16_t lo, uint16_t hi) {
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	4603      	mov	r3, r0
 8002b5a:	80fb      	strh	r3, [r7, #6]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	80bb      	strh	r3, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	807b      	strh	r3, [r7, #2]
  if (v < lo) { return lo; }
 8002b64:	88fa      	ldrh	r2, [r7, #6]
 8002b66:	88bb      	ldrh	r3, [r7, #4]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d201      	bcs.n	8002b70 <clamp_u16+0x1e>
 8002b6c:	88bb      	ldrh	r3, [r7, #4]
 8002b6e:	e006      	b.n	8002b7e <clamp_u16+0x2c>
  if (v > hi) { return hi; }
 8002b70:	88fa      	ldrh	r2, [r7, #6]
 8002b72:	887b      	ldrh	r3, [r7, #2]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d901      	bls.n	8002b7c <clamp_u16+0x2a>
 8002b78:	887b      	ldrh	r3, [r7, #2]
 8002b7a:	e000      	b.n	8002b7e <clamp_u16+0x2c>
  return v;
 8002b7c:	88fb      	ldrh	r3, [r7, #6]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <deg_to_us>:

static inline uint16_t deg_to_us(const ServoHandle_t *s, float deg) {
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	ed87 0a00 	vstr	s0, [r7]
  float d = clampf(deg, 0.0f, 180.0f);
 8002b98:	ed9f 1a1f 	vldr	s2, [pc, #124]	@ 8002c18 <deg_to_us+0x8c>
 8002b9c:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 8002c1c <deg_to_us+0x90>
 8002ba0:	ed97 0a00 	vldr	s0, [r7]
 8002ba4:	f7ff ffac 	bl	8002b00 <clampf>
 8002ba8:	ed87 0a02 	vstr	s0, [r7, #8]
  float usf = (float)s->us_min + (float)(s->us_max - s->us_min) * (d / 180.0f);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	891b      	ldrh	r3, [r3, #8]
 8002bb0:	ee07 3a90 	vmov	s15, r3
 8002bb4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	895b      	ldrh	r3, [r3, #10]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	891b      	ldrh	r3, [r3, #8]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	ee07 3a90 	vmov	s15, r3
 8002bc8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002bcc:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bd0:	eddf 5a11 	vldr	s11, [pc, #68]	@ 8002c18 <deg_to_us+0x8c>
 8002bd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be0:	edc7 7a03 	vstr	s15, [r7, #12]
  if (usf < 0.0f) { usf = 0.0f; }
 8002be4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002be8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf0:	d502      	bpl.n	8002bf8 <deg_to_us+0x6c>
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]
  return (uint16_t)(usf + 0.5f);
 8002bf8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bfc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002c00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c08:	ee17 3a90 	vmov	r3, s15
 8002c0c:	b29b      	uxth	r3, r3
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	43340000 	.word	0x43340000
 8002c1c:	00000000 	.word	0x00000000

08002c20 <set_ccr_us>:

static inline void set_ccr_us(const ServoHandle_t *s, uint16_t us) {
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COMPARE(s->htim, s->channel, us);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d105      	bne.n	8002c40 <set_ccr_us+0x20>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	887a      	ldrh	r2, [r7, #2]
 8002c3c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002c3e:	e018      	b.n	8002c72 <set_ccr_us+0x52>
  __HAL_TIM_SET_COMPARE(s->htim, s->channel, us);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d105      	bne.n	8002c54 <set_ccr_us+0x34>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	887b      	ldrh	r3, [r7, #2]
 8002c50:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002c52:	e00e      	b.n	8002c72 <set_ccr_us+0x52>
  __HAL_TIM_SET_COMPARE(s->htim, s->channel, us);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d105      	bne.n	8002c68 <set_ccr_us+0x48>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	887b      	ldrh	r3, [r7, #2]
 8002c64:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002c66:	e004      	b.n	8002c72 <set_ccr_us+0x52>
  __HAL_TIM_SET_COMPARE(s->htim, s->channel, us);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	887b      	ldrh	r3, [r7, #2]
 8002c70:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <Servo_Attach>:

// ---------- 對外 API ----------
void Servo_Attach(ServoHandle_t *s, TIM_HandleTypeDef *htim, uint32_t channel,
                  uint16_t us_min, uint16_t us_max)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
 8002c8c:	807b      	strh	r3, [r7, #2]
  s->htim     = htim;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	601a      	str	r2, [r3, #0]
  s->channel  = channel;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	605a      	str	r2, [r3, #4]
  s->us_min   = (us_min < 200) ? 200 : us_min;
 8002c9a:	887b      	ldrh	r3, [r7, #2]
 8002c9c:	2bc8      	cmp	r3, #200	@ 0xc8
 8002c9e:	bf38      	it	cc
 8002ca0:	23c8      	movcc	r3, #200	@ 0xc8
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	811a      	strh	r2, [r3, #8]
  s->us_max   = (us_max > 30000) ? 30000 : us_max;
 8002ca8:	8b3b      	ldrh	r3, [r7, #24]
 8002caa:	f247 5230 	movw	r2, #30000	@ 0x7530
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	bf28      	it	cs
 8002cb2:	4613      	movcs	r3, r2
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	815a      	strh	r2, [r3, #10]
  if (s->us_max <= s->us_min + 10) {
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	895b      	ldrh	r3, [r3, #10]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	891b      	ldrh	r3, [r3, #8]
 8002cc4:	330a      	adds	r3, #10
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	dc05      	bgt.n	8002cd6 <Servo_Attach+0x56>
    s->us_max = s->us_min + 10;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	891b      	ldrh	r3, [r3, #8]
 8002cce:	330a      	adds	r3, #10
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	815a      	strh	r2, [r3, #10]
  }

  s->cur_deg        = 90.0f;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4a21      	ldr	r2, [pc, #132]	@ (8002d60 <Servo_Attach+0xe0>)
 8002cda:	60da      	str	r2, [r3, #12]
  s->tgt_deg        = 90.0f;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4a20      	ldr	r2, [pc, #128]	@ (8002d60 <Servo_Attach+0xe0>)
 8002ce0:	611a      	str	r2, [r3, #16]
  s->max_speed_dps  = SERVO_DEFAULT_SPEED_DPS;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8002d64 <Servo_Attach+0xe4>)
 8002ce6:	615a      	str	r2, [r3, #20]
  s->ema_alpha      = SERVO_DEFAULT_EMA_ALPHA;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4a1f      	ldr	r2, [pc, #124]	@ (8002d68 <Servo_Attach+0xe8>)
 8002cec:	619a      	str	r2, [r3, #24]
  s->ema_us_f       = (float)deg_to_us(s, s->cur_deg);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	edd3 7a03 	vldr	s15, [r3, #12]
 8002cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f7ff ff47 	bl	8002b8c <deg_to_us>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	ee07 3a90 	vmov	s15, r3
 8002d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	edc3 7a07 	vstr	s15, [r3, #28]
  s->ema_us         = (uint16_t)(s->ema_us_f + 0.5f);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d14:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002d18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d20:	ee17 3a90 	vmov	r3, s15
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	841a      	strh	r2, [r3, #32]
  s->last_ms        = HAL_GetTick();
 8002d2a:	f000 ff4f 	bl	8003bcc <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	625a      	str	r2, [r3, #36]	@ 0x24
  s->attached       = 1U;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  HAL_TIM_PWM_Start(s->htim, s->channel);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	4619      	mov	r1, r3
 8002d46:	4610      	mov	r0, r2
 8002d48:	f002 ff84 	bl	8005c54 <HAL_TIM_PWM_Start>
  set_ccr_us(s, s->ema_us);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8c1b      	ldrh	r3, [r3, #32]
 8002d50:	4619      	mov	r1, r3
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f7ff ff64 	bl	8002c20 <set_ccr_us>
}
 8002d58:	bf00      	nop
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	42b40000 	.word	0x42b40000
 8002d64:	42f00000 	.word	0x42f00000
 8002d68:	3eb33333 	.word	0x3eb33333

08002d6c <Servo_WriteMicroseconds>:

void Servo_WriteMicroseconds(ServoHandle_t *s, uint16_t us)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	807b      	strh	r3, [r7, #2]
  if (!s || !s->attached) return;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d055      	beq.n	8002e2a <Servo_WriteMicroseconds+0xbe>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d050      	beq.n	8002e2a <Servo_WriteMicroseconds+0xbe>
  uint16_t clipped = clamp_u16(us, s->us_min, s->us_max);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	8919      	ldrh	r1, [r3, #8]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	895a      	ldrh	r2, [r3, #10]
 8002d90:	887b      	ldrh	r3, [r7, #2]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff fedd 	bl	8002b52 <clamp_u16>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	81fb      	strh	r3, [r7, #14]

  float alpha = clampf(s->ema_alpha, 0.0f, 1.0f);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002da2:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8002da6:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8002e34 <Servo_WriteMicroseconds+0xc8>
 8002daa:	eeb0 0a67 	vmov.f32	s0, s15
 8002dae:	f7ff fea7 	bl	8002b00 <clampf>
 8002db2:	ed87 0a02 	vstr	s0, [r7, #8]
  s->ema_us_f = (1.0f - alpha) * s->ema_us_f + alpha * (float)clipped;
 8002db6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002dba:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	edd3 7a07 	vldr	s15, [r3, #28]
 8002dc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dcc:	89fb      	ldrh	r3, [r7, #14]
 8002dce:	ee07 3a90 	vmov	s15, r3
 8002dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	edc3 7a07 	vstr	s15, [r3, #28]
  if (s->ema_us_f < 0.0f) s->ema_us_f = 0.0f;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	edd3 7a07 	vldr	s15, [r3, #28]
 8002dee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df6:	d503      	bpl.n	8002e00 <Servo_WriteMicroseconds+0x94>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	61da      	str	r2, [r3, #28]

  s->ema_us = (uint16_t)(s->ema_us_f + 0.5f);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	edd3 7a07 	vldr	s15, [r3, #28]
 8002e06:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002e0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e12:	ee17 3a90 	vmov	r3, s15
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	841a      	strh	r2, [r3, #32]
  set_ccr_us(s, s->ema_us);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	8c1b      	ldrh	r3, [r3, #32]
 8002e20:	4619      	mov	r1, r3
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff fefc 	bl	8002c20 <set_ccr_us>
 8002e28:	e000      	b.n	8002e2c <Servo_WriteMicroseconds+0xc0>
  if (!s || !s->attached) return;
 8002e2a:	bf00      	nop
}
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	00000000 	.word	0x00000000

08002e38 <Servo_WriteDegrees>:

void Servo_WriteDegrees(ServoHandle_t *s, float deg)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	ed87 0a00 	vstr	s0, [r7]
  if (!s || !s->attached) { return; }
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d01e      	beq.n	8002e88 <Servo_WriteDegrees+0x50>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d019      	beq.n	8002e88 <Servo_WriteDegrees+0x50>
  uint16_t us = deg_to_us(s, deg);
 8002e54:	ed97 0a00 	vldr	s0, [r7]
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff fe97 	bl	8002b8c <deg_to_us>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	81fb      	strh	r3, [r7, #14]
  s->cur_deg  = clampf(deg, 0.0f, 360.0f); // 立即更新目前角（無限速）
 8002e62:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 8002e90 <Servo_WriteDegrees+0x58>
 8002e66:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 8002e94 <Servo_WriteDegrees+0x5c>
 8002e6a:	ed97 0a00 	vldr	s0, [r7]
 8002e6e:	f7ff fe47 	bl	8002b00 <clampf>
 8002e72:	eef0 7a40 	vmov.f32	s15, s0
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	edc3 7a03 	vstr	s15, [r3, #12]
  Servo_WriteMicroseconds(s, us);
 8002e7c:	89fb      	ldrh	r3, [r7, #14]
 8002e7e:	4619      	mov	r1, r3
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff ff73 	bl	8002d6c <Servo_WriteMicroseconds>
 8002e86:	e000      	b.n	8002e8a <Servo_WriteDegrees+0x52>
  if (!s || !s->attached) { return; }
 8002e88:	bf00      	nop
}
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	43b40000 	.word	0x43b40000
 8002e94:	00000000 	.word	0x00000000

08002e98 <Servo_SetTargetDegrees>:

void Servo_SetTargetDegrees(ServoHandle_t *s, float target_deg)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	ed87 0a00 	vstr	s0, [r7]
  if (!s) { return; }
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00d      	beq.n	8002ec6 <Servo_SetTargetDegrees+0x2e>
  s->tgt_deg = clampf(target_deg, 0.0f, 180.0f);
 8002eaa:	ed9f 1a09 	vldr	s2, [pc, #36]	@ 8002ed0 <Servo_SetTargetDegrees+0x38>
 8002eae:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8002ed4 <Servo_SetTargetDegrees+0x3c>
 8002eb2:	ed97 0a00 	vldr	s0, [r7]
 8002eb6:	f7ff fe23 	bl	8002b00 <clampf>
 8002eba:	eef0 7a40 	vmov.f32	s15, s0
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	edc3 7a04 	vstr	s15, [r3, #16]
 8002ec4:	e000      	b.n	8002ec8 <Servo_SetTargetDegrees+0x30>
  if (!s) { return; }
 8002ec6:	bf00      	nop
}
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	43340000 	.word	0x43340000
 8002ed4:	00000000 	.word	0x00000000

08002ed8 <Servo_SetMaxSpeedDps>:

void Servo_SetMaxSpeedDps(ServoHandle_t *s, float max_speed_dps)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	ed87 0a00 	vstr	s0, [r7]
  if (!s) { return; }
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d01a      	beq.n	8002f20 <Servo_SetMaxSpeedDps+0x48>
  if (max_speed_dps < 1.0f)   { max_speed_dps = 1.0f;   }
 8002eea:	edd7 7a00 	vldr	s15, [r7]
 8002eee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ef2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002efa:	d502      	bpl.n	8002f02 <Servo_SetMaxSpeedDps+0x2a>
 8002efc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002f00:	603b      	str	r3, [r7, #0]
  if (max_speed_dps > 1000.f) { max_speed_dps = 1000.f; }
 8002f02:	edd7 7a00 	vldr	s15, [r7]
 8002f06:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002f2c <Servo_SetMaxSpeedDps+0x54>
 8002f0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f12:	dd01      	ble.n	8002f18 <Servo_SetMaxSpeedDps+0x40>
 8002f14:	4b06      	ldr	r3, [pc, #24]	@ (8002f30 <Servo_SetMaxSpeedDps+0x58>)
 8002f16:	603b      	str	r3, [r7, #0]
  s->max_speed_dps = max_speed_dps;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	615a      	str	r2, [r3, #20]
 8002f1e:	e000      	b.n	8002f22 <Servo_SetMaxSpeedDps+0x4a>
  if (!s) { return; }
 8002f20:	bf00      	nop
}
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	447a0000 	.word	0x447a0000
 8002f30:	447a0000 	.word	0x447a0000

08002f34 <Servo_SetEmaAlpha>:

void Servo_SetEmaAlpha(ServoHandle_t *s, float alpha)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	ed87 0a00 	vstr	s0, [r7]
  if (!s) { return; }
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00d      	beq.n	8002f62 <Servo_SetEmaAlpha+0x2e>
  s->ema_alpha = clampf(alpha, 0.0f, 1.0f);
 8002f46:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8002f4a:	eddf 0a08 	vldr	s1, [pc, #32]	@ 8002f6c <Servo_SetEmaAlpha+0x38>
 8002f4e:	ed97 0a00 	vldr	s0, [r7]
 8002f52:	f7ff fdd5 	bl	8002b00 <clampf>
 8002f56:	eef0 7a40 	vmov.f32	s15, s0
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	edc3 7a06 	vstr	s15, [r3, #24]
 8002f60:	e000      	b.n	8002f64 <Servo_SetEmaAlpha+0x30>
  if (!s) { return; }
 8002f62:	bf00      	nop
}
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	00000000 	.word	0x00000000

08002f70 <Servo_Update>:

void Servo_Update(ServoHandle_t *s)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08a      	sub	sp, #40	@ 0x28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  if (!s || !s->attached) { return; }
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d073      	beq.n	8003066 <Servo_Update+0xf6>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d06e      	beq.n	8003066 <Servo_Update+0xf6>

  uint32_t now = HAL_GetTick();
 8002f88:	f000 fe20 	bl	8003bcc <HAL_GetTick>
 8002f8c:	6238      	str	r0, [r7, #32]
  uint32_t dt_ms = now - s->last_ms;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f92:	6a3a      	ldr	r2, [r7, #32]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	61fb      	str	r3, [r7, #28]
  if (dt_ms == 0U) { return; } // 同一個tick內就先不更新
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d065      	beq.n	800306a <Servo_Update+0xfa>
  s->last_ms = now;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a3a      	ldr	r2, [r7, #32]
 8002fa2:	625a      	str	r2, [r3, #36]	@ 0x24

  float dt = (float)dt_ms / 1000.0f;
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	ee07 3a90 	vmov	s15, r3
 8002faa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fae:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8003074 <Servo_Update+0x104>
 8002fb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fb6:	edc7 7a06 	vstr	s15, [r7, #24]
  float err = s->tgt_deg - s->cur_deg;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	ed93 7a04 	vldr	s14, [r3, #16]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	edd3 7a03 	vldr	s15, [r3, #12]
 8002fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fca:	edc7 7a05 	vstr	s15, [r7, #20]

  // 限速器：一步最多移動 (max_speed_dps * dt)
  float max_step = s->max_speed_dps * dt;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	edd3 7a05 	vldr	s15, [r3, #20]
 8002fd4:	ed97 7a06 	vldr	s14, [r7, #24]
 8002fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fdc:	edc7 7a04 	vstr	s15, [r7, #16]
  float step;
  if (err > 0.0f) {
 8002fe0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fe4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fec:	dd0d      	ble.n	800300a <Servo_Update+0x9a>
    step = (err > max_step) ? max_step : err;
 8002fee:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ff2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ff6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffe:	dd01      	ble.n	8003004 <Servo_Update+0x94>
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	e000      	b.n	8003006 <Servo_Update+0x96>
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	627b      	str	r3, [r7, #36]	@ 0x24
 8003008:	e013      	b.n	8003032 <Servo_Update+0xc2>
  } else {
    step = (err < -max_step) ? -max_step : err;
 800300a:	edd7 7a04 	vldr	s15, [r7, #16]
 800300e:	eef1 7a67 	vneg.f32	s15, s15
 8003012:	ed97 7a05 	vldr	s14, [r7, #20]
 8003016:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800301a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800301e:	d504      	bpl.n	800302a <Servo_Update+0xba>
 8003020:	edd7 7a04 	vldr	s15, [r7, #16]
 8003024:	eef1 7a67 	vneg.f32	s15, s15
 8003028:	e001      	b.n	800302e <Servo_Update+0xbe>
 800302a:	edd7 7a05 	vldr	s15, [r7, #20]
 800302e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  }
  s->cur_deg += step;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	ed93 7a03 	vldr	s14, [r3, #12]
 8003038:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800303c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	edc3 7a03 	vstr	s15, [r3, #12]

  // 角度轉 μs，做 EMA 後輸出
  uint16_t us = deg_to_us(s, s->cur_deg);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	edd3 7a03 	vldr	s15, [r3, #12]
 800304c:	eeb0 0a67 	vmov.f32	s0, s15
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7ff fd9b 	bl	8002b8c <deg_to_us>
 8003056:	4603      	mov	r3, r0
 8003058:	81fb      	strh	r3, [r7, #14]
  Servo_WriteMicroseconds(s, us);
 800305a:	89fb      	ldrh	r3, [r7, #14]
 800305c:	4619      	mov	r1, r3
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7ff fe84 	bl	8002d6c <Servo_WriteMicroseconds>
 8003064:	e002      	b.n	800306c <Servo_Update+0xfc>
  if (!s || !s->attached) { return; }
 8003066:	bf00      	nop
 8003068:	e000      	b.n	800306c <Servo_Update+0xfc>
  if (dt_ms == 0U) { return; } // 同一個tick內就先不更新
 800306a:	bf00      	nop
}
 800306c:	3728      	adds	r7, #40	@ 0x28
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	447a0000 	.word	0x447a0000

08003078 <Servo_IsBusy>:

uint8_t Servo_IsBusy(ServoHandle_t *s, float tol_deg)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	ed87 0a00 	vstr	s0, [r7]
  if (!s) { return 0U; }
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <Servo_IsBusy+0x16>
 800308a:	2300      	movs	r3, #0
 800308c:	e02f      	b.n	80030ee <Servo_IsBusy+0x76>
  float tol = (tol_deg < 0.1f) ? 0.1f : tol_deg;
 800308e:	edd7 7a00 	vldr	s15, [r7]
 8003092:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80030fc <Servo_IsBusy+0x84>
 8003096:	eef4 7ac7 	vcmpe.f32	s15, s14
 800309a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800309e:	d501      	bpl.n	80030a4 <Servo_IsBusy+0x2c>
 80030a0:	4b17      	ldr	r3, [pc, #92]	@ (8003100 <Servo_IsBusy+0x88>)
 80030a2:	e000      	b.n	80030a6 <Servo_IsBusy+0x2e>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	60bb      	str	r3, [r7, #8]
  float err = s->tgt_deg - s->cur_deg;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	ed93 7a04 	vldr	s14, [r3, #16]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80030b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030b8:	edc7 7a03 	vstr	s15, [r7, #12]
  if (err < 0.0f) { err = -err; }
 80030bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80030c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c8:	d505      	bpl.n	80030d6 <Servo_IsBusy+0x5e>
 80030ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80030ce:	eef1 7a67 	vneg.f32	s15, s15
 80030d2:	edc7 7a03 	vstr	s15, [r7, #12]
  return (err > tol) ? 1U : 0U;
 80030d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80030da:	edd7 7a02 	vldr	s15, [r7, #8]
 80030de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e6:	dd01      	ble.n	80030ec <Servo_IsBusy+0x74>
 80030e8:	2301      	movs	r3, #1
 80030ea:	e000      	b.n	80030ee <Servo_IsBusy+0x76>
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	3dcccccd 	.word	0x3dcccccd
 8003100:	3dcccccd 	.word	0x3dcccccd

08003104 <Servo_MoveToBlocking>:

bool Servo_MoveToBlocking(ServoHandle_t* s, float deg, float tol_deg, float dps, uint32_t timeout_ms)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af00      	add	r7, sp, #0
 800310a:	6178      	str	r0, [r7, #20]
 800310c:	ed87 0a04 	vstr	s0, [r7, #16]
 8003110:	edc7 0a03 	vstr	s1, [r7, #12]
 8003114:	ed87 1a02 	vstr	s2, [r7, #8]
 8003118:	6079      	str	r1, [r7, #4]
  if (!s || !s->attached) return false;
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d004      	beq.n	800312a <Servo_MoveToBlocking+0x26>
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <Servo_MoveToBlocking+0x2a>
 800312a:	2300      	movs	r3, #0
 800312c:	e03b      	b.n	80031a6 <Servo_MoveToBlocking+0xa2>

  Servo_SetTargetDegrees(s, deg);
 800312e:	ed97 0a04 	vldr	s0, [r7, #16]
 8003132:	6978      	ldr	r0, [r7, #20]
 8003134:	f7ff feb0 	bl	8002e98 <Servo_SetTargetDegrees>
  Servo_SetMaxSpeedDps(s, dps);
 8003138:	ed97 0a02 	vldr	s0, [r7, #8]
 800313c:	6978      	ldr	r0, [r7, #20]
 800313e:	f7ff fecb 	bl	8002ed8 <Servo_SetMaxSpeedDps>

  uint32_t start_ms = HAL_GetTick();
 8003142:	f000 fd43 	bl	8003bcc <HAL_GetTick>
 8003146:	61f8      	str	r0, [r7, #28]
  while(Servo_IsBusy(s, tol_deg)){
 8003148:	e00f      	b.n	800316a <Servo_MoveToBlocking+0x66>
    Servo_Update(s);
 800314a:	6978      	ldr	r0, [r7, #20]
 800314c:	f7ff ff10 	bl	8002f70 <Servo_Update>
    if (HAL_GetTick() - start_ms > timeout_ms) {
 8003150:	f000 fd3c 	bl	8003bcc <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	429a      	cmp	r2, r3
 800315e:	d201      	bcs.n	8003164 <Servo_MoveToBlocking+0x60>
      return false;
 8003160:	2300      	movs	r3, #0
 8003162:	e020      	b.n	80031a6 <Servo_MoveToBlocking+0xa2>
    }
    HAL_Delay(5);
 8003164:	2005      	movs	r0, #5
 8003166:	f000 fd3d 	bl	8003be4 <HAL_Delay>
  while(Servo_IsBusy(s, tol_deg)){
 800316a:	ed97 0a03 	vldr	s0, [r7, #12]
 800316e:	6978      	ldr	r0, [r7, #20]
 8003170:	f7ff ff82 	bl	8003078 <Servo_IsBusy>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1e7      	bne.n	800314a <Servo_MoveToBlocking+0x46>
  }
  float original_alpha = s->ema_alpha;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	61bb      	str	r3, [r7, #24]

  Servo_SetEmaAlpha(s, 1.0f);
 8003180:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003184:	6978      	ldr	r0, [r7, #20]
 8003186:	f7ff fed5 	bl	8002f34 <Servo_SetEmaAlpha>

  Servo_WriteDegrees(s, deg);
 800318a:	ed97 0a04 	vldr	s0, [r7, #16]
 800318e:	6978      	ldr	r0, [r7, #20]
 8003190:	f7ff fe52 	bl	8002e38 <Servo_WriteDegrees>

  Servo_SetEmaAlpha(s, original_alpha);
 8003194:	ed97 0a06 	vldr	s0, [r7, #24]
 8003198:	6978      	ldr	r0, [r7, #20]
 800319a:	f7ff fecb 	bl	8002f34 <Servo_SetEmaAlpha>

  s->cur_deg = deg;
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	60da      	str	r2, [r3, #12]

  return true;
 80031a4:	2301      	movs	r3, #1
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3720      	adds	r7, #32
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <ServoSystem_Init>:

void ServoSystem_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af02      	add	r7, sp, #8
  Servo_Attach(&s1, &htim3, TIM_CHANNEL_1, 800, 2200);
 80031b6:	f640 0398 	movw	r3, #2200	@ 0x898
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80031c0:	2200      	movs	r2, #0
 80031c2:	4933      	ldr	r1, [pc, #204]	@ (8003290 <ServoSystem_Init+0xe0>)
 80031c4:	4833      	ldr	r0, [pc, #204]	@ (8003294 <ServoSystem_Init+0xe4>)
 80031c6:	f7ff fd5b 	bl	8002c80 <Servo_Attach>
  Servo_Attach(&s2, &htim3, TIM_CHANNEL_2, 800, 2200);
 80031ca:	f640 0398 	movw	r3, #2200	@ 0x898
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80031d4:	2204      	movs	r2, #4
 80031d6:	492e      	ldr	r1, [pc, #184]	@ (8003290 <ServoSystem_Init+0xe0>)
 80031d8:	482f      	ldr	r0, [pc, #188]	@ (8003298 <ServoSystem_Init+0xe8>)
 80031da:	f7ff fd51 	bl	8002c80 <Servo_Attach>

  Servo_SetMaxSpeedDps(&s1, 80.0f);
 80031de:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 800329c <ServoSystem_Init+0xec>
 80031e2:	482c      	ldr	r0, [pc, #176]	@ (8003294 <ServoSystem_Init+0xe4>)
 80031e4:	f7ff fe78 	bl	8002ed8 <Servo_SetMaxSpeedDps>
  Servo_SetMaxSpeedDps(&s2, 80.0f);
 80031e8:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 800329c <ServoSystem_Init+0xec>
 80031ec:	482a      	ldr	r0, [pc, #168]	@ (8003298 <ServoSystem_Init+0xe8>)
 80031ee:	f7ff fe73 	bl	8002ed8 <Servo_SetMaxSpeedDps>
  Servo_SetEmaAlpha(&s1, 0.35f);
 80031f2:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 80032a0 <ServoSystem_Init+0xf0>
 80031f6:	4827      	ldr	r0, [pc, #156]	@ (8003294 <ServoSystem_Init+0xe4>)
 80031f8:	f7ff fe9c 	bl	8002f34 <Servo_SetEmaAlpha>
  Servo_SetEmaAlpha(&s2, 0.35f);
 80031fc:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 80032a0 <ServoSystem_Init+0xf0>
 8003200:	4825      	ldr	r0, [pc, #148]	@ (8003298 <ServoSystem_Init+0xe8>)
 8003202:	f7ff fe97 	bl	8002f34 <Servo_SetEmaAlpha>

  Servo_WriteDegrees(&s1, 100.0f);
 8003206:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 80032a4 <ServoSystem_Init+0xf4>
 800320a:	4822      	ldr	r0, [pc, #136]	@ (8003294 <ServoSystem_Init+0xe4>)
 800320c:	f7ff fe14 	bl	8002e38 <Servo_WriteDegrees>
  HAL_Delay(300);
 8003210:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003214:	f000 fce6 	bl	8003be4 <HAL_Delay>
  Servo_WriteDegrees(&s2, 100.0f);
 8003218:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 80032a4 <ServoSystem_Init+0xf4>
 800321c:	481e      	ldr	r0, [pc, #120]	@ (8003298 <ServoSystem_Init+0xe8>)
 800321e:	f7ff fe0b 	bl	8002e38 <Servo_WriteDegrees>
  HAL_Delay(300);
 8003222:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003226:	f000 fcdd 	bl	8003be4 <HAL_Delay>

  GripStop_Init(&g1, &s1, PRESS_RIGHT, 100.0f, 20.0f, 100.0f, 2, 80.0f, 0.35f, 1.0f, 5000);
 800322a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 8003234:	ed9f 2a1a 	vldr	s4, [pc, #104]	@ 80032a0 <ServoSystem_Init+0xf0>
 8003238:	eddf 1a18 	vldr	s3, [pc, #96]	@ 800329c <ServoSystem_Init+0xec>
 800323c:	2302      	movs	r3, #2
 800323e:	ed9f 1a19 	vldr	s2, [pc, #100]	@ 80032a4 <ServoSystem_Init+0xf4>
 8003242:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8003246:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 80032a4 <ServoSystem_Init+0xf4>
 800324a:	2201      	movs	r2, #1
 800324c:	4911      	ldr	r1, [pc, #68]	@ (8003294 <ServoSystem_Init+0xe4>)
 800324e:	4816      	ldr	r0, [pc, #88]	@ (80032a8 <ServoSystem_Init+0xf8>)
 8003250:	f7fe fbc8 	bl	80019e4 <GripStop_Init>
  GripStop_Init(&g2, &s2, PRESS_LEFT,  100.0f, 20.0f, 200.0f, 1, 80.0f, 0.35f, 1.0f, 5000);
 8003254:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 800325e:	ed9f 2a10 	vldr	s4, [pc, #64]	@ 80032a0 <ServoSystem_Init+0xf0>
 8003262:	eddf 1a0e 	vldr	s3, [pc, #56]	@ 800329c <ServoSystem_Init+0xec>
 8003266:	2301      	movs	r3, #1
 8003268:	ed9f 1a10 	vldr	s2, [pc, #64]	@ 80032ac <ServoSystem_Init+0xfc>
 800326c:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8003270:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80032a4 <ServoSystem_Init+0xf4>
 8003274:	2200      	movs	r2, #0
 8003276:	4908      	ldr	r1, [pc, #32]	@ (8003298 <ServoSystem_Init+0xe8>)
 8003278:	480d      	ldr	r0, [pc, #52]	@ (80032b0 <ServoSystem_Init+0x100>)
 800327a:	f7fe fbb3 	bl	80019e4 <GripStop_Init>

  GripStop_Start(&g1);
 800327e:	480a      	ldr	r0, [pc, #40]	@ (80032a8 <ServoSystem_Init+0xf8>)
 8003280:	f7fe fc4c 	bl	8001b1c <GripStop_Start>
  GripStop_Start(&g2);
 8003284:	480a      	ldr	r0, [pc, #40]	@ (80032b0 <ServoSystem_Init+0x100>)
 8003286:	f7fe fc49 	bl	8001b1c <GripStop_Start>
}
 800328a:	bf00      	nop
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	20000b74 	.word	0x20000b74
 8003294:	20000ab8 	.word	0x20000ab8
 8003298:	20000ae4 	.word	0x20000ae4
 800329c:	42a00000 	.word	0x42a00000
 80032a0:	3eb33333 	.word	0x3eb33333
 80032a4:	42c80000 	.word	0x42c80000
 80032a8:	20000b10 	.word	0x20000b10
 80032ac:	43480000 	.word	0x43480000
 80032b0:	20000b40 	.word	0x20000b40

080032b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	607b      	str	r3, [r7, #4]
 80032be:	4b10      	ldr	r3, [pc, #64]	@ (8003300 <HAL_MspInit+0x4c>)
 80032c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c2:	4a0f      	ldr	r2, [pc, #60]	@ (8003300 <HAL_MspInit+0x4c>)
 80032c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80032ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003300 <HAL_MspInit+0x4c>)
 80032cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032d2:	607b      	str	r3, [r7, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	603b      	str	r3, [r7, #0]
 80032da:	4b09      	ldr	r3, [pc, #36]	@ (8003300 <HAL_MspInit+0x4c>)
 80032dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032de:	4a08      	ldr	r2, [pc, #32]	@ (8003300 <HAL_MspInit+0x4c>)
 80032e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80032e6:	4b06      	ldr	r3, [pc, #24]	@ (8003300 <HAL_MspInit+0x4c>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ee:	603b      	str	r3, [r7, #0]
 80032f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40023800 	.word	0x40023800

08003304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003308:	bf00      	nop
 800330a:	e7fd      	b.n	8003308 <NMI_Handler+0x4>

0800330c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003310:	bf00      	nop
 8003312:	e7fd      	b.n	8003310 <HardFault_Handler+0x4>

08003314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003318:	bf00      	nop
 800331a:	e7fd      	b.n	8003318 <MemManage_Handler+0x4>

0800331c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003320:	bf00      	nop
 8003322:	e7fd      	b.n	8003320 <BusFault_Handler+0x4>

08003324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003328:	bf00      	nop
 800332a:	e7fd      	b.n	8003328 <UsageFault_Handler+0x4>

0800332c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003330:	bf00      	nop
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800333a:	b480      	push	{r7}
 800333c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800333e:	bf00      	nop
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800334c:	bf00      	nop
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800335a:	f000 fc23 	bl	8003ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800335e:	bf00      	nop
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003368:	4802      	ldr	r0, [pc, #8]	@ (8003374 <DMA1_Stream2_IRQHandler+0x10>)
 800336a:	f001 f97b 	bl	8004664 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800336e:	bf00      	nop
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	20000c94 	.word	0x20000c94

08003378 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800337c:	4802      	ldr	r0, [pc, #8]	@ (8003388 <UART4_IRQHandler+0x10>)
 800337e:	f003 fc87 	bl	8006c90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20000bbc 	.word	0x20000bbc

0800338c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003390:	4802      	ldr	r0, [pc, #8]	@ (800339c <DMA2_Stream1_IRQHandler+0x10>)
 8003392:	f001 f967 	bl	8004664 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003396:	bf00      	nop
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000cf4 	.word	0x20000cf4

080033a0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  if ((__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE) != RESET) &&
 80033a6:	4b11      	ldr	r3, [pc, #68]	@ (80033ec <USART6_IRQHandler+0x4c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0310 	and.w	r3, r3, #16
 80033b0:	2b10      	cmp	r3, #16
 80033b2:	d114      	bne.n	80033de <USART6_IRQHandler+0x3e>
	  (__HAL_UART_GET_IT_SOURCE(&huart6, UART_IT_IDLE) != RESET))
 80033b4:	4b0d      	ldr	r3, [pc, #52]	@ (80033ec <USART6_IRQHandler+0x4c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f003 0310 	and.w	r3, r3, #16
  if ((__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE) != RESET) &&
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00d      	beq.n	80033de <USART6_IRQHandler+0x3e>
  {
	  HAL_UART_IDLE_Callback(&huart6);
 80033c2:	480a      	ldr	r0, [pc, #40]	@ (80033ec <USART6_IRQHandler+0x4c>)
 80033c4:	f7fe fcbe 	bl	8001d44 <HAL_UART_IDLE_Callback>
	  __HAL_UART_CLEAR_IDLEFLAG(&huart6);
 80033c8:	2300      	movs	r3, #0
 80033ca:	607b      	str	r3, [r7, #4]
 80033cc:	4b07      	ldr	r3, [pc, #28]	@ (80033ec <USART6_IRQHandler+0x4c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	607b      	str	r3, [r7, #4]
 80033d4:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <USART6_IRQHandler+0x4c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	607b      	str	r3, [r7, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
  }
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80033de:	4803      	ldr	r0, [pc, #12]	@ (80033ec <USART6_IRQHandler+0x4c>)
 80033e0:	f003 fc56 	bl	8006c90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80033e4:	bf00      	nop
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	20000c4c 	.word	0x20000c4c

080033f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  return 1;
 80033f4:	2301      	movs	r3, #1
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <_kill>:

int _kill(int pid, int sig)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800340a:	f006 fd8b 	bl	8009f24 <__errno>
 800340e:	4603      	mov	r3, r0
 8003410:	2216      	movs	r2, #22
 8003412:	601a      	str	r2, [r3, #0]
  return -1;
 8003414:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003418:	4618      	mov	r0, r3
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <_exit>:

void _exit (int status)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003428:	f04f 31ff 	mov.w	r1, #4294967295
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7ff ffe7 	bl	8003400 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003432:	bf00      	nop
 8003434:	e7fd      	b.n	8003432 <_exit+0x12>

08003436 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b086      	sub	sp, #24
 800343a:	af00      	add	r7, sp, #0
 800343c:	60f8      	str	r0, [r7, #12]
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003442:	2300      	movs	r3, #0
 8003444:	617b      	str	r3, [r7, #20]
 8003446:	e00a      	b.n	800345e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003448:	f3af 8000 	nop.w
 800344c:	4601      	mov	r1, r0
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	60ba      	str	r2, [r7, #8]
 8003454:	b2ca      	uxtb	r2, r1
 8003456:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	3301      	adds	r3, #1
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	429a      	cmp	r2, r3
 8003464:	dbf0      	blt.n	8003448 <_read+0x12>
  }

  return len;
 8003466:	687b      	ldr	r3, [r7, #4]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	e009      	b.n	8003496 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	1c5a      	adds	r2, r3, #1
 8003486:	60ba      	str	r2, [r7, #8]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7fe fcb0 	bl	8001df0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	3301      	adds	r3, #1
 8003494:	617b      	str	r3, [r7, #20]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	429a      	cmp	r2, r3
 800349c:	dbf1      	blt.n	8003482 <_write+0x12>
  }
  return len;
 800349e:	687b      	ldr	r3, [r7, #4]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <_close>:

int _close(int file)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034d0:	605a      	str	r2, [r3, #4]
  return 0;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <_isatty>:

int _isatty(int file)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034e8:	2301      	movs	r3, #1
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b085      	sub	sp, #20
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	60f8      	str	r0, [r7, #12]
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003518:	4a14      	ldr	r2, [pc, #80]	@ (800356c <_sbrk+0x5c>)
 800351a:	4b15      	ldr	r3, [pc, #84]	@ (8003570 <_sbrk+0x60>)
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003524:	4b13      	ldr	r3, [pc, #76]	@ (8003574 <_sbrk+0x64>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d102      	bne.n	8003532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800352c:	4b11      	ldr	r3, [pc, #68]	@ (8003574 <_sbrk+0x64>)
 800352e:	4a12      	ldr	r2, [pc, #72]	@ (8003578 <_sbrk+0x68>)
 8003530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003532:	4b10      	ldr	r3, [pc, #64]	@ (8003574 <_sbrk+0x64>)
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4413      	add	r3, r2
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	429a      	cmp	r2, r3
 800353e:	d207      	bcs.n	8003550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003540:	f006 fcf0 	bl	8009f24 <__errno>
 8003544:	4603      	mov	r3, r0
 8003546:	220c      	movs	r2, #12
 8003548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800354a:	f04f 33ff 	mov.w	r3, #4294967295
 800354e:	e009      	b.n	8003564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003550:	4b08      	ldr	r3, [pc, #32]	@ (8003574 <_sbrk+0x64>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003556:	4b07      	ldr	r3, [pc, #28]	@ (8003574 <_sbrk+0x64>)
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4413      	add	r3, r2
 800355e:	4a05      	ldr	r2, [pc, #20]	@ (8003574 <_sbrk+0x64>)
 8003560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003562:	68fb      	ldr	r3, [r7, #12]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	20020000 	.word	0x20020000
 8003570:	00000400 	.word	0x00000400
 8003574:	20000b70 	.word	0x20000b70
 8003578:	20000ea8 	.word	0x20000ea8

0800357c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003580:	4b06      	ldr	r3, [pc, #24]	@ (800359c <SystemInit+0x20>)
 8003582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003586:	4a05      	ldr	r2, [pc, #20]	@ (800359c <SystemInit+0x20>)
 8003588:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800358c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	e000ed00 	.word	0xe000ed00

080035a0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08e      	sub	sp, #56	@ 0x38
 80035a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	605a      	str	r2, [r3, #4]
 80035b0:	609a      	str	r2, [r3, #8]
 80035b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035b4:	f107 0320 	add.w	r3, r7, #32
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035be:	1d3b      	adds	r3, r7, #4
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	605a      	str	r2, [r3, #4]
 80035c6:	609a      	str	r2, [r3, #8]
 80035c8:	60da      	str	r2, [r3, #12]
 80035ca:	611a      	str	r2, [r3, #16]
 80035cc:	615a      	str	r2, [r3, #20]
 80035ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80035d0:	4b33      	ldr	r3, [pc, #204]	@ (80036a0 <MX_TIM3_Init+0x100>)
 80035d2:	4a34      	ldr	r2, [pc, #208]	@ (80036a4 <MX_TIM3_Init+0x104>)
 80035d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 89;
 80035d6:	4b32      	ldr	r3, [pc, #200]	@ (80036a0 <MX_TIM3_Init+0x100>)
 80035d8:	2259      	movs	r2, #89	@ 0x59
 80035da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035dc:	4b30      	ldr	r3, [pc, #192]	@ (80036a0 <MX_TIM3_Init+0x100>)
 80035de:	2200      	movs	r2, #0
 80035e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80035e2:	4b2f      	ldr	r3, [pc, #188]	@ (80036a0 <MX_TIM3_Init+0x100>)
 80035e4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80035e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035ea:	4b2d      	ldr	r3, [pc, #180]	@ (80036a0 <MX_TIM3_Init+0x100>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035f0:	4b2b      	ldr	r3, [pc, #172]	@ (80036a0 <MX_TIM3_Init+0x100>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80035f6:	482a      	ldr	r0, [pc, #168]	@ (80036a0 <MX_TIM3_Init+0x100>)
 80035f8:	f002 fa84 	bl	8005b04 <HAL_TIM_Base_Init>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003602:	f7fe fcb9 	bl	8001f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003606:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800360a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800360c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003610:	4619      	mov	r1, r3
 8003612:	4823      	ldr	r0, [pc, #140]	@ (80036a0 <MX_TIM3_Init+0x100>)
 8003614:	f002 fca8 	bl	8005f68 <HAL_TIM_ConfigClockSource>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800361e:	f7fe fcab 	bl	8001f78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003622:	481f      	ldr	r0, [pc, #124]	@ (80036a0 <MX_TIM3_Init+0x100>)
 8003624:	f002 fabd 	bl	8005ba2 <HAL_TIM_PWM_Init>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800362e:	f7fe fca3 	bl	8001f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003632:	2300      	movs	r3, #0
 8003634:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003636:	2300      	movs	r3, #0
 8003638:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800363a:	f107 0320 	add.w	r3, r7, #32
 800363e:	4619      	mov	r1, r3
 8003640:	4817      	ldr	r0, [pc, #92]	@ (80036a0 <MX_TIM3_Init+0x100>)
 8003642:	f003 f86f 	bl	8006724 <HAL_TIMEx_MasterConfigSynchronization>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800364c:	f7fe fc94 	bl	8001f78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003650:	2360      	movs	r3, #96	@ 0x60
 8003652:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8003654:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8003658:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800365e:	2300      	movs	r3, #0
 8003660:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003662:	1d3b      	adds	r3, r7, #4
 8003664:	2200      	movs	r2, #0
 8003666:	4619      	mov	r1, r3
 8003668:	480d      	ldr	r0, [pc, #52]	@ (80036a0 <MX_TIM3_Init+0x100>)
 800366a:	f002 fbbb 	bl	8005de4 <HAL_TIM_PWM_ConfigChannel>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003674:	f7fe fc80 	bl	8001f78 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8003678:	2300      	movs	r3, #0
 800367a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800367c:	1d3b      	adds	r3, r7, #4
 800367e:	2204      	movs	r2, #4
 8003680:	4619      	mov	r1, r3
 8003682:	4807      	ldr	r0, [pc, #28]	@ (80036a0 <MX_TIM3_Init+0x100>)
 8003684:	f002 fbae 	bl	8005de4 <HAL_TIM_PWM_ConfigChannel>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 800368e:	f7fe fc73 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003692:	4803      	ldr	r0, [pc, #12]	@ (80036a0 <MX_TIM3_Init+0x100>)
 8003694:	f000 f82a 	bl	80036ec <HAL_TIM_MspPostInit>

}
 8003698:	bf00      	nop
 800369a:	3738      	adds	r7, #56	@ 0x38
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20000b74 	.word	0x20000b74
 80036a4:	40000400 	.word	0x40000400

080036a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a0b      	ldr	r2, [pc, #44]	@ (80036e4 <HAL_TIM_Base_MspInit+0x3c>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d10d      	bne.n	80036d6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036ba:	2300      	movs	r3, #0
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	4b0a      	ldr	r3, [pc, #40]	@ (80036e8 <HAL_TIM_Base_MspInit+0x40>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c2:	4a09      	ldr	r2, [pc, #36]	@ (80036e8 <HAL_TIM_Base_MspInit+0x40>)
 80036c4:	f043 0302 	orr.w	r3, r3, #2
 80036c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80036ca:	4b07      	ldr	r3, [pc, #28]	@ (80036e8 <HAL_TIM_Base_MspInit+0x40>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	60fb      	str	r3, [r7, #12]
 80036d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80036d6:	bf00      	nop
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40000400 	.word	0x40000400
 80036e8:	40023800 	.word	0x40023800

080036ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b088      	sub	sp, #32
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f4:	f107 030c 	add.w	r3, r7, #12
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	605a      	str	r2, [r3, #4]
 80036fe:	609a      	str	r2, [r3, #8]
 8003700:	60da      	str	r2, [r3, #12]
 8003702:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a12      	ldr	r2, [pc, #72]	@ (8003754 <HAL_TIM_MspPostInit+0x68>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d11d      	bne.n	800374a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800370e:	2300      	movs	r3, #0
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	4b11      	ldr	r3, [pc, #68]	@ (8003758 <HAL_TIM_MspPostInit+0x6c>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003716:	4a10      	ldr	r2, [pc, #64]	@ (8003758 <HAL_TIM_MspPostInit+0x6c>)
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	6313      	str	r3, [r2, #48]	@ 0x30
 800371e:	4b0e      	ldr	r3, [pc, #56]	@ (8003758 <HAL_TIM_MspPostInit+0x6c>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800372a:	23c0      	movs	r3, #192	@ 0xc0
 800372c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372e:	2302      	movs	r3, #2
 8003730:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003736:	2302      	movs	r3, #2
 8003738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800373a:	2302      	movs	r3, #2
 800373c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800373e:	f107 030c 	add.w	r3, r7, #12
 8003742:	4619      	mov	r1, r3
 8003744:	4805      	ldr	r0, [pc, #20]	@ (800375c <HAL_TIM_MspPostInit+0x70>)
 8003746:	f001 f9f7 	bl	8004b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800374a:	bf00      	nop
 800374c:	3720      	adds	r7, #32
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40000400 	.word	0x40000400
 8003758:	40023800 	.word	0x40023800
 800375c:	40020000 	.word	0x40020000

08003760 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_usart6_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003764:	4b10      	ldr	r3, [pc, #64]	@ (80037a8 <MX_UART4_Init+0x48>)
 8003766:	4a11      	ldr	r2, [pc, #68]	@ (80037ac <MX_UART4_Init+0x4c>)
 8003768:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 800376a:	4b0f      	ldr	r3, [pc, #60]	@ (80037a8 <MX_UART4_Init+0x48>)
 800376c:	4a10      	ldr	r2, [pc, #64]	@ (80037b0 <MX_UART4_Init+0x50>)
 800376e:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003770:	4b0d      	ldr	r3, [pc, #52]	@ (80037a8 <MX_UART4_Init+0x48>)
 8003772:	2200      	movs	r2, #0
 8003774:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003776:	4b0c      	ldr	r3, [pc, #48]	@ (80037a8 <MX_UART4_Init+0x48>)
 8003778:	2200      	movs	r2, #0
 800377a:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800377c:	4b0a      	ldr	r3, [pc, #40]	@ (80037a8 <MX_UART4_Init+0x48>)
 800377e:	2200      	movs	r2, #0
 8003780:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003782:	4b09      	ldr	r3, [pc, #36]	@ (80037a8 <MX_UART4_Init+0x48>)
 8003784:	220c      	movs	r2, #12
 8003786:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003788:	4b07      	ldr	r3, [pc, #28]	@ (80037a8 <MX_UART4_Init+0x48>)
 800378a:	2200      	movs	r2, #0
 800378c:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800378e:	4b06      	ldr	r3, [pc, #24]	@ (80037a8 <MX_UART4_Init+0x48>)
 8003790:	2200      	movs	r2, #0
 8003792:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003794:	4804      	ldr	r0, [pc, #16]	@ (80037a8 <MX_UART4_Init+0x48>)
 8003796:	f003 f841 	bl	800681c <HAL_UART_Init>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <MX_UART4_Init+0x44>
  {
    Error_Handler();
 80037a0:	f7fe fbea 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80037a4:	bf00      	nop
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	20000bbc 	.word	0x20000bbc
 80037ac:	40004c00 	.word	0x40004c00
 80037b0:	001e8480 	.word	0x001e8480

080037b4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80037b8:	4b11      	ldr	r3, [pc, #68]	@ (8003800 <MX_USART2_UART_Init+0x4c>)
 80037ba:	4a12      	ldr	r2, [pc, #72]	@ (8003804 <MX_USART2_UART_Init+0x50>)
 80037bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80037be:	4b10      	ldr	r3, [pc, #64]	@ (8003800 <MX_USART2_UART_Init+0x4c>)
 80037c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80037c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80037c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003800 <MX_USART2_UART_Init+0x4c>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80037cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003800 <MX_USART2_UART_Init+0x4c>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80037d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003800 <MX_USART2_UART_Init+0x4c>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80037d8:	4b09      	ldr	r3, [pc, #36]	@ (8003800 <MX_USART2_UART_Init+0x4c>)
 80037da:	220c      	movs	r2, #12
 80037dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037de:	4b08      	ldr	r3, [pc, #32]	@ (8003800 <MX_USART2_UART_Init+0x4c>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80037e4:	4b06      	ldr	r3, [pc, #24]	@ (8003800 <MX_USART2_UART_Init+0x4c>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80037ea:	4805      	ldr	r0, [pc, #20]	@ (8003800 <MX_USART2_UART_Init+0x4c>)
 80037ec:	f003 f816 	bl	800681c <HAL_UART_Init>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80037f6:	f7fe fbbf 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20000c04 	.word	0x20000c04
 8003804:	40004400 	.word	0x40004400

08003808 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800380c:	4b11      	ldr	r3, [pc, #68]	@ (8003854 <MX_USART6_UART_Init+0x4c>)
 800380e:	4a12      	ldr	r2, [pc, #72]	@ (8003858 <MX_USART6_UART_Init+0x50>)
 8003810:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003812:	4b10      	ldr	r3, [pc, #64]	@ (8003854 <MX_USART6_UART_Init+0x4c>)
 8003814:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003818:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800381a:	4b0e      	ldr	r3, [pc, #56]	@ (8003854 <MX_USART6_UART_Init+0x4c>)
 800381c:	2200      	movs	r2, #0
 800381e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003820:	4b0c      	ldr	r3, [pc, #48]	@ (8003854 <MX_USART6_UART_Init+0x4c>)
 8003822:	2200      	movs	r2, #0
 8003824:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003826:	4b0b      	ldr	r3, [pc, #44]	@ (8003854 <MX_USART6_UART_Init+0x4c>)
 8003828:	2200      	movs	r2, #0
 800382a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800382c:	4b09      	ldr	r3, [pc, #36]	@ (8003854 <MX_USART6_UART_Init+0x4c>)
 800382e:	220c      	movs	r2, #12
 8003830:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003832:	4b08      	ldr	r3, [pc, #32]	@ (8003854 <MX_USART6_UART_Init+0x4c>)
 8003834:	2200      	movs	r2, #0
 8003836:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003838:	4b06      	ldr	r3, [pc, #24]	@ (8003854 <MX_USART6_UART_Init+0x4c>)
 800383a:	2200      	movs	r2, #0
 800383c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800383e:	4805      	ldr	r0, [pc, #20]	@ (8003854 <MX_USART6_UART_Init+0x4c>)
 8003840:	f002 ffec 	bl	800681c <HAL_UART_Init>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800384a:	f7fe fb95 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800384e:	bf00      	nop
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20000c4c 	.word	0x20000c4c
 8003858:	40011400 	.word	0x40011400

0800385c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b08e      	sub	sp, #56	@ 0x38
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003864:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	605a      	str	r2, [r3, #4]
 800386e:	609a      	str	r2, [r3, #8]
 8003870:	60da      	str	r2, [r3, #12]
 8003872:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a82      	ldr	r2, [pc, #520]	@ (8003a84 <HAL_UART_MspInit+0x228>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d162      	bne.n	8003944 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800387e:	2300      	movs	r3, #0
 8003880:	623b      	str	r3, [r7, #32]
 8003882:	4b81      	ldr	r3, [pc, #516]	@ (8003a88 <HAL_UART_MspInit+0x22c>)
 8003884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003886:	4a80      	ldr	r2, [pc, #512]	@ (8003a88 <HAL_UART_MspInit+0x22c>)
 8003888:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800388c:	6413      	str	r3, [r2, #64]	@ 0x40
 800388e:	4b7e      	ldr	r3, [pc, #504]	@ (8003a88 <HAL_UART_MspInit+0x22c>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003892:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003896:	623b      	str	r3, [r7, #32]
 8003898:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800389a:	2300      	movs	r3, #0
 800389c:	61fb      	str	r3, [r7, #28]
 800389e:	4b7a      	ldr	r3, [pc, #488]	@ (8003a88 <HAL_UART_MspInit+0x22c>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a2:	4a79      	ldr	r2, [pc, #484]	@ (8003a88 <HAL_UART_MspInit+0x22c>)
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80038aa:	4b77      	ldr	r3, [pc, #476]	@ (8003a88 <HAL_UART_MspInit+0x22c>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	61fb      	str	r3, [r7, #28]
 80038b4:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80038b6:	2303      	movs	r3, #3
 80038b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ba:	2302      	movs	r3, #2
 80038bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038be:	2301      	movs	r3, #1
 80038c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038c2:	2303      	movs	r3, #3
 80038c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80038c6:	2308      	movs	r3, #8
 80038c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038ce:	4619      	mov	r1, r3
 80038d0:	486e      	ldr	r0, [pc, #440]	@ (8003a8c <HAL_UART_MspInit+0x230>)
 80038d2:	f001 f931 	bl	8004b38 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80038d6:	4b6e      	ldr	r3, [pc, #440]	@ (8003a90 <HAL_UART_MspInit+0x234>)
 80038d8:	4a6e      	ldr	r2, [pc, #440]	@ (8003a94 <HAL_UART_MspInit+0x238>)
 80038da:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80038dc:	4b6c      	ldr	r3, [pc, #432]	@ (8003a90 <HAL_UART_MspInit+0x234>)
 80038de:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80038e2:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038e4:	4b6a      	ldr	r3, [pc, #424]	@ (8003a90 <HAL_UART_MspInit+0x234>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038ea:	4b69      	ldr	r3, [pc, #420]	@ (8003a90 <HAL_UART_MspInit+0x234>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038f0:	4b67      	ldr	r3, [pc, #412]	@ (8003a90 <HAL_UART_MspInit+0x234>)
 80038f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038f6:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038f8:	4b65      	ldr	r3, [pc, #404]	@ (8003a90 <HAL_UART_MspInit+0x234>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038fe:	4b64      	ldr	r3, [pc, #400]	@ (8003a90 <HAL_UART_MspInit+0x234>)
 8003900:	2200      	movs	r2, #0
 8003902:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8003904:	4b62      	ldr	r3, [pc, #392]	@ (8003a90 <HAL_UART_MspInit+0x234>)
 8003906:	2200      	movs	r2, #0
 8003908:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800390a:	4b61      	ldr	r3, [pc, #388]	@ (8003a90 <HAL_UART_MspInit+0x234>)
 800390c:	2200      	movs	r2, #0
 800390e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003910:	4b5f      	ldr	r3, [pc, #380]	@ (8003a90 <HAL_UART_MspInit+0x234>)
 8003912:	2200      	movs	r2, #0
 8003914:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003916:	485e      	ldr	r0, [pc, #376]	@ (8003a90 <HAL_UART_MspInit+0x234>)
 8003918:	f000 fd0c 	bl	8004334 <HAL_DMA_Init>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8003922:	f7fe fb29 	bl	8001f78 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a59      	ldr	r2, [pc, #356]	@ (8003a90 <HAL_UART_MspInit+0x234>)
 800392a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800392c:	4a58      	ldr	r2, [pc, #352]	@ (8003a90 <HAL_UART_MspInit+0x234>)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003932:	2200      	movs	r2, #0
 8003934:	2100      	movs	r1, #0
 8003936:	2034      	movs	r0, #52	@ 0x34
 8003938:	f000 fcc5 	bl	80042c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800393c:	2034      	movs	r0, #52	@ 0x34
 800393e:	f000 fcde 	bl	80042fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003942:	e09a      	b.n	8003a7a <HAL_UART_MspInit+0x21e>
  else if(uartHandle->Instance==USART2)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a53      	ldr	r2, [pc, #332]	@ (8003a98 <HAL_UART_MspInit+0x23c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d12c      	bne.n	80039a8 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800394e:	2300      	movs	r3, #0
 8003950:	61bb      	str	r3, [r7, #24]
 8003952:	4b4d      	ldr	r3, [pc, #308]	@ (8003a88 <HAL_UART_MspInit+0x22c>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003956:	4a4c      	ldr	r2, [pc, #304]	@ (8003a88 <HAL_UART_MspInit+0x22c>)
 8003958:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800395c:	6413      	str	r3, [r2, #64]	@ 0x40
 800395e:	4b4a      	ldr	r3, [pc, #296]	@ (8003a88 <HAL_UART_MspInit+0x22c>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003966:	61bb      	str	r3, [r7, #24]
 8003968:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800396a:	2300      	movs	r3, #0
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	4b46      	ldr	r3, [pc, #280]	@ (8003a88 <HAL_UART_MspInit+0x22c>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003972:	4a45      	ldr	r2, [pc, #276]	@ (8003a88 <HAL_UART_MspInit+0x22c>)
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	6313      	str	r3, [r2, #48]	@ 0x30
 800397a:	4b43      	ldr	r3, [pc, #268]	@ (8003a88 <HAL_UART_MspInit+0x22c>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003986:	230c      	movs	r3, #12
 8003988:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800398a:	2302      	movs	r3, #2
 800398c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398e:	2300      	movs	r3, #0
 8003990:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003992:	2303      	movs	r3, #3
 8003994:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003996:	2307      	movs	r3, #7
 8003998:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800399a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800399e:	4619      	mov	r1, r3
 80039a0:	483a      	ldr	r0, [pc, #232]	@ (8003a8c <HAL_UART_MspInit+0x230>)
 80039a2:	f001 f8c9 	bl	8004b38 <HAL_GPIO_Init>
}
 80039a6:	e068      	b.n	8003a7a <HAL_UART_MspInit+0x21e>
  else if(uartHandle->Instance==USART6)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a3b      	ldr	r2, [pc, #236]	@ (8003a9c <HAL_UART_MspInit+0x240>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d163      	bne.n	8003a7a <HAL_UART_MspInit+0x21e>
    __HAL_RCC_USART6_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	613b      	str	r3, [r7, #16]
 80039b6:	4b34      	ldr	r3, [pc, #208]	@ (8003a88 <HAL_UART_MspInit+0x22c>)
 80039b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ba:	4a33      	ldr	r2, [pc, #204]	@ (8003a88 <HAL_UART_MspInit+0x22c>)
 80039bc:	f043 0320 	orr.w	r3, r3, #32
 80039c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80039c2:	4b31      	ldr	r3, [pc, #196]	@ (8003a88 <HAL_UART_MspInit+0x22c>)
 80039c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c6:	f003 0320 	and.w	r3, r3, #32
 80039ca:	613b      	str	r3, [r7, #16]
 80039cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039ce:	2300      	movs	r3, #0
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	4b2d      	ldr	r3, [pc, #180]	@ (8003a88 <HAL_UART_MspInit+0x22c>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d6:	4a2c      	ldr	r2, [pc, #176]	@ (8003a88 <HAL_UART_MspInit+0x22c>)
 80039d8:	f043 0304 	orr.w	r3, r3, #4
 80039dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80039de:	4b2a      	ldr	r3, [pc, #168]	@ (8003a88 <HAL_UART_MspInit+0x22c>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80039ea:	23c0      	movs	r3, #192	@ 0xc0
 80039ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ee:	2302      	movs	r3, #2
 80039f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f6:	2303      	movs	r3, #3
 80039f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80039fa:	2308      	movs	r3, #8
 80039fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a02:	4619      	mov	r1, r3
 8003a04:	4826      	ldr	r0, [pc, #152]	@ (8003aa0 <HAL_UART_MspInit+0x244>)
 8003a06:	f001 f897 	bl	8004b38 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003a0a:	4b26      	ldr	r3, [pc, #152]	@ (8003aa4 <HAL_UART_MspInit+0x248>)
 8003a0c:	4a26      	ldr	r2, [pc, #152]	@ (8003aa8 <HAL_UART_MspInit+0x24c>)
 8003a0e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003a10:	4b24      	ldr	r3, [pc, #144]	@ (8003aa4 <HAL_UART_MspInit+0x248>)
 8003a12:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003a16:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a18:	4b22      	ldr	r3, [pc, #136]	@ (8003aa4 <HAL_UART_MspInit+0x248>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a1e:	4b21      	ldr	r3, [pc, #132]	@ (8003aa4 <HAL_UART_MspInit+0x248>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a24:	4b1f      	ldr	r3, [pc, #124]	@ (8003aa4 <HAL_UART_MspInit+0x248>)
 8003a26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a2a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003aa4 <HAL_UART_MspInit+0x248>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a32:	4b1c      	ldr	r3, [pc, #112]	@ (8003aa4 <HAL_UART_MspInit+0x248>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8003a38:	4b1a      	ldr	r3, [pc, #104]	@ (8003aa4 <HAL_UART_MspInit+0x248>)
 8003a3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a3e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003a40:	4b18      	ldr	r3, [pc, #96]	@ (8003aa4 <HAL_UART_MspInit+0x248>)
 8003a42:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003a46:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a48:	4b16      	ldr	r3, [pc, #88]	@ (8003aa4 <HAL_UART_MspInit+0x248>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003a4e:	4815      	ldr	r0, [pc, #84]	@ (8003aa4 <HAL_UART_MspInit+0x248>)
 8003a50:	f000 fc70 	bl	8004334 <HAL_DMA_Init>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_UART_MspInit+0x202>
      Error_Handler();
 8003a5a:	f7fe fa8d 	bl	8001f78 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a10      	ldr	r2, [pc, #64]	@ (8003aa4 <HAL_UART_MspInit+0x248>)
 8003a62:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003a64:	4a0f      	ldr	r2, [pc, #60]	@ (8003aa4 <HAL_UART_MspInit+0x248>)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	2047      	movs	r0, #71	@ 0x47
 8003a70:	f000 fc29 	bl	80042c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003a74:	2047      	movs	r0, #71	@ 0x47
 8003a76:	f000 fc42 	bl	80042fe <HAL_NVIC_EnableIRQ>
}
 8003a7a:	bf00      	nop
 8003a7c:	3738      	adds	r7, #56	@ 0x38
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40004c00 	.word	0x40004c00
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	40020000 	.word	0x40020000
 8003a90:	20000c94 	.word	0x20000c94
 8003a94:	40026040 	.word	0x40026040
 8003a98:	40004400 	.word	0x40004400
 8003a9c:	40011400 	.word	0x40011400
 8003aa0:	40020800 	.word	0x40020800
 8003aa4:	20000cf4 	.word	0x20000cf4
 8003aa8:	40026428 	.word	0x40026428

08003aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003aac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003ae4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003ab0:	f7ff fd64 	bl	800357c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ab4:	480c      	ldr	r0, [pc, #48]	@ (8003ae8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003ab6:	490d      	ldr	r1, [pc, #52]	@ (8003aec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8003af0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003abc:	e002      	b.n	8003ac4 <LoopCopyDataInit>

08003abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ac2:	3304      	adds	r3, #4

08003ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ac8:	d3f9      	bcc.n	8003abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aca:	4a0a      	ldr	r2, [pc, #40]	@ (8003af4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003acc:	4c0a      	ldr	r4, [pc, #40]	@ (8003af8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ad0:	e001      	b.n	8003ad6 <LoopFillZerobss>

08003ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ad4:	3204      	adds	r2, #4

08003ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ad8:	d3fb      	bcc.n	8003ad2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003ada:	f006 fa29 	bl	8009f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ade:	f7fe f999 	bl	8001e14 <main>
  bx  lr    
 8003ae2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ae4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003aec:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003af0:	0800d120 	.word	0x0800d120
  ldr r2, =_sbss
 8003af4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003af8:	20000ea4 	.word	0x20000ea4

08003afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003afc:	e7fe      	b.n	8003afc <ADC_IRQHandler>
	...

08003b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b04:	4b0e      	ldr	r3, [pc, #56]	@ (8003b40 <HAL_Init+0x40>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a0d      	ldr	r2, [pc, #52]	@ (8003b40 <HAL_Init+0x40>)
 8003b0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b10:	4b0b      	ldr	r3, [pc, #44]	@ (8003b40 <HAL_Init+0x40>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a0a      	ldr	r2, [pc, #40]	@ (8003b40 <HAL_Init+0x40>)
 8003b16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b1c:	4b08      	ldr	r3, [pc, #32]	@ (8003b40 <HAL_Init+0x40>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a07      	ldr	r2, [pc, #28]	@ (8003b40 <HAL_Init+0x40>)
 8003b22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b28:	2003      	movs	r0, #3
 8003b2a:	f000 fbc1 	bl	80042b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b2e:	200f      	movs	r0, #15
 8003b30:	f000 f808 	bl	8003b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b34:	f7ff fbbe 	bl	80032b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40023c00 	.word	0x40023c00

08003b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b4c:	4b12      	ldr	r3, [pc, #72]	@ (8003b98 <HAL_InitTick+0x54>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	4b12      	ldr	r3, [pc, #72]	@ (8003b9c <HAL_InitTick+0x58>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	4619      	mov	r1, r3
 8003b56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fbd9 	bl	800431a <HAL_SYSTICK_Config>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e00e      	b.n	8003b90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b0f      	cmp	r3, #15
 8003b76:	d80a      	bhi.n	8003b8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b78:	2200      	movs	r2, #0
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b80:	f000 fba1 	bl	80042c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b84:	4a06      	ldr	r2, [pc, #24]	@ (8003ba0 <HAL_InitTick+0x5c>)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	e000      	b.n	8003b90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	20000000 	.word	0x20000000
 8003b9c:	20000008 	.word	0x20000008
 8003ba0:	20000004 	.word	0x20000004

08003ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ba8:	4b06      	ldr	r3, [pc, #24]	@ (8003bc4 <HAL_IncTick+0x20>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	461a      	mov	r2, r3
 8003bae:	4b06      	ldr	r3, [pc, #24]	@ (8003bc8 <HAL_IncTick+0x24>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	4a04      	ldr	r2, [pc, #16]	@ (8003bc8 <HAL_IncTick+0x24>)
 8003bb6:	6013      	str	r3, [r2, #0]
}
 8003bb8:	bf00      	nop
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	20000008 	.word	0x20000008
 8003bc8:	20000d54 	.word	0x20000d54

08003bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  return uwTick;
 8003bd0:	4b03      	ldr	r3, [pc, #12]	@ (8003be0 <HAL_GetTick+0x14>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	20000d54 	.word	0x20000d54

08003be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bec:	f7ff ffee 	bl	8003bcc <HAL_GetTick>
 8003bf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfc:	d005      	beq.n	8003c0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8003c28 <HAL_Delay+0x44>)
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4413      	add	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c0a:	bf00      	nop
 8003c0c:	f7ff ffde 	bl	8003bcc <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d8f7      	bhi.n	8003c0c <HAL_Delay+0x28>
  {
  }
}
 8003c1c:	bf00      	nop
 8003c1e:	bf00      	nop
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20000008 	.word	0x20000008

08003c2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e033      	b.n	8003caa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d109      	bne.n	8003c5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7fd faac 	bl	80011a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c62:	f003 0310 	and.w	r3, r3, #16
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d118      	bne.n	8003c9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003c72:	f023 0302 	bic.w	r3, r3, #2
 8003c76:	f043 0202 	orr.w	r2, r3, #2
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f94a 	bl	8003f18 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8e:	f023 0303 	bic.w	r3, r3, #3
 8003c92:	f043 0201 	orr.w	r2, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c9a:	e001      	b.n	8003ca0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
	...

08003cb4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_ADC_ConfigChannel+0x1c>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e113      	b.n	8003ef8 <HAL_ADC_ConfigChannel+0x244>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b09      	cmp	r3, #9
 8003cde:	d925      	bls.n	8003d2c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68d9      	ldr	r1, [r3, #12]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	461a      	mov	r2, r3
 8003cee:	4613      	mov	r3, r2
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	4413      	add	r3, r2
 8003cf4:	3b1e      	subs	r3, #30
 8003cf6:	2207      	movs	r2, #7
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	43da      	mvns	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	400a      	ands	r2, r1
 8003d04:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68d9      	ldr	r1, [r3, #12]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	4618      	mov	r0, r3
 8003d18:	4603      	mov	r3, r0
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	4403      	add	r3, r0
 8003d1e:	3b1e      	subs	r3, #30
 8003d20:	409a      	lsls	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	60da      	str	r2, [r3, #12]
 8003d2a:	e022      	b.n	8003d72 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6919      	ldr	r1, [r3, #16]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	4413      	add	r3, r2
 8003d40:	2207      	movs	r2, #7
 8003d42:	fa02 f303 	lsl.w	r3, r2, r3
 8003d46:	43da      	mvns	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	400a      	ands	r2, r1
 8003d4e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6919      	ldr	r1, [r3, #16]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	4618      	mov	r0, r3
 8003d62:	4603      	mov	r3, r0
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	4403      	add	r3, r0
 8003d68:	409a      	lsls	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b06      	cmp	r3, #6
 8003d78:	d824      	bhi.n	8003dc4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	4613      	mov	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	3b05      	subs	r3, #5
 8003d8c:	221f      	movs	r2, #31
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43da      	mvns	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	400a      	ands	r2, r1
 8003d9a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	4618      	mov	r0, r3
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	4613      	mov	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	3b05      	subs	r3, #5
 8003db6:	fa00 f203 	lsl.w	r2, r0, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003dc2:	e04c      	b.n	8003e5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b0c      	cmp	r3, #12
 8003dca:	d824      	bhi.n	8003e16 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4413      	add	r3, r2
 8003ddc:	3b23      	subs	r3, #35	@ 0x23
 8003dde:	221f      	movs	r2, #31
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	43da      	mvns	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	400a      	ands	r2, r1
 8003dec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	3b23      	subs	r3, #35	@ 0x23
 8003e08:	fa00 f203 	lsl.w	r2, r0, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e14:	e023      	b.n	8003e5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	3b41      	subs	r3, #65	@ 0x41
 8003e28:	221f      	movs	r2, #31
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	43da      	mvns	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	400a      	ands	r2, r1
 8003e36:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	4618      	mov	r0, r3
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	3b41      	subs	r3, #65	@ 0x41
 8003e52:	fa00 f203 	lsl.w	r2, r0, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e5e:	4b29      	ldr	r3, [pc, #164]	@ (8003f04 <HAL_ADC_ConfigChannel+0x250>)
 8003e60:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a28      	ldr	r2, [pc, #160]	@ (8003f08 <HAL_ADC_ConfigChannel+0x254>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d10f      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x1d8>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b12      	cmp	r3, #18
 8003e72:	d10b      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a1d      	ldr	r2, [pc, #116]	@ (8003f08 <HAL_ADC_ConfigChannel+0x254>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d12b      	bne.n	8003eee <HAL_ADC_ConfigChannel+0x23a>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8003f0c <HAL_ADC_ConfigChannel+0x258>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d003      	beq.n	8003ea8 <HAL_ADC_ConfigChannel+0x1f4>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b11      	cmp	r3, #17
 8003ea6:	d122      	bne.n	8003eee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a11      	ldr	r2, [pc, #68]	@ (8003f0c <HAL_ADC_ConfigChannel+0x258>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d111      	bne.n	8003eee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003eca:	4b11      	ldr	r3, [pc, #68]	@ (8003f10 <HAL_ADC_ConfigChannel+0x25c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a11      	ldr	r2, [pc, #68]	@ (8003f14 <HAL_ADC_ConfigChannel+0x260>)
 8003ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed4:	0c9a      	lsrs	r2, r3, #18
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003ee0:	e002      	b.n	8003ee8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f9      	bne.n	8003ee2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	40012300 	.word	0x40012300
 8003f08:	40012000 	.word	0x40012000
 8003f0c:	10000012 	.word	0x10000012
 8003f10:	20000000 	.word	0x20000000
 8003f14:	431bde83 	.word	0x431bde83

08003f18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f20:	4b79      	ldr	r3, [pc, #484]	@ (8004108 <ADC_Init+0x1f0>)
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6859      	ldr	r1, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	021a      	lsls	r2, r3, #8
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003f70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6859      	ldr	r1, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6899      	ldr	r1, [r3, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003faa:	4a58      	ldr	r2, [pc, #352]	@ (800410c <ADC_Init+0x1f4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d022      	beq.n	8003ff6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003fbe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6899      	ldr	r1, [r3, #8]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003fe0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6899      	ldr	r1, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	609a      	str	r2, [r3, #8]
 8003ff4:	e00f      	b.n	8004016 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004004:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004014:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0202 	bic.w	r2, r2, #2
 8004024:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6899      	ldr	r1, [r3, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	7e1b      	ldrb	r3, [r3, #24]
 8004030:	005a      	lsls	r2, r3, #1
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01b      	beq.n	800407c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004052:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004062:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6859      	ldr	r1, [r3, #4]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406e:	3b01      	subs	r3, #1
 8004070:	035a      	lsls	r2, r3, #13
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	605a      	str	r2, [r3, #4]
 800407a:	e007      	b.n	800408c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800408a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800409a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	051a      	lsls	r2, r3, #20
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80040c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6899      	ldr	r1, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80040ce:	025a      	lsls	r2, r3, #9
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6899      	ldr	r1, [r3, #8]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	029a      	lsls	r2, r3, #10
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	609a      	str	r2, [r3, #8]
}
 80040fc:	bf00      	nop
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	40012300 	.word	0x40012300
 800410c:	0f000001 	.word	0x0f000001

08004110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f003 0307 	and.w	r3, r3, #7
 800411e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004120:	4b0c      	ldr	r3, [pc, #48]	@ (8004154 <__NVIC_SetPriorityGrouping+0x44>)
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800412c:	4013      	ands	r3, r2
 800412e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004138:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800413c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004142:	4a04      	ldr	r2, [pc, #16]	@ (8004154 <__NVIC_SetPriorityGrouping+0x44>)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	60d3      	str	r3, [r2, #12]
}
 8004148:	bf00      	nop
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	e000ed00 	.word	0xe000ed00

08004158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800415c:	4b04      	ldr	r3, [pc, #16]	@ (8004170 <__NVIC_GetPriorityGrouping+0x18>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	0a1b      	lsrs	r3, r3, #8
 8004162:	f003 0307 	and.w	r3, r3, #7
}
 8004166:	4618      	mov	r0, r3
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	e000ed00 	.word	0xe000ed00

08004174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	4603      	mov	r3, r0
 800417c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800417e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004182:	2b00      	cmp	r3, #0
 8004184:	db0b      	blt.n	800419e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004186:	79fb      	ldrb	r3, [r7, #7]
 8004188:	f003 021f 	and.w	r2, r3, #31
 800418c:	4907      	ldr	r1, [pc, #28]	@ (80041ac <__NVIC_EnableIRQ+0x38>)
 800418e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004192:	095b      	lsrs	r3, r3, #5
 8004194:	2001      	movs	r0, #1
 8004196:	fa00 f202 	lsl.w	r2, r0, r2
 800419a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	e000e100 	.word	0xe000e100

080041b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	6039      	str	r1, [r7, #0]
 80041ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	db0a      	blt.n	80041da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	490c      	ldr	r1, [pc, #48]	@ (80041fc <__NVIC_SetPriority+0x4c>)
 80041ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ce:	0112      	lsls	r2, r2, #4
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	440b      	add	r3, r1
 80041d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041d8:	e00a      	b.n	80041f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	4908      	ldr	r1, [pc, #32]	@ (8004200 <__NVIC_SetPriority+0x50>)
 80041e0:	79fb      	ldrb	r3, [r7, #7]
 80041e2:	f003 030f 	and.w	r3, r3, #15
 80041e6:	3b04      	subs	r3, #4
 80041e8:	0112      	lsls	r2, r2, #4
 80041ea:	b2d2      	uxtb	r2, r2
 80041ec:	440b      	add	r3, r1
 80041ee:	761a      	strb	r2, [r3, #24]
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	e000e100 	.word	0xe000e100
 8004200:	e000ed00 	.word	0xe000ed00

08004204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004204:	b480      	push	{r7}
 8004206:	b089      	sub	sp, #36	@ 0x24
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	f1c3 0307 	rsb	r3, r3, #7
 800421e:	2b04      	cmp	r3, #4
 8004220:	bf28      	it	cs
 8004222:	2304      	movcs	r3, #4
 8004224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	3304      	adds	r3, #4
 800422a:	2b06      	cmp	r3, #6
 800422c:	d902      	bls.n	8004234 <NVIC_EncodePriority+0x30>
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	3b03      	subs	r3, #3
 8004232:	e000      	b.n	8004236 <NVIC_EncodePriority+0x32>
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004238:	f04f 32ff 	mov.w	r2, #4294967295
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	43da      	mvns	r2, r3
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	401a      	ands	r2, r3
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800424c:	f04f 31ff 	mov.w	r1, #4294967295
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	fa01 f303 	lsl.w	r3, r1, r3
 8004256:	43d9      	mvns	r1, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800425c:	4313      	orrs	r3, r2
         );
}
 800425e:	4618      	mov	r0, r3
 8004260:	3724      	adds	r7, #36	@ 0x24
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
	...

0800426c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3b01      	subs	r3, #1
 8004278:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800427c:	d301      	bcc.n	8004282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800427e:	2301      	movs	r3, #1
 8004280:	e00f      	b.n	80042a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004282:	4a0a      	ldr	r2, [pc, #40]	@ (80042ac <SysTick_Config+0x40>)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	3b01      	subs	r3, #1
 8004288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800428a:	210f      	movs	r1, #15
 800428c:	f04f 30ff 	mov.w	r0, #4294967295
 8004290:	f7ff ff8e 	bl	80041b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004294:	4b05      	ldr	r3, [pc, #20]	@ (80042ac <SysTick_Config+0x40>)
 8004296:	2200      	movs	r2, #0
 8004298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800429a:	4b04      	ldr	r3, [pc, #16]	@ (80042ac <SysTick_Config+0x40>)
 800429c:	2207      	movs	r2, #7
 800429e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	e000e010 	.word	0xe000e010

080042b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7ff ff29 	bl	8004110 <__NVIC_SetPriorityGrouping>
}
 80042be:	bf00      	nop
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b086      	sub	sp, #24
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	4603      	mov	r3, r0
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	607a      	str	r2, [r7, #4]
 80042d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042d8:	f7ff ff3e 	bl	8004158 <__NVIC_GetPriorityGrouping>
 80042dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	68b9      	ldr	r1, [r7, #8]
 80042e2:	6978      	ldr	r0, [r7, #20]
 80042e4:	f7ff ff8e 	bl	8004204 <NVIC_EncodePriority>
 80042e8:	4602      	mov	r2, r0
 80042ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042ee:	4611      	mov	r1, r2
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff ff5d 	bl	80041b0 <__NVIC_SetPriority>
}
 80042f6:	bf00      	nop
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
 8004304:	4603      	mov	r3, r0
 8004306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff ff31 	bl	8004174 <__NVIC_EnableIRQ>
}
 8004312:	bf00      	nop
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b082      	sub	sp, #8
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7ff ffa2 	bl	800426c <SysTick_Config>
 8004328:	4603      	mov	r3, r0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004340:	f7ff fc44 	bl	8003bcc <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e099      	b.n	8004484 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0201 	bic.w	r2, r2, #1
 800436e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004370:	e00f      	b.n	8004392 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004372:	f7ff fc2b 	bl	8003bcc <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b05      	cmp	r3, #5
 800437e:	d908      	bls.n	8004392 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2220      	movs	r2, #32
 8004384:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2203      	movs	r2, #3
 800438a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e078      	b.n	8004484 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1e8      	bne.n	8004372 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	4b38      	ldr	r3, [pc, #224]	@ (800448c <HAL_DMA_Init+0x158>)
 80043ac:	4013      	ands	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d107      	bne.n	80043fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f4:	4313      	orrs	r3, r2
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f023 0307 	bic.w	r3, r3, #7
 8004412:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	4313      	orrs	r3, r2
 800441c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004422:	2b04      	cmp	r3, #4
 8004424:	d117      	bne.n	8004456 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00e      	beq.n	8004456 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 fb01 	bl	8004a40 <DMA_CheckFifoParam>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d008      	beq.n	8004456 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2240      	movs	r2, #64	@ 0x40
 8004448:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004452:	2301      	movs	r3, #1
 8004454:	e016      	b.n	8004484 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 fab8 	bl	80049d4 <DMA_CalcBaseAndBitshift>
 8004464:	4603      	mov	r3, r0
 8004466:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800446c:	223f      	movs	r2, #63	@ 0x3f
 800446e:	409a      	lsls	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	f010803f 	.word	0xf010803f

08004490 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800449e:	2300      	movs	r3, #0
 80044a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <HAL_DMA_Start_IT+0x26>
 80044b2:	2302      	movs	r3, #2
 80044b4:	e040      	b.n	8004538 <HAL_DMA_Start_IT+0xa8>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d12f      	bne.n	800452a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2202      	movs	r2, #2
 80044ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	68b9      	ldr	r1, [r7, #8]
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 fa4a 	bl	8004978 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044e8:	223f      	movs	r2, #63	@ 0x3f
 80044ea:	409a      	lsls	r2, r3
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0216 	orr.w	r2, r2, #22
 80044fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004504:	2b00      	cmp	r3, #0
 8004506:	d007      	beq.n	8004518 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0208 	orr.w	r2, r2, #8
 8004516:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0201 	orr.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	e005      	b.n	8004536 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004532:	2302      	movs	r3, #2
 8004534:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004536:	7dfb      	ldrb	r3, [r7, #23]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3718      	adds	r7, #24
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800454c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800454e:	f7ff fb3d 	bl	8003bcc <HAL_GetTick>
 8004552:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d008      	beq.n	8004572 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2280      	movs	r2, #128	@ 0x80
 8004564:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e052      	b.n	8004618 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0216 	bic.w	r2, r2, #22
 8004580:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695a      	ldr	r2, [r3, #20]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004590:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004596:	2b00      	cmp	r3, #0
 8004598:	d103      	bne.n	80045a2 <HAL_DMA_Abort+0x62>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d007      	beq.n	80045b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0208 	bic.w	r2, r2, #8
 80045b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0201 	bic.w	r2, r2, #1
 80045c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045c2:	e013      	b.n	80045ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045c4:	f7ff fb02 	bl	8003bcc <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b05      	cmp	r3, #5
 80045d0:	d90c      	bls.n	80045ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2220      	movs	r2, #32
 80045d6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2203      	movs	r2, #3
 80045dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e015      	b.n	8004618 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1e4      	bne.n	80045c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045fe:	223f      	movs	r2, #63	@ 0x3f
 8004600:	409a      	lsls	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d004      	beq.n	800463e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2280      	movs	r2, #128	@ 0x80
 8004638:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e00c      	b.n	8004658 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2205      	movs	r2, #5
 8004642:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0201 	bic.w	r2, r2, #1
 8004654:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004670:	4b8e      	ldr	r3, [pc, #568]	@ (80048ac <HAL_DMA_IRQHandler+0x248>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a8e      	ldr	r2, [pc, #568]	@ (80048b0 <HAL_DMA_IRQHandler+0x24c>)
 8004676:	fba2 2303 	umull	r2, r3, r2, r3
 800467a:	0a9b      	lsrs	r3, r3, #10
 800467c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004682:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800468e:	2208      	movs	r2, #8
 8004690:	409a      	lsls	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4013      	ands	r3, r2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d01a      	beq.n	80046d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d013      	beq.n	80046d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0204 	bic.w	r2, r2, #4
 80046b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046bc:	2208      	movs	r2, #8
 80046be:	409a      	lsls	r2, r3
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c8:	f043 0201 	orr.w	r2, r3, #1
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046d4:	2201      	movs	r2, #1
 80046d6:	409a      	lsls	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4013      	ands	r3, r2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d012      	beq.n	8004706 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00b      	beq.n	8004706 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046f2:	2201      	movs	r2, #1
 80046f4:	409a      	lsls	r2, r3
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046fe:	f043 0202 	orr.w	r2, r3, #2
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800470a:	2204      	movs	r2, #4
 800470c:	409a      	lsls	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4013      	ands	r3, r2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d012      	beq.n	800473c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00b      	beq.n	800473c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004728:	2204      	movs	r2, #4
 800472a:	409a      	lsls	r2, r3
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004734:	f043 0204 	orr.w	r2, r3, #4
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004740:	2210      	movs	r2, #16
 8004742:	409a      	lsls	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4013      	ands	r3, r2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d043      	beq.n	80047d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b00      	cmp	r3, #0
 8004758:	d03c      	beq.n	80047d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800475e:	2210      	movs	r2, #16
 8004760:	409a      	lsls	r2, r3
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d018      	beq.n	80047a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d108      	bne.n	8004794 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004786:	2b00      	cmp	r3, #0
 8004788:	d024      	beq.n	80047d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	4798      	blx	r3
 8004792:	e01f      	b.n	80047d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004798:	2b00      	cmp	r3, #0
 800479a:	d01b      	beq.n	80047d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	4798      	blx	r3
 80047a4:	e016      	b.n	80047d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d107      	bne.n	80047c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 0208 	bic.w	r2, r2, #8
 80047c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047d8:	2220      	movs	r2, #32
 80047da:	409a      	lsls	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4013      	ands	r3, r2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 808f 	beq.w	8004904 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0310 	and.w	r3, r3, #16
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 8087 	beq.w	8004904 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047fa:	2220      	movs	r2, #32
 80047fc:	409a      	lsls	r2, r3
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b05      	cmp	r3, #5
 800480c:	d136      	bne.n	800487c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0216 	bic.w	r2, r2, #22
 800481c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695a      	ldr	r2, [r3, #20]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800482c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004832:	2b00      	cmp	r3, #0
 8004834:	d103      	bne.n	800483e <HAL_DMA_IRQHandler+0x1da>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800483a:	2b00      	cmp	r3, #0
 800483c:	d007      	beq.n	800484e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0208 	bic.w	r2, r2, #8
 800484c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004852:	223f      	movs	r2, #63	@ 0x3f
 8004854:	409a      	lsls	r2, r3
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800486e:	2b00      	cmp	r3, #0
 8004870:	d07e      	beq.n	8004970 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	4798      	blx	r3
        }
        return;
 800487a:	e079      	b.n	8004970 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d01d      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10d      	bne.n	80048b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800489c:	2b00      	cmp	r3, #0
 800489e:	d031      	beq.n	8004904 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	4798      	blx	r3
 80048a8:	e02c      	b.n	8004904 <HAL_DMA_IRQHandler+0x2a0>
 80048aa:	bf00      	nop
 80048ac:	20000000 	.word	0x20000000
 80048b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d023      	beq.n	8004904 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	4798      	blx	r3
 80048c4:	e01e      	b.n	8004904 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10f      	bne.n	80048f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0210 	bic.w	r2, r2, #16
 80048e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004908:	2b00      	cmp	r3, #0
 800490a:	d032      	beq.n	8004972 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	2b00      	cmp	r3, #0
 8004916:	d022      	beq.n	800495e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2205      	movs	r2, #5
 800491c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0201 	bic.w	r2, r2, #1
 800492e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	3301      	adds	r3, #1
 8004934:	60bb      	str	r3, [r7, #8]
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	429a      	cmp	r2, r3
 800493a:	d307      	bcc.n	800494c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1f2      	bne.n	8004930 <HAL_DMA_IRQHandler+0x2cc>
 800494a:	e000      	b.n	800494e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800494c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004962:	2b00      	cmp	r3, #0
 8004964:	d005      	beq.n	8004972 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	4798      	blx	r3
 800496e:	e000      	b.n	8004972 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004970:	bf00      	nop
    }
  }
}
 8004972:	3718      	adds	r7, #24
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004994:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	2b40      	cmp	r3, #64	@ 0x40
 80049a4:	d108      	bne.n	80049b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80049b6:	e007      	b.n	80049c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	60da      	str	r2, [r3, #12]
}
 80049c8:	bf00      	nop
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	3b10      	subs	r3, #16
 80049e4:	4a14      	ldr	r2, [pc, #80]	@ (8004a38 <DMA_CalcBaseAndBitshift+0x64>)
 80049e6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ea:	091b      	lsrs	r3, r3, #4
 80049ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80049ee:	4a13      	ldr	r2, [pc, #76]	@ (8004a3c <DMA_CalcBaseAndBitshift+0x68>)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4413      	add	r3, r2
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	461a      	mov	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2b03      	cmp	r3, #3
 8004a00:	d909      	bls.n	8004a16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004a0a:	f023 0303 	bic.w	r3, r3, #3
 8004a0e:	1d1a      	adds	r2, r3, #4
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	659a      	str	r2, [r3, #88]	@ 0x58
 8004a14:	e007      	b.n	8004a26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004a1e:	f023 0303 	bic.w	r3, r3, #3
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	aaaaaaab 	.word	0xaaaaaaab
 8004a3c:	0800ccdc 	.word	0x0800ccdc

08004a40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d11f      	bne.n	8004a9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b03      	cmp	r3, #3
 8004a5e:	d856      	bhi.n	8004b0e <DMA_CheckFifoParam+0xce>
 8004a60:	a201      	add	r2, pc, #4	@ (adr r2, 8004a68 <DMA_CheckFifoParam+0x28>)
 8004a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a66:	bf00      	nop
 8004a68:	08004a79 	.word	0x08004a79
 8004a6c:	08004a8b 	.word	0x08004a8b
 8004a70:	08004a79 	.word	0x08004a79
 8004a74:	08004b0f 	.word	0x08004b0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d046      	beq.n	8004b12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a88:	e043      	b.n	8004b12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004a92:	d140      	bne.n	8004b16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a98:	e03d      	b.n	8004b16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aa2:	d121      	bne.n	8004ae8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	d837      	bhi.n	8004b1a <DMA_CheckFifoParam+0xda>
 8004aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8004ab0 <DMA_CheckFifoParam+0x70>)
 8004aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab0:	08004ac1 	.word	0x08004ac1
 8004ab4:	08004ac7 	.word	0x08004ac7
 8004ab8:	08004ac1 	.word	0x08004ac1
 8004abc:	08004ad9 	.word	0x08004ad9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ac4:	e030      	b.n	8004b28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d025      	beq.n	8004b1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ad6:	e022      	b.n	8004b1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004adc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ae0:	d11f      	bne.n	8004b22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004ae6:	e01c      	b.n	8004b22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d903      	bls.n	8004af6 <DMA_CheckFifoParam+0xb6>
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2b03      	cmp	r3, #3
 8004af2:	d003      	beq.n	8004afc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004af4:	e018      	b.n	8004b28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	73fb      	strb	r3, [r7, #15]
      break;
 8004afa:	e015      	b.n	8004b28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00e      	beq.n	8004b26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b0c:	e00b      	b.n	8004b26 <DMA_CheckFifoParam+0xe6>
      break;
 8004b0e:	bf00      	nop
 8004b10:	e00a      	b.n	8004b28 <DMA_CheckFifoParam+0xe8>
      break;
 8004b12:	bf00      	nop
 8004b14:	e008      	b.n	8004b28 <DMA_CheckFifoParam+0xe8>
      break;
 8004b16:	bf00      	nop
 8004b18:	e006      	b.n	8004b28 <DMA_CheckFifoParam+0xe8>
      break;
 8004b1a:	bf00      	nop
 8004b1c:	e004      	b.n	8004b28 <DMA_CheckFifoParam+0xe8>
      break;
 8004b1e:	bf00      	nop
 8004b20:	e002      	b.n	8004b28 <DMA_CheckFifoParam+0xe8>
      break;   
 8004b22:	bf00      	nop
 8004b24:	e000      	b.n	8004b28 <DMA_CheckFifoParam+0xe8>
      break;
 8004b26:	bf00      	nop
    }
  } 
  
  return status; 
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop

08004b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b089      	sub	sp, #36	@ 0x24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b42:	2300      	movs	r3, #0
 8004b44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61fb      	str	r3, [r7, #28]
 8004b52:	e165      	b.n	8004e20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b54:	2201      	movs	r2, #1
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	4013      	ands	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	f040 8154 	bne.w	8004e1a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d005      	beq.n	8004b8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d130      	bne.n	8004bec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	2203      	movs	r2, #3
 8004b96:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9a:	43db      	mvns	r3, r3
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	68da      	ldr	r2, [r3, #12]
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc8:	43db      	mvns	r3, r3
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	091b      	lsrs	r3, r3, #4
 8004bd6:	f003 0201 	and.w	r2, r3, #1
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f003 0303 	and.w	r3, r3, #3
 8004bf4:	2b03      	cmp	r3, #3
 8004bf6:	d017      	beq.n	8004c28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	2203      	movs	r2, #3
 8004c04:	fa02 f303 	lsl.w	r3, r2, r3
 8004c08:	43db      	mvns	r3, r3
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f003 0303 	and.w	r3, r3, #3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d123      	bne.n	8004c7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	08da      	lsrs	r2, r3, #3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	3208      	adds	r2, #8
 8004c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	220f      	movs	r2, #15
 8004c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c50:	43db      	mvns	r3, r3
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	4013      	ands	r3, r2
 8004c56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	691a      	ldr	r2, [r3, #16]
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	f003 0307 	and.w	r3, r3, #7
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	fa02 f303 	lsl.w	r3, r2, r3
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	08da      	lsrs	r2, r3, #3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3208      	adds	r2, #8
 8004c76:	69b9      	ldr	r1, [r7, #24]
 8004c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	2203      	movs	r2, #3
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	43db      	mvns	r3, r3
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	4013      	ands	r3, r2
 8004c92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f003 0203 	and.w	r2, r3, #3
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 80ae 	beq.w	8004e1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60fb      	str	r3, [r7, #12]
 8004cc2:	4b5d      	ldr	r3, [pc, #372]	@ (8004e38 <HAL_GPIO_Init+0x300>)
 8004cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cc6:	4a5c      	ldr	r2, [pc, #368]	@ (8004e38 <HAL_GPIO_Init+0x300>)
 8004cc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8004cce:	4b5a      	ldr	r3, [pc, #360]	@ (8004e38 <HAL_GPIO_Init+0x300>)
 8004cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cda:	4a58      	ldr	r2, [pc, #352]	@ (8004e3c <HAL_GPIO_Init+0x304>)
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	089b      	lsrs	r3, r3, #2
 8004ce0:	3302      	adds	r3, #2
 8004ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	220f      	movs	r2, #15
 8004cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf6:	43db      	mvns	r3, r3
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a4f      	ldr	r2, [pc, #316]	@ (8004e40 <HAL_GPIO_Init+0x308>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d025      	beq.n	8004d52 <HAL_GPIO_Init+0x21a>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a4e      	ldr	r2, [pc, #312]	@ (8004e44 <HAL_GPIO_Init+0x30c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d01f      	beq.n	8004d4e <HAL_GPIO_Init+0x216>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a4d      	ldr	r2, [pc, #308]	@ (8004e48 <HAL_GPIO_Init+0x310>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d019      	beq.n	8004d4a <HAL_GPIO_Init+0x212>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a4c      	ldr	r2, [pc, #304]	@ (8004e4c <HAL_GPIO_Init+0x314>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d013      	beq.n	8004d46 <HAL_GPIO_Init+0x20e>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a4b      	ldr	r2, [pc, #300]	@ (8004e50 <HAL_GPIO_Init+0x318>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d00d      	beq.n	8004d42 <HAL_GPIO_Init+0x20a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a4a      	ldr	r2, [pc, #296]	@ (8004e54 <HAL_GPIO_Init+0x31c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d007      	beq.n	8004d3e <HAL_GPIO_Init+0x206>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a49      	ldr	r2, [pc, #292]	@ (8004e58 <HAL_GPIO_Init+0x320>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d101      	bne.n	8004d3a <HAL_GPIO_Init+0x202>
 8004d36:	2306      	movs	r3, #6
 8004d38:	e00c      	b.n	8004d54 <HAL_GPIO_Init+0x21c>
 8004d3a:	2307      	movs	r3, #7
 8004d3c:	e00a      	b.n	8004d54 <HAL_GPIO_Init+0x21c>
 8004d3e:	2305      	movs	r3, #5
 8004d40:	e008      	b.n	8004d54 <HAL_GPIO_Init+0x21c>
 8004d42:	2304      	movs	r3, #4
 8004d44:	e006      	b.n	8004d54 <HAL_GPIO_Init+0x21c>
 8004d46:	2303      	movs	r3, #3
 8004d48:	e004      	b.n	8004d54 <HAL_GPIO_Init+0x21c>
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	e002      	b.n	8004d54 <HAL_GPIO_Init+0x21c>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e000      	b.n	8004d54 <HAL_GPIO_Init+0x21c>
 8004d52:	2300      	movs	r3, #0
 8004d54:	69fa      	ldr	r2, [r7, #28]
 8004d56:	f002 0203 	and.w	r2, r2, #3
 8004d5a:	0092      	lsls	r2, r2, #2
 8004d5c:	4093      	lsls	r3, r2
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d64:	4935      	ldr	r1, [pc, #212]	@ (8004e3c <HAL_GPIO_Init+0x304>)
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	089b      	lsrs	r3, r3, #2
 8004d6a:	3302      	adds	r3, #2
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d72:	4b3a      	ldr	r3, [pc, #232]	@ (8004e5c <HAL_GPIO_Init+0x324>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	43db      	mvns	r3, r3
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d96:	4a31      	ldr	r2, [pc, #196]	@ (8004e5c <HAL_GPIO_Init+0x324>)
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d9c:	4b2f      	ldr	r3, [pc, #188]	@ (8004e5c <HAL_GPIO_Init+0x324>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	43db      	mvns	r3, r3
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	4013      	ands	r3, r2
 8004daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004dc0:	4a26      	ldr	r2, [pc, #152]	@ (8004e5c <HAL_GPIO_Init+0x324>)
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004dc6:	4b25      	ldr	r3, [pc, #148]	@ (8004e5c <HAL_GPIO_Init+0x324>)
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	43db      	mvns	r3, r3
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004dea:	4a1c      	ldr	r2, [pc, #112]	@ (8004e5c <HAL_GPIO_Init+0x324>)
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004df0:	4b1a      	ldr	r3, [pc, #104]	@ (8004e5c <HAL_GPIO_Init+0x324>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e14:	4a11      	ldr	r2, [pc, #68]	@ (8004e5c <HAL_GPIO_Init+0x324>)
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	61fb      	str	r3, [r7, #28]
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	2b0f      	cmp	r3, #15
 8004e24:	f67f ae96 	bls.w	8004b54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e28:	bf00      	nop
 8004e2a:	bf00      	nop
 8004e2c:	3724      	adds	r7, #36	@ 0x24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40023800 	.word	0x40023800
 8004e3c:	40013800 	.word	0x40013800
 8004e40:	40020000 	.word	0x40020000
 8004e44:	40020400 	.word	0x40020400
 8004e48:	40020800 	.word	0x40020800
 8004e4c:	40020c00 	.word	0x40020c00
 8004e50:	40021000 	.word	0x40021000
 8004e54:	40021400 	.word	0x40021400
 8004e58:	40021800 	.word	0x40021800
 8004e5c:	40013c00 	.word	0x40013c00

08004e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	460b      	mov	r3, r1
 8004e6a:	807b      	strh	r3, [r7, #2]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e70:	787b      	ldrb	r3, [r7, #1]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e76:	887a      	ldrh	r2, [r7, #2]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e7c:	e003      	b.n	8004e86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e7e:	887b      	ldrh	r3, [r7, #2]
 8004e80:	041a      	lsls	r2, r3, #16
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	619a      	str	r2, [r3, #24]
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
	...

08004e94 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	603b      	str	r3, [r7, #0]
 8004ea2:	4b20      	ldr	r3, [pc, #128]	@ (8004f24 <HAL_PWREx_EnableOverDrive+0x90>)
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea6:	4a1f      	ldr	r2, [pc, #124]	@ (8004f24 <HAL_PWREx_EnableOverDrive+0x90>)
 8004ea8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eac:	6413      	str	r3, [r2, #64]	@ 0x40
 8004eae:	4b1d      	ldr	r3, [pc, #116]	@ (8004f24 <HAL_PWREx_EnableOverDrive+0x90>)
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eb6:	603b      	str	r3, [r7, #0]
 8004eb8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004eba:	4b1b      	ldr	r3, [pc, #108]	@ (8004f28 <HAL_PWREx_EnableOverDrive+0x94>)
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ec0:	f7fe fe84 	bl	8003bcc <HAL_GetTick>
 8004ec4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ec6:	e009      	b.n	8004edc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ec8:	f7fe fe80 	bl	8003bcc <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ed6:	d901      	bls.n	8004edc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e01f      	b.n	8004f1c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004edc:	4b13      	ldr	r3, [pc, #76]	@ (8004f2c <HAL_PWREx_EnableOverDrive+0x98>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ee8:	d1ee      	bne.n	8004ec8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004eea:	4b11      	ldr	r3, [pc, #68]	@ (8004f30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004eec:	2201      	movs	r2, #1
 8004eee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ef0:	f7fe fe6c 	bl	8003bcc <HAL_GetTick>
 8004ef4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ef6:	e009      	b.n	8004f0c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ef8:	f7fe fe68 	bl	8003bcc <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004f06:	d901      	bls.n	8004f0c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e007      	b.n	8004f1c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f0c:	4b07      	ldr	r3, [pc, #28]	@ (8004f2c <HAL_PWREx_EnableOverDrive+0x98>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f18:	d1ee      	bne.n	8004ef8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40023800 	.word	0x40023800
 8004f28:	420e0040 	.word	0x420e0040
 8004f2c:	40007000 	.word	0x40007000
 8004f30:	420e0044 	.word	0x420e0044

08004f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e0cc      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f48:	4b68      	ldr	r3, [pc, #416]	@ (80050ec <HAL_RCC_ClockConfig+0x1b8>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 030f 	and.w	r3, r3, #15
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d90c      	bls.n	8004f70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f56:	4b65      	ldr	r3, [pc, #404]	@ (80050ec <HAL_RCC_ClockConfig+0x1b8>)
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f5e:	4b63      	ldr	r3, [pc, #396]	@ (80050ec <HAL_RCC_ClockConfig+0x1b8>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d001      	beq.n	8004f70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e0b8      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d020      	beq.n	8004fbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d005      	beq.n	8004f94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f88:	4b59      	ldr	r3, [pc, #356]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	4a58      	ldr	r2, [pc, #352]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d005      	beq.n	8004fac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fa0:	4b53      	ldr	r3, [pc, #332]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	4a52      	ldr	r2, [pc, #328]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004faa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fac:	4b50      	ldr	r3, [pc, #320]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	494d      	ldr	r1, [pc, #308]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d044      	beq.n	8005054 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d107      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fd2:	4b47      	ldr	r3, [pc, #284]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d119      	bne.n	8005012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e07f      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d003      	beq.n	8004ff2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fee:	2b03      	cmp	r3, #3
 8004ff0:	d107      	bne.n	8005002 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ff2:	4b3f      	ldr	r3, [pc, #252]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d109      	bne.n	8005012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e06f      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005002:	4b3b      	ldr	r3, [pc, #236]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e067      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005012:	4b37      	ldr	r3, [pc, #220]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f023 0203 	bic.w	r2, r3, #3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	4934      	ldr	r1, [pc, #208]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005020:	4313      	orrs	r3, r2
 8005022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005024:	f7fe fdd2 	bl	8003bcc <HAL_GetTick>
 8005028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800502a:	e00a      	b.n	8005042 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800502c:	f7fe fdce 	bl	8003bcc <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800503a:	4293      	cmp	r3, r2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e04f      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005042:	4b2b      	ldr	r3, [pc, #172]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 020c 	and.w	r2, r3, #12
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	429a      	cmp	r2, r3
 8005052:	d1eb      	bne.n	800502c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005054:	4b25      	ldr	r3, [pc, #148]	@ (80050ec <HAL_RCC_ClockConfig+0x1b8>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 030f 	and.w	r3, r3, #15
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	429a      	cmp	r2, r3
 8005060:	d20c      	bcs.n	800507c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005062:	4b22      	ldr	r3, [pc, #136]	@ (80050ec <HAL_RCC_ClockConfig+0x1b8>)
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	b2d2      	uxtb	r2, r2
 8005068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800506a:	4b20      	ldr	r3, [pc, #128]	@ (80050ec <HAL_RCC_ClockConfig+0x1b8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	429a      	cmp	r2, r3
 8005076:	d001      	beq.n	800507c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e032      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b00      	cmp	r3, #0
 8005086:	d008      	beq.n	800509a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005088:	4b19      	ldr	r3, [pc, #100]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	4916      	ldr	r1, [pc, #88]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005096:	4313      	orrs	r3, r2
 8005098:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d009      	beq.n	80050ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050a6:	4b12      	ldr	r3, [pc, #72]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	490e      	ldr	r1, [pc, #56]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050ba:	f000 f855 	bl	8005168 <HAL_RCC_GetSysClockFreq>
 80050be:	4602      	mov	r2, r0
 80050c0:	4b0b      	ldr	r3, [pc, #44]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	091b      	lsrs	r3, r3, #4
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	490a      	ldr	r1, [pc, #40]	@ (80050f4 <HAL_RCC_ClockConfig+0x1c0>)
 80050cc:	5ccb      	ldrb	r3, [r1, r3]
 80050ce:	fa22 f303 	lsr.w	r3, r2, r3
 80050d2:	4a09      	ldr	r2, [pc, #36]	@ (80050f8 <HAL_RCC_ClockConfig+0x1c4>)
 80050d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80050d6:	4b09      	ldr	r3, [pc, #36]	@ (80050fc <HAL_RCC_ClockConfig+0x1c8>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fe fd32 	bl	8003b44 <HAL_InitTick>

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	40023c00 	.word	0x40023c00
 80050f0:	40023800 	.word	0x40023800
 80050f4:	0800ccc4 	.word	0x0800ccc4
 80050f8:	20000000 	.word	0x20000000
 80050fc:	20000004 	.word	0x20000004

08005100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005100:	b480      	push	{r7}
 8005102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005104:	4b03      	ldr	r3, [pc, #12]	@ (8005114 <HAL_RCC_GetHCLKFreq+0x14>)
 8005106:	681b      	ldr	r3, [r3, #0]
}
 8005108:	4618      	mov	r0, r3
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	20000000 	.word	0x20000000

08005118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800511c:	f7ff fff0 	bl	8005100 <HAL_RCC_GetHCLKFreq>
 8005120:	4602      	mov	r2, r0
 8005122:	4b05      	ldr	r3, [pc, #20]	@ (8005138 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	0a9b      	lsrs	r3, r3, #10
 8005128:	f003 0307 	and.w	r3, r3, #7
 800512c:	4903      	ldr	r1, [pc, #12]	@ (800513c <HAL_RCC_GetPCLK1Freq+0x24>)
 800512e:	5ccb      	ldrb	r3, [r1, r3]
 8005130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005134:	4618      	mov	r0, r3
 8005136:	bd80      	pop	{r7, pc}
 8005138:	40023800 	.word	0x40023800
 800513c:	0800ccd4 	.word	0x0800ccd4

08005140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005144:	f7ff ffdc 	bl	8005100 <HAL_RCC_GetHCLKFreq>
 8005148:	4602      	mov	r2, r0
 800514a:	4b05      	ldr	r3, [pc, #20]	@ (8005160 <HAL_RCC_GetPCLK2Freq+0x20>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	0b5b      	lsrs	r3, r3, #13
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	4903      	ldr	r1, [pc, #12]	@ (8005164 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005156:	5ccb      	ldrb	r3, [r1, r3]
 8005158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800515c:	4618      	mov	r0, r3
 800515e:	bd80      	pop	{r7, pc}
 8005160:	40023800 	.word	0x40023800
 8005164:	0800ccd4 	.word	0x0800ccd4

08005168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800516c:	b0ae      	sub	sp, #184	@ 0xb8
 800516e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005182:	2300      	movs	r3, #0
 8005184:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800518e:	4bcb      	ldr	r3, [pc, #812]	@ (80054bc <HAL_RCC_GetSysClockFreq+0x354>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 030c 	and.w	r3, r3, #12
 8005196:	2b0c      	cmp	r3, #12
 8005198:	f200 8206 	bhi.w	80055a8 <HAL_RCC_GetSysClockFreq+0x440>
 800519c:	a201      	add	r2, pc, #4	@ (adr r2, 80051a4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800519e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a2:	bf00      	nop
 80051a4:	080051d9 	.word	0x080051d9
 80051a8:	080055a9 	.word	0x080055a9
 80051ac:	080055a9 	.word	0x080055a9
 80051b0:	080055a9 	.word	0x080055a9
 80051b4:	080051e1 	.word	0x080051e1
 80051b8:	080055a9 	.word	0x080055a9
 80051bc:	080055a9 	.word	0x080055a9
 80051c0:	080055a9 	.word	0x080055a9
 80051c4:	080051e9 	.word	0x080051e9
 80051c8:	080055a9 	.word	0x080055a9
 80051cc:	080055a9 	.word	0x080055a9
 80051d0:	080055a9 	.word	0x080055a9
 80051d4:	080053d9 	.word	0x080053d9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051d8:	4bb9      	ldr	r3, [pc, #740]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x358>)
 80051da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80051de:	e1e7      	b.n	80055b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051e0:	4bb8      	ldr	r3, [pc, #736]	@ (80054c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80051e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80051e6:	e1e3      	b.n	80055b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051e8:	4bb4      	ldr	r3, [pc, #720]	@ (80054bc <HAL_RCC_GetSysClockFreq+0x354>)
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051f4:	4bb1      	ldr	r3, [pc, #708]	@ (80054bc <HAL_RCC_GetSysClockFreq+0x354>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d071      	beq.n	80052e4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005200:	4bae      	ldr	r3, [pc, #696]	@ (80054bc <HAL_RCC_GetSysClockFreq+0x354>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	099b      	lsrs	r3, r3, #6
 8005206:	2200      	movs	r2, #0
 8005208:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800520c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005210:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005218:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800521c:	2300      	movs	r3, #0
 800521e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005222:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005226:	4622      	mov	r2, r4
 8005228:	462b      	mov	r3, r5
 800522a:	f04f 0000 	mov.w	r0, #0
 800522e:	f04f 0100 	mov.w	r1, #0
 8005232:	0159      	lsls	r1, r3, #5
 8005234:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005238:	0150      	lsls	r0, r2, #5
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	4621      	mov	r1, r4
 8005240:	1a51      	subs	r1, r2, r1
 8005242:	6439      	str	r1, [r7, #64]	@ 0x40
 8005244:	4629      	mov	r1, r5
 8005246:	eb63 0301 	sbc.w	r3, r3, r1
 800524a:	647b      	str	r3, [r7, #68]	@ 0x44
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	f04f 0300 	mov.w	r3, #0
 8005254:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005258:	4649      	mov	r1, r9
 800525a:	018b      	lsls	r3, r1, #6
 800525c:	4641      	mov	r1, r8
 800525e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005262:	4641      	mov	r1, r8
 8005264:	018a      	lsls	r2, r1, #6
 8005266:	4641      	mov	r1, r8
 8005268:	1a51      	subs	r1, r2, r1
 800526a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800526c:	4649      	mov	r1, r9
 800526e:	eb63 0301 	sbc.w	r3, r3, r1
 8005272:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005274:	f04f 0200 	mov.w	r2, #0
 8005278:	f04f 0300 	mov.w	r3, #0
 800527c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005280:	4649      	mov	r1, r9
 8005282:	00cb      	lsls	r3, r1, #3
 8005284:	4641      	mov	r1, r8
 8005286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800528a:	4641      	mov	r1, r8
 800528c:	00ca      	lsls	r2, r1, #3
 800528e:	4610      	mov	r0, r2
 8005290:	4619      	mov	r1, r3
 8005292:	4603      	mov	r3, r0
 8005294:	4622      	mov	r2, r4
 8005296:	189b      	adds	r3, r3, r2
 8005298:	633b      	str	r3, [r7, #48]	@ 0x30
 800529a:	462b      	mov	r3, r5
 800529c:	460a      	mov	r2, r1
 800529e:	eb42 0303 	adc.w	r3, r2, r3
 80052a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80052a4:	f04f 0200 	mov.w	r2, #0
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80052b0:	4629      	mov	r1, r5
 80052b2:	024b      	lsls	r3, r1, #9
 80052b4:	4621      	mov	r1, r4
 80052b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80052ba:	4621      	mov	r1, r4
 80052bc:	024a      	lsls	r2, r1, #9
 80052be:	4610      	mov	r0, r2
 80052c0:	4619      	mov	r1, r3
 80052c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052c6:	2200      	movs	r2, #0
 80052c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80052cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80052d0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80052d4:	f7fb fcf8 	bl	8000cc8 <__aeabi_uldivmod>
 80052d8:	4602      	mov	r2, r0
 80052da:	460b      	mov	r3, r1
 80052dc:	4613      	mov	r3, r2
 80052de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052e2:	e067      	b.n	80053b4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052e4:	4b75      	ldr	r3, [pc, #468]	@ (80054bc <HAL_RCC_GetSysClockFreq+0x354>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	099b      	lsrs	r3, r3, #6
 80052ea:	2200      	movs	r2, #0
 80052ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80052f0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80052f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80052f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80052fe:	2300      	movs	r3, #0
 8005300:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005302:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005306:	4622      	mov	r2, r4
 8005308:	462b      	mov	r3, r5
 800530a:	f04f 0000 	mov.w	r0, #0
 800530e:	f04f 0100 	mov.w	r1, #0
 8005312:	0159      	lsls	r1, r3, #5
 8005314:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005318:	0150      	lsls	r0, r2, #5
 800531a:	4602      	mov	r2, r0
 800531c:	460b      	mov	r3, r1
 800531e:	4621      	mov	r1, r4
 8005320:	1a51      	subs	r1, r2, r1
 8005322:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005324:	4629      	mov	r1, r5
 8005326:	eb63 0301 	sbc.w	r3, r3, r1
 800532a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800532c:	f04f 0200 	mov.w	r2, #0
 8005330:	f04f 0300 	mov.w	r3, #0
 8005334:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005338:	4649      	mov	r1, r9
 800533a:	018b      	lsls	r3, r1, #6
 800533c:	4641      	mov	r1, r8
 800533e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005342:	4641      	mov	r1, r8
 8005344:	018a      	lsls	r2, r1, #6
 8005346:	4641      	mov	r1, r8
 8005348:	ebb2 0a01 	subs.w	sl, r2, r1
 800534c:	4649      	mov	r1, r9
 800534e:	eb63 0b01 	sbc.w	fp, r3, r1
 8005352:	f04f 0200 	mov.w	r2, #0
 8005356:	f04f 0300 	mov.w	r3, #0
 800535a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800535e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005362:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005366:	4692      	mov	sl, r2
 8005368:	469b      	mov	fp, r3
 800536a:	4623      	mov	r3, r4
 800536c:	eb1a 0303 	adds.w	r3, sl, r3
 8005370:	623b      	str	r3, [r7, #32]
 8005372:	462b      	mov	r3, r5
 8005374:	eb4b 0303 	adc.w	r3, fp, r3
 8005378:	627b      	str	r3, [r7, #36]	@ 0x24
 800537a:	f04f 0200 	mov.w	r2, #0
 800537e:	f04f 0300 	mov.w	r3, #0
 8005382:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005386:	4629      	mov	r1, r5
 8005388:	028b      	lsls	r3, r1, #10
 800538a:	4621      	mov	r1, r4
 800538c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005390:	4621      	mov	r1, r4
 8005392:	028a      	lsls	r2, r1, #10
 8005394:	4610      	mov	r0, r2
 8005396:	4619      	mov	r1, r3
 8005398:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800539c:	2200      	movs	r2, #0
 800539e:	673b      	str	r3, [r7, #112]	@ 0x70
 80053a0:	677a      	str	r2, [r7, #116]	@ 0x74
 80053a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80053a6:	f7fb fc8f 	bl	8000cc8 <__aeabi_uldivmod>
 80053aa:	4602      	mov	r2, r0
 80053ac:	460b      	mov	r3, r1
 80053ae:	4613      	mov	r3, r2
 80053b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80053b4:	4b41      	ldr	r3, [pc, #260]	@ (80054bc <HAL_RCC_GetSysClockFreq+0x354>)
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	0c1b      	lsrs	r3, r3, #16
 80053ba:	f003 0303 	and.w	r3, r3, #3
 80053be:	3301      	adds	r3, #1
 80053c0:	005b      	lsls	r3, r3, #1
 80053c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80053c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80053ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80053ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80053d6:	e0eb      	b.n	80055b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053d8:	4b38      	ldr	r3, [pc, #224]	@ (80054bc <HAL_RCC_GetSysClockFreq+0x354>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053e4:	4b35      	ldr	r3, [pc, #212]	@ (80054bc <HAL_RCC_GetSysClockFreq+0x354>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d06b      	beq.n	80054c8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053f0:	4b32      	ldr	r3, [pc, #200]	@ (80054bc <HAL_RCC_GetSysClockFreq+0x354>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	099b      	lsrs	r3, r3, #6
 80053f6:	2200      	movs	r2, #0
 80053f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80053fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005402:	663b      	str	r3, [r7, #96]	@ 0x60
 8005404:	2300      	movs	r3, #0
 8005406:	667b      	str	r3, [r7, #100]	@ 0x64
 8005408:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800540c:	4622      	mov	r2, r4
 800540e:	462b      	mov	r3, r5
 8005410:	f04f 0000 	mov.w	r0, #0
 8005414:	f04f 0100 	mov.w	r1, #0
 8005418:	0159      	lsls	r1, r3, #5
 800541a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800541e:	0150      	lsls	r0, r2, #5
 8005420:	4602      	mov	r2, r0
 8005422:	460b      	mov	r3, r1
 8005424:	4621      	mov	r1, r4
 8005426:	1a51      	subs	r1, r2, r1
 8005428:	61b9      	str	r1, [r7, #24]
 800542a:	4629      	mov	r1, r5
 800542c:	eb63 0301 	sbc.w	r3, r3, r1
 8005430:	61fb      	str	r3, [r7, #28]
 8005432:	f04f 0200 	mov.w	r2, #0
 8005436:	f04f 0300 	mov.w	r3, #0
 800543a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800543e:	4659      	mov	r1, fp
 8005440:	018b      	lsls	r3, r1, #6
 8005442:	4651      	mov	r1, sl
 8005444:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005448:	4651      	mov	r1, sl
 800544a:	018a      	lsls	r2, r1, #6
 800544c:	4651      	mov	r1, sl
 800544e:	ebb2 0801 	subs.w	r8, r2, r1
 8005452:	4659      	mov	r1, fp
 8005454:	eb63 0901 	sbc.w	r9, r3, r1
 8005458:	f04f 0200 	mov.w	r2, #0
 800545c:	f04f 0300 	mov.w	r3, #0
 8005460:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005464:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005468:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800546c:	4690      	mov	r8, r2
 800546e:	4699      	mov	r9, r3
 8005470:	4623      	mov	r3, r4
 8005472:	eb18 0303 	adds.w	r3, r8, r3
 8005476:	613b      	str	r3, [r7, #16]
 8005478:	462b      	mov	r3, r5
 800547a:	eb49 0303 	adc.w	r3, r9, r3
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	f04f 0200 	mov.w	r2, #0
 8005484:	f04f 0300 	mov.w	r3, #0
 8005488:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800548c:	4629      	mov	r1, r5
 800548e:	024b      	lsls	r3, r1, #9
 8005490:	4621      	mov	r1, r4
 8005492:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005496:	4621      	mov	r1, r4
 8005498:	024a      	lsls	r2, r1, #9
 800549a:	4610      	mov	r0, r2
 800549c:	4619      	mov	r1, r3
 800549e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054a2:	2200      	movs	r2, #0
 80054a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054a6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80054a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80054ac:	f7fb fc0c 	bl	8000cc8 <__aeabi_uldivmod>
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	4613      	mov	r3, r2
 80054b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054ba:	e065      	b.n	8005588 <HAL_RCC_GetSysClockFreq+0x420>
 80054bc:	40023800 	.word	0x40023800
 80054c0:	00f42400 	.word	0x00f42400
 80054c4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054c8:	4b3d      	ldr	r3, [pc, #244]	@ (80055c0 <HAL_RCC_GetSysClockFreq+0x458>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	099b      	lsrs	r3, r3, #6
 80054ce:	2200      	movs	r2, #0
 80054d0:	4618      	mov	r0, r3
 80054d2:	4611      	mov	r1, r2
 80054d4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80054d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80054da:	2300      	movs	r3, #0
 80054dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80054de:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80054e2:	4642      	mov	r2, r8
 80054e4:	464b      	mov	r3, r9
 80054e6:	f04f 0000 	mov.w	r0, #0
 80054ea:	f04f 0100 	mov.w	r1, #0
 80054ee:	0159      	lsls	r1, r3, #5
 80054f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054f4:	0150      	lsls	r0, r2, #5
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	4641      	mov	r1, r8
 80054fc:	1a51      	subs	r1, r2, r1
 80054fe:	60b9      	str	r1, [r7, #8]
 8005500:	4649      	mov	r1, r9
 8005502:	eb63 0301 	sbc.w	r3, r3, r1
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	f04f 0200 	mov.w	r2, #0
 800550c:	f04f 0300 	mov.w	r3, #0
 8005510:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005514:	4659      	mov	r1, fp
 8005516:	018b      	lsls	r3, r1, #6
 8005518:	4651      	mov	r1, sl
 800551a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800551e:	4651      	mov	r1, sl
 8005520:	018a      	lsls	r2, r1, #6
 8005522:	4651      	mov	r1, sl
 8005524:	1a54      	subs	r4, r2, r1
 8005526:	4659      	mov	r1, fp
 8005528:	eb63 0501 	sbc.w	r5, r3, r1
 800552c:	f04f 0200 	mov.w	r2, #0
 8005530:	f04f 0300 	mov.w	r3, #0
 8005534:	00eb      	lsls	r3, r5, #3
 8005536:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800553a:	00e2      	lsls	r2, r4, #3
 800553c:	4614      	mov	r4, r2
 800553e:	461d      	mov	r5, r3
 8005540:	4643      	mov	r3, r8
 8005542:	18e3      	adds	r3, r4, r3
 8005544:	603b      	str	r3, [r7, #0]
 8005546:	464b      	mov	r3, r9
 8005548:	eb45 0303 	adc.w	r3, r5, r3
 800554c:	607b      	str	r3, [r7, #4]
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	f04f 0300 	mov.w	r3, #0
 8005556:	e9d7 4500 	ldrd	r4, r5, [r7]
 800555a:	4629      	mov	r1, r5
 800555c:	028b      	lsls	r3, r1, #10
 800555e:	4621      	mov	r1, r4
 8005560:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005564:	4621      	mov	r1, r4
 8005566:	028a      	lsls	r2, r1, #10
 8005568:	4610      	mov	r0, r2
 800556a:	4619      	mov	r1, r3
 800556c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005570:	2200      	movs	r2, #0
 8005572:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005574:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005576:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800557a:	f7fb fba5 	bl	8000cc8 <__aeabi_uldivmod>
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
 8005582:	4613      	mov	r3, r2
 8005584:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005588:	4b0d      	ldr	r3, [pc, #52]	@ (80055c0 <HAL_RCC_GetSysClockFreq+0x458>)
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	0f1b      	lsrs	r3, r3, #28
 800558e:	f003 0307 	and.w	r3, r3, #7
 8005592:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005596:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800559a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800559e:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80055a6:	e003      	b.n	80055b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055a8:	4b06      	ldr	r3, [pc, #24]	@ (80055c4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80055aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80055ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	37b8      	adds	r7, #184	@ 0xb8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055be:	bf00      	nop
 80055c0:	40023800 	.word	0x40023800
 80055c4:	00f42400 	.word	0x00f42400

080055c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e28d      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 8083 	beq.w	80056ee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80055e8:	4b94      	ldr	r3, [pc, #592]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f003 030c 	and.w	r3, r3, #12
 80055f0:	2b04      	cmp	r3, #4
 80055f2:	d019      	beq.n	8005628 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80055f4:	4b91      	ldr	r3, [pc, #580]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f003 030c 	and.w	r3, r3, #12
        || \
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d106      	bne.n	800560e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005600:	4b8e      	ldr	r3, [pc, #568]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005608:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800560c:	d00c      	beq.n	8005628 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800560e:	4b8b      	ldr	r3, [pc, #556]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005616:	2b0c      	cmp	r3, #12
 8005618:	d112      	bne.n	8005640 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800561a:	4b88      	ldr	r3, [pc, #544]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005622:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005626:	d10b      	bne.n	8005640 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005628:	4b84      	ldr	r3, [pc, #528]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d05b      	beq.n	80056ec <HAL_RCC_OscConfig+0x124>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d157      	bne.n	80056ec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e25a      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005648:	d106      	bne.n	8005658 <HAL_RCC_OscConfig+0x90>
 800564a:	4b7c      	ldr	r3, [pc, #496]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a7b      	ldr	r2, [pc, #492]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 8005650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	e01d      	b.n	8005694 <HAL_RCC_OscConfig+0xcc>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005660:	d10c      	bne.n	800567c <HAL_RCC_OscConfig+0xb4>
 8005662:	4b76      	ldr	r3, [pc, #472]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a75      	ldr	r2, [pc, #468]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 8005668:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800566c:	6013      	str	r3, [r2, #0]
 800566e:	4b73      	ldr	r3, [pc, #460]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a72      	ldr	r2, [pc, #456]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 8005674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	e00b      	b.n	8005694 <HAL_RCC_OscConfig+0xcc>
 800567c:	4b6f      	ldr	r3, [pc, #444]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a6e      	ldr	r2, [pc, #440]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 8005682:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005686:	6013      	str	r3, [r2, #0]
 8005688:	4b6c      	ldr	r3, [pc, #432]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a6b      	ldr	r2, [pc, #428]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 800568e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005692:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d013      	beq.n	80056c4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569c:	f7fe fa96 	bl	8003bcc <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056a2:	e008      	b.n	80056b6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056a4:	f7fe fa92 	bl	8003bcc <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b64      	cmp	r3, #100	@ 0x64
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e21f      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056b6:	4b61      	ldr	r3, [pc, #388]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0f0      	beq.n	80056a4 <HAL_RCC_OscConfig+0xdc>
 80056c2:	e014      	b.n	80056ee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c4:	f7fe fa82 	bl	8003bcc <HAL_GetTick>
 80056c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056cc:	f7fe fa7e 	bl	8003bcc <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b64      	cmp	r3, #100	@ 0x64
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e20b      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056de:	4b57      	ldr	r3, [pc, #348]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1f0      	bne.n	80056cc <HAL_RCC_OscConfig+0x104>
 80056ea:	e000      	b.n	80056ee <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d06f      	beq.n	80057da <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80056fa:	4b50      	ldr	r3, [pc, #320]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f003 030c 	and.w	r3, r3, #12
 8005702:	2b00      	cmp	r3, #0
 8005704:	d017      	beq.n	8005736 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005706:	4b4d      	ldr	r3, [pc, #308]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 030c 	and.w	r3, r3, #12
        || \
 800570e:	2b08      	cmp	r3, #8
 8005710:	d105      	bne.n	800571e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005712:	4b4a      	ldr	r3, [pc, #296]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00b      	beq.n	8005736 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800571e:	4b47      	ldr	r3, [pc, #284]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005726:	2b0c      	cmp	r3, #12
 8005728:	d11c      	bne.n	8005764 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800572a:	4b44      	ldr	r3, [pc, #272]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d116      	bne.n	8005764 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005736:	4b41      	ldr	r3, [pc, #260]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b00      	cmp	r3, #0
 8005740:	d005      	beq.n	800574e <HAL_RCC_OscConfig+0x186>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d001      	beq.n	800574e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e1d3      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800574e:	4b3b      	ldr	r3, [pc, #236]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	4937      	ldr	r1, [pc, #220]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 800575e:	4313      	orrs	r3, r2
 8005760:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005762:	e03a      	b.n	80057da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d020      	beq.n	80057ae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800576c:	4b34      	ldr	r3, [pc, #208]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 800576e:	2201      	movs	r2, #1
 8005770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005772:	f7fe fa2b 	bl	8003bcc <HAL_GetTick>
 8005776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005778:	e008      	b.n	800578c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800577a:	f7fe fa27 	bl	8003bcc <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e1b4      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800578c:	4b2b      	ldr	r3, [pc, #172]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0f0      	beq.n	800577a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005798:	4b28      	ldr	r3, [pc, #160]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	00db      	lsls	r3, r3, #3
 80057a6:	4925      	ldr	r1, [pc, #148]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	600b      	str	r3, [r1, #0]
 80057ac:	e015      	b.n	80057da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057ae:	4b24      	ldr	r3, [pc, #144]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b4:	f7fe fa0a 	bl	8003bcc <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057bc:	f7fe fa06 	bl	8003bcc <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e193      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ce:	4b1b      	ldr	r3, [pc, #108]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1f0      	bne.n	80057bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0308 	and.w	r3, r3, #8
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d036      	beq.n	8005854 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d016      	beq.n	800581c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057ee:	4b15      	ldr	r3, [pc, #84]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 80057f0:	2201      	movs	r2, #1
 80057f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f4:	f7fe f9ea 	bl	8003bcc <HAL_GetTick>
 80057f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057fa:	e008      	b.n	800580e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057fc:	f7fe f9e6 	bl	8003bcc <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b02      	cmp	r3, #2
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e173      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800580e:	4b0b      	ldr	r3, [pc, #44]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 8005810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0f0      	beq.n	80057fc <HAL_RCC_OscConfig+0x234>
 800581a:	e01b      	b.n	8005854 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800581c:	4b09      	ldr	r3, [pc, #36]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 800581e:	2200      	movs	r2, #0
 8005820:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005822:	f7fe f9d3 	bl	8003bcc <HAL_GetTick>
 8005826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005828:	e00e      	b.n	8005848 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800582a:	f7fe f9cf 	bl	8003bcc <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d907      	bls.n	8005848 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e15c      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
 800583c:	40023800 	.word	0x40023800
 8005840:	42470000 	.word	0x42470000
 8005844:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005848:	4b8a      	ldr	r3, [pc, #552]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 800584a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1ea      	bne.n	800582a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 8097 	beq.w	8005990 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005862:	2300      	movs	r3, #0
 8005864:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005866:	4b83      	ldr	r3, [pc, #524]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 8005868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10f      	bne.n	8005892 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005872:	2300      	movs	r3, #0
 8005874:	60bb      	str	r3, [r7, #8]
 8005876:	4b7f      	ldr	r3, [pc, #508]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 8005878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587a:	4a7e      	ldr	r2, [pc, #504]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 800587c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005880:	6413      	str	r3, [r2, #64]	@ 0x40
 8005882:	4b7c      	ldr	r3, [pc, #496]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 8005884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800588a:	60bb      	str	r3, [r7, #8]
 800588c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800588e:	2301      	movs	r3, #1
 8005890:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005892:	4b79      	ldr	r3, [pc, #484]	@ (8005a78 <HAL_RCC_OscConfig+0x4b0>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800589a:	2b00      	cmp	r3, #0
 800589c:	d118      	bne.n	80058d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800589e:	4b76      	ldr	r3, [pc, #472]	@ (8005a78 <HAL_RCC_OscConfig+0x4b0>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a75      	ldr	r2, [pc, #468]	@ (8005a78 <HAL_RCC_OscConfig+0x4b0>)
 80058a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058aa:	f7fe f98f 	bl	8003bcc <HAL_GetTick>
 80058ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058b0:	e008      	b.n	80058c4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058b2:	f7fe f98b 	bl	8003bcc <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d901      	bls.n	80058c4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e118      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058c4:	4b6c      	ldr	r3, [pc, #432]	@ (8005a78 <HAL_RCC_OscConfig+0x4b0>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d0f0      	beq.n	80058b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d106      	bne.n	80058e6 <HAL_RCC_OscConfig+0x31e>
 80058d8:	4b66      	ldr	r3, [pc, #408]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 80058da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058dc:	4a65      	ldr	r2, [pc, #404]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 80058de:	f043 0301 	orr.w	r3, r3, #1
 80058e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80058e4:	e01c      	b.n	8005920 <HAL_RCC_OscConfig+0x358>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	2b05      	cmp	r3, #5
 80058ec:	d10c      	bne.n	8005908 <HAL_RCC_OscConfig+0x340>
 80058ee:	4b61      	ldr	r3, [pc, #388]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 80058f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058f2:	4a60      	ldr	r2, [pc, #384]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 80058f4:	f043 0304 	orr.w	r3, r3, #4
 80058f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80058fa:	4b5e      	ldr	r3, [pc, #376]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 80058fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058fe:	4a5d      	ldr	r2, [pc, #372]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 8005900:	f043 0301 	orr.w	r3, r3, #1
 8005904:	6713      	str	r3, [r2, #112]	@ 0x70
 8005906:	e00b      	b.n	8005920 <HAL_RCC_OscConfig+0x358>
 8005908:	4b5a      	ldr	r3, [pc, #360]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 800590a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800590c:	4a59      	ldr	r2, [pc, #356]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 800590e:	f023 0301 	bic.w	r3, r3, #1
 8005912:	6713      	str	r3, [r2, #112]	@ 0x70
 8005914:	4b57      	ldr	r3, [pc, #348]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 8005916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005918:	4a56      	ldr	r2, [pc, #344]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 800591a:	f023 0304 	bic.w	r3, r3, #4
 800591e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d015      	beq.n	8005954 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005928:	f7fe f950 	bl	8003bcc <HAL_GetTick>
 800592c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800592e:	e00a      	b.n	8005946 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005930:	f7fe f94c 	bl	8003bcc <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800593e:	4293      	cmp	r3, r2
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e0d7      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005946:	4b4b      	ldr	r3, [pc, #300]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 8005948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0ee      	beq.n	8005930 <HAL_RCC_OscConfig+0x368>
 8005952:	e014      	b.n	800597e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005954:	f7fe f93a 	bl	8003bcc <HAL_GetTick>
 8005958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800595a:	e00a      	b.n	8005972 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800595c:	f7fe f936 	bl	8003bcc <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800596a:	4293      	cmp	r3, r2
 800596c:	d901      	bls.n	8005972 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e0c1      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005972:	4b40      	ldr	r3, [pc, #256]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 8005974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1ee      	bne.n	800595c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800597e:	7dfb      	ldrb	r3, [r7, #23]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d105      	bne.n	8005990 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005984:	4b3b      	ldr	r3, [pc, #236]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 8005986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005988:	4a3a      	ldr	r2, [pc, #232]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 800598a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800598e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 80ad 	beq.w	8005af4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800599a:	4b36      	ldr	r3, [pc, #216]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f003 030c 	and.w	r3, r3, #12
 80059a2:	2b08      	cmp	r3, #8
 80059a4:	d060      	beq.n	8005a68 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d145      	bne.n	8005a3a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ae:	4b33      	ldr	r3, [pc, #204]	@ (8005a7c <HAL_RCC_OscConfig+0x4b4>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b4:	f7fe f90a 	bl	8003bcc <HAL_GetTick>
 80059b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ba:	e008      	b.n	80059ce <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059bc:	f7fe f906 	bl	8003bcc <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e093      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ce:	4b29      	ldr	r3, [pc, #164]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1f0      	bne.n	80059bc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	69da      	ldr	r2, [r3, #28]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e8:	019b      	lsls	r3, r3, #6
 80059ea:	431a      	orrs	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f0:	085b      	lsrs	r3, r3, #1
 80059f2:	3b01      	subs	r3, #1
 80059f4:	041b      	lsls	r3, r3, #16
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059fc:	061b      	lsls	r3, r3, #24
 80059fe:	431a      	orrs	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a04:	071b      	lsls	r3, r3, #28
 8005a06:	491b      	ldr	r1, [pc, #108]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8005a7c <HAL_RCC_OscConfig+0x4b4>)
 8005a0e:	2201      	movs	r2, #1
 8005a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a12:	f7fe f8db 	bl	8003bcc <HAL_GetTick>
 8005a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a18:	e008      	b.n	8005a2c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a1a:	f7fe f8d7 	bl	8003bcc <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d901      	bls.n	8005a2c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e064      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a2c:	4b11      	ldr	r3, [pc, #68]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d0f0      	beq.n	8005a1a <HAL_RCC_OscConfig+0x452>
 8005a38:	e05c      	b.n	8005af4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a3a:	4b10      	ldr	r3, [pc, #64]	@ (8005a7c <HAL_RCC_OscConfig+0x4b4>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a40:	f7fe f8c4 	bl	8003bcc <HAL_GetTick>
 8005a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a46:	e008      	b.n	8005a5a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a48:	f7fe f8c0 	bl	8003bcc <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e04d      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a5a:	4b06      	ldr	r3, [pc, #24]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1f0      	bne.n	8005a48 <HAL_RCC_OscConfig+0x480>
 8005a66:	e045      	b.n	8005af4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d107      	bne.n	8005a80 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e040      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
 8005a74:	40023800 	.word	0x40023800
 8005a78:	40007000 	.word	0x40007000
 8005a7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a80:	4b1f      	ldr	r3, [pc, #124]	@ (8005b00 <HAL_RCC_OscConfig+0x538>)
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d030      	beq.n	8005af0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d129      	bne.n	8005af0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d122      	bne.n	8005af0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ab6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d119      	bne.n	8005af0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac6:	085b      	lsrs	r3, r3, #1
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d10f      	bne.n	8005af0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ada:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d107      	bne.n	8005af0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d001      	beq.n	8005af4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e000      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	40023800 	.word	0x40023800

08005b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e041      	b.n	8005b9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d106      	bne.n	8005b30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7fd fdbc 	bl	80036a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2202      	movs	r2, #2
 8005b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	3304      	adds	r3, #4
 8005b40:	4619      	mov	r1, r3
 8005b42:	4610      	mov	r0, r2
 8005b44:	f000 fad8 	bl	80060f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b082      	sub	sp, #8
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e041      	b.n	8005c38 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d106      	bne.n	8005bce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 f839 	bl	8005c40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2202      	movs	r2, #2
 8005bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	3304      	adds	r3, #4
 8005bde:	4619      	mov	r1, r3
 8005be0:	4610      	mov	r0, r2
 8005be2:	f000 fa89 	bl	80060f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3708      	adds	r7, #8
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d109      	bne.n	8005c78 <HAL_TIM_PWM_Start+0x24>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	bf14      	ite	ne
 8005c70:	2301      	movne	r3, #1
 8005c72:	2300      	moveq	r3, #0
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	e022      	b.n	8005cbe <HAL_TIM_PWM_Start+0x6a>
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	2b04      	cmp	r3, #4
 8005c7c:	d109      	bne.n	8005c92 <HAL_TIM_PWM_Start+0x3e>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	bf14      	ite	ne
 8005c8a:	2301      	movne	r3, #1
 8005c8c:	2300      	moveq	r3, #0
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	e015      	b.n	8005cbe <HAL_TIM_PWM_Start+0x6a>
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d109      	bne.n	8005cac <HAL_TIM_PWM_Start+0x58>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	bf14      	ite	ne
 8005ca4:	2301      	movne	r3, #1
 8005ca6:	2300      	moveq	r3, #0
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	e008      	b.n	8005cbe <HAL_TIM_PWM_Start+0x6a>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	bf14      	ite	ne
 8005cb8:	2301      	movne	r3, #1
 8005cba:	2300      	moveq	r3, #0
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e07c      	b.n	8005dc0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d104      	bne.n	8005cd6 <HAL_TIM_PWM_Start+0x82>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cd4:	e013      	b.n	8005cfe <HAL_TIM_PWM_Start+0xaa>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b04      	cmp	r3, #4
 8005cda:	d104      	bne.n	8005ce6 <HAL_TIM_PWM_Start+0x92>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ce4:	e00b      	b.n	8005cfe <HAL_TIM_PWM_Start+0xaa>
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b08      	cmp	r3, #8
 8005cea:	d104      	bne.n	8005cf6 <HAL_TIM_PWM_Start+0xa2>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cf4:	e003      	b.n	8005cfe <HAL_TIM_PWM_Start+0xaa>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2201      	movs	r2, #1
 8005d04:	6839      	ldr	r1, [r7, #0]
 8005d06:	4618      	mov	r0, r3
 8005d08:	f000 fce6 	bl	80066d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a2d      	ldr	r2, [pc, #180]	@ (8005dc8 <HAL_TIM_PWM_Start+0x174>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d004      	beq.n	8005d20 <HAL_TIM_PWM_Start+0xcc>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a2c      	ldr	r2, [pc, #176]	@ (8005dcc <HAL_TIM_PWM_Start+0x178>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d101      	bne.n	8005d24 <HAL_TIM_PWM_Start+0xd0>
 8005d20:	2301      	movs	r3, #1
 8005d22:	e000      	b.n	8005d26 <HAL_TIM_PWM_Start+0xd2>
 8005d24:	2300      	movs	r3, #0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d007      	beq.n	8005d3a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a22      	ldr	r2, [pc, #136]	@ (8005dc8 <HAL_TIM_PWM_Start+0x174>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d022      	beq.n	8005d8a <HAL_TIM_PWM_Start+0x136>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d4c:	d01d      	beq.n	8005d8a <HAL_TIM_PWM_Start+0x136>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a1f      	ldr	r2, [pc, #124]	@ (8005dd0 <HAL_TIM_PWM_Start+0x17c>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d018      	beq.n	8005d8a <HAL_TIM_PWM_Start+0x136>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8005dd4 <HAL_TIM_PWM_Start+0x180>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d013      	beq.n	8005d8a <HAL_TIM_PWM_Start+0x136>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a1c      	ldr	r2, [pc, #112]	@ (8005dd8 <HAL_TIM_PWM_Start+0x184>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00e      	beq.n	8005d8a <HAL_TIM_PWM_Start+0x136>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a16      	ldr	r2, [pc, #88]	@ (8005dcc <HAL_TIM_PWM_Start+0x178>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d009      	beq.n	8005d8a <HAL_TIM_PWM_Start+0x136>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a18      	ldr	r2, [pc, #96]	@ (8005ddc <HAL_TIM_PWM_Start+0x188>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d004      	beq.n	8005d8a <HAL_TIM_PWM_Start+0x136>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a16      	ldr	r2, [pc, #88]	@ (8005de0 <HAL_TIM_PWM_Start+0x18c>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d111      	bne.n	8005dae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f003 0307 	and.w	r3, r3, #7
 8005d94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2b06      	cmp	r3, #6
 8005d9a:	d010      	beq.n	8005dbe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f042 0201 	orr.w	r2, r2, #1
 8005daa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dac:	e007      	b.n	8005dbe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f042 0201 	orr.w	r2, r2, #1
 8005dbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	40010000 	.word	0x40010000
 8005dcc:	40010400 	.word	0x40010400
 8005dd0:	40000400 	.word	0x40000400
 8005dd4:	40000800 	.word	0x40000800
 8005dd8:	40000c00 	.word	0x40000c00
 8005ddc:	40014000 	.word	0x40014000
 8005de0:	40001800 	.word	0x40001800

08005de4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d101      	bne.n	8005e02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005dfe:	2302      	movs	r3, #2
 8005e00:	e0ae      	b.n	8005f60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b0c      	cmp	r3, #12
 8005e0e:	f200 809f 	bhi.w	8005f50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e12:	a201      	add	r2, pc, #4	@ (adr r2, 8005e18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e18:	08005e4d 	.word	0x08005e4d
 8005e1c:	08005f51 	.word	0x08005f51
 8005e20:	08005f51 	.word	0x08005f51
 8005e24:	08005f51 	.word	0x08005f51
 8005e28:	08005e8d 	.word	0x08005e8d
 8005e2c:	08005f51 	.word	0x08005f51
 8005e30:	08005f51 	.word	0x08005f51
 8005e34:	08005f51 	.word	0x08005f51
 8005e38:	08005ecf 	.word	0x08005ecf
 8005e3c:	08005f51 	.word	0x08005f51
 8005e40:	08005f51 	.word	0x08005f51
 8005e44:	08005f51 	.word	0x08005f51
 8005e48:	08005f0f 	.word	0x08005f0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68b9      	ldr	r1, [r7, #8]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 f9f6 	bl	8006244 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	699a      	ldr	r2, [r3, #24]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f042 0208 	orr.w	r2, r2, #8
 8005e66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	699a      	ldr	r2, [r3, #24]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f022 0204 	bic.w	r2, r2, #4
 8005e76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6999      	ldr	r1, [r3, #24]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	691a      	ldr	r2, [r3, #16]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	619a      	str	r2, [r3, #24]
      break;
 8005e8a:	e064      	b.n	8005f56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68b9      	ldr	r1, [r7, #8]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 fa46 	bl	8006324 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699a      	ldr	r2, [r3, #24]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	699a      	ldr	r2, [r3, #24]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005eb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6999      	ldr	r1, [r3, #24]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	021a      	lsls	r2, r3, #8
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	619a      	str	r2, [r3, #24]
      break;
 8005ecc:	e043      	b.n	8005f56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68b9      	ldr	r1, [r7, #8]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f000 fa9b 	bl	8006410 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69da      	ldr	r2, [r3, #28]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f042 0208 	orr.w	r2, r2, #8
 8005ee8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	69da      	ldr	r2, [r3, #28]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 0204 	bic.w	r2, r2, #4
 8005ef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	69d9      	ldr	r1, [r3, #28]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	691a      	ldr	r2, [r3, #16]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	61da      	str	r2, [r3, #28]
      break;
 8005f0c:	e023      	b.n	8005f56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68b9      	ldr	r1, [r7, #8]
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 faef 	bl	80064f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	69da      	ldr	r2, [r3, #28]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	69da      	ldr	r2, [r3, #28]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	69d9      	ldr	r1, [r3, #28]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	021a      	lsls	r2, r3, #8
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	61da      	str	r2, [r3, #28]
      break;
 8005f4e:	e002      	b.n	8005f56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	75fb      	strb	r3, [r7, #23]
      break;
 8005f54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3718      	adds	r7, #24
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f72:	2300      	movs	r3, #0
 8005f74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d101      	bne.n	8005f84 <HAL_TIM_ConfigClockSource+0x1c>
 8005f80:	2302      	movs	r3, #2
 8005f82:	e0b4      	b.n	80060ee <HAL_TIM_ConfigClockSource+0x186>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005fa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005faa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fbc:	d03e      	beq.n	800603c <HAL_TIM_ConfigClockSource+0xd4>
 8005fbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fc2:	f200 8087 	bhi.w	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fca:	f000 8086 	beq.w	80060da <HAL_TIM_ConfigClockSource+0x172>
 8005fce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fd2:	d87f      	bhi.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fd4:	2b70      	cmp	r3, #112	@ 0x70
 8005fd6:	d01a      	beq.n	800600e <HAL_TIM_ConfigClockSource+0xa6>
 8005fd8:	2b70      	cmp	r3, #112	@ 0x70
 8005fda:	d87b      	bhi.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fdc:	2b60      	cmp	r3, #96	@ 0x60
 8005fde:	d050      	beq.n	8006082 <HAL_TIM_ConfigClockSource+0x11a>
 8005fe0:	2b60      	cmp	r3, #96	@ 0x60
 8005fe2:	d877      	bhi.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fe4:	2b50      	cmp	r3, #80	@ 0x50
 8005fe6:	d03c      	beq.n	8006062 <HAL_TIM_ConfigClockSource+0xfa>
 8005fe8:	2b50      	cmp	r3, #80	@ 0x50
 8005fea:	d873      	bhi.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fec:	2b40      	cmp	r3, #64	@ 0x40
 8005fee:	d058      	beq.n	80060a2 <HAL_TIM_ConfigClockSource+0x13a>
 8005ff0:	2b40      	cmp	r3, #64	@ 0x40
 8005ff2:	d86f      	bhi.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ff4:	2b30      	cmp	r3, #48	@ 0x30
 8005ff6:	d064      	beq.n	80060c2 <HAL_TIM_ConfigClockSource+0x15a>
 8005ff8:	2b30      	cmp	r3, #48	@ 0x30
 8005ffa:	d86b      	bhi.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ffc:	2b20      	cmp	r3, #32
 8005ffe:	d060      	beq.n	80060c2 <HAL_TIM_ConfigClockSource+0x15a>
 8006000:	2b20      	cmp	r3, #32
 8006002:	d867      	bhi.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8006004:	2b00      	cmp	r3, #0
 8006006:	d05c      	beq.n	80060c2 <HAL_TIM_ConfigClockSource+0x15a>
 8006008:	2b10      	cmp	r3, #16
 800600a:	d05a      	beq.n	80060c2 <HAL_TIM_ConfigClockSource+0x15a>
 800600c:	e062      	b.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800601e:	f000 fb3b 	bl	8006698 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006030:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	609a      	str	r2, [r3, #8]
      break;
 800603a:	e04f      	b.n	80060dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800604c:	f000 fb24 	bl	8006698 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689a      	ldr	r2, [r3, #8]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800605e:	609a      	str	r2, [r3, #8]
      break;
 8006060:	e03c      	b.n	80060dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800606e:	461a      	mov	r2, r3
 8006070:	f000 fa98 	bl	80065a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2150      	movs	r1, #80	@ 0x50
 800607a:	4618      	mov	r0, r3
 800607c:	f000 faf1 	bl	8006662 <TIM_ITRx_SetConfig>
      break;
 8006080:	e02c      	b.n	80060dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800608e:	461a      	mov	r2, r3
 8006090:	f000 fab7 	bl	8006602 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2160      	movs	r1, #96	@ 0x60
 800609a:	4618      	mov	r0, r3
 800609c:	f000 fae1 	bl	8006662 <TIM_ITRx_SetConfig>
      break;
 80060a0:	e01c      	b.n	80060dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ae:	461a      	mov	r2, r3
 80060b0:	f000 fa78 	bl	80065a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2140      	movs	r1, #64	@ 0x40
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 fad1 	bl	8006662 <TIM_ITRx_SetConfig>
      break;
 80060c0:	e00c      	b.n	80060dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4619      	mov	r1, r3
 80060cc:	4610      	mov	r0, r2
 80060ce:	f000 fac8 	bl	8006662 <TIM_ITRx_SetConfig>
      break;
 80060d2:	e003      	b.n	80060dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	73fb      	strb	r3, [r7, #15]
      break;
 80060d8:	e000      	b.n	80060dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80060da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
	...

080060f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a43      	ldr	r2, [pc, #268]	@ (8006218 <TIM_Base_SetConfig+0x120>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d013      	beq.n	8006138 <TIM_Base_SetConfig+0x40>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006116:	d00f      	beq.n	8006138 <TIM_Base_SetConfig+0x40>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a40      	ldr	r2, [pc, #256]	@ (800621c <TIM_Base_SetConfig+0x124>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d00b      	beq.n	8006138 <TIM_Base_SetConfig+0x40>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a3f      	ldr	r2, [pc, #252]	@ (8006220 <TIM_Base_SetConfig+0x128>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d007      	beq.n	8006138 <TIM_Base_SetConfig+0x40>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a3e      	ldr	r2, [pc, #248]	@ (8006224 <TIM_Base_SetConfig+0x12c>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d003      	beq.n	8006138 <TIM_Base_SetConfig+0x40>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a3d      	ldr	r2, [pc, #244]	@ (8006228 <TIM_Base_SetConfig+0x130>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d108      	bne.n	800614a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800613e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a32      	ldr	r2, [pc, #200]	@ (8006218 <TIM_Base_SetConfig+0x120>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d02b      	beq.n	80061aa <TIM_Base_SetConfig+0xb2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006158:	d027      	beq.n	80061aa <TIM_Base_SetConfig+0xb2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a2f      	ldr	r2, [pc, #188]	@ (800621c <TIM_Base_SetConfig+0x124>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d023      	beq.n	80061aa <TIM_Base_SetConfig+0xb2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a2e      	ldr	r2, [pc, #184]	@ (8006220 <TIM_Base_SetConfig+0x128>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d01f      	beq.n	80061aa <TIM_Base_SetConfig+0xb2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a2d      	ldr	r2, [pc, #180]	@ (8006224 <TIM_Base_SetConfig+0x12c>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d01b      	beq.n	80061aa <TIM_Base_SetConfig+0xb2>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a2c      	ldr	r2, [pc, #176]	@ (8006228 <TIM_Base_SetConfig+0x130>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d017      	beq.n	80061aa <TIM_Base_SetConfig+0xb2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a2b      	ldr	r2, [pc, #172]	@ (800622c <TIM_Base_SetConfig+0x134>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d013      	beq.n	80061aa <TIM_Base_SetConfig+0xb2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a2a      	ldr	r2, [pc, #168]	@ (8006230 <TIM_Base_SetConfig+0x138>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d00f      	beq.n	80061aa <TIM_Base_SetConfig+0xb2>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a29      	ldr	r2, [pc, #164]	@ (8006234 <TIM_Base_SetConfig+0x13c>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d00b      	beq.n	80061aa <TIM_Base_SetConfig+0xb2>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a28      	ldr	r2, [pc, #160]	@ (8006238 <TIM_Base_SetConfig+0x140>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d007      	beq.n	80061aa <TIM_Base_SetConfig+0xb2>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a27      	ldr	r2, [pc, #156]	@ (800623c <TIM_Base_SetConfig+0x144>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d003      	beq.n	80061aa <TIM_Base_SetConfig+0xb2>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a26      	ldr	r2, [pc, #152]	@ (8006240 <TIM_Base_SetConfig+0x148>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d108      	bne.n	80061bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	689a      	ldr	r2, [r3, #8]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a0e      	ldr	r2, [pc, #56]	@ (8006218 <TIM_Base_SetConfig+0x120>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d003      	beq.n	80061ea <TIM_Base_SetConfig+0xf2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a10      	ldr	r2, [pc, #64]	@ (8006228 <TIM_Base_SetConfig+0x130>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d103      	bne.n	80061f2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	691a      	ldr	r2, [r3, #16]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f043 0204 	orr.w	r2, r3, #4
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	601a      	str	r2, [r3, #0]
}
 800620a:	bf00      	nop
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	40010000 	.word	0x40010000
 800621c:	40000400 	.word	0x40000400
 8006220:	40000800 	.word	0x40000800
 8006224:	40000c00 	.word	0x40000c00
 8006228:	40010400 	.word	0x40010400
 800622c:	40014000 	.word	0x40014000
 8006230:	40014400 	.word	0x40014400
 8006234:	40014800 	.word	0x40014800
 8006238:	40001800 	.word	0x40001800
 800623c:	40001c00 	.word	0x40001c00
 8006240:	40002000 	.word	0x40002000

08006244 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006244:	b480      	push	{r7}
 8006246:	b087      	sub	sp, #28
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	f023 0201 	bic.w	r2, r3, #1
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 0303 	bic.w	r3, r3, #3
 800627a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	4313      	orrs	r3, r2
 8006284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f023 0302 	bic.w	r3, r3, #2
 800628c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	4313      	orrs	r3, r2
 8006296:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a20      	ldr	r2, [pc, #128]	@ (800631c <TIM_OC1_SetConfig+0xd8>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d003      	beq.n	80062a8 <TIM_OC1_SetConfig+0x64>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a1f      	ldr	r2, [pc, #124]	@ (8006320 <TIM_OC1_SetConfig+0xdc>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d10c      	bne.n	80062c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	f023 0308 	bic.w	r3, r3, #8
 80062ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f023 0304 	bic.w	r3, r3, #4
 80062c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a15      	ldr	r2, [pc, #84]	@ (800631c <TIM_OC1_SetConfig+0xd8>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d003      	beq.n	80062d2 <TIM_OC1_SetConfig+0x8e>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a14      	ldr	r2, [pc, #80]	@ (8006320 <TIM_OC1_SetConfig+0xdc>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d111      	bne.n	80062f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	621a      	str	r2, [r3, #32]
}
 8006310:	bf00      	nop
 8006312:	371c      	adds	r7, #28
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr
 800631c:	40010000 	.word	0x40010000
 8006320:	40010400 	.word	0x40010400

08006324 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006324:	b480      	push	{r7}
 8006326:	b087      	sub	sp, #28
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a1b      	ldr	r3, [r3, #32]
 8006338:	f023 0210 	bic.w	r2, r3, #16
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800635a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	021b      	lsls	r3, r3, #8
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	4313      	orrs	r3, r2
 8006366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f023 0320 	bic.w	r3, r3, #32
 800636e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	011b      	lsls	r3, r3, #4
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	4313      	orrs	r3, r2
 800637a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a22      	ldr	r2, [pc, #136]	@ (8006408 <TIM_OC2_SetConfig+0xe4>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d003      	beq.n	800638c <TIM_OC2_SetConfig+0x68>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a21      	ldr	r2, [pc, #132]	@ (800640c <TIM_OC2_SetConfig+0xe8>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d10d      	bne.n	80063a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	011b      	lsls	r3, r3, #4
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	4313      	orrs	r3, r2
 800639e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a17      	ldr	r2, [pc, #92]	@ (8006408 <TIM_OC2_SetConfig+0xe4>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d003      	beq.n	80063b8 <TIM_OC2_SetConfig+0x94>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a16      	ldr	r2, [pc, #88]	@ (800640c <TIM_OC2_SetConfig+0xe8>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d113      	bne.n	80063e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80063be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80063c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	4313      	orrs	r3, r2
 80063de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	685a      	ldr	r2, [r3, #4]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	621a      	str	r2, [r3, #32]
}
 80063fa:	bf00      	nop
 80063fc:	371c      	adds	r7, #28
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	40010000 	.word	0x40010000
 800640c:	40010400 	.word	0x40010400

08006410 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006410:	b480      	push	{r7}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800643e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f023 0303 	bic.w	r3, r3, #3
 8006446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	4313      	orrs	r3, r2
 8006450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	021b      	lsls	r3, r3, #8
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	4313      	orrs	r3, r2
 8006464:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a21      	ldr	r2, [pc, #132]	@ (80064f0 <TIM_OC3_SetConfig+0xe0>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d003      	beq.n	8006476 <TIM_OC3_SetConfig+0x66>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a20      	ldr	r2, [pc, #128]	@ (80064f4 <TIM_OC3_SetConfig+0xe4>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d10d      	bne.n	8006492 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800647c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	021b      	lsls	r3, r3, #8
 8006484:	697a      	ldr	r2, [r7, #20]
 8006486:	4313      	orrs	r3, r2
 8006488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006490:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a16      	ldr	r2, [pc, #88]	@ (80064f0 <TIM_OC3_SetConfig+0xe0>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d003      	beq.n	80064a2 <TIM_OC3_SetConfig+0x92>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a15      	ldr	r2, [pc, #84]	@ (80064f4 <TIM_OC3_SetConfig+0xe4>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d113      	bne.n	80064ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80064b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	011b      	lsls	r3, r3, #4
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	011b      	lsls	r3, r3, #4
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	621a      	str	r2, [r3, #32]
}
 80064e4:	bf00      	nop
 80064e6:	371c      	adds	r7, #28
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	40010000 	.word	0x40010000
 80064f4:	40010400 	.word	0x40010400

080064f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800652e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	021b      	lsls	r3, r3, #8
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	4313      	orrs	r3, r2
 800653a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006542:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	031b      	lsls	r3, r3, #12
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	4313      	orrs	r3, r2
 800654e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a12      	ldr	r2, [pc, #72]	@ (800659c <TIM_OC4_SetConfig+0xa4>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d003      	beq.n	8006560 <TIM_OC4_SetConfig+0x68>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a11      	ldr	r2, [pc, #68]	@ (80065a0 <TIM_OC4_SetConfig+0xa8>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d109      	bne.n	8006574 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006566:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	019b      	lsls	r3, r3, #6
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	4313      	orrs	r3, r2
 8006572:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	621a      	str	r2, [r3, #32]
}
 800658e:	bf00      	nop
 8006590:	371c      	adds	r7, #28
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	40010000 	.word	0x40010000
 80065a0:	40010400 	.word	0x40010400

080065a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b087      	sub	sp, #28
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	f023 0201 	bic.w	r2, r3, #1
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	011b      	lsls	r3, r3, #4
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	f023 030a 	bic.w	r3, r3, #10
 80065e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	621a      	str	r2, [r3, #32]
}
 80065f6:	bf00      	nop
 80065f8:	371c      	adds	r7, #28
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006602:	b480      	push	{r7}
 8006604:	b087      	sub	sp, #28
 8006606:	af00      	add	r7, sp, #0
 8006608:	60f8      	str	r0, [r7, #12]
 800660a:	60b9      	str	r1, [r7, #8]
 800660c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	f023 0210 	bic.w	r2, r3, #16
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800662c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	031b      	lsls	r3, r3, #12
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	4313      	orrs	r3, r2
 8006636:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800663e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	011b      	lsls	r3, r3, #4
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	4313      	orrs	r3, r2
 8006648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	621a      	str	r2, [r3, #32]
}
 8006656:	bf00      	nop
 8006658:	371c      	adds	r7, #28
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006662:	b480      	push	{r7}
 8006664:	b085      	sub	sp, #20
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
 800666a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006678:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4313      	orrs	r3, r2
 8006680:	f043 0307 	orr.w	r3, r3, #7
 8006684:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	609a      	str	r2, [r3, #8]
}
 800668c:	bf00      	nop
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006698:	b480      	push	{r7}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
 80066a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	021a      	lsls	r2, r3, #8
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	431a      	orrs	r2, r3
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	4313      	orrs	r3, r2
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	609a      	str	r2, [r3, #8]
}
 80066cc:	bf00      	nop
 80066ce:	371c      	adds	r7, #28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	f003 031f 	and.w	r3, r3, #31
 80066ea:	2201      	movs	r2, #1
 80066ec:	fa02 f303 	lsl.w	r3, r2, r3
 80066f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6a1a      	ldr	r2, [r3, #32]
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	43db      	mvns	r3, r3
 80066fa:	401a      	ands	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6a1a      	ldr	r2, [r3, #32]
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	f003 031f 	and.w	r3, r3, #31
 800670a:	6879      	ldr	r1, [r7, #4]
 800670c:	fa01 f303 	lsl.w	r3, r1, r3
 8006710:	431a      	orrs	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	621a      	str	r2, [r3, #32]
}
 8006716:	bf00      	nop
 8006718:	371c      	adds	r7, #28
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
	...

08006724 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006734:	2b01      	cmp	r3, #1
 8006736:	d101      	bne.n	800673c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006738:	2302      	movs	r3, #2
 800673a:	e05a      	b.n	80067f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2202      	movs	r2, #2
 8006748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006762:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	4313      	orrs	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a21      	ldr	r2, [pc, #132]	@ (8006800 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d022      	beq.n	80067c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006788:	d01d      	beq.n	80067c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a1d      	ldr	r2, [pc, #116]	@ (8006804 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d018      	beq.n	80067c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a1b      	ldr	r2, [pc, #108]	@ (8006808 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d013      	beq.n	80067c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a1a      	ldr	r2, [pc, #104]	@ (800680c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d00e      	beq.n	80067c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a18      	ldr	r2, [pc, #96]	@ (8006810 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d009      	beq.n	80067c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a17      	ldr	r2, [pc, #92]	@ (8006814 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d004      	beq.n	80067c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a15      	ldr	r2, [pc, #84]	@ (8006818 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d10c      	bne.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	40010000 	.word	0x40010000
 8006804:	40000400 	.word	0x40000400
 8006808:	40000800 	.word	0x40000800
 800680c:	40000c00 	.word	0x40000c00
 8006810:	40010400 	.word	0x40010400
 8006814:	40014000 	.word	0x40014000
 8006818:	40001800 	.word	0x40001800

0800681c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d101      	bne.n	800682e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e042      	b.n	80068b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006834:	b2db      	uxtb	r3, r3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d106      	bne.n	8006848 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7fd f80a 	bl	800385c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2224      	movs	r2, #36	@ 0x24
 800684c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68da      	ldr	r2, [r3, #12]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800685e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f001 f96b 	bl	8007b3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	691a      	ldr	r2, [r3, #16]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006874:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	695a      	ldr	r2, [r3, #20]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006884:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68da      	ldr	r2, [r3, #12]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006894:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2220      	movs	r2, #32
 80068a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2220      	movs	r2, #32
 80068a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b08a      	sub	sp, #40	@ 0x28
 80068c0:	af02      	add	r7, sp, #8
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	603b      	str	r3, [r7, #0]
 80068c8:	4613      	mov	r3, r2
 80068ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80068cc:	2300      	movs	r3, #0
 80068ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b20      	cmp	r3, #32
 80068da:	d175      	bne.n	80069c8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d002      	beq.n	80068e8 <HAL_UART_Transmit+0x2c>
 80068e2:	88fb      	ldrh	r3, [r7, #6]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e06e      	b.n	80069ca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2221      	movs	r2, #33	@ 0x21
 80068f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068fa:	f7fd f967 	bl	8003bcc <HAL_GetTick>
 80068fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	88fa      	ldrh	r2, [r7, #6]
 8006904:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	88fa      	ldrh	r2, [r7, #6]
 800690a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006914:	d108      	bne.n	8006928 <HAL_UART_Transmit+0x6c>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d104      	bne.n	8006928 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800691e:	2300      	movs	r3, #0
 8006920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	61bb      	str	r3, [r7, #24]
 8006926:	e003      	b.n	8006930 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800692c:	2300      	movs	r3, #0
 800692e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006930:	e02e      	b.n	8006990 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	2200      	movs	r2, #0
 800693a:	2180      	movs	r1, #128	@ 0x80
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 fda1 	bl	8007484 <UART_WaitOnFlagUntilTimeout>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d005      	beq.n	8006954 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2220      	movs	r2, #32
 800694c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e03a      	b.n	80069ca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10b      	bne.n	8006972 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	461a      	mov	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006968:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	3302      	adds	r3, #2
 800696e:	61bb      	str	r3, [r7, #24]
 8006970:	e007      	b.n	8006982 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	781a      	ldrb	r2, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	3301      	adds	r3, #1
 8006980:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006986:	b29b      	uxth	r3, r3
 8006988:	3b01      	subs	r3, #1
 800698a:	b29a      	uxth	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006994:	b29b      	uxth	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1cb      	bne.n	8006932 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	2200      	movs	r2, #0
 80069a2:	2140      	movs	r1, #64	@ 0x40
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f000 fd6d 	bl	8007484 <UART_WaitOnFlagUntilTimeout>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d005      	beq.n	80069bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2220      	movs	r2, #32
 80069b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e006      	b.n	80069ca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2220      	movs	r2, #32
 80069c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80069c4:	2300      	movs	r3, #0
 80069c6:	e000      	b.n	80069ca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80069c8:	2302      	movs	r3, #2
  }
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3720      	adds	r7, #32
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	60f8      	str	r0, [r7, #12]
 80069da:	60b9      	str	r1, [r7, #8]
 80069dc:	4613      	mov	r3, r2
 80069de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b20      	cmp	r3, #32
 80069ea:	d112      	bne.n	8006a12 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d002      	beq.n	80069f8 <HAL_UART_Receive_IT+0x26>
 80069f2:	88fb      	ldrh	r3, [r7, #6]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e00b      	b.n	8006a14 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a02:	88fb      	ldrh	r3, [r7, #6]
 8006a04:	461a      	mov	r2, r3
 8006a06:	68b9      	ldr	r1, [r7, #8]
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f000 fd94 	bl	8007536 <UART_Start_Receive_IT>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	e000      	b.n	8006a14 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006a12:	2302      	movs	r3, #2
  }
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	4613      	mov	r3, r2
 8006a28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b20      	cmp	r3, #32
 8006a34:	d112      	bne.n	8006a5c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d002      	beq.n	8006a42 <HAL_UART_Receive_DMA+0x26>
 8006a3c:	88fb      	ldrh	r3, [r7, #6]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d101      	bne.n	8006a46 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e00b      	b.n	8006a5e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006a4c:	88fb      	ldrh	r3, [r7, #6]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	68b9      	ldr	r1, [r7, #8]
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f000 fdaa 	bl	80075ac <UART_Start_Receive_DMA>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	e000      	b.n	8006a5e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006a5c:	2302      	movs	r3, #2
  }
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
	...

08006a68 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b0a2      	sub	sp, #136	@ 0x88
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8006a70:	2301      	movs	r3, #1
 8006a72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	330c      	adds	r3, #12
 8006a7c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a80:	e853 3f00 	ldrex	r3, [r3]
 8006a84:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006a86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a88:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8006a8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	330c      	adds	r3, #12
 8006a96:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006a9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006a9c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006aa0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006aa2:	e841 2300 	strex	r3, r2, [r1]
 8006aa6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006aa8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1e3      	bne.n	8006a76 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3314      	adds	r3, #20
 8006ab4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ab8:	e853 3f00 	ldrex	r3, [r3]
 8006abc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006abe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ac0:	f023 0301 	bic.w	r3, r3, #1
 8006ac4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	3314      	adds	r3, #20
 8006acc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006ace:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006ad0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ad4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ad6:	e841 2300 	strex	r3, r2, [r1]
 8006ada:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006adc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1e5      	bne.n	8006aae <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d119      	bne.n	8006b1e <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	330c      	adds	r3, #12
 8006af0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af4:	e853 3f00 	ldrex	r3, [r3]
 8006af8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006afc:	f023 0310 	bic.w	r3, r3, #16
 8006b00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	330c      	adds	r3, #12
 8006b08:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8006b0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b12:	e841 2300 	strex	r3, r2, [r1]
 8006b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1e5      	bne.n	8006aea <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00f      	beq.n	8006b46 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b30:	2b80      	cmp	r3, #128	@ 0x80
 8006b32:	d104      	bne.n	8006b3e <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b38:	4a53      	ldr	r2, [pc, #332]	@ (8006c88 <HAL_UART_Abort_IT+0x220>)
 8006b3a:	651a      	str	r2, [r3, #80]	@ 0x50
 8006b3c:	e003      	b.n	8006b46 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b42:	2200      	movs	r2, #0
 8006b44:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00f      	beq.n	8006b6e <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	695b      	ldr	r3, [r3, #20]
 8006b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b58:	2b40      	cmp	r3, #64	@ 0x40
 8006b5a:	d104      	bne.n	8006b66 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b60:	4a4a      	ldr	r2, [pc, #296]	@ (8006c8c <HAL_UART_Abort_IT+0x224>)
 8006b62:	651a      	str	r2, [r3, #80]	@ 0x50
 8006b64:	e003      	b.n	8006b6e <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	695b      	ldr	r3, [r3, #20]
 8006b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b78:	2b80      	cmp	r3, #128	@ 0x80
 8006b7a:	d12d      	bne.n	8006bd8 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3314      	adds	r3, #20
 8006b82:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b86:	e853 3f00 	ldrex	r3, [r3]
 8006b8a:	623b      	str	r3, [r7, #32]
   return(result);
 8006b8c:	6a3b      	ldr	r3, [r7, #32]
 8006b8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b92:	677b      	str	r3, [r7, #116]	@ 0x74
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3314      	adds	r3, #20
 8006b9a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006b9c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ba2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ba4:	e841 2300 	strex	r3, r2, [r1]
 8006ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1e5      	bne.n	8006b7c <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00f      	beq.n	8006bd8 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7fd fd2f 	bl	8004620 <HAL_DMA_Abort_IT>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d004      	beq.n	8006bd2 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bcc:	2200      	movs	r2, #0
 8006bce:	651a      	str	r2, [r3, #80]	@ 0x50
 8006bd0:	e002      	b.n	8006bd8 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006be2:	2b40      	cmp	r3, #64	@ 0x40
 8006be4:	d130      	bne.n	8006c48 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	3314      	adds	r3, #20
 8006bec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	e853 3f00 	ldrex	r3, [r3]
 8006bf4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bfc:	673b      	str	r3, [r7, #112]	@ 0x70
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	3314      	adds	r3, #20
 8006c04:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006c06:	61fa      	str	r2, [r7, #28]
 8006c08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0a:	69b9      	ldr	r1, [r7, #24]
 8006c0c:	69fa      	ldr	r2, [r7, #28]
 8006c0e:	e841 2300 	strex	r3, r2, [r1]
 8006c12:	617b      	str	r3, [r7, #20]
   return(result);
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1e5      	bne.n	8006be6 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d012      	beq.n	8006c48 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fd fcfa 	bl	8004620 <HAL_DMA_Abort_IT>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d007      	beq.n	8006c42 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c36:	2200      	movs	r2, #0
 8006c38:	651a      	str	r2, [r3, #80]	@ 0x50
        AbortCplt = 0x01U;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c40:	e002      	b.n	8006c48 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8006c42:	2300      	movs	r3, #0
 8006c44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8006c48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d116      	bne.n	8006c7e <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	84da      	strh	r2, [r3, #38]	@ 0x26
    huart->RxXferCount = 0x00U;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    huart->RxState = HAL_UART_STATE_READY;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2220      	movs	r2, #32
 8006c6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fad1 	bl	8007220 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3788      	adds	r7, #136	@ 0x88
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	08007831 	.word	0x08007831
 8006c8c:	08007891 	.word	0x08007891

08006c90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b0ba      	sub	sp, #232	@ 0xe8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cc6:	f003 030f 	and.w	r3, r3, #15
 8006cca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006cce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10f      	bne.n	8006cf6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cda:	f003 0320 	and.w	r3, r3, #32
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d009      	beq.n	8006cf6 <HAL_UART_IRQHandler+0x66>
 8006ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ce6:	f003 0320 	and.w	r3, r3, #32
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d003      	beq.n	8006cf6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 fe66 	bl	80079c0 <UART_Receive_IT>
      return;
 8006cf4:	e273      	b.n	80071de <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006cf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f000 80de 	beq.w	8006ebc <HAL_UART_IRQHandler+0x22c>
 8006d00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d04:	f003 0301 	and.w	r3, r3, #1
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d106      	bne.n	8006d1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d10:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 80d1 	beq.w	8006ebc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00b      	beq.n	8006d3e <HAL_UART_IRQHandler+0xae>
 8006d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d005      	beq.n	8006d3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d36:	f043 0201 	orr.w	r2, r3, #1
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d42:	f003 0304 	and.w	r3, r3, #4
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00b      	beq.n	8006d62 <HAL_UART_IRQHandler+0xd2>
 8006d4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d005      	beq.n	8006d62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d5a:	f043 0202 	orr.w	r2, r3, #2
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d66:	f003 0302 	and.w	r3, r3, #2
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00b      	beq.n	8006d86 <HAL_UART_IRQHandler+0xf6>
 8006d6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d005      	beq.n	8006d86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d7e:	f043 0204 	orr.w	r2, r3, #4
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d8a:	f003 0308 	and.w	r3, r3, #8
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d011      	beq.n	8006db6 <HAL_UART_IRQHandler+0x126>
 8006d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d96:	f003 0320 	and.w	r3, r3, #32
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d105      	bne.n	8006daa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d005      	beq.n	8006db6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dae:	f043 0208 	orr.w	r2, r3, #8
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f000 820a 	beq.w	80071d4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dc4:	f003 0320 	and.w	r3, r3, #32
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d008      	beq.n	8006dde <HAL_UART_IRQHandler+0x14e>
 8006dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dd0:	f003 0320 	and.w	r3, r3, #32
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d002      	beq.n	8006dde <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fdf1 	bl	80079c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	695b      	ldr	r3, [r3, #20]
 8006de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006de8:	2b40      	cmp	r3, #64	@ 0x40
 8006dea:	bf0c      	ite	eq
 8006dec:	2301      	moveq	r3, #1
 8006dee:	2300      	movne	r3, #0
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dfa:	f003 0308 	and.w	r3, r3, #8
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d103      	bne.n	8006e0a <HAL_UART_IRQHandler+0x17a>
 8006e02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d04f      	beq.n	8006eaa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 fc9c 	bl	8007748 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	695b      	ldr	r3, [r3, #20]
 8006e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e1a:	2b40      	cmp	r3, #64	@ 0x40
 8006e1c:	d141      	bne.n	8006ea2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	3314      	adds	r3, #20
 8006e24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e2c:	e853 3f00 	ldrex	r3, [r3]
 8006e30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006e34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	3314      	adds	r3, #20
 8006e46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006e4a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006e56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006e5a:	e841 2300 	strex	r3, r2, [r1]
 8006e5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006e62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1d9      	bne.n	8006e1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d013      	beq.n	8006e9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e76:	4a8a      	ldr	r2, [pc, #552]	@ (80070a0 <HAL_UART_IRQHandler+0x410>)
 8006e78:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7fd fbce 	bl	8004620 <HAL_DMA_Abort_IT>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d016      	beq.n	8006eb8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006e94:	4610      	mov	r0, r2
 8006e96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e98:	e00e      	b.n	8006eb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f9b6 	bl	800720c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ea0:	e00a      	b.n	8006eb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f9b2 	bl	800720c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ea8:	e006      	b.n	8006eb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f9ae 	bl	800720c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006eb6:	e18d      	b.n	80071d4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb8:	bf00      	nop
    return;
 8006eba:	e18b      	b.n	80071d4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	f040 8167 	bne.w	8007194 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eca:	f003 0310 	and.w	r3, r3, #16
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f000 8160 	beq.w	8007194 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8006ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ed8:	f003 0310 	and.w	r3, r3, #16
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f000 8159 	beq.w	8007194 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	60bb      	str	r3, [r7, #8]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	60bb      	str	r3, [r7, #8]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	60bb      	str	r3, [r7, #8]
 8006ef6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f02:	2b40      	cmp	r3, #64	@ 0x40
 8006f04:	f040 80ce 	bne.w	80070a4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 80a9 	beq.w	8007070 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f26:	429a      	cmp	r2, r3
 8006f28:	f080 80a2 	bcs.w	8007070 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f32:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f38:	69db      	ldr	r3, [r3, #28]
 8006f3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f3e:	f000 8088 	beq.w	8007052 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	330c      	adds	r3, #12
 8006f48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006f50:	e853 3f00 	ldrex	r3, [r3]
 8006f54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006f58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	330c      	adds	r3, #12
 8006f6a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006f6e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006f72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f76:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006f7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006f7e:	e841 2300 	strex	r3, r2, [r1]
 8006f82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006f86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1d9      	bne.n	8006f42 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	3314      	adds	r3, #20
 8006f94:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f98:	e853 3f00 	ldrex	r3, [r3]
 8006f9c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006f9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006fa0:	f023 0301 	bic.w	r3, r3, #1
 8006fa4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	3314      	adds	r3, #20
 8006fae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006fb2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006fb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006fba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006fbe:	e841 2300 	strex	r3, r2, [r1]
 8006fc2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006fc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1e1      	bne.n	8006f8e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3314      	adds	r3, #20
 8006fd0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006fd4:	e853 3f00 	ldrex	r3, [r3]
 8006fd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006fda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3314      	adds	r3, #20
 8006fea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006fee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ff0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ff4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006ff6:	e841 2300 	strex	r3, r2, [r1]
 8006ffa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006ffc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1e3      	bne.n	8006fca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2220      	movs	r2, #32
 8007006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	330c      	adds	r3, #12
 8007016:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007018:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800701a:	e853 3f00 	ldrex	r3, [r3]
 800701e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007020:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007022:	f023 0310 	bic.w	r3, r3, #16
 8007026:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	330c      	adds	r3, #12
 8007030:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007034:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007036:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007038:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800703a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800703c:	e841 2300 	strex	r3, r2, [r1]
 8007040:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007042:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1e3      	bne.n	8007010 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800704c:	4618      	mov	r0, r3
 800704e:	f7fd fa77 	bl	8004540 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2202      	movs	r2, #2
 8007056:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007060:	b29b      	uxth	r3, r3
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	b29b      	uxth	r3, r3
 8007066:	4619      	mov	r1, r3
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f8e3 	bl	8007234 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800706e:	e0b3      	b.n	80071d8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007074:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007078:	429a      	cmp	r2, r3
 800707a:	f040 80ad 	bne.w	80071d8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007082:	69db      	ldr	r3, [r3, #28]
 8007084:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007088:	f040 80a6 	bne.w	80071d8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2202      	movs	r2, #2
 8007090:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007096:	4619      	mov	r1, r3
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f8cb 	bl	8007234 <HAL_UARTEx_RxEventCallback>
      return;
 800709e:	e09b      	b.n	80071d8 <HAL_UART_IRQHandler+0x548>
 80070a0:	0800780f 	.word	0x0800780f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f000 808e 	beq.w	80071dc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80070c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 8089 	beq.w	80071dc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	330c      	adds	r3, #12
 80070d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d4:	e853 3f00 	ldrex	r3, [r3]
 80070d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80070da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	330c      	adds	r3, #12
 80070ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80070ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80070f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80070f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070f6:	e841 2300 	strex	r3, r2, [r1]
 80070fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1e3      	bne.n	80070ca <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3314      	adds	r3, #20
 8007108:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710c:	e853 3f00 	ldrex	r3, [r3]
 8007110:	623b      	str	r3, [r7, #32]
   return(result);
 8007112:	6a3b      	ldr	r3, [r7, #32]
 8007114:	f023 0301 	bic.w	r3, r3, #1
 8007118:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	3314      	adds	r3, #20
 8007122:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007126:	633a      	str	r2, [r7, #48]	@ 0x30
 8007128:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800712c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800712e:	e841 2300 	strex	r3, r2, [r1]
 8007132:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1e3      	bne.n	8007102 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2220      	movs	r2, #32
 800713e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	330c      	adds	r3, #12
 800714e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	e853 3f00 	ldrex	r3, [r3]
 8007156:	60fb      	str	r3, [r7, #12]
   return(result);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f023 0310 	bic.w	r3, r3, #16
 800715e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	330c      	adds	r3, #12
 8007168:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800716c:	61fa      	str	r2, [r7, #28]
 800716e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007170:	69b9      	ldr	r1, [r7, #24]
 8007172:	69fa      	ldr	r2, [r7, #28]
 8007174:	e841 2300 	strex	r3, r2, [r1]
 8007178:	617b      	str	r3, [r7, #20]
   return(result);
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1e3      	bne.n	8007148 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2202      	movs	r2, #2
 8007184:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007186:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800718a:	4619      	mov	r1, r3
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f851 	bl	8007234 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007192:	e023      	b.n	80071dc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800719c:	2b00      	cmp	r3, #0
 800719e:	d009      	beq.n	80071b4 <HAL_UART_IRQHandler+0x524>
 80071a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d003      	beq.n	80071b4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fb9f 	bl	80078f0 <UART_Transmit_IT>
    return;
 80071b2:	e014      	b.n	80071de <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80071b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00e      	beq.n	80071de <HAL_UART_IRQHandler+0x54e>
 80071c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d008      	beq.n	80071de <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fbdf 	bl	8007990 <UART_EndTransmit_IT>
    return;
 80071d2:	e004      	b.n	80071de <HAL_UART_IRQHandler+0x54e>
    return;
 80071d4:	bf00      	nop
 80071d6:	e002      	b.n	80071de <HAL_UART_IRQHandler+0x54e>
      return;
 80071d8:	bf00      	nop
 80071da:	e000      	b.n	80071de <HAL_UART_IRQHandler+0x54e>
      return;
 80071dc:	bf00      	nop
  }
}
 80071de:	37e8      	adds	r7, #232	@ 0xe8
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	460b      	mov	r3, r1
 800723e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8007254:	2300      	movs	r3, #0
 8007256:	60fb      	str	r3, [r7, #12]
 8007258:	2300      	movs	r3, #0
 800725a:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007262:	b2db      	uxtb	r3, r3
 8007264:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800726c:	b2db      	uxtb	r3, r3
 800726e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	b2da      	uxtb	r2, r3
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	b2db      	uxtb	r3, r3
 8007278:	4313      	orrs	r3, r2
 800727a:	b2db      	uxtb	r3, r3
}
 800727c:	4618      	mov	r0, r3
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b09c      	sub	sp, #112	@ 0x70
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007294:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d172      	bne.n	800738a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80072a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072a6:	2200      	movs	r2, #0
 80072a8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	330c      	adds	r3, #12
 80072b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072b4:	e853 3f00 	ldrex	r3, [r3]
 80072b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80072ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	330c      	adds	r3, #12
 80072c8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80072ca:	65ba      	str	r2, [r7, #88]	@ 0x58
 80072cc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80072d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80072d2:	e841 2300 	strex	r3, r2, [r1]
 80072d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80072d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1e5      	bne.n	80072aa <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	3314      	adds	r3, #20
 80072e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072e8:	e853 3f00 	ldrex	r3, [r3]
 80072ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072f0:	f023 0301 	bic.w	r3, r3, #1
 80072f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80072f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	3314      	adds	r3, #20
 80072fc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80072fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8007300:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007302:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007304:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007306:	e841 2300 	strex	r3, r2, [r1]
 800730a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800730c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1e5      	bne.n	80072de <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007312:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	3314      	adds	r3, #20
 8007318:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731c:	e853 3f00 	ldrex	r3, [r3]
 8007320:	623b      	str	r3, [r7, #32]
   return(result);
 8007322:	6a3b      	ldr	r3, [r7, #32]
 8007324:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007328:	663b      	str	r3, [r7, #96]	@ 0x60
 800732a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	3314      	adds	r3, #20
 8007330:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007332:	633a      	str	r2, [r7, #48]	@ 0x30
 8007334:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007336:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007338:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800733a:	e841 2300 	strex	r3, r2, [r1]
 800733e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1e5      	bne.n	8007312 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007346:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007348:	2220      	movs	r2, #32
 800734a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800734e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007352:	2b01      	cmp	r3, #1
 8007354:	d119      	bne.n	800738a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007356:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	330c      	adds	r3, #12
 800735c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	e853 3f00 	ldrex	r3, [r3]
 8007364:	60fb      	str	r3, [r7, #12]
   return(result);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f023 0310 	bic.w	r3, r3, #16
 800736c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800736e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	330c      	adds	r3, #12
 8007374:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007376:	61fa      	str	r2, [r7, #28]
 8007378:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737a:	69b9      	ldr	r1, [r7, #24]
 800737c:	69fa      	ldr	r2, [r7, #28]
 800737e:	e841 2300 	strex	r3, r2, [r1]
 8007382:	617b      	str	r3, [r7, #20]
   return(result);
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1e5      	bne.n	8007356 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800738a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800738c:	2200      	movs	r2, #0
 800738e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007390:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007394:	2b01      	cmp	r3, #1
 8007396:	d106      	bne.n	80073a6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007398:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800739a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800739c:	4619      	mov	r1, r3
 800739e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80073a0:	f7ff ff48 	bl	8007234 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80073a4:	e002      	b.n	80073ac <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80073a6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80073a8:	f7fa fc7c 	bl	8001ca4 <HAL_UART_RxCpltCallback>
}
 80073ac:	bf00      	nop
 80073ae:	3770      	adds	r7, #112	@ 0x70
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2201      	movs	r2, #1
 80073c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d108      	bne.n	80073e2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80073d4:	085b      	lsrs	r3, r3, #1
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	4619      	mov	r1, r3
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f7ff ff2a 	bl	8007234 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80073e0:	e002      	b.n	80073e8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f7ff ff08 	bl	80071f8 <HAL_UART_RxHalfCpltCallback>
}
 80073e8:	bf00      	nop
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80073f8:	2300      	movs	r3, #0
 80073fa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007400:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	695b      	ldr	r3, [r3, #20]
 8007408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800740c:	2b80      	cmp	r3, #128	@ 0x80
 800740e:	bf0c      	ite	eq
 8007410:	2301      	moveq	r3, #1
 8007412:	2300      	movne	r3, #0
 8007414:	b2db      	uxtb	r3, r3
 8007416:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800741e:	b2db      	uxtb	r3, r3
 8007420:	2b21      	cmp	r3, #33	@ 0x21
 8007422:	d108      	bne.n	8007436 <UART_DMAError+0x46>
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d005      	beq.n	8007436 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	2200      	movs	r2, #0
 800742e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007430:	68b8      	ldr	r0, [r7, #8]
 8007432:	f000 f961 	bl	80076f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007440:	2b40      	cmp	r3, #64	@ 0x40
 8007442:	bf0c      	ite	eq
 8007444:	2301      	moveq	r3, #1
 8007446:	2300      	movne	r3, #0
 8007448:	b2db      	uxtb	r3, r3
 800744a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007452:	b2db      	uxtb	r3, r3
 8007454:	2b22      	cmp	r3, #34	@ 0x22
 8007456:	d108      	bne.n	800746a <UART_DMAError+0x7a>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d005      	beq.n	800746a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	2200      	movs	r2, #0
 8007462:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007464:	68b8      	ldr	r0, [r7, #8]
 8007466:	f000 f96f 	bl	8007748 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800746e:	f043 0210 	orr.w	r2, r3, #16
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007476:	68b8      	ldr	r0, [r7, #8]
 8007478:	f7ff fec8 	bl	800720c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800747c:	bf00      	nop
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	603b      	str	r3, [r7, #0]
 8007490:	4613      	mov	r3, r2
 8007492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007494:	e03b      	b.n	800750e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800749c:	d037      	beq.n	800750e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800749e:	f7fc fb95 	bl	8003bcc <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	6a3a      	ldr	r2, [r7, #32]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d302      	bcc.n	80074b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80074ae:	6a3b      	ldr	r3, [r7, #32]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d101      	bne.n	80074b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e03a      	b.n	800752e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	f003 0304 	and.w	r3, r3, #4
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d023      	beq.n	800750e <UART_WaitOnFlagUntilTimeout+0x8a>
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	2b80      	cmp	r3, #128	@ 0x80
 80074ca:	d020      	beq.n	800750e <UART_WaitOnFlagUntilTimeout+0x8a>
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	2b40      	cmp	r3, #64	@ 0x40
 80074d0:	d01d      	beq.n	800750e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 0308 	and.w	r3, r3, #8
 80074dc:	2b08      	cmp	r3, #8
 80074de:	d116      	bne.n	800750e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80074e0:	2300      	movs	r3, #0
 80074e2:	617b      	str	r3, [r7, #20]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	617b      	str	r3, [r7, #20]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	617b      	str	r3, [r7, #20]
 80074f4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f000 f926 	bl	8007748 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2208      	movs	r2, #8
 8007500:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e00f      	b.n	800752e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	4013      	ands	r3, r2
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	429a      	cmp	r2, r3
 800751c:	bf0c      	ite	eq
 800751e:	2301      	moveq	r3, #1
 8007520:	2300      	movne	r3, #0
 8007522:	b2db      	uxtb	r3, r3
 8007524:	461a      	mov	r2, r3
 8007526:	79fb      	ldrb	r3, [r7, #7]
 8007528:	429a      	cmp	r2, r3
 800752a:	d0b4      	beq.n	8007496 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3718      	adds	r7, #24
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007536:	b480      	push	{r7}
 8007538:	b085      	sub	sp, #20
 800753a:	af00      	add	r7, sp, #0
 800753c:	60f8      	str	r0, [r7, #12]
 800753e:	60b9      	str	r1, [r7, #8]
 8007540:	4613      	mov	r3, r2
 8007542:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	88fa      	ldrh	r2, [r7, #6]
 800754e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	88fa      	ldrh	r2, [r7, #6]
 8007554:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2222      	movs	r2, #34	@ 0x22
 8007560:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d007      	beq.n	800757c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68da      	ldr	r2, [r3, #12]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800757a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	695a      	ldr	r2, [r3, #20]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f042 0201 	orr.w	r2, r2, #1
 800758a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68da      	ldr	r2, [r3, #12]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f042 0220 	orr.w	r2, r2, #32
 800759a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3714      	adds	r7, #20
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr
	...

080075ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b098      	sub	sp, #96	@ 0x60
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	4613      	mov	r3, r2
 80075b8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	88fa      	ldrh	r2, [r7, #6]
 80075c4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2222      	movs	r2, #34	@ 0x22
 80075d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075d8:	4a44      	ldr	r2, [pc, #272]	@ (80076ec <UART_Start_Receive_DMA+0x140>)
 80075da:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075e0:	4a43      	ldr	r2, [pc, #268]	@ (80076f0 <UART_Start_Receive_DMA+0x144>)
 80075e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075e8:	4a42      	ldr	r2, [pc, #264]	@ (80076f4 <UART_Start_Receive_DMA+0x148>)
 80075ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075f0:	2200      	movs	r2, #0
 80075f2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80075f4:	f107 0308 	add.w	r3, r7, #8
 80075f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	3304      	adds	r3, #4
 8007604:	4619      	mov	r1, r3
 8007606:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	88fb      	ldrh	r3, [r7, #6]
 800760c:	f7fc ff40 	bl	8004490 <HAL_DMA_Start_IT>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d008      	beq.n	8007628 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2210      	movs	r2, #16
 800761a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2220      	movs	r2, #32
 8007620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e05d      	b.n	80076e4 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007628:	2300      	movs	r3, #0
 800762a:	613b      	str	r3, [r7, #16]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	613b      	str	r3, [r7, #16]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	613b      	str	r3, [r7, #16]
 800763c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d019      	beq.n	800767a <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	330c      	adds	r3, #12
 800764c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007650:	e853 3f00 	ldrex	r3, [r3]
 8007654:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007658:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800765c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	330c      	adds	r3, #12
 8007664:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007666:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007668:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800766c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800766e:	e841 2300 	strex	r3, r2, [r1]
 8007672:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1e5      	bne.n	8007646 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	3314      	adds	r3, #20
 8007680:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007684:	e853 3f00 	ldrex	r3, [r3]
 8007688:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800768a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800768c:	f043 0301 	orr.w	r3, r3, #1
 8007690:	657b      	str	r3, [r7, #84]	@ 0x54
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3314      	adds	r3, #20
 8007698:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800769a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800769c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80076a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80076a2:	e841 2300 	strex	r3, r2, [r1]
 80076a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1e5      	bne.n	800767a <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	3314      	adds	r3, #20
 80076b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	e853 3f00 	ldrex	r3, [r3]
 80076bc:	617b      	str	r3, [r7, #20]
   return(result);
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	3314      	adds	r3, #20
 80076cc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80076ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80076d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d2:	6a39      	ldr	r1, [r7, #32]
 80076d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076d6:	e841 2300 	strex	r3, r2, [r1]
 80076da:	61fb      	str	r3, [r7, #28]
   return(result);
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1e5      	bne.n	80076ae <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3760      	adds	r7, #96	@ 0x60
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	08007289 	.word	0x08007289
 80076f0:	080073b5 	.word	0x080073b5
 80076f4:	080073f1 	.word	0x080073f1

080076f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b089      	sub	sp, #36	@ 0x24
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	330c      	adds	r3, #12
 8007706:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	e853 3f00 	ldrex	r3, [r3]
 800770e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007716:	61fb      	str	r3, [r7, #28]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	330c      	adds	r3, #12
 800771e:	69fa      	ldr	r2, [r7, #28]
 8007720:	61ba      	str	r2, [r7, #24]
 8007722:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007724:	6979      	ldr	r1, [r7, #20]
 8007726:	69ba      	ldr	r2, [r7, #24]
 8007728:	e841 2300 	strex	r3, r2, [r1]
 800772c:	613b      	str	r3, [r7, #16]
   return(result);
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1e5      	bne.n	8007700 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2220      	movs	r2, #32
 8007738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800773c:	bf00      	nop
 800773e:	3724      	adds	r7, #36	@ 0x24
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007748:	b480      	push	{r7}
 800774a:	b095      	sub	sp, #84	@ 0x54
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	330c      	adds	r3, #12
 8007756:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800775a:	e853 3f00 	ldrex	r3, [r3]
 800775e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007762:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	330c      	adds	r3, #12
 800776e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007770:	643a      	str	r2, [r7, #64]	@ 0x40
 8007772:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007774:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007776:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007778:	e841 2300 	strex	r3, r2, [r1]
 800777c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800777e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007780:	2b00      	cmp	r3, #0
 8007782:	d1e5      	bne.n	8007750 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	3314      	adds	r3, #20
 800778a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778c:	6a3b      	ldr	r3, [r7, #32]
 800778e:	e853 3f00 	ldrex	r3, [r3]
 8007792:	61fb      	str	r3, [r7, #28]
   return(result);
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	f023 0301 	bic.w	r3, r3, #1
 800779a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	3314      	adds	r3, #20
 80077a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077ac:	e841 2300 	strex	r3, r2, [r1]
 80077b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1e5      	bne.n	8007784 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d119      	bne.n	80077f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	330c      	adds	r3, #12
 80077c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	e853 3f00 	ldrex	r3, [r3]
 80077ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	f023 0310 	bic.w	r3, r3, #16
 80077d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	330c      	adds	r3, #12
 80077de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077e0:	61ba      	str	r2, [r7, #24]
 80077e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e4:	6979      	ldr	r1, [r7, #20]
 80077e6:	69ba      	ldr	r2, [r7, #24]
 80077e8:	e841 2300 	strex	r3, r2, [r1]
 80077ec:	613b      	str	r3, [r7, #16]
   return(result);
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1e5      	bne.n	80077c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2220      	movs	r2, #32
 80077f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007802:	bf00      	nop
 8007804:	3754      	adds	r7, #84	@ 0x54
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b084      	sub	sp, #16
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800781a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f7ff fcf2 	bl	800720c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007828:	bf00      	nop
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800783c:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007842:	2200      	movs	r2, #0
 8007844:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800784a:	2b00      	cmp	r3, #0
 800784c:	d004      	beq.n	8007858 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007854:	2b00      	cmp	r3, #0
 8007856:	d117      	bne.n	8007888 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2200      	movs	r2, #0
 8007862:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2220      	movs	r2, #32
 800786e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2220      	movs	r2, #32
 8007876:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f7ff fccd 	bl	8007220 <HAL_UART_AbortCpltCallback>
 8007886:	e000      	b.n	800788a <UART_DMATxAbortCallback+0x5a>
      return;
 8007888:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800789c:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078a2:	2200      	movs	r2, #0
 80078a4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d004      	beq.n	80078b8 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d117      	bne.n	80078e8 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2220      	movs	r2, #32
 80078ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2220      	movs	r2, #32
 80078d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2200      	movs	r2, #0
 80078de:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f7ff fc9d 	bl	8007220 <HAL_UART_AbortCpltCallback>
 80078e6:	e000      	b.n	80078ea <UART_DMARxAbortCallback+0x5a>
      return;
 80078e8:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	2b21      	cmp	r3, #33	@ 0x21
 8007902:	d13e      	bne.n	8007982 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800790c:	d114      	bne.n	8007938 <UART_Transmit_IT+0x48>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d110      	bne.n	8007938 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	881b      	ldrh	r3, [r3, #0]
 8007920:	461a      	mov	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800792a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a1b      	ldr	r3, [r3, #32]
 8007930:	1c9a      	adds	r2, r3, #2
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	621a      	str	r2, [r3, #32]
 8007936:	e008      	b.n	800794a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a1b      	ldr	r3, [r3, #32]
 800793c:	1c59      	adds	r1, r3, #1
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	6211      	str	r1, [r2, #32]
 8007942:	781a      	ldrb	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800794e:	b29b      	uxth	r3, r3
 8007950:	3b01      	subs	r3, #1
 8007952:	b29b      	uxth	r3, r3
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	4619      	mov	r1, r3
 8007958:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800795a:	2b00      	cmp	r3, #0
 800795c:	d10f      	bne.n	800797e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68da      	ldr	r2, [r3, #12]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800796c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68da      	ldr	r2, [r3, #12]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800797c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800797e:	2300      	movs	r3, #0
 8007980:	e000      	b.n	8007984 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007982:	2302      	movs	r3, #2
  }
}
 8007984:	4618      	mov	r0, r3
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	68da      	ldr	r2, [r3, #12]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2220      	movs	r2, #32
 80079ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f7ff fc17 	bl	80071e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b08c      	sub	sp, #48	@ 0x30
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80079c8:	2300      	movs	r3, #0
 80079ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80079cc:	2300      	movs	r3, #0
 80079ce:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	2b22      	cmp	r3, #34	@ 0x22
 80079da:	f040 80aa 	bne.w	8007b32 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079e6:	d115      	bne.n	8007a14 <UART_Receive_IT+0x54>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d111      	bne.n	8007a14 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a06:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a0c:	1c9a      	adds	r2, r3, #2
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	629a      	str	r2, [r3, #40]	@ 0x28
 8007a12:	e024      	b.n	8007a5e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a22:	d007      	beq.n	8007a34 <UART_Receive_IT+0x74>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d10a      	bne.n	8007a42 <UART_Receive_IT+0x82>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d106      	bne.n	8007a42 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	b2da      	uxtb	r2, r3
 8007a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a3e:	701a      	strb	r2, [r3, #0]
 8007a40:	e008      	b.n	8007a54 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a4e:	b2da      	uxtb	r2, r3
 8007a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a52:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a58:	1c5a      	adds	r2, r3, #1
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	3b01      	subs	r3, #1
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d15d      	bne.n	8007b2e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68da      	ldr	r2, [r3, #12]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f022 0220 	bic.w	r2, r2, #32
 8007a80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68da      	ldr	r2, [r3, #12]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007a90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	695a      	ldr	r2, [r3, #20]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f022 0201 	bic.w	r2, r2, #1
 8007aa0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2220      	movs	r2, #32
 8007aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d135      	bne.n	8007b24 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	330c      	adds	r3, #12
 8007ac4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	e853 3f00 	ldrex	r3, [r3]
 8007acc:	613b      	str	r3, [r7, #16]
   return(result);
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	f023 0310 	bic.w	r3, r3, #16
 8007ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	330c      	adds	r3, #12
 8007adc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ade:	623a      	str	r2, [r7, #32]
 8007ae0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae2:	69f9      	ldr	r1, [r7, #28]
 8007ae4:	6a3a      	ldr	r2, [r7, #32]
 8007ae6:	e841 2300 	strex	r3, r2, [r1]
 8007aea:	61bb      	str	r3, [r7, #24]
   return(result);
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1e5      	bne.n	8007abe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 0310 	and.w	r3, r3, #16
 8007afc:	2b10      	cmp	r3, #16
 8007afe:	d10a      	bne.n	8007b16 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b00:	2300      	movs	r3, #0
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	60fb      	str	r3, [r7, #12]
 8007b14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f7ff fb89 	bl	8007234 <HAL_UARTEx_RxEventCallback>
 8007b22:	e002      	b.n	8007b2a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f7fa f8bd 	bl	8001ca4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	e002      	b.n	8007b34 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	e000      	b.n	8007b34 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007b32:	2302      	movs	r3, #2
  }
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3730      	adds	r7, #48	@ 0x30
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b40:	b0c0      	sub	sp, #256	@ 0x100
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b58:	68d9      	ldr	r1, [r3, #12]
 8007b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	ea40 0301 	orr.w	r3, r0, r1
 8007b64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b6a:	689a      	ldr	r2, [r3, #8]
 8007b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	431a      	orrs	r2, r3
 8007b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	431a      	orrs	r2, r3
 8007b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b80:	69db      	ldr	r3, [r3, #28]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007b94:	f021 010c 	bic.w	r1, r1, #12
 8007b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007ba2:	430b      	orrs	r3, r1
 8007ba4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bb6:	6999      	ldr	r1, [r3, #24]
 8007bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	ea40 0301 	orr.w	r3, r0, r1
 8007bc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	4b8f      	ldr	r3, [pc, #572]	@ (8007e08 <UART_SetConfig+0x2cc>)
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d005      	beq.n	8007bdc <UART_SetConfig+0xa0>
 8007bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	4b8d      	ldr	r3, [pc, #564]	@ (8007e0c <UART_SetConfig+0x2d0>)
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d104      	bne.n	8007be6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007bdc:	f7fd fab0 	bl	8005140 <HAL_RCC_GetPCLK2Freq>
 8007be0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007be4:	e003      	b.n	8007bee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007be6:	f7fd fa97 	bl	8005118 <HAL_RCC_GetPCLK1Freq>
 8007bea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bf2:	69db      	ldr	r3, [r3, #28]
 8007bf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bf8:	f040 810c 	bne.w	8007e14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007bfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c00:	2200      	movs	r2, #0
 8007c02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c06:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007c0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007c0e:	4622      	mov	r2, r4
 8007c10:	462b      	mov	r3, r5
 8007c12:	1891      	adds	r1, r2, r2
 8007c14:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007c16:	415b      	adcs	r3, r3
 8007c18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007c1e:	4621      	mov	r1, r4
 8007c20:	eb12 0801 	adds.w	r8, r2, r1
 8007c24:	4629      	mov	r1, r5
 8007c26:	eb43 0901 	adc.w	r9, r3, r1
 8007c2a:	f04f 0200 	mov.w	r2, #0
 8007c2e:	f04f 0300 	mov.w	r3, #0
 8007c32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c3e:	4690      	mov	r8, r2
 8007c40:	4699      	mov	r9, r3
 8007c42:	4623      	mov	r3, r4
 8007c44:	eb18 0303 	adds.w	r3, r8, r3
 8007c48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007c4c:	462b      	mov	r3, r5
 8007c4e:	eb49 0303 	adc.w	r3, r9, r3
 8007c52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c62:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007c66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	18db      	adds	r3, r3, r3
 8007c6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c70:	4613      	mov	r3, r2
 8007c72:	eb42 0303 	adc.w	r3, r2, r3
 8007c76:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007c7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007c80:	f7f9 f822 	bl	8000cc8 <__aeabi_uldivmod>
 8007c84:	4602      	mov	r2, r0
 8007c86:	460b      	mov	r3, r1
 8007c88:	4b61      	ldr	r3, [pc, #388]	@ (8007e10 <UART_SetConfig+0x2d4>)
 8007c8a:	fba3 2302 	umull	r2, r3, r3, r2
 8007c8e:	095b      	lsrs	r3, r3, #5
 8007c90:	011c      	lsls	r4, r3, #4
 8007c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c96:	2200      	movs	r2, #0
 8007c98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c9c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007ca0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007ca4:	4642      	mov	r2, r8
 8007ca6:	464b      	mov	r3, r9
 8007ca8:	1891      	adds	r1, r2, r2
 8007caa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007cac:	415b      	adcs	r3, r3
 8007cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007cb4:	4641      	mov	r1, r8
 8007cb6:	eb12 0a01 	adds.w	sl, r2, r1
 8007cba:	4649      	mov	r1, r9
 8007cbc:	eb43 0b01 	adc.w	fp, r3, r1
 8007cc0:	f04f 0200 	mov.w	r2, #0
 8007cc4:	f04f 0300 	mov.w	r3, #0
 8007cc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ccc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007cd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cd4:	4692      	mov	sl, r2
 8007cd6:	469b      	mov	fp, r3
 8007cd8:	4643      	mov	r3, r8
 8007cda:	eb1a 0303 	adds.w	r3, sl, r3
 8007cde:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ce2:	464b      	mov	r3, r9
 8007ce4:	eb4b 0303 	adc.w	r3, fp, r3
 8007ce8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007cf8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007cfc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007d00:	460b      	mov	r3, r1
 8007d02:	18db      	adds	r3, r3, r3
 8007d04:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d06:	4613      	mov	r3, r2
 8007d08:	eb42 0303 	adc.w	r3, r2, r3
 8007d0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007d12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007d16:	f7f8 ffd7 	bl	8000cc8 <__aeabi_uldivmod>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	4611      	mov	r1, r2
 8007d20:	4b3b      	ldr	r3, [pc, #236]	@ (8007e10 <UART_SetConfig+0x2d4>)
 8007d22:	fba3 2301 	umull	r2, r3, r3, r1
 8007d26:	095b      	lsrs	r3, r3, #5
 8007d28:	2264      	movs	r2, #100	@ 0x64
 8007d2a:	fb02 f303 	mul.w	r3, r2, r3
 8007d2e:	1acb      	subs	r3, r1, r3
 8007d30:	00db      	lsls	r3, r3, #3
 8007d32:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007d36:	4b36      	ldr	r3, [pc, #216]	@ (8007e10 <UART_SetConfig+0x2d4>)
 8007d38:	fba3 2302 	umull	r2, r3, r3, r2
 8007d3c:	095b      	lsrs	r3, r3, #5
 8007d3e:	005b      	lsls	r3, r3, #1
 8007d40:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007d44:	441c      	add	r4, r3
 8007d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d50:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007d54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007d58:	4642      	mov	r2, r8
 8007d5a:	464b      	mov	r3, r9
 8007d5c:	1891      	adds	r1, r2, r2
 8007d5e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007d60:	415b      	adcs	r3, r3
 8007d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007d68:	4641      	mov	r1, r8
 8007d6a:	1851      	adds	r1, r2, r1
 8007d6c:	6339      	str	r1, [r7, #48]	@ 0x30
 8007d6e:	4649      	mov	r1, r9
 8007d70:	414b      	adcs	r3, r1
 8007d72:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d74:	f04f 0200 	mov.w	r2, #0
 8007d78:	f04f 0300 	mov.w	r3, #0
 8007d7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007d80:	4659      	mov	r1, fp
 8007d82:	00cb      	lsls	r3, r1, #3
 8007d84:	4651      	mov	r1, sl
 8007d86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d8a:	4651      	mov	r1, sl
 8007d8c:	00ca      	lsls	r2, r1, #3
 8007d8e:	4610      	mov	r0, r2
 8007d90:	4619      	mov	r1, r3
 8007d92:	4603      	mov	r3, r0
 8007d94:	4642      	mov	r2, r8
 8007d96:	189b      	adds	r3, r3, r2
 8007d98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d9c:	464b      	mov	r3, r9
 8007d9e:	460a      	mov	r2, r1
 8007da0:	eb42 0303 	adc.w	r3, r2, r3
 8007da4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007db4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007db8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	18db      	adds	r3, r3, r3
 8007dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	eb42 0303 	adc.w	r3, r2, r3
 8007dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007dce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007dd2:	f7f8 ff79 	bl	8000cc8 <__aeabi_uldivmod>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	460b      	mov	r3, r1
 8007dda:	4b0d      	ldr	r3, [pc, #52]	@ (8007e10 <UART_SetConfig+0x2d4>)
 8007ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8007de0:	095b      	lsrs	r3, r3, #5
 8007de2:	2164      	movs	r1, #100	@ 0x64
 8007de4:	fb01 f303 	mul.w	r3, r1, r3
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	00db      	lsls	r3, r3, #3
 8007dec:	3332      	adds	r3, #50	@ 0x32
 8007dee:	4a08      	ldr	r2, [pc, #32]	@ (8007e10 <UART_SetConfig+0x2d4>)
 8007df0:	fba2 2303 	umull	r2, r3, r2, r3
 8007df4:	095b      	lsrs	r3, r3, #5
 8007df6:	f003 0207 	and.w	r2, r3, #7
 8007dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4422      	add	r2, r4
 8007e02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e04:	e106      	b.n	8008014 <UART_SetConfig+0x4d8>
 8007e06:	bf00      	nop
 8007e08:	40011000 	.word	0x40011000
 8007e0c:	40011400 	.word	0x40011400
 8007e10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007e1e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007e22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007e26:	4642      	mov	r2, r8
 8007e28:	464b      	mov	r3, r9
 8007e2a:	1891      	adds	r1, r2, r2
 8007e2c:	6239      	str	r1, [r7, #32]
 8007e2e:	415b      	adcs	r3, r3
 8007e30:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e36:	4641      	mov	r1, r8
 8007e38:	1854      	adds	r4, r2, r1
 8007e3a:	4649      	mov	r1, r9
 8007e3c:	eb43 0501 	adc.w	r5, r3, r1
 8007e40:	f04f 0200 	mov.w	r2, #0
 8007e44:	f04f 0300 	mov.w	r3, #0
 8007e48:	00eb      	lsls	r3, r5, #3
 8007e4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e4e:	00e2      	lsls	r2, r4, #3
 8007e50:	4614      	mov	r4, r2
 8007e52:	461d      	mov	r5, r3
 8007e54:	4643      	mov	r3, r8
 8007e56:	18e3      	adds	r3, r4, r3
 8007e58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e5c:	464b      	mov	r3, r9
 8007e5e:	eb45 0303 	adc.w	r3, r5, r3
 8007e62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e72:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007e76:	f04f 0200 	mov.w	r2, #0
 8007e7a:	f04f 0300 	mov.w	r3, #0
 8007e7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007e82:	4629      	mov	r1, r5
 8007e84:	008b      	lsls	r3, r1, #2
 8007e86:	4621      	mov	r1, r4
 8007e88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e8c:	4621      	mov	r1, r4
 8007e8e:	008a      	lsls	r2, r1, #2
 8007e90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007e94:	f7f8 ff18 	bl	8000cc8 <__aeabi_uldivmod>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	4b60      	ldr	r3, [pc, #384]	@ (8008020 <UART_SetConfig+0x4e4>)
 8007e9e:	fba3 2302 	umull	r2, r3, r3, r2
 8007ea2:	095b      	lsrs	r3, r3, #5
 8007ea4:	011c      	lsls	r4, r3, #4
 8007ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007eb0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007eb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007eb8:	4642      	mov	r2, r8
 8007eba:	464b      	mov	r3, r9
 8007ebc:	1891      	adds	r1, r2, r2
 8007ebe:	61b9      	str	r1, [r7, #24]
 8007ec0:	415b      	adcs	r3, r3
 8007ec2:	61fb      	str	r3, [r7, #28]
 8007ec4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ec8:	4641      	mov	r1, r8
 8007eca:	1851      	adds	r1, r2, r1
 8007ecc:	6139      	str	r1, [r7, #16]
 8007ece:	4649      	mov	r1, r9
 8007ed0:	414b      	adcs	r3, r1
 8007ed2:	617b      	str	r3, [r7, #20]
 8007ed4:	f04f 0200 	mov.w	r2, #0
 8007ed8:	f04f 0300 	mov.w	r3, #0
 8007edc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ee0:	4659      	mov	r1, fp
 8007ee2:	00cb      	lsls	r3, r1, #3
 8007ee4:	4651      	mov	r1, sl
 8007ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007eea:	4651      	mov	r1, sl
 8007eec:	00ca      	lsls	r2, r1, #3
 8007eee:	4610      	mov	r0, r2
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	4642      	mov	r2, r8
 8007ef6:	189b      	adds	r3, r3, r2
 8007ef8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007efc:	464b      	mov	r3, r9
 8007efe:	460a      	mov	r2, r1
 8007f00:	eb42 0303 	adc.w	r3, r2, r3
 8007f04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007f12:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007f14:	f04f 0200 	mov.w	r2, #0
 8007f18:	f04f 0300 	mov.w	r3, #0
 8007f1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007f20:	4649      	mov	r1, r9
 8007f22:	008b      	lsls	r3, r1, #2
 8007f24:	4641      	mov	r1, r8
 8007f26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f2a:	4641      	mov	r1, r8
 8007f2c:	008a      	lsls	r2, r1, #2
 8007f2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007f32:	f7f8 fec9 	bl	8000cc8 <__aeabi_uldivmod>
 8007f36:	4602      	mov	r2, r0
 8007f38:	460b      	mov	r3, r1
 8007f3a:	4611      	mov	r1, r2
 8007f3c:	4b38      	ldr	r3, [pc, #224]	@ (8008020 <UART_SetConfig+0x4e4>)
 8007f3e:	fba3 2301 	umull	r2, r3, r3, r1
 8007f42:	095b      	lsrs	r3, r3, #5
 8007f44:	2264      	movs	r2, #100	@ 0x64
 8007f46:	fb02 f303 	mul.w	r3, r2, r3
 8007f4a:	1acb      	subs	r3, r1, r3
 8007f4c:	011b      	lsls	r3, r3, #4
 8007f4e:	3332      	adds	r3, #50	@ 0x32
 8007f50:	4a33      	ldr	r2, [pc, #204]	@ (8008020 <UART_SetConfig+0x4e4>)
 8007f52:	fba2 2303 	umull	r2, r3, r2, r3
 8007f56:	095b      	lsrs	r3, r3, #5
 8007f58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007f5c:	441c      	add	r4, r3
 8007f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f62:	2200      	movs	r2, #0
 8007f64:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f66:	677a      	str	r2, [r7, #116]	@ 0x74
 8007f68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007f6c:	4642      	mov	r2, r8
 8007f6e:	464b      	mov	r3, r9
 8007f70:	1891      	adds	r1, r2, r2
 8007f72:	60b9      	str	r1, [r7, #8]
 8007f74:	415b      	adcs	r3, r3
 8007f76:	60fb      	str	r3, [r7, #12]
 8007f78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f7c:	4641      	mov	r1, r8
 8007f7e:	1851      	adds	r1, r2, r1
 8007f80:	6039      	str	r1, [r7, #0]
 8007f82:	4649      	mov	r1, r9
 8007f84:	414b      	adcs	r3, r1
 8007f86:	607b      	str	r3, [r7, #4]
 8007f88:	f04f 0200 	mov.w	r2, #0
 8007f8c:	f04f 0300 	mov.w	r3, #0
 8007f90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007f94:	4659      	mov	r1, fp
 8007f96:	00cb      	lsls	r3, r1, #3
 8007f98:	4651      	mov	r1, sl
 8007f9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f9e:	4651      	mov	r1, sl
 8007fa0:	00ca      	lsls	r2, r1, #3
 8007fa2:	4610      	mov	r0, r2
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	4642      	mov	r2, r8
 8007faa:	189b      	adds	r3, r3, r2
 8007fac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007fae:	464b      	mov	r3, r9
 8007fb0:	460a      	mov	r2, r1
 8007fb2:	eb42 0303 	adc.w	r3, r2, r3
 8007fb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8007fc2:	667a      	str	r2, [r7, #100]	@ 0x64
 8007fc4:	f04f 0200 	mov.w	r2, #0
 8007fc8:	f04f 0300 	mov.w	r3, #0
 8007fcc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007fd0:	4649      	mov	r1, r9
 8007fd2:	008b      	lsls	r3, r1, #2
 8007fd4:	4641      	mov	r1, r8
 8007fd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fda:	4641      	mov	r1, r8
 8007fdc:	008a      	lsls	r2, r1, #2
 8007fde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007fe2:	f7f8 fe71 	bl	8000cc8 <__aeabi_uldivmod>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	460b      	mov	r3, r1
 8007fea:	4b0d      	ldr	r3, [pc, #52]	@ (8008020 <UART_SetConfig+0x4e4>)
 8007fec:	fba3 1302 	umull	r1, r3, r3, r2
 8007ff0:	095b      	lsrs	r3, r3, #5
 8007ff2:	2164      	movs	r1, #100	@ 0x64
 8007ff4:	fb01 f303 	mul.w	r3, r1, r3
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	011b      	lsls	r3, r3, #4
 8007ffc:	3332      	adds	r3, #50	@ 0x32
 8007ffe:	4a08      	ldr	r2, [pc, #32]	@ (8008020 <UART_SetConfig+0x4e4>)
 8008000:	fba2 2303 	umull	r2, r3, r2, r3
 8008004:	095b      	lsrs	r3, r3, #5
 8008006:	f003 020f 	and.w	r2, r3, #15
 800800a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4422      	add	r2, r4
 8008012:	609a      	str	r2, [r3, #8]
}
 8008014:	bf00      	nop
 8008016:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800801a:	46bd      	mov	sp, r7
 800801c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008020:	51eb851f 	.word	0x51eb851f

08008024 <atof>:
 8008024:	2100      	movs	r1, #0
 8008026:	f000 be09 	b.w	8008c3c <strtod>

0800802a <sulp>:
 800802a:	b570      	push	{r4, r5, r6, lr}
 800802c:	4604      	mov	r4, r0
 800802e:	460d      	mov	r5, r1
 8008030:	ec45 4b10 	vmov	d0, r4, r5
 8008034:	4616      	mov	r6, r2
 8008036:	f003 fdd3 	bl	800bbe0 <__ulp>
 800803a:	ec51 0b10 	vmov	r0, r1, d0
 800803e:	b17e      	cbz	r6, 8008060 <sulp+0x36>
 8008040:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008044:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008048:	2b00      	cmp	r3, #0
 800804a:	dd09      	ble.n	8008060 <sulp+0x36>
 800804c:	051b      	lsls	r3, r3, #20
 800804e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008052:	2400      	movs	r4, #0
 8008054:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008058:	4622      	mov	r2, r4
 800805a:	462b      	mov	r3, r5
 800805c:	f7f8 faec 	bl	8000638 <__aeabi_dmul>
 8008060:	ec41 0b10 	vmov	d0, r0, r1
 8008064:	bd70      	pop	{r4, r5, r6, pc}
	...

08008068 <_strtod_l>:
 8008068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800806c:	b09f      	sub	sp, #124	@ 0x7c
 800806e:	460c      	mov	r4, r1
 8008070:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008072:	2200      	movs	r2, #0
 8008074:	921a      	str	r2, [sp, #104]	@ 0x68
 8008076:	9005      	str	r0, [sp, #20]
 8008078:	f04f 0a00 	mov.w	sl, #0
 800807c:	f04f 0b00 	mov.w	fp, #0
 8008080:	460a      	mov	r2, r1
 8008082:	9219      	str	r2, [sp, #100]	@ 0x64
 8008084:	7811      	ldrb	r1, [r2, #0]
 8008086:	292b      	cmp	r1, #43	@ 0x2b
 8008088:	d04a      	beq.n	8008120 <_strtod_l+0xb8>
 800808a:	d838      	bhi.n	80080fe <_strtod_l+0x96>
 800808c:	290d      	cmp	r1, #13
 800808e:	d832      	bhi.n	80080f6 <_strtod_l+0x8e>
 8008090:	2908      	cmp	r1, #8
 8008092:	d832      	bhi.n	80080fa <_strtod_l+0x92>
 8008094:	2900      	cmp	r1, #0
 8008096:	d03b      	beq.n	8008110 <_strtod_l+0xa8>
 8008098:	2200      	movs	r2, #0
 800809a:	920e      	str	r2, [sp, #56]	@ 0x38
 800809c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800809e:	782a      	ldrb	r2, [r5, #0]
 80080a0:	2a30      	cmp	r2, #48	@ 0x30
 80080a2:	f040 80b2 	bne.w	800820a <_strtod_l+0x1a2>
 80080a6:	786a      	ldrb	r2, [r5, #1]
 80080a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80080ac:	2a58      	cmp	r2, #88	@ 0x58
 80080ae:	d16e      	bne.n	800818e <_strtod_l+0x126>
 80080b0:	9302      	str	r3, [sp, #8]
 80080b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080b4:	9301      	str	r3, [sp, #4]
 80080b6:	ab1a      	add	r3, sp, #104	@ 0x68
 80080b8:	9300      	str	r3, [sp, #0]
 80080ba:	4a8f      	ldr	r2, [pc, #572]	@ (80082f8 <_strtod_l+0x290>)
 80080bc:	9805      	ldr	r0, [sp, #20]
 80080be:	ab1b      	add	r3, sp, #108	@ 0x6c
 80080c0:	a919      	add	r1, sp, #100	@ 0x64
 80080c2:	f002 fe87 	bl	800add4 <__gethex>
 80080c6:	f010 060f 	ands.w	r6, r0, #15
 80080ca:	4604      	mov	r4, r0
 80080cc:	d005      	beq.n	80080da <_strtod_l+0x72>
 80080ce:	2e06      	cmp	r6, #6
 80080d0:	d128      	bne.n	8008124 <_strtod_l+0xbc>
 80080d2:	3501      	adds	r5, #1
 80080d4:	2300      	movs	r3, #0
 80080d6:	9519      	str	r5, [sp, #100]	@ 0x64
 80080d8:	930e      	str	r3, [sp, #56]	@ 0x38
 80080da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f040 858e 	bne.w	8008bfe <_strtod_l+0xb96>
 80080e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080e4:	b1cb      	cbz	r3, 800811a <_strtod_l+0xb2>
 80080e6:	4652      	mov	r2, sl
 80080e8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80080ec:	ec43 2b10 	vmov	d0, r2, r3
 80080f0:	b01f      	add	sp, #124	@ 0x7c
 80080f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080f6:	2920      	cmp	r1, #32
 80080f8:	d1ce      	bne.n	8008098 <_strtod_l+0x30>
 80080fa:	3201      	adds	r2, #1
 80080fc:	e7c1      	b.n	8008082 <_strtod_l+0x1a>
 80080fe:	292d      	cmp	r1, #45	@ 0x2d
 8008100:	d1ca      	bne.n	8008098 <_strtod_l+0x30>
 8008102:	2101      	movs	r1, #1
 8008104:	910e      	str	r1, [sp, #56]	@ 0x38
 8008106:	1c51      	adds	r1, r2, #1
 8008108:	9119      	str	r1, [sp, #100]	@ 0x64
 800810a:	7852      	ldrb	r2, [r2, #1]
 800810c:	2a00      	cmp	r2, #0
 800810e:	d1c5      	bne.n	800809c <_strtod_l+0x34>
 8008110:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008112:	9419      	str	r4, [sp, #100]	@ 0x64
 8008114:	2b00      	cmp	r3, #0
 8008116:	f040 8570 	bne.w	8008bfa <_strtod_l+0xb92>
 800811a:	4652      	mov	r2, sl
 800811c:	465b      	mov	r3, fp
 800811e:	e7e5      	b.n	80080ec <_strtod_l+0x84>
 8008120:	2100      	movs	r1, #0
 8008122:	e7ef      	b.n	8008104 <_strtod_l+0x9c>
 8008124:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008126:	b13a      	cbz	r2, 8008138 <_strtod_l+0xd0>
 8008128:	2135      	movs	r1, #53	@ 0x35
 800812a:	a81c      	add	r0, sp, #112	@ 0x70
 800812c:	f003 fe52 	bl	800bdd4 <__copybits>
 8008130:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008132:	9805      	ldr	r0, [sp, #20]
 8008134:	f003 fa28 	bl	800b588 <_Bfree>
 8008138:	3e01      	subs	r6, #1
 800813a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800813c:	2e04      	cmp	r6, #4
 800813e:	d806      	bhi.n	800814e <_strtod_l+0xe6>
 8008140:	e8df f006 	tbb	[pc, r6]
 8008144:	201d0314 	.word	0x201d0314
 8008148:	14          	.byte	0x14
 8008149:	00          	.byte	0x00
 800814a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800814e:	05e1      	lsls	r1, r4, #23
 8008150:	bf48      	it	mi
 8008152:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008156:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800815a:	0d1b      	lsrs	r3, r3, #20
 800815c:	051b      	lsls	r3, r3, #20
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1bb      	bne.n	80080da <_strtod_l+0x72>
 8008162:	f001 fedf 	bl	8009f24 <__errno>
 8008166:	2322      	movs	r3, #34	@ 0x22
 8008168:	6003      	str	r3, [r0, #0]
 800816a:	e7b6      	b.n	80080da <_strtod_l+0x72>
 800816c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008170:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008174:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008178:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800817c:	e7e7      	b.n	800814e <_strtod_l+0xe6>
 800817e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8008300 <_strtod_l+0x298>
 8008182:	e7e4      	b.n	800814e <_strtod_l+0xe6>
 8008184:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008188:	f04f 3aff 	mov.w	sl, #4294967295
 800818c:	e7df      	b.n	800814e <_strtod_l+0xe6>
 800818e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008190:	1c5a      	adds	r2, r3, #1
 8008192:	9219      	str	r2, [sp, #100]	@ 0x64
 8008194:	785b      	ldrb	r3, [r3, #1]
 8008196:	2b30      	cmp	r3, #48	@ 0x30
 8008198:	d0f9      	beq.n	800818e <_strtod_l+0x126>
 800819a:	2b00      	cmp	r3, #0
 800819c:	d09d      	beq.n	80080da <_strtod_l+0x72>
 800819e:	2301      	movs	r3, #1
 80081a0:	2700      	movs	r7, #0
 80081a2:	9308      	str	r3, [sp, #32]
 80081a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081a6:	930c      	str	r3, [sp, #48]	@ 0x30
 80081a8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80081aa:	46b9      	mov	r9, r7
 80081ac:	220a      	movs	r2, #10
 80081ae:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80081b0:	7805      	ldrb	r5, [r0, #0]
 80081b2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80081b6:	b2d9      	uxtb	r1, r3
 80081b8:	2909      	cmp	r1, #9
 80081ba:	d928      	bls.n	800820e <_strtod_l+0x1a6>
 80081bc:	494f      	ldr	r1, [pc, #316]	@ (80082fc <_strtod_l+0x294>)
 80081be:	2201      	movs	r2, #1
 80081c0:	f001 fe29 	bl	8009e16 <strncmp>
 80081c4:	2800      	cmp	r0, #0
 80081c6:	d032      	beq.n	800822e <_strtod_l+0x1c6>
 80081c8:	2000      	movs	r0, #0
 80081ca:	462a      	mov	r2, r5
 80081cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80081ce:	464d      	mov	r5, r9
 80081d0:	4603      	mov	r3, r0
 80081d2:	2a65      	cmp	r2, #101	@ 0x65
 80081d4:	d001      	beq.n	80081da <_strtod_l+0x172>
 80081d6:	2a45      	cmp	r2, #69	@ 0x45
 80081d8:	d114      	bne.n	8008204 <_strtod_l+0x19c>
 80081da:	b91d      	cbnz	r5, 80081e4 <_strtod_l+0x17c>
 80081dc:	9a08      	ldr	r2, [sp, #32]
 80081de:	4302      	orrs	r2, r0
 80081e0:	d096      	beq.n	8008110 <_strtod_l+0xa8>
 80081e2:	2500      	movs	r5, #0
 80081e4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80081e6:	1c62      	adds	r2, r4, #1
 80081e8:	9219      	str	r2, [sp, #100]	@ 0x64
 80081ea:	7862      	ldrb	r2, [r4, #1]
 80081ec:	2a2b      	cmp	r2, #43	@ 0x2b
 80081ee:	d07a      	beq.n	80082e6 <_strtod_l+0x27e>
 80081f0:	2a2d      	cmp	r2, #45	@ 0x2d
 80081f2:	d07e      	beq.n	80082f2 <_strtod_l+0x28a>
 80081f4:	f04f 0c00 	mov.w	ip, #0
 80081f8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80081fc:	2909      	cmp	r1, #9
 80081fe:	f240 8085 	bls.w	800830c <_strtod_l+0x2a4>
 8008202:	9419      	str	r4, [sp, #100]	@ 0x64
 8008204:	f04f 0800 	mov.w	r8, #0
 8008208:	e0a5      	b.n	8008356 <_strtod_l+0x2ee>
 800820a:	2300      	movs	r3, #0
 800820c:	e7c8      	b.n	80081a0 <_strtod_l+0x138>
 800820e:	f1b9 0f08 	cmp.w	r9, #8
 8008212:	bfd8      	it	le
 8008214:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008216:	f100 0001 	add.w	r0, r0, #1
 800821a:	bfda      	itte	le
 800821c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008220:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008222:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008226:	f109 0901 	add.w	r9, r9, #1
 800822a:	9019      	str	r0, [sp, #100]	@ 0x64
 800822c:	e7bf      	b.n	80081ae <_strtod_l+0x146>
 800822e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008230:	1c5a      	adds	r2, r3, #1
 8008232:	9219      	str	r2, [sp, #100]	@ 0x64
 8008234:	785a      	ldrb	r2, [r3, #1]
 8008236:	f1b9 0f00 	cmp.w	r9, #0
 800823a:	d03b      	beq.n	80082b4 <_strtod_l+0x24c>
 800823c:	900a      	str	r0, [sp, #40]	@ 0x28
 800823e:	464d      	mov	r5, r9
 8008240:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008244:	2b09      	cmp	r3, #9
 8008246:	d912      	bls.n	800826e <_strtod_l+0x206>
 8008248:	2301      	movs	r3, #1
 800824a:	e7c2      	b.n	80081d2 <_strtod_l+0x16a>
 800824c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800824e:	1c5a      	adds	r2, r3, #1
 8008250:	9219      	str	r2, [sp, #100]	@ 0x64
 8008252:	785a      	ldrb	r2, [r3, #1]
 8008254:	3001      	adds	r0, #1
 8008256:	2a30      	cmp	r2, #48	@ 0x30
 8008258:	d0f8      	beq.n	800824c <_strtod_l+0x1e4>
 800825a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800825e:	2b08      	cmp	r3, #8
 8008260:	f200 84d2 	bhi.w	8008c08 <_strtod_l+0xba0>
 8008264:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008266:	900a      	str	r0, [sp, #40]	@ 0x28
 8008268:	2000      	movs	r0, #0
 800826a:	930c      	str	r3, [sp, #48]	@ 0x30
 800826c:	4605      	mov	r5, r0
 800826e:	3a30      	subs	r2, #48	@ 0x30
 8008270:	f100 0301 	add.w	r3, r0, #1
 8008274:	d018      	beq.n	80082a8 <_strtod_l+0x240>
 8008276:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008278:	4419      	add	r1, r3
 800827a:	910a      	str	r1, [sp, #40]	@ 0x28
 800827c:	462e      	mov	r6, r5
 800827e:	f04f 0e0a 	mov.w	lr, #10
 8008282:	1c71      	adds	r1, r6, #1
 8008284:	eba1 0c05 	sub.w	ip, r1, r5
 8008288:	4563      	cmp	r3, ip
 800828a:	dc15      	bgt.n	80082b8 <_strtod_l+0x250>
 800828c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008290:	182b      	adds	r3, r5, r0
 8008292:	2b08      	cmp	r3, #8
 8008294:	f105 0501 	add.w	r5, r5, #1
 8008298:	4405      	add	r5, r0
 800829a:	dc1a      	bgt.n	80082d2 <_strtod_l+0x26a>
 800829c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800829e:	230a      	movs	r3, #10
 80082a0:	fb03 2301 	mla	r3, r3, r1, r2
 80082a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082a6:	2300      	movs	r3, #0
 80082a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80082aa:	1c51      	adds	r1, r2, #1
 80082ac:	9119      	str	r1, [sp, #100]	@ 0x64
 80082ae:	7852      	ldrb	r2, [r2, #1]
 80082b0:	4618      	mov	r0, r3
 80082b2:	e7c5      	b.n	8008240 <_strtod_l+0x1d8>
 80082b4:	4648      	mov	r0, r9
 80082b6:	e7ce      	b.n	8008256 <_strtod_l+0x1ee>
 80082b8:	2e08      	cmp	r6, #8
 80082ba:	dc05      	bgt.n	80082c8 <_strtod_l+0x260>
 80082bc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80082be:	fb0e f606 	mul.w	r6, lr, r6
 80082c2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80082c4:	460e      	mov	r6, r1
 80082c6:	e7dc      	b.n	8008282 <_strtod_l+0x21a>
 80082c8:	2910      	cmp	r1, #16
 80082ca:	bfd8      	it	le
 80082cc:	fb0e f707 	mulle.w	r7, lr, r7
 80082d0:	e7f8      	b.n	80082c4 <_strtod_l+0x25c>
 80082d2:	2b0f      	cmp	r3, #15
 80082d4:	bfdc      	itt	le
 80082d6:	230a      	movle	r3, #10
 80082d8:	fb03 2707 	mlale	r7, r3, r7, r2
 80082dc:	e7e3      	b.n	80082a6 <_strtod_l+0x23e>
 80082de:	2300      	movs	r3, #0
 80082e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80082e2:	2301      	movs	r3, #1
 80082e4:	e77a      	b.n	80081dc <_strtod_l+0x174>
 80082e6:	f04f 0c00 	mov.w	ip, #0
 80082ea:	1ca2      	adds	r2, r4, #2
 80082ec:	9219      	str	r2, [sp, #100]	@ 0x64
 80082ee:	78a2      	ldrb	r2, [r4, #2]
 80082f0:	e782      	b.n	80081f8 <_strtod_l+0x190>
 80082f2:	f04f 0c01 	mov.w	ip, #1
 80082f6:	e7f8      	b.n	80082ea <_strtod_l+0x282>
 80082f8:	0800ced0 	.word	0x0800ced0
 80082fc:	0800cce4 	.word	0x0800cce4
 8008300:	7ff00000 	.word	0x7ff00000
 8008304:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008306:	1c51      	adds	r1, r2, #1
 8008308:	9119      	str	r1, [sp, #100]	@ 0x64
 800830a:	7852      	ldrb	r2, [r2, #1]
 800830c:	2a30      	cmp	r2, #48	@ 0x30
 800830e:	d0f9      	beq.n	8008304 <_strtod_l+0x29c>
 8008310:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008314:	2908      	cmp	r1, #8
 8008316:	f63f af75 	bhi.w	8008204 <_strtod_l+0x19c>
 800831a:	3a30      	subs	r2, #48	@ 0x30
 800831c:	9209      	str	r2, [sp, #36]	@ 0x24
 800831e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008320:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008322:	f04f 080a 	mov.w	r8, #10
 8008326:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008328:	1c56      	adds	r6, r2, #1
 800832a:	9619      	str	r6, [sp, #100]	@ 0x64
 800832c:	7852      	ldrb	r2, [r2, #1]
 800832e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008332:	f1be 0f09 	cmp.w	lr, #9
 8008336:	d939      	bls.n	80083ac <_strtod_l+0x344>
 8008338:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800833a:	1a76      	subs	r6, r6, r1
 800833c:	2e08      	cmp	r6, #8
 800833e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008342:	dc03      	bgt.n	800834c <_strtod_l+0x2e4>
 8008344:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008346:	4588      	cmp	r8, r1
 8008348:	bfa8      	it	ge
 800834a:	4688      	movge	r8, r1
 800834c:	f1bc 0f00 	cmp.w	ip, #0
 8008350:	d001      	beq.n	8008356 <_strtod_l+0x2ee>
 8008352:	f1c8 0800 	rsb	r8, r8, #0
 8008356:	2d00      	cmp	r5, #0
 8008358:	d14e      	bne.n	80083f8 <_strtod_l+0x390>
 800835a:	9908      	ldr	r1, [sp, #32]
 800835c:	4308      	orrs	r0, r1
 800835e:	f47f aebc 	bne.w	80080da <_strtod_l+0x72>
 8008362:	2b00      	cmp	r3, #0
 8008364:	f47f aed4 	bne.w	8008110 <_strtod_l+0xa8>
 8008368:	2a69      	cmp	r2, #105	@ 0x69
 800836a:	d028      	beq.n	80083be <_strtod_l+0x356>
 800836c:	dc25      	bgt.n	80083ba <_strtod_l+0x352>
 800836e:	2a49      	cmp	r2, #73	@ 0x49
 8008370:	d025      	beq.n	80083be <_strtod_l+0x356>
 8008372:	2a4e      	cmp	r2, #78	@ 0x4e
 8008374:	f47f aecc 	bne.w	8008110 <_strtod_l+0xa8>
 8008378:	499a      	ldr	r1, [pc, #616]	@ (80085e4 <_strtod_l+0x57c>)
 800837a:	a819      	add	r0, sp, #100	@ 0x64
 800837c:	f002 ff4c 	bl	800b218 <__match>
 8008380:	2800      	cmp	r0, #0
 8008382:	f43f aec5 	beq.w	8008110 <_strtod_l+0xa8>
 8008386:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	2b28      	cmp	r3, #40	@ 0x28
 800838c:	d12e      	bne.n	80083ec <_strtod_l+0x384>
 800838e:	4996      	ldr	r1, [pc, #600]	@ (80085e8 <_strtod_l+0x580>)
 8008390:	aa1c      	add	r2, sp, #112	@ 0x70
 8008392:	a819      	add	r0, sp, #100	@ 0x64
 8008394:	f002 ff54 	bl	800b240 <__hexnan>
 8008398:	2805      	cmp	r0, #5
 800839a:	d127      	bne.n	80083ec <_strtod_l+0x384>
 800839c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800839e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80083a2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80083a6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80083aa:	e696      	b.n	80080da <_strtod_l+0x72>
 80083ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80083ae:	fb08 2101 	mla	r1, r8, r1, r2
 80083b2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80083b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80083b8:	e7b5      	b.n	8008326 <_strtod_l+0x2be>
 80083ba:	2a6e      	cmp	r2, #110	@ 0x6e
 80083bc:	e7da      	b.n	8008374 <_strtod_l+0x30c>
 80083be:	498b      	ldr	r1, [pc, #556]	@ (80085ec <_strtod_l+0x584>)
 80083c0:	a819      	add	r0, sp, #100	@ 0x64
 80083c2:	f002 ff29 	bl	800b218 <__match>
 80083c6:	2800      	cmp	r0, #0
 80083c8:	f43f aea2 	beq.w	8008110 <_strtod_l+0xa8>
 80083cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083ce:	4988      	ldr	r1, [pc, #544]	@ (80085f0 <_strtod_l+0x588>)
 80083d0:	3b01      	subs	r3, #1
 80083d2:	a819      	add	r0, sp, #100	@ 0x64
 80083d4:	9319      	str	r3, [sp, #100]	@ 0x64
 80083d6:	f002 ff1f 	bl	800b218 <__match>
 80083da:	b910      	cbnz	r0, 80083e2 <_strtod_l+0x37a>
 80083dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083de:	3301      	adds	r3, #1
 80083e0:	9319      	str	r3, [sp, #100]	@ 0x64
 80083e2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8008600 <_strtod_l+0x598>
 80083e6:	f04f 0a00 	mov.w	sl, #0
 80083ea:	e676      	b.n	80080da <_strtod_l+0x72>
 80083ec:	4881      	ldr	r0, [pc, #516]	@ (80085f4 <_strtod_l+0x58c>)
 80083ee:	f001 fdd7 	bl	8009fa0 <nan>
 80083f2:	ec5b ab10 	vmov	sl, fp, d0
 80083f6:	e670      	b.n	80080da <_strtod_l+0x72>
 80083f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083fa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80083fc:	eba8 0303 	sub.w	r3, r8, r3
 8008400:	f1b9 0f00 	cmp.w	r9, #0
 8008404:	bf08      	it	eq
 8008406:	46a9      	moveq	r9, r5
 8008408:	2d10      	cmp	r5, #16
 800840a:	9309      	str	r3, [sp, #36]	@ 0x24
 800840c:	462c      	mov	r4, r5
 800840e:	bfa8      	it	ge
 8008410:	2410      	movge	r4, #16
 8008412:	f7f8 f897 	bl	8000544 <__aeabi_ui2d>
 8008416:	2d09      	cmp	r5, #9
 8008418:	4682      	mov	sl, r0
 800841a:	468b      	mov	fp, r1
 800841c:	dc13      	bgt.n	8008446 <_strtod_l+0x3de>
 800841e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008420:	2b00      	cmp	r3, #0
 8008422:	f43f ae5a 	beq.w	80080da <_strtod_l+0x72>
 8008426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008428:	dd78      	ble.n	800851c <_strtod_l+0x4b4>
 800842a:	2b16      	cmp	r3, #22
 800842c:	dc5f      	bgt.n	80084ee <_strtod_l+0x486>
 800842e:	4972      	ldr	r1, [pc, #456]	@ (80085f8 <_strtod_l+0x590>)
 8008430:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008434:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008438:	4652      	mov	r2, sl
 800843a:	465b      	mov	r3, fp
 800843c:	f7f8 f8fc 	bl	8000638 <__aeabi_dmul>
 8008440:	4682      	mov	sl, r0
 8008442:	468b      	mov	fp, r1
 8008444:	e649      	b.n	80080da <_strtod_l+0x72>
 8008446:	4b6c      	ldr	r3, [pc, #432]	@ (80085f8 <_strtod_l+0x590>)
 8008448:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800844c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008450:	f7f8 f8f2 	bl	8000638 <__aeabi_dmul>
 8008454:	4682      	mov	sl, r0
 8008456:	4638      	mov	r0, r7
 8008458:	468b      	mov	fp, r1
 800845a:	f7f8 f873 	bl	8000544 <__aeabi_ui2d>
 800845e:	4602      	mov	r2, r0
 8008460:	460b      	mov	r3, r1
 8008462:	4650      	mov	r0, sl
 8008464:	4659      	mov	r1, fp
 8008466:	f7f7 ff31 	bl	80002cc <__adddf3>
 800846a:	2d0f      	cmp	r5, #15
 800846c:	4682      	mov	sl, r0
 800846e:	468b      	mov	fp, r1
 8008470:	ddd5      	ble.n	800841e <_strtod_l+0x3b6>
 8008472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008474:	1b2c      	subs	r4, r5, r4
 8008476:	441c      	add	r4, r3
 8008478:	2c00      	cmp	r4, #0
 800847a:	f340 8093 	ble.w	80085a4 <_strtod_l+0x53c>
 800847e:	f014 030f 	ands.w	r3, r4, #15
 8008482:	d00a      	beq.n	800849a <_strtod_l+0x432>
 8008484:	495c      	ldr	r1, [pc, #368]	@ (80085f8 <_strtod_l+0x590>)
 8008486:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800848a:	4652      	mov	r2, sl
 800848c:	465b      	mov	r3, fp
 800848e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008492:	f7f8 f8d1 	bl	8000638 <__aeabi_dmul>
 8008496:	4682      	mov	sl, r0
 8008498:	468b      	mov	fp, r1
 800849a:	f034 040f 	bics.w	r4, r4, #15
 800849e:	d073      	beq.n	8008588 <_strtod_l+0x520>
 80084a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80084a4:	dd49      	ble.n	800853a <_strtod_l+0x4d2>
 80084a6:	2400      	movs	r4, #0
 80084a8:	46a0      	mov	r8, r4
 80084aa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80084ac:	46a1      	mov	r9, r4
 80084ae:	9a05      	ldr	r2, [sp, #20]
 80084b0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8008600 <_strtod_l+0x598>
 80084b4:	2322      	movs	r3, #34	@ 0x22
 80084b6:	6013      	str	r3, [r2, #0]
 80084b8:	f04f 0a00 	mov.w	sl, #0
 80084bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f43f ae0b 	beq.w	80080da <_strtod_l+0x72>
 80084c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80084c6:	9805      	ldr	r0, [sp, #20]
 80084c8:	f003 f85e 	bl	800b588 <_Bfree>
 80084cc:	9805      	ldr	r0, [sp, #20]
 80084ce:	4649      	mov	r1, r9
 80084d0:	f003 f85a 	bl	800b588 <_Bfree>
 80084d4:	9805      	ldr	r0, [sp, #20]
 80084d6:	4641      	mov	r1, r8
 80084d8:	f003 f856 	bl	800b588 <_Bfree>
 80084dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80084de:	9805      	ldr	r0, [sp, #20]
 80084e0:	f003 f852 	bl	800b588 <_Bfree>
 80084e4:	9805      	ldr	r0, [sp, #20]
 80084e6:	4621      	mov	r1, r4
 80084e8:	f003 f84e 	bl	800b588 <_Bfree>
 80084ec:	e5f5      	b.n	80080da <_strtod_l+0x72>
 80084ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80084f4:	4293      	cmp	r3, r2
 80084f6:	dbbc      	blt.n	8008472 <_strtod_l+0x40a>
 80084f8:	4c3f      	ldr	r4, [pc, #252]	@ (80085f8 <_strtod_l+0x590>)
 80084fa:	f1c5 050f 	rsb	r5, r5, #15
 80084fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008502:	4652      	mov	r2, sl
 8008504:	465b      	mov	r3, fp
 8008506:	e9d1 0100 	ldrd	r0, r1, [r1]
 800850a:	f7f8 f895 	bl	8000638 <__aeabi_dmul>
 800850e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008510:	1b5d      	subs	r5, r3, r5
 8008512:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008516:	e9d4 2300 	ldrd	r2, r3, [r4]
 800851a:	e78f      	b.n	800843c <_strtod_l+0x3d4>
 800851c:	3316      	adds	r3, #22
 800851e:	dba8      	blt.n	8008472 <_strtod_l+0x40a>
 8008520:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008522:	eba3 0808 	sub.w	r8, r3, r8
 8008526:	4b34      	ldr	r3, [pc, #208]	@ (80085f8 <_strtod_l+0x590>)
 8008528:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800852c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008530:	4650      	mov	r0, sl
 8008532:	4659      	mov	r1, fp
 8008534:	f7f8 f9aa 	bl	800088c <__aeabi_ddiv>
 8008538:	e782      	b.n	8008440 <_strtod_l+0x3d8>
 800853a:	2300      	movs	r3, #0
 800853c:	4f2f      	ldr	r7, [pc, #188]	@ (80085fc <_strtod_l+0x594>)
 800853e:	1124      	asrs	r4, r4, #4
 8008540:	4650      	mov	r0, sl
 8008542:	4659      	mov	r1, fp
 8008544:	461e      	mov	r6, r3
 8008546:	2c01      	cmp	r4, #1
 8008548:	dc21      	bgt.n	800858e <_strtod_l+0x526>
 800854a:	b10b      	cbz	r3, 8008550 <_strtod_l+0x4e8>
 800854c:	4682      	mov	sl, r0
 800854e:	468b      	mov	fp, r1
 8008550:	492a      	ldr	r1, [pc, #168]	@ (80085fc <_strtod_l+0x594>)
 8008552:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008556:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800855a:	4652      	mov	r2, sl
 800855c:	465b      	mov	r3, fp
 800855e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008562:	f7f8 f869 	bl	8000638 <__aeabi_dmul>
 8008566:	4b26      	ldr	r3, [pc, #152]	@ (8008600 <_strtod_l+0x598>)
 8008568:	460a      	mov	r2, r1
 800856a:	400b      	ands	r3, r1
 800856c:	4925      	ldr	r1, [pc, #148]	@ (8008604 <_strtod_l+0x59c>)
 800856e:	428b      	cmp	r3, r1
 8008570:	4682      	mov	sl, r0
 8008572:	d898      	bhi.n	80084a6 <_strtod_l+0x43e>
 8008574:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008578:	428b      	cmp	r3, r1
 800857a:	bf86      	itte	hi
 800857c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008608 <_strtod_l+0x5a0>
 8008580:	f04f 3aff 	movhi.w	sl, #4294967295
 8008584:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008588:	2300      	movs	r3, #0
 800858a:	9308      	str	r3, [sp, #32]
 800858c:	e076      	b.n	800867c <_strtod_l+0x614>
 800858e:	07e2      	lsls	r2, r4, #31
 8008590:	d504      	bpl.n	800859c <_strtod_l+0x534>
 8008592:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008596:	f7f8 f84f 	bl	8000638 <__aeabi_dmul>
 800859a:	2301      	movs	r3, #1
 800859c:	3601      	adds	r6, #1
 800859e:	1064      	asrs	r4, r4, #1
 80085a0:	3708      	adds	r7, #8
 80085a2:	e7d0      	b.n	8008546 <_strtod_l+0x4de>
 80085a4:	d0f0      	beq.n	8008588 <_strtod_l+0x520>
 80085a6:	4264      	negs	r4, r4
 80085a8:	f014 020f 	ands.w	r2, r4, #15
 80085ac:	d00a      	beq.n	80085c4 <_strtod_l+0x55c>
 80085ae:	4b12      	ldr	r3, [pc, #72]	@ (80085f8 <_strtod_l+0x590>)
 80085b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085b4:	4650      	mov	r0, sl
 80085b6:	4659      	mov	r1, fp
 80085b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085bc:	f7f8 f966 	bl	800088c <__aeabi_ddiv>
 80085c0:	4682      	mov	sl, r0
 80085c2:	468b      	mov	fp, r1
 80085c4:	1124      	asrs	r4, r4, #4
 80085c6:	d0df      	beq.n	8008588 <_strtod_l+0x520>
 80085c8:	2c1f      	cmp	r4, #31
 80085ca:	dd1f      	ble.n	800860c <_strtod_l+0x5a4>
 80085cc:	2400      	movs	r4, #0
 80085ce:	46a0      	mov	r8, r4
 80085d0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80085d2:	46a1      	mov	r9, r4
 80085d4:	9a05      	ldr	r2, [sp, #20]
 80085d6:	2322      	movs	r3, #34	@ 0x22
 80085d8:	f04f 0a00 	mov.w	sl, #0
 80085dc:	f04f 0b00 	mov.w	fp, #0
 80085e0:	6013      	str	r3, [r2, #0]
 80085e2:	e76b      	b.n	80084bc <_strtod_l+0x454>
 80085e4:	0800ccf3 	.word	0x0800ccf3
 80085e8:	0800cebc 	.word	0x0800cebc
 80085ec:	0800cceb 	.word	0x0800cceb
 80085f0:	0800cd2a 	.word	0x0800cd2a
 80085f4:	0800ceb9 	.word	0x0800ceb9
 80085f8:	0800d048 	.word	0x0800d048
 80085fc:	0800d020 	.word	0x0800d020
 8008600:	7ff00000 	.word	0x7ff00000
 8008604:	7ca00000 	.word	0x7ca00000
 8008608:	7fefffff 	.word	0x7fefffff
 800860c:	f014 0310 	ands.w	r3, r4, #16
 8008610:	bf18      	it	ne
 8008612:	236a      	movne	r3, #106	@ 0x6a
 8008614:	4ea9      	ldr	r6, [pc, #676]	@ (80088bc <_strtod_l+0x854>)
 8008616:	9308      	str	r3, [sp, #32]
 8008618:	4650      	mov	r0, sl
 800861a:	4659      	mov	r1, fp
 800861c:	2300      	movs	r3, #0
 800861e:	07e7      	lsls	r7, r4, #31
 8008620:	d504      	bpl.n	800862c <_strtod_l+0x5c4>
 8008622:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008626:	f7f8 f807 	bl	8000638 <__aeabi_dmul>
 800862a:	2301      	movs	r3, #1
 800862c:	1064      	asrs	r4, r4, #1
 800862e:	f106 0608 	add.w	r6, r6, #8
 8008632:	d1f4      	bne.n	800861e <_strtod_l+0x5b6>
 8008634:	b10b      	cbz	r3, 800863a <_strtod_l+0x5d2>
 8008636:	4682      	mov	sl, r0
 8008638:	468b      	mov	fp, r1
 800863a:	9b08      	ldr	r3, [sp, #32]
 800863c:	b1b3      	cbz	r3, 800866c <_strtod_l+0x604>
 800863e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008642:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008646:	2b00      	cmp	r3, #0
 8008648:	4659      	mov	r1, fp
 800864a:	dd0f      	ble.n	800866c <_strtod_l+0x604>
 800864c:	2b1f      	cmp	r3, #31
 800864e:	dd56      	ble.n	80086fe <_strtod_l+0x696>
 8008650:	2b34      	cmp	r3, #52	@ 0x34
 8008652:	bfde      	ittt	le
 8008654:	f04f 33ff 	movle.w	r3, #4294967295
 8008658:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800865c:	4093      	lslle	r3, r2
 800865e:	f04f 0a00 	mov.w	sl, #0
 8008662:	bfcc      	ite	gt
 8008664:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008668:	ea03 0b01 	andle.w	fp, r3, r1
 800866c:	2200      	movs	r2, #0
 800866e:	2300      	movs	r3, #0
 8008670:	4650      	mov	r0, sl
 8008672:	4659      	mov	r1, fp
 8008674:	f7f8 fa48 	bl	8000b08 <__aeabi_dcmpeq>
 8008678:	2800      	cmp	r0, #0
 800867a:	d1a7      	bne.n	80085cc <_strtod_l+0x564>
 800867c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008682:	9805      	ldr	r0, [sp, #20]
 8008684:	462b      	mov	r3, r5
 8008686:	464a      	mov	r2, r9
 8008688:	f002 ffe6 	bl	800b658 <__s2b>
 800868c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800868e:	2800      	cmp	r0, #0
 8008690:	f43f af09 	beq.w	80084a6 <_strtod_l+0x43e>
 8008694:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008696:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008698:	2a00      	cmp	r2, #0
 800869a:	eba3 0308 	sub.w	r3, r3, r8
 800869e:	bfa8      	it	ge
 80086a0:	2300      	movge	r3, #0
 80086a2:	9312      	str	r3, [sp, #72]	@ 0x48
 80086a4:	2400      	movs	r4, #0
 80086a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80086aa:	9316      	str	r3, [sp, #88]	@ 0x58
 80086ac:	46a0      	mov	r8, r4
 80086ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086b0:	9805      	ldr	r0, [sp, #20]
 80086b2:	6859      	ldr	r1, [r3, #4]
 80086b4:	f002 ff28 	bl	800b508 <_Balloc>
 80086b8:	4681      	mov	r9, r0
 80086ba:	2800      	cmp	r0, #0
 80086bc:	f43f aef7 	beq.w	80084ae <_strtod_l+0x446>
 80086c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086c2:	691a      	ldr	r2, [r3, #16]
 80086c4:	3202      	adds	r2, #2
 80086c6:	f103 010c 	add.w	r1, r3, #12
 80086ca:	0092      	lsls	r2, r2, #2
 80086cc:	300c      	adds	r0, #12
 80086ce:	f001 fc56 	bl	8009f7e <memcpy>
 80086d2:	ec4b ab10 	vmov	d0, sl, fp
 80086d6:	9805      	ldr	r0, [sp, #20]
 80086d8:	aa1c      	add	r2, sp, #112	@ 0x70
 80086da:	a91b      	add	r1, sp, #108	@ 0x6c
 80086dc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80086e0:	f003 faee 	bl	800bcc0 <__d2b>
 80086e4:	901a      	str	r0, [sp, #104]	@ 0x68
 80086e6:	2800      	cmp	r0, #0
 80086e8:	f43f aee1 	beq.w	80084ae <_strtod_l+0x446>
 80086ec:	9805      	ldr	r0, [sp, #20]
 80086ee:	2101      	movs	r1, #1
 80086f0:	f003 f848 	bl	800b784 <__i2b>
 80086f4:	4680      	mov	r8, r0
 80086f6:	b948      	cbnz	r0, 800870c <_strtod_l+0x6a4>
 80086f8:	f04f 0800 	mov.w	r8, #0
 80086fc:	e6d7      	b.n	80084ae <_strtod_l+0x446>
 80086fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008702:	fa02 f303 	lsl.w	r3, r2, r3
 8008706:	ea03 0a0a 	and.w	sl, r3, sl
 800870a:	e7af      	b.n	800866c <_strtod_l+0x604>
 800870c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800870e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008710:	2d00      	cmp	r5, #0
 8008712:	bfab      	itete	ge
 8008714:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008716:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008718:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800871a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800871c:	bfac      	ite	ge
 800871e:	18ef      	addge	r7, r5, r3
 8008720:	1b5e      	sublt	r6, r3, r5
 8008722:	9b08      	ldr	r3, [sp, #32]
 8008724:	1aed      	subs	r5, r5, r3
 8008726:	4415      	add	r5, r2
 8008728:	4b65      	ldr	r3, [pc, #404]	@ (80088c0 <_strtod_l+0x858>)
 800872a:	3d01      	subs	r5, #1
 800872c:	429d      	cmp	r5, r3
 800872e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008732:	da50      	bge.n	80087d6 <_strtod_l+0x76e>
 8008734:	1b5b      	subs	r3, r3, r5
 8008736:	2b1f      	cmp	r3, #31
 8008738:	eba2 0203 	sub.w	r2, r2, r3
 800873c:	f04f 0101 	mov.w	r1, #1
 8008740:	dc3d      	bgt.n	80087be <_strtod_l+0x756>
 8008742:	fa01 f303 	lsl.w	r3, r1, r3
 8008746:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008748:	2300      	movs	r3, #0
 800874a:	9310      	str	r3, [sp, #64]	@ 0x40
 800874c:	18bd      	adds	r5, r7, r2
 800874e:	9b08      	ldr	r3, [sp, #32]
 8008750:	42af      	cmp	r7, r5
 8008752:	4416      	add	r6, r2
 8008754:	441e      	add	r6, r3
 8008756:	463b      	mov	r3, r7
 8008758:	bfa8      	it	ge
 800875a:	462b      	movge	r3, r5
 800875c:	42b3      	cmp	r3, r6
 800875e:	bfa8      	it	ge
 8008760:	4633      	movge	r3, r6
 8008762:	2b00      	cmp	r3, #0
 8008764:	bfc2      	ittt	gt
 8008766:	1aed      	subgt	r5, r5, r3
 8008768:	1af6      	subgt	r6, r6, r3
 800876a:	1aff      	subgt	r7, r7, r3
 800876c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800876e:	2b00      	cmp	r3, #0
 8008770:	dd16      	ble.n	80087a0 <_strtod_l+0x738>
 8008772:	4641      	mov	r1, r8
 8008774:	9805      	ldr	r0, [sp, #20]
 8008776:	461a      	mov	r2, r3
 8008778:	f003 f8bc 	bl	800b8f4 <__pow5mult>
 800877c:	4680      	mov	r8, r0
 800877e:	2800      	cmp	r0, #0
 8008780:	d0ba      	beq.n	80086f8 <_strtod_l+0x690>
 8008782:	4601      	mov	r1, r0
 8008784:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008786:	9805      	ldr	r0, [sp, #20]
 8008788:	f003 f812 	bl	800b7b0 <__multiply>
 800878c:	900a      	str	r0, [sp, #40]	@ 0x28
 800878e:	2800      	cmp	r0, #0
 8008790:	f43f ae8d 	beq.w	80084ae <_strtod_l+0x446>
 8008794:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008796:	9805      	ldr	r0, [sp, #20]
 8008798:	f002 fef6 	bl	800b588 <_Bfree>
 800879c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800879e:	931a      	str	r3, [sp, #104]	@ 0x68
 80087a0:	2d00      	cmp	r5, #0
 80087a2:	dc1d      	bgt.n	80087e0 <_strtod_l+0x778>
 80087a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	dd23      	ble.n	80087f2 <_strtod_l+0x78a>
 80087aa:	4649      	mov	r1, r9
 80087ac:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80087ae:	9805      	ldr	r0, [sp, #20]
 80087b0:	f003 f8a0 	bl	800b8f4 <__pow5mult>
 80087b4:	4681      	mov	r9, r0
 80087b6:	b9e0      	cbnz	r0, 80087f2 <_strtod_l+0x78a>
 80087b8:	f04f 0900 	mov.w	r9, #0
 80087bc:	e677      	b.n	80084ae <_strtod_l+0x446>
 80087be:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80087c2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80087c6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80087ca:	35e2      	adds	r5, #226	@ 0xe2
 80087cc:	fa01 f305 	lsl.w	r3, r1, r5
 80087d0:	9310      	str	r3, [sp, #64]	@ 0x40
 80087d2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80087d4:	e7ba      	b.n	800874c <_strtod_l+0x6e4>
 80087d6:	2300      	movs	r3, #0
 80087d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80087da:	2301      	movs	r3, #1
 80087dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80087de:	e7b5      	b.n	800874c <_strtod_l+0x6e4>
 80087e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80087e2:	9805      	ldr	r0, [sp, #20]
 80087e4:	462a      	mov	r2, r5
 80087e6:	f003 f8df 	bl	800b9a8 <__lshift>
 80087ea:	901a      	str	r0, [sp, #104]	@ 0x68
 80087ec:	2800      	cmp	r0, #0
 80087ee:	d1d9      	bne.n	80087a4 <_strtod_l+0x73c>
 80087f0:	e65d      	b.n	80084ae <_strtod_l+0x446>
 80087f2:	2e00      	cmp	r6, #0
 80087f4:	dd07      	ble.n	8008806 <_strtod_l+0x79e>
 80087f6:	4649      	mov	r1, r9
 80087f8:	9805      	ldr	r0, [sp, #20]
 80087fa:	4632      	mov	r2, r6
 80087fc:	f003 f8d4 	bl	800b9a8 <__lshift>
 8008800:	4681      	mov	r9, r0
 8008802:	2800      	cmp	r0, #0
 8008804:	d0d8      	beq.n	80087b8 <_strtod_l+0x750>
 8008806:	2f00      	cmp	r7, #0
 8008808:	dd08      	ble.n	800881c <_strtod_l+0x7b4>
 800880a:	4641      	mov	r1, r8
 800880c:	9805      	ldr	r0, [sp, #20]
 800880e:	463a      	mov	r2, r7
 8008810:	f003 f8ca 	bl	800b9a8 <__lshift>
 8008814:	4680      	mov	r8, r0
 8008816:	2800      	cmp	r0, #0
 8008818:	f43f ae49 	beq.w	80084ae <_strtod_l+0x446>
 800881c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800881e:	9805      	ldr	r0, [sp, #20]
 8008820:	464a      	mov	r2, r9
 8008822:	f003 f949 	bl	800bab8 <__mdiff>
 8008826:	4604      	mov	r4, r0
 8008828:	2800      	cmp	r0, #0
 800882a:	f43f ae40 	beq.w	80084ae <_strtod_l+0x446>
 800882e:	68c3      	ldr	r3, [r0, #12]
 8008830:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008832:	2300      	movs	r3, #0
 8008834:	60c3      	str	r3, [r0, #12]
 8008836:	4641      	mov	r1, r8
 8008838:	f003 f922 	bl	800ba80 <__mcmp>
 800883c:	2800      	cmp	r0, #0
 800883e:	da45      	bge.n	80088cc <_strtod_l+0x864>
 8008840:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008842:	ea53 030a 	orrs.w	r3, r3, sl
 8008846:	d16b      	bne.n	8008920 <_strtod_l+0x8b8>
 8008848:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800884c:	2b00      	cmp	r3, #0
 800884e:	d167      	bne.n	8008920 <_strtod_l+0x8b8>
 8008850:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008854:	0d1b      	lsrs	r3, r3, #20
 8008856:	051b      	lsls	r3, r3, #20
 8008858:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800885c:	d960      	bls.n	8008920 <_strtod_l+0x8b8>
 800885e:	6963      	ldr	r3, [r4, #20]
 8008860:	b913      	cbnz	r3, 8008868 <_strtod_l+0x800>
 8008862:	6923      	ldr	r3, [r4, #16]
 8008864:	2b01      	cmp	r3, #1
 8008866:	dd5b      	ble.n	8008920 <_strtod_l+0x8b8>
 8008868:	4621      	mov	r1, r4
 800886a:	2201      	movs	r2, #1
 800886c:	9805      	ldr	r0, [sp, #20]
 800886e:	f003 f89b 	bl	800b9a8 <__lshift>
 8008872:	4641      	mov	r1, r8
 8008874:	4604      	mov	r4, r0
 8008876:	f003 f903 	bl	800ba80 <__mcmp>
 800887a:	2800      	cmp	r0, #0
 800887c:	dd50      	ble.n	8008920 <_strtod_l+0x8b8>
 800887e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008882:	9a08      	ldr	r2, [sp, #32]
 8008884:	0d1b      	lsrs	r3, r3, #20
 8008886:	051b      	lsls	r3, r3, #20
 8008888:	2a00      	cmp	r2, #0
 800888a:	d06a      	beq.n	8008962 <_strtod_l+0x8fa>
 800888c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008890:	d867      	bhi.n	8008962 <_strtod_l+0x8fa>
 8008892:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008896:	f67f ae9d 	bls.w	80085d4 <_strtod_l+0x56c>
 800889a:	4b0a      	ldr	r3, [pc, #40]	@ (80088c4 <_strtod_l+0x85c>)
 800889c:	4650      	mov	r0, sl
 800889e:	4659      	mov	r1, fp
 80088a0:	2200      	movs	r2, #0
 80088a2:	f7f7 fec9 	bl	8000638 <__aeabi_dmul>
 80088a6:	4b08      	ldr	r3, [pc, #32]	@ (80088c8 <_strtod_l+0x860>)
 80088a8:	400b      	ands	r3, r1
 80088aa:	4682      	mov	sl, r0
 80088ac:	468b      	mov	fp, r1
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	f47f ae08 	bne.w	80084c4 <_strtod_l+0x45c>
 80088b4:	9a05      	ldr	r2, [sp, #20]
 80088b6:	2322      	movs	r3, #34	@ 0x22
 80088b8:	6013      	str	r3, [r2, #0]
 80088ba:	e603      	b.n	80084c4 <_strtod_l+0x45c>
 80088bc:	0800cee8 	.word	0x0800cee8
 80088c0:	fffffc02 	.word	0xfffffc02
 80088c4:	39500000 	.word	0x39500000
 80088c8:	7ff00000 	.word	0x7ff00000
 80088cc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80088d0:	d165      	bne.n	800899e <_strtod_l+0x936>
 80088d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80088d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80088d8:	b35a      	cbz	r2, 8008932 <_strtod_l+0x8ca>
 80088da:	4a9f      	ldr	r2, [pc, #636]	@ (8008b58 <_strtod_l+0xaf0>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d12b      	bne.n	8008938 <_strtod_l+0x8d0>
 80088e0:	9b08      	ldr	r3, [sp, #32]
 80088e2:	4651      	mov	r1, sl
 80088e4:	b303      	cbz	r3, 8008928 <_strtod_l+0x8c0>
 80088e6:	4b9d      	ldr	r3, [pc, #628]	@ (8008b5c <_strtod_l+0xaf4>)
 80088e8:	465a      	mov	r2, fp
 80088ea:	4013      	ands	r3, r2
 80088ec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80088f0:	f04f 32ff 	mov.w	r2, #4294967295
 80088f4:	d81b      	bhi.n	800892e <_strtod_l+0x8c6>
 80088f6:	0d1b      	lsrs	r3, r3, #20
 80088f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80088fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008900:	4299      	cmp	r1, r3
 8008902:	d119      	bne.n	8008938 <_strtod_l+0x8d0>
 8008904:	4b96      	ldr	r3, [pc, #600]	@ (8008b60 <_strtod_l+0xaf8>)
 8008906:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008908:	429a      	cmp	r2, r3
 800890a:	d102      	bne.n	8008912 <_strtod_l+0x8aa>
 800890c:	3101      	adds	r1, #1
 800890e:	f43f adce 	beq.w	80084ae <_strtod_l+0x446>
 8008912:	4b92      	ldr	r3, [pc, #584]	@ (8008b5c <_strtod_l+0xaf4>)
 8008914:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008916:	401a      	ands	r2, r3
 8008918:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800891c:	f04f 0a00 	mov.w	sl, #0
 8008920:	9b08      	ldr	r3, [sp, #32]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1b9      	bne.n	800889a <_strtod_l+0x832>
 8008926:	e5cd      	b.n	80084c4 <_strtod_l+0x45c>
 8008928:	f04f 33ff 	mov.w	r3, #4294967295
 800892c:	e7e8      	b.n	8008900 <_strtod_l+0x898>
 800892e:	4613      	mov	r3, r2
 8008930:	e7e6      	b.n	8008900 <_strtod_l+0x898>
 8008932:	ea53 030a 	orrs.w	r3, r3, sl
 8008936:	d0a2      	beq.n	800887e <_strtod_l+0x816>
 8008938:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800893a:	b1db      	cbz	r3, 8008974 <_strtod_l+0x90c>
 800893c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800893e:	4213      	tst	r3, r2
 8008940:	d0ee      	beq.n	8008920 <_strtod_l+0x8b8>
 8008942:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008944:	9a08      	ldr	r2, [sp, #32]
 8008946:	4650      	mov	r0, sl
 8008948:	4659      	mov	r1, fp
 800894a:	b1bb      	cbz	r3, 800897c <_strtod_l+0x914>
 800894c:	f7ff fb6d 	bl	800802a <sulp>
 8008950:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008954:	ec53 2b10 	vmov	r2, r3, d0
 8008958:	f7f7 fcb8 	bl	80002cc <__adddf3>
 800895c:	4682      	mov	sl, r0
 800895e:	468b      	mov	fp, r1
 8008960:	e7de      	b.n	8008920 <_strtod_l+0x8b8>
 8008962:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008966:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800896a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800896e:	f04f 3aff 	mov.w	sl, #4294967295
 8008972:	e7d5      	b.n	8008920 <_strtod_l+0x8b8>
 8008974:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008976:	ea13 0f0a 	tst.w	r3, sl
 800897a:	e7e1      	b.n	8008940 <_strtod_l+0x8d8>
 800897c:	f7ff fb55 	bl	800802a <sulp>
 8008980:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008984:	ec53 2b10 	vmov	r2, r3, d0
 8008988:	f7f7 fc9e 	bl	80002c8 <__aeabi_dsub>
 800898c:	2200      	movs	r2, #0
 800898e:	2300      	movs	r3, #0
 8008990:	4682      	mov	sl, r0
 8008992:	468b      	mov	fp, r1
 8008994:	f7f8 f8b8 	bl	8000b08 <__aeabi_dcmpeq>
 8008998:	2800      	cmp	r0, #0
 800899a:	d0c1      	beq.n	8008920 <_strtod_l+0x8b8>
 800899c:	e61a      	b.n	80085d4 <_strtod_l+0x56c>
 800899e:	4641      	mov	r1, r8
 80089a0:	4620      	mov	r0, r4
 80089a2:	f003 f9e5 	bl	800bd70 <__ratio>
 80089a6:	ec57 6b10 	vmov	r6, r7, d0
 80089aa:	2200      	movs	r2, #0
 80089ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80089b0:	4630      	mov	r0, r6
 80089b2:	4639      	mov	r1, r7
 80089b4:	f7f8 f8bc 	bl	8000b30 <__aeabi_dcmple>
 80089b8:	2800      	cmp	r0, #0
 80089ba:	d06f      	beq.n	8008a9c <_strtod_l+0xa34>
 80089bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d17a      	bne.n	8008ab8 <_strtod_l+0xa50>
 80089c2:	f1ba 0f00 	cmp.w	sl, #0
 80089c6:	d158      	bne.n	8008a7a <_strtod_l+0xa12>
 80089c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d15a      	bne.n	8008a88 <_strtod_l+0xa20>
 80089d2:	4b64      	ldr	r3, [pc, #400]	@ (8008b64 <_strtod_l+0xafc>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	4630      	mov	r0, r6
 80089d8:	4639      	mov	r1, r7
 80089da:	f7f8 f89f 	bl	8000b1c <__aeabi_dcmplt>
 80089de:	2800      	cmp	r0, #0
 80089e0:	d159      	bne.n	8008a96 <_strtod_l+0xa2e>
 80089e2:	4630      	mov	r0, r6
 80089e4:	4639      	mov	r1, r7
 80089e6:	4b60      	ldr	r3, [pc, #384]	@ (8008b68 <_strtod_l+0xb00>)
 80089e8:	2200      	movs	r2, #0
 80089ea:	f7f7 fe25 	bl	8000638 <__aeabi_dmul>
 80089ee:	4606      	mov	r6, r0
 80089f0:	460f      	mov	r7, r1
 80089f2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80089f6:	9606      	str	r6, [sp, #24]
 80089f8:	9307      	str	r3, [sp, #28]
 80089fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089fe:	4d57      	ldr	r5, [pc, #348]	@ (8008b5c <_strtod_l+0xaf4>)
 8008a00:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008a04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a06:	401d      	ands	r5, r3
 8008a08:	4b58      	ldr	r3, [pc, #352]	@ (8008b6c <_strtod_l+0xb04>)
 8008a0a:	429d      	cmp	r5, r3
 8008a0c:	f040 80b2 	bne.w	8008b74 <_strtod_l+0xb0c>
 8008a10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a12:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008a16:	ec4b ab10 	vmov	d0, sl, fp
 8008a1a:	f003 f8e1 	bl	800bbe0 <__ulp>
 8008a1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a22:	ec51 0b10 	vmov	r0, r1, d0
 8008a26:	f7f7 fe07 	bl	8000638 <__aeabi_dmul>
 8008a2a:	4652      	mov	r2, sl
 8008a2c:	465b      	mov	r3, fp
 8008a2e:	f7f7 fc4d 	bl	80002cc <__adddf3>
 8008a32:	460b      	mov	r3, r1
 8008a34:	4949      	ldr	r1, [pc, #292]	@ (8008b5c <_strtod_l+0xaf4>)
 8008a36:	4a4e      	ldr	r2, [pc, #312]	@ (8008b70 <_strtod_l+0xb08>)
 8008a38:	4019      	ands	r1, r3
 8008a3a:	4291      	cmp	r1, r2
 8008a3c:	4682      	mov	sl, r0
 8008a3e:	d942      	bls.n	8008ac6 <_strtod_l+0xa5e>
 8008a40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008a42:	4b47      	ldr	r3, [pc, #284]	@ (8008b60 <_strtod_l+0xaf8>)
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d103      	bne.n	8008a50 <_strtod_l+0x9e8>
 8008a48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	f43f ad2f 	beq.w	80084ae <_strtod_l+0x446>
 8008a50:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008b60 <_strtod_l+0xaf8>
 8008a54:	f04f 3aff 	mov.w	sl, #4294967295
 8008a58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a5a:	9805      	ldr	r0, [sp, #20]
 8008a5c:	f002 fd94 	bl	800b588 <_Bfree>
 8008a60:	9805      	ldr	r0, [sp, #20]
 8008a62:	4649      	mov	r1, r9
 8008a64:	f002 fd90 	bl	800b588 <_Bfree>
 8008a68:	9805      	ldr	r0, [sp, #20]
 8008a6a:	4641      	mov	r1, r8
 8008a6c:	f002 fd8c 	bl	800b588 <_Bfree>
 8008a70:	9805      	ldr	r0, [sp, #20]
 8008a72:	4621      	mov	r1, r4
 8008a74:	f002 fd88 	bl	800b588 <_Bfree>
 8008a78:	e619      	b.n	80086ae <_strtod_l+0x646>
 8008a7a:	f1ba 0f01 	cmp.w	sl, #1
 8008a7e:	d103      	bne.n	8008a88 <_strtod_l+0xa20>
 8008a80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f43f ada6 	beq.w	80085d4 <_strtod_l+0x56c>
 8008a88:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008b38 <_strtod_l+0xad0>
 8008a8c:	4f35      	ldr	r7, [pc, #212]	@ (8008b64 <_strtod_l+0xafc>)
 8008a8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008a92:	2600      	movs	r6, #0
 8008a94:	e7b1      	b.n	80089fa <_strtod_l+0x992>
 8008a96:	4f34      	ldr	r7, [pc, #208]	@ (8008b68 <_strtod_l+0xb00>)
 8008a98:	2600      	movs	r6, #0
 8008a9a:	e7aa      	b.n	80089f2 <_strtod_l+0x98a>
 8008a9c:	4b32      	ldr	r3, [pc, #200]	@ (8008b68 <_strtod_l+0xb00>)
 8008a9e:	4630      	mov	r0, r6
 8008aa0:	4639      	mov	r1, r7
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f7f7 fdc8 	bl	8000638 <__aeabi_dmul>
 8008aa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008aaa:	4606      	mov	r6, r0
 8008aac:	460f      	mov	r7, r1
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d09f      	beq.n	80089f2 <_strtod_l+0x98a>
 8008ab2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008ab6:	e7a0      	b.n	80089fa <_strtod_l+0x992>
 8008ab8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008b40 <_strtod_l+0xad8>
 8008abc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008ac0:	ec57 6b17 	vmov	r6, r7, d7
 8008ac4:	e799      	b.n	80089fa <_strtod_l+0x992>
 8008ac6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008aca:	9b08      	ldr	r3, [sp, #32]
 8008acc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d1c1      	bne.n	8008a58 <_strtod_l+0x9f0>
 8008ad4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008ad8:	0d1b      	lsrs	r3, r3, #20
 8008ada:	051b      	lsls	r3, r3, #20
 8008adc:	429d      	cmp	r5, r3
 8008ade:	d1bb      	bne.n	8008a58 <_strtod_l+0x9f0>
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	4639      	mov	r1, r7
 8008ae4:	f7f8 f908 	bl	8000cf8 <__aeabi_d2lz>
 8008ae8:	f7f7 fd78 	bl	80005dc <__aeabi_l2d>
 8008aec:	4602      	mov	r2, r0
 8008aee:	460b      	mov	r3, r1
 8008af0:	4630      	mov	r0, r6
 8008af2:	4639      	mov	r1, r7
 8008af4:	f7f7 fbe8 	bl	80002c8 <__aeabi_dsub>
 8008af8:	460b      	mov	r3, r1
 8008afa:	4602      	mov	r2, r0
 8008afc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008b00:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008b04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b06:	ea46 060a 	orr.w	r6, r6, sl
 8008b0a:	431e      	orrs	r6, r3
 8008b0c:	d06f      	beq.n	8008bee <_strtod_l+0xb86>
 8008b0e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008b48 <_strtod_l+0xae0>)
 8008b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b14:	f7f8 f802 	bl	8000b1c <__aeabi_dcmplt>
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	f47f acd3 	bne.w	80084c4 <_strtod_l+0x45c>
 8008b1e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008b50 <_strtod_l+0xae8>)
 8008b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b28:	f7f8 f816 	bl	8000b58 <__aeabi_dcmpgt>
 8008b2c:	2800      	cmp	r0, #0
 8008b2e:	d093      	beq.n	8008a58 <_strtod_l+0x9f0>
 8008b30:	e4c8      	b.n	80084c4 <_strtod_l+0x45c>
 8008b32:	bf00      	nop
 8008b34:	f3af 8000 	nop.w
 8008b38:	00000000 	.word	0x00000000
 8008b3c:	bff00000 	.word	0xbff00000
 8008b40:	00000000 	.word	0x00000000
 8008b44:	3ff00000 	.word	0x3ff00000
 8008b48:	94a03595 	.word	0x94a03595
 8008b4c:	3fdfffff 	.word	0x3fdfffff
 8008b50:	35afe535 	.word	0x35afe535
 8008b54:	3fe00000 	.word	0x3fe00000
 8008b58:	000fffff 	.word	0x000fffff
 8008b5c:	7ff00000 	.word	0x7ff00000
 8008b60:	7fefffff 	.word	0x7fefffff
 8008b64:	3ff00000 	.word	0x3ff00000
 8008b68:	3fe00000 	.word	0x3fe00000
 8008b6c:	7fe00000 	.word	0x7fe00000
 8008b70:	7c9fffff 	.word	0x7c9fffff
 8008b74:	9b08      	ldr	r3, [sp, #32]
 8008b76:	b323      	cbz	r3, 8008bc2 <_strtod_l+0xb5a>
 8008b78:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008b7c:	d821      	bhi.n	8008bc2 <_strtod_l+0xb5a>
 8008b7e:	a328      	add	r3, pc, #160	@ (adr r3, 8008c20 <_strtod_l+0xbb8>)
 8008b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b84:	4630      	mov	r0, r6
 8008b86:	4639      	mov	r1, r7
 8008b88:	f7f7 ffd2 	bl	8000b30 <__aeabi_dcmple>
 8008b8c:	b1a0      	cbz	r0, 8008bb8 <_strtod_l+0xb50>
 8008b8e:	4639      	mov	r1, r7
 8008b90:	4630      	mov	r0, r6
 8008b92:	f7f8 f829 	bl	8000be8 <__aeabi_d2uiz>
 8008b96:	2801      	cmp	r0, #1
 8008b98:	bf38      	it	cc
 8008b9a:	2001      	movcc	r0, #1
 8008b9c:	f7f7 fcd2 	bl	8000544 <__aeabi_ui2d>
 8008ba0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ba2:	4606      	mov	r6, r0
 8008ba4:	460f      	mov	r7, r1
 8008ba6:	b9fb      	cbnz	r3, 8008be8 <_strtod_l+0xb80>
 8008ba8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008bac:	9014      	str	r0, [sp, #80]	@ 0x50
 8008bae:	9315      	str	r3, [sp, #84]	@ 0x54
 8008bb0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008bb4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008bb8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008bba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008bbe:	1b5b      	subs	r3, r3, r5
 8008bc0:	9311      	str	r3, [sp, #68]	@ 0x44
 8008bc2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008bc6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008bca:	f003 f809 	bl	800bbe0 <__ulp>
 8008bce:	4650      	mov	r0, sl
 8008bd0:	ec53 2b10 	vmov	r2, r3, d0
 8008bd4:	4659      	mov	r1, fp
 8008bd6:	f7f7 fd2f 	bl	8000638 <__aeabi_dmul>
 8008bda:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008bde:	f7f7 fb75 	bl	80002cc <__adddf3>
 8008be2:	4682      	mov	sl, r0
 8008be4:	468b      	mov	fp, r1
 8008be6:	e770      	b.n	8008aca <_strtod_l+0xa62>
 8008be8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008bec:	e7e0      	b.n	8008bb0 <_strtod_l+0xb48>
 8008bee:	a30e      	add	r3, pc, #56	@ (adr r3, 8008c28 <_strtod_l+0xbc0>)
 8008bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf4:	f7f7 ff92 	bl	8000b1c <__aeabi_dcmplt>
 8008bf8:	e798      	b.n	8008b2c <_strtod_l+0xac4>
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	930e      	str	r3, [sp, #56]	@ 0x38
 8008bfe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008c00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c02:	6013      	str	r3, [r2, #0]
 8008c04:	f7ff ba6d 	b.w	80080e2 <_strtod_l+0x7a>
 8008c08:	2a65      	cmp	r2, #101	@ 0x65
 8008c0a:	f43f ab68 	beq.w	80082de <_strtod_l+0x276>
 8008c0e:	2a45      	cmp	r2, #69	@ 0x45
 8008c10:	f43f ab65 	beq.w	80082de <_strtod_l+0x276>
 8008c14:	2301      	movs	r3, #1
 8008c16:	f7ff bba0 	b.w	800835a <_strtod_l+0x2f2>
 8008c1a:	bf00      	nop
 8008c1c:	f3af 8000 	nop.w
 8008c20:	ffc00000 	.word	0xffc00000
 8008c24:	41dfffff 	.word	0x41dfffff
 8008c28:	94a03595 	.word	0x94a03595
 8008c2c:	3fcfffff 	.word	0x3fcfffff

08008c30 <_strtod_r>:
 8008c30:	4b01      	ldr	r3, [pc, #4]	@ (8008c38 <_strtod_r+0x8>)
 8008c32:	f7ff ba19 	b.w	8008068 <_strtod_l>
 8008c36:	bf00      	nop
 8008c38:	20000018 	.word	0x20000018

08008c3c <strtod>:
 8008c3c:	460a      	mov	r2, r1
 8008c3e:	4601      	mov	r1, r0
 8008c40:	4802      	ldr	r0, [pc, #8]	@ (8008c4c <strtod+0x10>)
 8008c42:	4b03      	ldr	r3, [pc, #12]	@ (8008c50 <strtod+0x14>)
 8008c44:	6800      	ldr	r0, [r0, #0]
 8008c46:	f7ff ba0f 	b.w	8008068 <_strtod_l>
 8008c4a:	bf00      	nop
 8008c4c:	20000184 	.word	0x20000184
 8008c50:	20000018 	.word	0x20000018

08008c54 <__cvt>:
 8008c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c58:	ec57 6b10 	vmov	r6, r7, d0
 8008c5c:	2f00      	cmp	r7, #0
 8008c5e:	460c      	mov	r4, r1
 8008c60:	4619      	mov	r1, r3
 8008c62:	463b      	mov	r3, r7
 8008c64:	bfbb      	ittet	lt
 8008c66:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008c6a:	461f      	movlt	r7, r3
 8008c6c:	2300      	movge	r3, #0
 8008c6e:	232d      	movlt	r3, #45	@ 0x2d
 8008c70:	700b      	strb	r3, [r1, #0]
 8008c72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c74:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008c78:	4691      	mov	r9, r2
 8008c7a:	f023 0820 	bic.w	r8, r3, #32
 8008c7e:	bfbc      	itt	lt
 8008c80:	4632      	movlt	r2, r6
 8008c82:	4616      	movlt	r6, r2
 8008c84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008c88:	d005      	beq.n	8008c96 <__cvt+0x42>
 8008c8a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008c8e:	d100      	bne.n	8008c92 <__cvt+0x3e>
 8008c90:	3401      	adds	r4, #1
 8008c92:	2102      	movs	r1, #2
 8008c94:	e000      	b.n	8008c98 <__cvt+0x44>
 8008c96:	2103      	movs	r1, #3
 8008c98:	ab03      	add	r3, sp, #12
 8008c9a:	9301      	str	r3, [sp, #4]
 8008c9c:	ab02      	add	r3, sp, #8
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	ec47 6b10 	vmov	d0, r6, r7
 8008ca4:	4653      	mov	r3, sl
 8008ca6:	4622      	mov	r2, r4
 8008ca8:	f001 fa12 	bl	800a0d0 <_dtoa_r>
 8008cac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008cb0:	4605      	mov	r5, r0
 8008cb2:	d119      	bne.n	8008ce8 <__cvt+0x94>
 8008cb4:	f019 0f01 	tst.w	r9, #1
 8008cb8:	d00e      	beq.n	8008cd8 <__cvt+0x84>
 8008cba:	eb00 0904 	add.w	r9, r0, r4
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	4630      	mov	r0, r6
 8008cc4:	4639      	mov	r1, r7
 8008cc6:	f7f7 ff1f 	bl	8000b08 <__aeabi_dcmpeq>
 8008cca:	b108      	cbz	r0, 8008cd0 <__cvt+0x7c>
 8008ccc:	f8cd 900c 	str.w	r9, [sp, #12]
 8008cd0:	2230      	movs	r2, #48	@ 0x30
 8008cd2:	9b03      	ldr	r3, [sp, #12]
 8008cd4:	454b      	cmp	r3, r9
 8008cd6:	d31e      	bcc.n	8008d16 <__cvt+0xc2>
 8008cd8:	9b03      	ldr	r3, [sp, #12]
 8008cda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008cdc:	1b5b      	subs	r3, r3, r5
 8008cde:	4628      	mov	r0, r5
 8008ce0:	6013      	str	r3, [r2, #0]
 8008ce2:	b004      	add	sp, #16
 8008ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ce8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008cec:	eb00 0904 	add.w	r9, r0, r4
 8008cf0:	d1e5      	bne.n	8008cbe <__cvt+0x6a>
 8008cf2:	7803      	ldrb	r3, [r0, #0]
 8008cf4:	2b30      	cmp	r3, #48	@ 0x30
 8008cf6:	d10a      	bne.n	8008d0e <__cvt+0xba>
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	4639      	mov	r1, r7
 8008d00:	f7f7 ff02 	bl	8000b08 <__aeabi_dcmpeq>
 8008d04:	b918      	cbnz	r0, 8008d0e <__cvt+0xba>
 8008d06:	f1c4 0401 	rsb	r4, r4, #1
 8008d0a:	f8ca 4000 	str.w	r4, [sl]
 8008d0e:	f8da 3000 	ldr.w	r3, [sl]
 8008d12:	4499      	add	r9, r3
 8008d14:	e7d3      	b.n	8008cbe <__cvt+0x6a>
 8008d16:	1c59      	adds	r1, r3, #1
 8008d18:	9103      	str	r1, [sp, #12]
 8008d1a:	701a      	strb	r2, [r3, #0]
 8008d1c:	e7d9      	b.n	8008cd2 <__cvt+0x7e>

08008d1e <__exponent>:
 8008d1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d20:	2900      	cmp	r1, #0
 8008d22:	bfba      	itte	lt
 8008d24:	4249      	neglt	r1, r1
 8008d26:	232d      	movlt	r3, #45	@ 0x2d
 8008d28:	232b      	movge	r3, #43	@ 0x2b
 8008d2a:	2909      	cmp	r1, #9
 8008d2c:	7002      	strb	r2, [r0, #0]
 8008d2e:	7043      	strb	r3, [r0, #1]
 8008d30:	dd29      	ble.n	8008d86 <__exponent+0x68>
 8008d32:	f10d 0307 	add.w	r3, sp, #7
 8008d36:	461d      	mov	r5, r3
 8008d38:	270a      	movs	r7, #10
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008d40:	fb07 1416 	mls	r4, r7, r6, r1
 8008d44:	3430      	adds	r4, #48	@ 0x30
 8008d46:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008d4a:	460c      	mov	r4, r1
 8008d4c:	2c63      	cmp	r4, #99	@ 0x63
 8008d4e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008d52:	4631      	mov	r1, r6
 8008d54:	dcf1      	bgt.n	8008d3a <__exponent+0x1c>
 8008d56:	3130      	adds	r1, #48	@ 0x30
 8008d58:	1e94      	subs	r4, r2, #2
 8008d5a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008d5e:	1c41      	adds	r1, r0, #1
 8008d60:	4623      	mov	r3, r4
 8008d62:	42ab      	cmp	r3, r5
 8008d64:	d30a      	bcc.n	8008d7c <__exponent+0x5e>
 8008d66:	f10d 0309 	add.w	r3, sp, #9
 8008d6a:	1a9b      	subs	r3, r3, r2
 8008d6c:	42ac      	cmp	r4, r5
 8008d6e:	bf88      	it	hi
 8008d70:	2300      	movhi	r3, #0
 8008d72:	3302      	adds	r3, #2
 8008d74:	4403      	add	r3, r0
 8008d76:	1a18      	subs	r0, r3, r0
 8008d78:	b003      	add	sp, #12
 8008d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d7c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008d80:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008d84:	e7ed      	b.n	8008d62 <__exponent+0x44>
 8008d86:	2330      	movs	r3, #48	@ 0x30
 8008d88:	3130      	adds	r1, #48	@ 0x30
 8008d8a:	7083      	strb	r3, [r0, #2]
 8008d8c:	70c1      	strb	r1, [r0, #3]
 8008d8e:	1d03      	adds	r3, r0, #4
 8008d90:	e7f1      	b.n	8008d76 <__exponent+0x58>
	...

08008d94 <_printf_float>:
 8008d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d98:	b08d      	sub	sp, #52	@ 0x34
 8008d9a:	460c      	mov	r4, r1
 8008d9c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008da0:	4616      	mov	r6, r2
 8008da2:	461f      	mov	r7, r3
 8008da4:	4605      	mov	r5, r0
 8008da6:	f001 f873 	bl	8009e90 <_localeconv_r>
 8008daa:	6803      	ldr	r3, [r0, #0]
 8008dac:	9304      	str	r3, [sp, #16]
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7f7 fa7e 	bl	80002b0 <strlen>
 8008db4:	2300      	movs	r3, #0
 8008db6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008db8:	f8d8 3000 	ldr.w	r3, [r8]
 8008dbc:	9005      	str	r0, [sp, #20]
 8008dbe:	3307      	adds	r3, #7
 8008dc0:	f023 0307 	bic.w	r3, r3, #7
 8008dc4:	f103 0208 	add.w	r2, r3, #8
 8008dc8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008dcc:	f8d4 b000 	ldr.w	fp, [r4]
 8008dd0:	f8c8 2000 	str.w	r2, [r8]
 8008dd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008dd8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008ddc:	9307      	str	r3, [sp, #28]
 8008dde:	f8cd 8018 	str.w	r8, [sp, #24]
 8008de2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008de6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008dea:	4b9c      	ldr	r3, [pc, #624]	@ (800905c <_printf_float+0x2c8>)
 8008dec:	f04f 32ff 	mov.w	r2, #4294967295
 8008df0:	f7f7 febc 	bl	8000b6c <__aeabi_dcmpun>
 8008df4:	bb70      	cbnz	r0, 8008e54 <_printf_float+0xc0>
 8008df6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008dfa:	4b98      	ldr	r3, [pc, #608]	@ (800905c <_printf_float+0x2c8>)
 8008dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8008e00:	f7f7 fe96 	bl	8000b30 <__aeabi_dcmple>
 8008e04:	bb30      	cbnz	r0, 8008e54 <_printf_float+0xc0>
 8008e06:	2200      	movs	r2, #0
 8008e08:	2300      	movs	r3, #0
 8008e0a:	4640      	mov	r0, r8
 8008e0c:	4649      	mov	r1, r9
 8008e0e:	f7f7 fe85 	bl	8000b1c <__aeabi_dcmplt>
 8008e12:	b110      	cbz	r0, 8008e1a <_printf_float+0x86>
 8008e14:	232d      	movs	r3, #45	@ 0x2d
 8008e16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e1a:	4a91      	ldr	r2, [pc, #580]	@ (8009060 <_printf_float+0x2cc>)
 8008e1c:	4b91      	ldr	r3, [pc, #580]	@ (8009064 <_printf_float+0x2d0>)
 8008e1e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008e22:	bf8c      	ite	hi
 8008e24:	4690      	movhi	r8, r2
 8008e26:	4698      	movls	r8, r3
 8008e28:	2303      	movs	r3, #3
 8008e2a:	6123      	str	r3, [r4, #16]
 8008e2c:	f02b 0304 	bic.w	r3, fp, #4
 8008e30:	6023      	str	r3, [r4, #0]
 8008e32:	f04f 0900 	mov.w	r9, #0
 8008e36:	9700      	str	r7, [sp, #0]
 8008e38:	4633      	mov	r3, r6
 8008e3a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008e3c:	4621      	mov	r1, r4
 8008e3e:	4628      	mov	r0, r5
 8008e40:	f000 f9d2 	bl	80091e8 <_printf_common>
 8008e44:	3001      	adds	r0, #1
 8008e46:	f040 808d 	bne.w	8008f64 <_printf_float+0x1d0>
 8008e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e4e:	b00d      	add	sp, #52	@ 0x34
 8008e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e54:	4642      	mov	r2, r8
 8008e56:	464b      	mov	r3, r9
 8008e58:	4640      	mov	r0, r8
 8008e5a:	4649      	mov	r1, r9
 8008e5c:	f7f7 fe86 	bl	8000b6c <__aeabi_dcmpun>
 8008e60:	b140      	cbz	r0, 8008e74 <_printf_float+0xe0>
 8008e62:	464b      	mov	r3, r9
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	bfbc      	itt	lt
 8008e68:	232d      	movlt	r3, #45	@ 0x2d
 8008e6a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008e6e:	4a7e      	ldr	r2, [pc, #504]	@ (8009068 <_printf_float+0x2d4>)
 8008e70:	4b7e      	ldr	r3, [pc, #504]	@ (800906c <_printf_float+0x2d8>)
 8008e72:	e7d4      	b.n	8008e1e <_printf_float+0x8a>
 8008e74:	6863      	ldr	r3, [r4, #4]
 8008e76:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008e7a:	9206      	str	r2, [sp, #24]
 8008e7c:	1c5a      	adds	r2, r3, #1
 8008e7e:	d13b      	bne.n	8008ef8 <_printf_float+0x164>
 8008e80:	2306      	movs	r3, #6
 8008e82:	6063      	str	r3, [r4, #4]
 8008e84:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008e88:	2300      	movs	r3, #0
 8008e8a:	6022      	str	r2, [r4, #0]
 8008e8c:	9303      	str	r3, [sp, #12]
 8008e8e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008e90:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008e94:	ab09      	add	r3, sp, #36	@ 0x24
 8008e96:	9300      	str	r3, [sp, #0]
 8008e98:	6861      	ldr	r1, [r4, #4]
 8008e9a:	ec49 8b10 	vmov	d0, r8, r9
 8008e9e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	f7ff fed6 	bl	8008c54 <__cvt>
 8008ea8:	9b06      	ldr	r3, [sp, #24]
 8008eaa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008eac:	2b47      	cmp	r3, #71	@ 0x47
 8008eae:	4680      	mov	r8, r0
 8008eb0:	d129      	bne.n	8008f06 <_printf_float+0x172>
 8008eb2:	1cc8      	adds	r0, r1, #3
 8008eb4:	db02      	blt.n	8008ebc <_printf_float+0x128>
 8008eb6:	6863      	ldr	r3, [r4, #4]
 8008eb8:	4299      	cmp	r1, r3
 8008eba:	dd41      	ble.n	8008f40 <_printf_float+0x1ac>
 8008ebc:	f1aa 0a02 	sub.w	sl, sl, #2
 8008ec0:	fa5f fa8a 	uxtb.w	sl, sl
 8008ec4:	3901      	subs	r1, #1
 8008ec6:	4652      	mov	r2, sl
 8008ec8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008ecc:	9109      	str	r1, [sp, #36]	@ 0x24
 8008ece:	f7ff ff26 	bl	8008d1e <__exponent>
 8008ed2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ed4:	1813      	adds	r3, r2, r0
 8008ed6:	2a01      	cmp	r2, #1
 8008ed8:	4681      	mov	r9, r0
 8008eda:	6123      	str	r3, [r4, #16]
 8008edc:	dc02      	bgt.n	8008ee4 <_printf_float+0x150>
 8008ede:	6822      	ldr	r2, [r4, #0]
 8008ee0:	07d2      	lsls	r2, r2, #31
 8008ee2:	d501      	bpl.n	8008ee8 <_printf_float+0x154>
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	6123      	str	r3, [r4, #16]
 8008ee8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d0a2      	beq.n	8008e36 <_printf_float+0xa2>
 8008ef0:	232d      	movs	r3, #45	@ 0x2d
 8008ef2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ef6:	e79e      	b.n	8008e36 <_printf_float+0xa2>
 8008ef8:	9a06      	ldr	r2, [sp, #24]
 8008efa:	2a47      	cmp	r2, #71	@ 0x47
 8008efc:	d1c2      	bne.n	8008e84 <_printf_float+0xf0>
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1c0      	bne.n	8008e84 <_printf_float+0xf0>
 8008f02:	2301      	movs	r3, #1
 8008f04:	e7bd      	b.n	8008e82 <_printf_float+0xee>
 8008f06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008f0a:	d9db      	bls.n	8008ec4 <_printf_float+0x130>
 8008f0c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008f10:	d118      	bne.n	8008f44 <_printf_float+0x1b0>
 8008f12:	2900      	cmp	r1, #0
 8008f14:	6863      	ldr	r3, [r4, #4]
 8008f16:	dd0b      	ble.n	8008f30 <_printf_float+0x19c>
 8008f18:	6121      	str	r1, [r4, #16]
 8008f1a:	b913      	cbnz	r3, 8008f22 <_printf_float+0x18e>
 8008f1c:	6822      	ldr	r2, [r4, #0]
 8008f1e:	07d0      	lsls	r0, r2, #31
 8008f20:	d502      	bpl.n	8008f28 <_printf_float+0x194>
 8008f22:	3301      	adds	r3, #1
 8008f24:	440b      	add	r3, r1
 8008f26:	6123      	str	r3, [r4, #16]
 8008f28:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008f2a:	f04f 0900 	mov.w	r9, #0
 8008f2e:	e7db      	b.n	8008ee8 <_printf_float+0x154>
 8008f30:	b913      	cbnz	r3, 8008f38 <_printf_float+0x1a4>
 8008f32:	6822      	ldr	r2, [r4, #0]
 8008f34:	07d2      	lsls	r2, r2, #31
 8008f36:	d501      	bpl.n	8008f3c <_printf_float+0x1a8>
 8008f38:	3302      	adds	r3, #2
 8008f3a:	e7f4      	b.n	8008f26 <_printf_float+0x192>
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e7f2      	b.n	8008f26 <_printf_float+0x192>
 8008f40:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008f44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f46:	4299      	cmp	r1, r3
 8008f48:	db05      	blt.n	8008f56 <_printf_float+0x1c2>
 8008f4a:	6823      	ldr	r3, [r4, #0]
 8008f4c:	6121      	str	r1, [r4, #16]
 8008f4e:	07d8      	lsls	r0, r3, #31
 8008f50:	d5ea      	bpl.n	8008f28 <_printf_float+0x194>
 8008f52:	1c4b      	adds	r3, r1, #1
 8008f54:	e7e7      	b.n	8008f26 <_printf_float+0x192>
 8008f56:	2900      	cmp	r1, #0
 8008f58:	bfd4      	ite	le
 8008f5a:	f1c1 0202 	rsble	r2, r1, #2
 8008f5e:	2201      	movgt	r2, #1
 8008f60:	4413      	add	r3, r2
 8008f62:	e7e0      	b.n	8008f26 <_printf_float+0x192>
 8008f64:	6823      	ldr	r3, [r4, #0]
 8008f66:	055a      	lsls	r2, r3, #21
 8008f68:	d407      	bmi.n	8008f7a <_printf_float+0x1e6>
 8008f6a:	6923      	ldr	r3, [r4, #16]
 8008f6c:	4642      	mov	r2, r8
 8008f6e:	4631      	mov	r1, r6
 8008f70:	4628      	mov	r0, r5
 8008f72:	47b8      	blx	r7
 8008f74:	3001      	adds	r0, #1
 8008f76:	d12b      	bne.n	8008fd0 <_printf_float+0x23c>
 8008f78:	e767      	b.n	8008e4a <_printf_float+0xb6>
 8008f7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008f7e:	f240 80dd 	bls.w	800913c <_printf_float+0x3a8>
 8008f82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008f86:	2200      	movs	r2, #0
 8008f88:	2300      	movs	r3, #0
 8008f8a:	f7f7 fdbd 	bl	8000b08 <__aeabi_dcmpeq>
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	d033      	beq.n	8008ffa <_printf_float+0x266>
 8008f92:	4a37      	ldr	r2, [pc, #220]	@ (8009070 <_printf_float+0x2dc>)
 8008f94:	2301      	movs	r3, #1
 8008f96:	4631      	mov	r1, r6
 8008f98:	4628      	mov	r0, r5
 8008f9a:	47b8      	blx	r7
 8008f9c:	3001      	adds	r0, #1
 8008f9e:	f43f af54 	beq.w	8008e4a <_printf_float+0xb6>
 8008fa2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008fa6:	4543      	cmp	r3, r8
 8008fa8:	db02      	blt.n	8008fb0 <_printf_float+0x21c>
 8008faa:	6823      	ldr	r3, [r4, #0]
 8008fac:	07d8      	lsls	r0, r3, #31
 8008fae:	d50f      	bpl.n	8008fd0 <_printf_float+0x23c>
 8008fb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fb4:	4631      	mov	r1, r6
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	47b8      	blx	r7
 8008fba:	3001      	adds	r0, #1
 8008fbc:	f43f af45 	beq.w	8008e4a <_printf_float+0xb6>
 8008fc0:	f04f 0900 	mov.w	r9, #0
 8008fc4:	f108 38ff 	add.w	r8, r8, #4294967295
 8008fc8:	f104 0a1a 	add.w	sl, r4, #26
 8008fcc:	45c8      	cmp	r8, r9
 8008fce:	dc09      	bgt.n	8008fe4 <_printf_float+0x250>
 8008fd0:	6823      	ldr	r3, [r4, #0]
 8008fd2:	079b      	lsls	r3, r3, #30
 8008fd4:	f100 8103 	bmi.w	80091de <_printf_float+0x44a>
 8008fd8:	68e0      	ldr	r0, [r4, #12]
 8008fda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fdc:	4298      	cmp	r0, r3
 8008fde:	bfb8      	it	lt
 8008fe0:	4618      	movlt	r0, r3
 8008fe2:	e734      	b.n	8008e4e <_printf_float+0xba>
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	4652      	mov	r2, sl
 8008fe8:	4631      	mov	r1, r6
 8008fea:	4628      	mov	r0, r5
 8008fec:	47b8      	blx	r7
 8008fee:	3001      	adds	r0, #1
 8008ff0:	f43f af2b 	beq.w	8008e4a <_printf_float+0xb6>
 8008ff4:	f109 0901 	add.w	r9, r9, #1
 8008ff8:	e7e8      	b.n	8008fcc <_printf_float+0x238>
 8008ffa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	dc39      	bgt.n	8009074 <_printf_float+0x2e0>
 8009000:	4a1b      	ldr	r2, [pc, #108]	@ (8009070 <_printf_float+0x2dc>)
 8009002:	2301      	movs	r3, #1
 8009004:	4631      	mov	r1, r6
 8009006:	4628      	mov	r0, r5
 8009008:	47b8      	blx	r7
 800900a:	3001      	adds	r0, #1
 800900c:	f43f af1d 	beq.w	8008e4a <_printf_float+0xb6>
 8009010:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009014:	ea59 0303 	orrs.w	r3, r9, r3
 8009018:	d102      	bne.n	8009020 <_printf_float+0x28c>
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	07d9      	lsls	r1, r3, #31
 800901e:	d5d7      	bpl.n	8008fd0 <_printf_float+0x23c>
 8009020:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009024:	4631      	mov	r1, r6
 8009026:	4628      	mov	r0, r5
 8009028:	47b8      	blx	r7
 800902a:	3001      	adds	r0, #1
 800902c:	f43f af0d 	beq.w	8008e4a <_printf_float+0xb6>
 8009030:	f04f 0a00 	mov.w	sl, #0
 8009034:	f104 0b1a 	add.w	fp, r4, #26
 8009038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800903a:	425b      	negs	r3, r3
 800903c:	4553      	cmp	r3, sl
 800903e:	dc01      	bgt.n	8009044 <_printf_float+0x2b0>
 8009040:	464b      	mov	r3, r9
 8009042:	e793      	b.n	8008f6c <_printf_float+0x1d8>
 8009044:	2301      	movs	r3, #1
 8009046:	465a      	mov	r2, fp
 8009048:	4631      	mov	r1, r6
 800904a:	4628      	mov	r0, r5
 800904c:	47b8      	blx	r7
 800904e:	3001      	adds	r0, #1
 8009050:	f43f aefb 	beq.w	8008e4a <_printf_float+0xb6>
 8009054:	f10a 0a01 	add.w	sl, sl, #1
 8009058:	e7ee      	b.n	8009038 <_printf_float+0x2a4>
 800905a:	bf00      	nop
 800905c:	7fefffff 	.word	0x7fefffff
 8009060:	0800ccea 	.word	0x0800ccea
 8009064:	0800cce6 	.word	0x0800cce6
 8009068:	0800ccf2 	.word	0x0800ccf2
 800906c:	0800ccee 	.word	0x0800ccee
 8009070:	0800ccf6 	.word	0x0800ccf6
 8009074:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009076:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800907a:	4553      	cmp	r3, sl
 800907c:	bfa8      	it	ge
 800907e:	4653      	movge	r3, sl
 8009080:	2b00      	cmp	r3, #0
 8009082:	4699      	mov	r9, r3
 8009084:	dc36      	bgt.n	80090f4 <_printf_float+0x360>
 8009086:	f04f 0b00 	mov.w	fp, #0
 800908a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800908e:	f104 021a 	add.w	r2, r4, #26
 8009092:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009094:	9306      	str	r3, [sp, #24]
 8009096:	eba3 0309 	sub.w	r3, r3, r9
 800909a:	455b      	cmp	r3, fp
 800909c:	dc31      	bgt.n	8009102 <_printf_float+0x36e>
 800909e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090a0:	459a      	cmp	sl, r3
 80090a2:	dc3a      	bgt.n	800911a <_printf_float+0x386>
 80090a4:	6823      	ldr	r3, [r4, #0]
 80090a6:	07da      	lsls	r2, r3, #31
 80090a8:	d437      	bmi.n	800911a <_printf_float+0x386>
 80090aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090ac:	ebaa 0903 	sub.w	r9, sl, r3
 80090b0:	9b06      	ldr	r3, [sp, #24]
 80090b2:	ebaa 0303 	sub.w	r3, sl, r3
 80090b6:	4599      	cmp	r9, r3
 80090b8:	bfa8      	it	ge
 80090ba:	4699      	movge	r9, r3
 80090bc:	f1b9 0f00 	cmp.w	r9, #0
 80090c0:	dc33      	bgt.n	800912a <_printf_float+0x396>
 80090c2:	f04f 0800 	mov.w	r8, #0
 80090c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090ca:	f104 0b1a 	add.w	fp, r4, #26
 80090ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090d0:	ebaa 0303 	sub.w	r3, sl, r3
 80090d4:	eba3 0309 	sub.w	r3, r3, r9
 80090d8:	4543      	cmp	r3, r8
 80090da:	f77f af79 	ble.w	8008fd0 <_printf_float+0x23c>
 80090de:	2301      	movs	r3, #1
 80090e0:	465a      	mov	r2, fp
 80090e2:	4631      	mov	r1, r6
 80090e4:	4628      	mov	r0, r5
 80090e6:	47b8      	blx	r7
 80090e8:	3001      	adds	r0, #1
 80090ea:	f43f aeae 	beq.w	8008e4a <_printf_float+0xb6>
 80090ee:	f108 0801 	add.w	r8, r8, #1
 80090f2:	e7ec      	b.n	80090ce <_printf_float+0x33a>
 80090f4:	4642      	mov	r2, r8
 80090f6:	4631      	mov	r1, r6
 80090f8:	4628      	mov	r0, r5
 80090fa:	47b8      	blx	r7
 80090fc:	3001      	adds	r0, #1
 80090fe:	d1c2      	bne.n	8009086 <_printf_float+0x2f2>
 8009100:	e6a3      	b.n	8008e4a <_printf_float+0xb6>
 8009102:	2301      	movs	r3, #1
 8009104:	4631      	mov	r1, r6
 8009106:	4628      	mov	r0, r5
 8009108:	9206      	str	r2, [sp, #24]
 800910a:	47b8      	blx	r7
 800910c:	3001      	adds	r0, #1
 800910e:	f43f ae9c 	beq.w	8008e4a <_printf_float+0xb6>
 8009112:	9a06      	ldr	r2, [sp, #24]
 8009114:	f10b 0b01 	add.w	fp, fp, #1
 8009118:	e7bb      	b.n	8009092 <_printf_float+0x2fe>
 800911a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800911e:	4631      	mov	r1, r6
 8009120:	4628      	mov	r0, r5
 8009122:	47b8      	blx	r7
 8009124:	3001      	adds	r0, #1
 8009126:	d1c0      	bne.n	80090aa <_printf_float+0x316>
 8009128:	e68f      	b.n	8008e4a <_printf_float+0xb6>
 800912a:	9a06      	ldr	r2, [sp, #24]
 800912c:	464b      	mov	r3, r9
 800912e:	4442      	add	r2, r8
 8009130:	4631      	mov	r1, r6
 8009132:	4628      	mov	r0, r5
 8009134:	47b8      	blx	r7
 8009136:	3001      	adds	r0, #1
 8009138:	d1c3      	bne.n	80090c2 <_printf_float+0x32e>
 800913a:	e686      	b.n	8008e4a <_printf_float+0xb6>
 800913c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009140:	f1ba 0f01 	cmp.w	sl, #1
 8009144:	dc01      	bgt.n	800914a <_printf_float+0x3b6>
 8009146:	07db      	lsls	r3, r3, #31
 8009148:	d536      	bpl.n	80091b8 <_printf_float+0x424>
 800914a:	2301      	movs	r3, #1
 800914c:	4642      	mov	r2, r8
 800914e:	4631      	mov	r1, r6
 8009150:	4628      	mov	r0, r5
 8009152:	47b8      	blx	r7
 8009154:	3001      	adds	r0, #1
 8009156:	f43f ae78 	beq.w	8008e4a <_printf_float+0xb6>
 800915a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800915e:	4631      	mov	r1, r6
 8009160:	4628      	mov	r0, r5
 8009162:	47b8      	blx	r7
 8009164:	3001      	adds	r0, #1
 8009166:	f43f ae70 	beq.w	8008e4a <_printf_float+0xb6>
 800916a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800916e:	2200      	movs	r2, #0
 8009170:	2300      	movs	r3, #0
 8009172:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009176:	f7f7 fcc7 	bl	8000b08 <__aeabi_dcmpeq>
 800917a:	b9c0      	cbnz	r0, 80091ae <_printf_float+0x41a>
 800917c:	4653      	mov	r3, sl
 800917e:	f108 0201 	add.w	r2, r8, #1
 8009182:	4631      	mov	r1, r6
 8009184:	4628      	mov	r0, r5
 8009186:	47b8      	blx	r7
 8009188:	3001      	adds	r0, #1
 800918a:	d10c      	bne.n	80091a6 <_printf_float+0x412>
 800918c:	e65d      	b.n	8008e4a <_printf_float+0xb6>
 800918e:	2301      	movs	r3, #1
 8009190:	465a      	mov	r2, fp
 8009192:	4631      	mov	r1, r6
 8009194:	4628      	mov	r0, r5
 8009196:	47b8      	blx	r7
 8009198:	3001      	adds	r0, #1
 800919a:	f43f ae56 	beq.w	8008e4a <_printf_float+0xb6>
 800919e:	f108 0801 	add.w	r8, r8, #1
 80091a2:	45d0      	cmp	r8, sl
 80091a4:	dbf3      	blt.n	800918e <_printf_float+0x3fa>
 80091a6:	464b      	mov	r3, r9
 80091a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80091ac:	e6df      	b.n	8008f6e <_printf_float+0x1da>
 80091ae:	f04f 0800 	mov.w	r8, #0
 80091b2:	f104 0b1a 	add.w	fp, r4, #26
 80091b6:	e7f4      	b.n	80091a2 <_printf_float+0x40e>
 80091b8:	2301      	movs	r3, #1
 80091ba:	4642      	mov	r2, r8
 80091bc:	e7e1      	b.n	8009182 <_printf_float+0x3ee>
 80091be:	2301      	movs	r3, #1
 80091c0:	464a      	mov	r2, r9
 80091c2:	4631      	mov	r1, r6
 80091c4:	4628      	mov	r0, r5
 80091c6:	47b8      	blx	r7
 80091c8:	3001      	adds	r0, #1
 80091ca:	f43f ae3e 	beq.w	8008e4a <_printf_float+0xb6>
 80091ce:	f108 0801 	add.w	r8, r8, #1
 80091d2:	68e3      	ldr	r3, [r4, #12]
 80091d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80091d6:	1a5b      	subs	r3, r3, r1
 80091d8:	4543      	cmp	r3, r8
 80091da:	dcf0      	bgt.n	80091be <_printf_float+0x42a>
 80091dc:	e6fc      	b.n	8008fd8 <_printf_float+0x244>
 80091de:	f04f 0800 	mov.w	r8, #0
 80091e2:	f104 0919 	add.w	r9, r4, #25
 80091e6:	e7f4      	b.n	80091d2 <_printf_float+0x43e>

080091e8 <_printf_common>:
 80091e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091ec:	4616      	mov	r6, r2
 80091ee:	4698      	mov	r8, r3
 80091f0:	688a      	ldr	r2, [r1, #8]
 80091f2:	690b      	ldr	r3, [r1, #16]
 80091f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80091f8:	4293      	cmp	r3, r2
 80091fa:	bfb8      	it	lt
 80091fc:	4613      	movlt	r3, r2
 80091fe:	6033      	str	r3, [r6, #0]
 8009200:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009204:	4607      	mov	r7, r0
 8009206:	460c      	mov	r4, r1
 8009208:	b10a      	cbz	r2, 800920e <_printf_common+0x26>
 800920a:	3301      	adds	r3, #1
 800920c:	6033      	str	r3, [r6, #0]
 800920e:	6823      	ldr	r3, [r4, #0]
 8009210:	0699      	lsls	r1, r3, #26
 8009212:	bf42      	ittt	mi
 8009214:	6833      	ldrmi	r3, [r6, #0]
 8009216:	3302      	addmi	r3, #2
 8009218:	6033      	strmi	r3, [r6, #0]
 800921a:	6825      	ldr	r5, [r4, #0]
 800921c:	f015 0506 	ands.w	r5, r5, #6
 8009220:	d106      	bne.n	8009230 <_printf_common+0x48>
 8009222:	f104 0a19 	add.w	sl, r4, #25
 8009226:	68e3      	ldr	r3, [r4, #12]
 8009228:	6832      	ldr	r2, [r6, #0]
 800922a:	1a9b      	subs	r3, r3, r2
 800922c:	42ab      	cmp	r3, r5
 800922e:	dc26      	bgt.n	800927e <_printf_common+0x96>
 8009230:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009234:	6822      	ldr	r2, [r4, #0]
 8009236:	3b00      	subs	r3, #0
 8009238:	bf18      	it	ne
 800923a:	2301      	movne	r3, #1
 800923c:	0692      	lsls	r2, r2, #26
 800923e:	d42b      	bmi.n	8009298 <_printf_common+0xb0>
 8009240:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009244:	4641      	mov	r1, r8
 8009246:	4638      	mov	r0, r7
 8009248:	47c8      	blx	r9
 800924a:	3001      	adds	r0, #1
 800924c:	d01e      	beq.n	800928c <_printf_common+0xa4>
 800924e:	6823      	ldr	r3, [r4, #0]
 8009250:	6922      	ldr	r2, [r4, #16]
 8009252:	f003 0306 	and.w	r3, r3, #6
 8009256:	2b04      	cmp	r3, #4
 8009258:	bf02      	ittt	eq
 800925a:	68e5      	ldreq	r5, [r4, #12]
 800925c:	6833      	ldreq	r3, [r6, #0]
 800925e:	1aed      	subeq	r5, r5, r3
 8009260:	68a3      	ldr	r3, [r4, #8]
 8009262:	bf0c      	ite	eq
 8009264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009268:	2500      	movne	r5, #0
 800926a:	4293      	cmp	r3, r2
 800926c:	bfc4      	itt	gt
 800926e:	1a9b      	subgt	r3, r3, r2
 8009270:	18ed      	addgt	r5, r5, r3
 8009272:	2600      	movs	r6, #0
 8009274:	341a      	adds	r4, #26
 8009276:	42b5      	cmp	r5, r6
 8009278:	d11a      	bne.n	80092b0 <_printf_common+0xc8>
 800927a:	2000      	movs	r0, #0
 800927c:	e008      	b.n	8009290 <_printf_common+0xa8>
 800927e:	2301      	movs	r3, #1
 8009280:	4652      	mov	r2, sl
 8009282:	4641      	mov	r1, r8
 8009284:	4638      	mov	r0, r7
 8009286:	47c8      	blx	r9
 8009288:	3001      	adds	r0, #1
 800928a:	d103      	bne.n	8009294 <_printf_common+0xac>
 800928c:	f04f 30ff 	mov.w	r0, #4294967295
 8009290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009294:	3501      	adds	r5, #1
 8009296:	e7c6      	b.n	8009226 <_printf_common+0x3e>
 8009298:	18e1      	adds	r1, r4, r3
 800929a:	1c5a      	adds	r2, r3, #1
 800929c:	2030      	movs	r0, #48	@ 0x30
 800929e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80092a2:	4422      	add	r2, r4
 80092a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80092a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80092ac:	3302      	adds	r3, #2
 80092ae:	e7c7      	b.n	8009240 <_printf_common+0x58>
 80092b0:	2301      	movs	r3, #1
 80092b2:	4622      	mov	r2, r4
 80092b4:	4641      	mov	r1, r8
 80092b6:	4638      	mov	r0, r7
 80092b8:	47c8      	blx	r9
 80092ba:	3001      	adds	r0, #1
 80092bc:	d0e6      	beq.n	800928c <_printf_common+0xa4>
 80092be:	3601      	adds	r6, #1
 80092c0:	e7d9      	b.n	8009276 <_printf_common+0x8e>
	...

080092c4 <_printf_i>:
 80092c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092c8:	7e0f      	ldrb	r7, [r1, #24]
 80092ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80092cc:	2f78      	cmp	r7, #120	@ 0x78
 80092ce:	4691      	mov	r9, r2
 80092d0:	4680      	mov	r8, r0
 80092d2:	460c      	mov	r4, r1
 80092d4:	469a      	mov	sl, r3
 80092d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80092da:	d807      	bhi.n	80092ec <_printf_i+0x28>
 80092dc:	2f62      	cmp	r7, #98	@ 0x62
 80092de:	d80a      	bhi.n	80092f6 <_printf_i+0x32>
 80092e0:	2f00      	cmp	r7, #0
 80092e2:	f000 80d1 	beq.w	8009488 <_printf_i+0x1c4>
 80092e6:	2f58      	cmp	r7, #88	@ 0x58
 80092e8:	f000 80b8 	beq.w	800945c <_printf_i+0x198>
 80092ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80092f4:	e03a      	b.n	800936c <_printf_i+0xa8>
 80092f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80092fa:	2b15      	cmp	r3, #21
 80092fc:	d8f6      	bhi.n	80092ec <_printf_i+0x28>
 80092fe:	a101      	add	r1, pc, #4	@ (adr r1, 8009304 <_printf_i+0x40>)
 8009300:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009304:	0800935d 	.word	0x0800935d
 8009308:	08009371 	.word	0x08009371
 800930c:	080092ed 	.word	0x080092ed
 8009310:	080092ed 	.word	0x080092ed
 8009314:	080092ed 	.word	0x080092ed
 8009318:	080092ed 	.word	0x080092ed
 800931c:	08009371 	.word	0x08009371
 8009320:	080092ed 	.word	0x080092ed
 8009324:	080092ed 	.word	0x080092ed
 8009328:	080092ed 	.word	0x080092ed
 800932c:	080092ed 	.word	0x080092ed
 8009330:	0800946f 	.word	0x0800946f
 8009334:	0800939b 	.word	0x0800939b
 8009338:	08009429 	.word	0x08009429
 800933c:	080092ed 	.word	0x080092ed
 8009340:	080092ed 	.word	0x080092ed
 8009344:	08009491 	.word	0x08009491
 8009348:	080092ed 	.word	0x080092ed
 800934c:	0800939b 	.word	0x0800939b
 8009350:	080092ed 	.word	0x080092ed
 8009354:	080092ed 	.word	0x080092ed
 8009358:	08009431 	.word	0x08009431
 800935c:	6833      	ldr	r3, [r6, #0]
 800935e:	1d1a      	adds	r2, r3, #4
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	6032      	str	r2, [r6, #0]
 8009364:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009368:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800936c:	2301      	movs	r3, #1
 800936e:	e09c      	b.n	80094aa <_printf_i+0x1e6>
 8009370:	6833      	ldr	r3, [r6, #0]
 8009372:	6820      	ldr	r0, [r4, #0]
 8009374:	1d19      	adds	r1, r3, #4
 8009376:	6031      	str	r1, [r6, #0]
 8009378:	0606      	lsls	r6, r0, #24
 800937a:	d501      	bpl.n	8009380 <_printf_i+0xbc>
 800937c:	681d      	ldr	r5, [r3, #0]
 800937e:	e003      	b.n	8009388 <_printf_i+0xc4>
 8009380:	0645      	lsls	r5, r0, #25
 8009382:	d5fb      	bpl.n	800937c <_printf_i+0xb8>
 8009384:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009388:	2d00      	cmp	r5, #0
 800938a:	da03      	bge.n	8009394 <_printf_i+0xd0>
 800938c:	232d      	movs	r3, #45	@ 0x2d
 800938e:	426d      	negs	r5, r5
 8009390:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009394:	4858      	ldr	r0, [pc, #352]	@ (80094f8 <_printf_i+0x234>)
 8009396:	230a      	movs	r3, #10
 8009398:	e011      	b.n	80093be <_printf_i+0xfa>
 800939a:	6821      	ldr	r1, [r4, #0]
 800939c:	6833      	ldr	r3, [r6, #0]
 800939e:	0608      	lsls	r0, r1, #24
 80093a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80093a4:	d402      	bmi.n	80093ac <_printf_i+0xe8>
 80093a6:	0649      	lsls	r1, r1, #25
 80093a8:	bf48      	it	mi
 80093aa:	b2ad      	uxthmi	r5, r5
 80093ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80093ae:	4852      	ldr	r0, [pc, #328]	@ (80094f8 <_printf_i+0x234>)
 80093b0:	6033      	str	r3, [r6, #0]
 80093b2:	bf14      	ite	ne
 80093b4:	230a      	movne	r3, #10
 80093b6:	2308      	moveq	r3, #8
 80093b8:	2100      	movs	r1, #0
 80093ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80093be:	6866      	ldr	r6, [r4, #4]
 80093c0:	60a6      	str	r6, [r4, #8]
 80093c2:	2e00      	cmp	r6, #0
 80093c4:	db05      	blt.n	80093d2 <_printf_i+0x10e>
 80093c6:	6821      	ldr	r1, [r4, #0]
 80093c8:	432e      	orrs	r6, r5
 80093ca:	f021 0104 	bic.w	r1, r1, #4
 80093ce:	6021      	str	r1, [r4, #0]
 80093d0:	d04b      	beq.n	800946a <_printf_i+0x1a6>
 80093d2:	4616      	mov	r6, r2
 80093d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80093d8:	fb03 5711 	mls	r7, r3, r1, r5
 80093dc:	5dc7      	ldrb	r7, [r0, r7]
 80093de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80093e2:	462f      	mov	r7, r5
 80093e4:	42bb      	cmp	r3, r7
 80093e6:	460d      	mov	r5, r1
 80093e8:	d9f4      	bls.n	80093d4 <_printf_i+0x110>
 80093ea:	2b08      	cmp	r3, #8
 80093ec:	d10b      	bne.n	8009406 <_printf_i+0x142>
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	07df      	lsls	r7, r3, #31
 80093f2:	d508      	bpl.n	8009406 <_printf_i+0x142>
 80093f4:	6923      	ldr	r3, [r4, #16]
 80093f6:	6861      	ldr	r1, [r4, #4]
 80093f8:	4299      	cmp	r1, r3
 80093fa:	bfde      	ittt	le
 80093fc:	2330      	movle	r3, #48	@ 0x30
 80093fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009402:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009406:	1b92      	subs	r2, r2, r6
 8009408:	6122      	str	r2, [r4, #16]
 800940a:	f8cd a000 	str.w	sl, [sp]
 800940e:	464b      	mov	r3, r9
 8009410:	aa03      	add	r2, sp, #12
 8009412:	4621      	mov	r1, r4
 8009414:	4640      	mov	r0, r8
 8009416:	f7ff fee7 	bl	80091e8 <_printf_common>
 800941a:	3001      	adds	r0, #1
 800941c:	d14a      	bne.n	80094b4 <_printf_i+0x1f0>
 800941e:	f04f 30ff 	mov.w	r0, #4294967295
 8009422:	b004      	add	sp, #16
 8009424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009428:	6823      	ldr	r3, [r4, #0]
 800942a:	f043 0320 	orr.w	r3, r3, #32
 800942e:	6023      	str	r3, [r4, #0]
 8009430:	4832      	ldr	r0, [pc, #200]	@ (80094fc <_printf_i+0x238>)
 8009432:	2778      	movs	r7, #120	@ 0x78
 8009434:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009438:	6823      	ldr	r3, [r4, #0]
 800943a:	6831      	ldr	r1, [r6, #0]
 800943c:	061f      	lsls	r7, r3, #24
 800943e:	f851 5b04 	ldr.w	r5, [r1], #4
 8009442:	d402      	bmi.n	800944a <_printf_i+0x186>
 8009444:	065f      	lsls	r7, r3, #25
 8009446:	bf48      	it	mi
 8009448:	b2ad      	uxthmi	r5, r5
 800944a:	6031      	str	r1, [r6, #0]
 800944c:	07d9      	lsls	r1, r3, #31
 800944e:	bf44      	itt	mi
 8009450:	f043 0320 	orrmi.w	r3, r3, #32
 8009454:	6023      	strmi	r3, [r4, #0]
 8009456:	b11d      	cbz	r5, 8009460 <_printf_i+0x19c>
 8009458:	2310      	movs	r3, #16
 800945a:	e7ad      	b.n	80093b8 <_printf_i+0xf4>
 800945c:	4826      	ldr	r0, [pc, #152]	@ (80094f8 <_printf_i+0x234>)
 800945e:	e7e9      	b.n	8009434 <_printf_i+0x170>
 8009460:	6823      	ldr	r3, [r4, #0]
 8009462:	f023 0320 	bic.w	r3, r3, #32
 8009466:	6023      	str	r3, [r4, #0]
 8009468:	e7f6      	b.n	8009458 <_printf_i+0x194>
 800946a:	4616      	mov	r6, r2
 800946c:	e7bd      	b.n	80093ea <_printf_i+0x126>
 800946e:	6833      	ldr	r3, [r6, #0]
 8009470:	6825      	ldr	r5, [r4, #0]
 8009472:	6961      	ldr	r1, [r4, #20]
 8009474:	1d18      	adds	r0, r3, #4
 8009476:	6030      	str	r0, [r6, #0]
 8009478:	062e      	lsls	r6, r5, #24
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	d501      	bpl.n	8009482 <_printf_i+0x1be>
 800947e:	6019      	str	r1, [r3, #0]
 8009480:	e002      	b.n	8009488 <_printf_i+0x1c4>
 8009482:	0668      	lsls	r0, r5, #25
 8009484:	d5fb      	bpl.n	800947e <_printf_i+0x1ba>
 8009486:	8019      	strh	r1, [r3, #0]
 8009488:	2300      	movs	r3, #0
 800948a:	6123      	str	r3, [r4, #16]
 800948c:	4616      	mov	r6, r2
 800948e:	e7bc      	b.n	800940a <_printf_i+0x146>
 8009490:	6833      	ldr	r3, [r6, #0]
 8009492:	1d1a      	adds	r2, r3, #4
 8009494:	6032      	str	r2, [r6, #0]
 8009496:	681e      	ldr	r6, [r3, #0]
 8009498:	6862      	ldr	r2, [r4, #4]
 800949a:	2100      	movs	r1, #0
 800949c:	4630      	mov	r0, r6
 800949e:	f7f6 feb7 	bl	8000210 <memchr>
 80094a2:	b108      	cbz	r0, 80094a8 <_printf_i+0x1e4>
 80094a4:	1b80      	subs	r0, r0, r6
 80094a6:	6060      	str	r0, [r4, #4]
 80094a8:	6863      	ldr	r3, [r4, #4]
 80094aa:	6123      	str	r3, [r4, #16]
 80094ac:	2300      	movs	r3, #0
 80094ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094b2:	e7aa      	b.n	800940a <_printf_i+0x146>
 80094b4:	6923      	ldr	r3, [r4, #16]
 80094b6:	4632      	mov	r2, r6
 80094b8:	4649      	mov	r1, r9
 80094ba:	4640      	mov	r0, r8
 80094bc:	47d0      	blx	sl
 80094be:	3001      	adds	r0, #1
 80094c0:	d0ad      	beq.n	800941e <_printf_i+0x15a>
 80094c2:	6823      	ldr	r3, [r4, #0]
 80094c4:	079b      	lsls	r3, r3, #30
 80094c6:	d413      	bmi.n	80094f0 <_printf_i+0x22c>
 80094c8:	68e0      	ldr	r0, [r4, #12]
 80094ca:	9b03      	ldr	r3, [sp, #12]
 80094cc:	4298      	cmp	r0, r3
 80094ce:	bfb8      	it	lt
 80094d0:	4618      	movlt	r0, r3
 80094d2:	e7a6      	b.n	8009422 <_printf_i+0x15e>
 80094d4:	2301      	movs	r3, #1
 80094d6:	4632      	mov	r2, r6
 80094d8:	4649      	mov	r1, r9
 80094da:	4640      	mov	r0, r8
 80094dc:	47d0      	blx	sl
 80094de:	3001      	adds	r0, #1
 80094e0:	d09d      	beq.n	800941e <_printf_i+0x15a>
 80094e2:	3501      	adds	r5, #1
 80094e4:	68e3      	ldr	r3, [r4, #12]
 80094e6:	9903      	ldr	r1, [sp, #12]
 80094e8:	1a5b      	subs	r3, r3, r1
 80094ea:	42ab      	cmp	r3, r5
 80094ec:	dcf2      	bgt.n	80094d4 <_printf_i+0x210>
 80094ee:	e7eb      	b.n	80094c8 <_printf_i+0x204>
 80094f0:	2500      	movs	r5, #0
 80094f2:	f104 0619 	add.w	r6, r4, #25
 80094f6:	e7f5      	b.n	80094e4 <_printf_i+0x220>
 80094f8:	0800ccf8 	.word	0x0800ccf8
 80094fc:	0800cd09 	.word	0x0800cd09

08009500 <_scanf_float>:
 8009500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009504:	b087      	sub	sp, #28
 8009506:	4691      	mov	r9, r2
 8009508:	9303      	str	r3, [sp, #12]
 800950a:	688b      	ldr	r3, [r1, #8]
 800950c:	1e5a      	subs	r2, r3, #1
 800950e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009512:	bf81      	itttt	hi
 8009514:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009518:	eb03 0b05 	addhi.w	fp, r3, r5
 800951c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009520:	608b      	strhi	r3, [r1, #8]
 8009522:	680b      	ldr	r3, [r1, #0]
 8009524:	460a      	mov	r2, r1
 8009526:	f04f 0500 	mov.w	r5, #0
 800952a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800952e:	f842 3b1c 	str.w	r3, [r2], #28
 8009532:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009536:	4680      	mov	r8, r0
 8009538:	460c      	mov	r4, r1
 800953a:	bf98      	it	ls
 800953c:	f04f 0b00 	movls.w	fp, #0
 8009540:	9201      	str	r2, [sp, #4]
 8009542:	4616      	mov	r6, r2
 8009544:	46aa      	mov	sl, r5
 8009546:	462f      	mov	r7, r5
 8009548:	9502      	str	r5, [sp, #8]
 800954a:	68a2      	ldr	r2, [r4, #8]
 800954c:	b15a      	cbz	r2, 8009566 <_scanf_float+0x66>
 800954e:	f8d9 3000 	ldr.w	r3, [r9]
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	2b4e      	cmp	r3, #78	@ 0x4e
 8009556:	d863      	bhi.n	8009620 <_scanf_float+0x120>
 8009558:	2b40      	cmp	r3, #64	@ 0x40
 800955a:	d83b      	bhi.n	80095d4 <_scanf_float+0xd4>
 800955c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009560:	b2c8      	uxtb	r0, r1
 8009562:	280e      	cmp	r0, #14
 8009564:	d939      	bls.n	80095da <_scanf_float+0xda>
 8009566:	b11f      	cbz	r7, 8009570 <_scanf_float+0x70>
 8009568:	6823      	ldr	r3, [r4, #0]
 800956a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800956e:	6023      	str	r3, [r4, #0]
 8009570:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009574:	f1ba 0f01 	cmp.w	sl, #1
 8009578:	f200 8114 	bhi.w	80097a4 <_scanf_float+0x2a4>
 800957c:	9b01      	ldr	r3, [sp, #4]
 800957e:	429e      	cmp	r6, r3
 8009580:	f200 8105 	bhi.w	800978e <_scanf_float+0x28e>
 8009584:	2001      	movs	r0, #1
 8009586:	b007      	add	sp, #28
 8009588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800958c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009590:	2a0d      	cmp	r2, #13
 8009592:	d8e8      	bhi.n	8009566 <_scanf_float+0x66>
 8009594:	a101      	add	r1, pc, #4	@ (adr r1, 800959c <_scanf_float+0x9c>)
 8009596:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800959a:	bf00      	nop
 800959c:	080096e5 	.word	0x080096e5
 80095a0:	08009567 	.word	0x08009567
 80095a4:	08009567 	.word	0x08009567
 80095a8:	08009567 	.word	0x08009567
 80095ac:	08009741 	.word	0x08009741
 80095b0:	0800971b 	.word	0x0800971b
 80095b4:	08009567 	.word	0x08009567
 80095b8:	08009567 	.word	0x08009567
 80095bc:	080096f3 	.word	0x080096f3
 80095c0:	08009567 	.word	0x08009567
 80095c4:	08009567 	.word	0x08009567
 80095c8:	08009567 	.word	0x08009567
 80095cc:	08009567 	.word	0x08009567
 80095d0:	080096af 	.word	0x080096af
 80095d4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80095d8:	e7da      	b.n	8009590 <_scanf_float+0x90>
 80095da:	290e      	cmp	r1, #14
 80095dc:	d8c3      	bhi.n	8009566 <_scanf_float+0x66>
 80095de:	a001      	add	r0, pc, #4	@ (adr r0, 80095e4 <_scanf_float+0xe4>)
 80095e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80095e4:	0800969f 	.word	0x0800969f
 80095e8:	08009567 	.word	0x08009567
 80095ec:	0800969f 	.word	0x0800969f
 80095f0:	0800972f 	.word	0x0800972f
 80095f4:	08009567 	.word	0x08009567
 80095f8:	08009641 	.word	0x08009641
 80095fc:	08009685 	.word	0x08009685
 8009600:	08009685 	.word	0x08009685
 8009604:	08009685 	.word	0x08009685
 8009608:	08009685 	.word	0x08009685
 800960c:	08009685 	.word	0x08009685
 8009610:	08009685 	.word	0x08009685
 8009614:	08009685 	.word	0x08009685
 8009618:	08009685 	.word	0x08009685
 800961c:	08009685 	.word	0x08009685
 8009620:	2b6e      	cmp	r3, #110	@ 0x6e
 8009622:	d809      	bhi.n	8009638 <_scanf_float+0x138>
 8009624:	2b60      	cmp	r3, #96	@ 0x60
 8009626:	d8b1      	bhi.n	800958c <_scanf_float+0x8c>
 8009628:	2b54      	cmp	r3, #84	@ 0x54
 800962a:	d07b      	beq.n	8009724 <_scanf_float+0x224>
 800962c:	2b59      	cmp	r3, #89	@ 0x59
 800962e:	d19a      	bne.n	8009566 <_scanf_float+0x66>
 8009630:	2d07      	cmp	r5, #7
 8009632:	d198      	bne.n	8009566 <_scanf_float+0x66>
 8009634:	2508      	movs	r5, #8
 8009636:	e02f      	b.n	8009698 <_scanf_float+0x198>
 8009638:	2b74      	cmp	r3, #116	@ 0x74
 800963a:	d073      	beq.n	8009724 <_scanf_float+0x224>
 800963c:	2b79      	cmp	r3, #121	@ 0x79
 800963e:	e7f6      	b.n	800962e <_scanf_float+0x12e>
 8009640:	6821      	ldr	r1, [r4, #0]
 8009642:	05c8      	lsls	r0, r1, #23
 8009644:	d51e      	bpl.n	8009684 <_scanf_float+0x184>
 8009646:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800964a:	6021      	str	r1, [r4, #0]
 800964c:	3701      	adds	r7, #1
 800964e:	f1bb 0f00 	cmp.w	fp, #0
 8009652:	d003      	beq.n	800965c <_scanf_float+0x15c>
 8009654:	3201      	adds	r2, #1
 8009656:	f10b 3bff 	add.w	fp, fp, #4294967295
 800965a:	60a2      	str	r2, [r4, #8]
 800965c:	68a3      	ldr	r3, [r4, #8]
 800965e:	3b01      	subs	r3, #1
 8009660:	60a3      	str	r3, [r4, #8]
 8009662:	6923      	ldr	r3, [r4, #16]
 8009664:	3301      	adds	r3, #1
 8009666:	6123      	str	r3, [r4, #16]
 8009668:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800966c:	3b01      	subs	r3, #1
 800966e:	2b00      	cmp	r3, #0
 8009670:	f8c9 3004 	str.w	r3, [r9, #4]
 8009674:	f340 8082 	ble.w	800977c <_scanf_float+0x27c>
 8009678:	f8d9 3000 	ldr.w	r3, [r9]
 800967c:	3301      	adds	r3, #1
 800967e:	f8c9 3000 	str.w	r3, [r9]
 8009682:	e762      	b.n	800954a <_scanf_float+0x4a>
 8009684:	eb1a 0105 	adds.w	r1, sl, r5
 8009688:	f47f af6d 	bne.w	8009566 <_scanf_float+0x66>
 800968c:	6822      	ldr	r2, [r4, #0]
 800968e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009692:	6022      	str	r2, [r4, #0]
 8009694:	460d      	mov	r5, r1
 8009696:	468a      	mov	sl, r1
 8009698:	f806 3b01 	strb.w	r3, [r6], #1
 800969c:	e7de      	b.n	800965c <_scanf_float+0x15c>
 800969e:	6822      	ldr	r2, [r4, #0]
 80096a0:	0610      	lsls	r0, r2, #24
 80096a2:	f57f af60 	bpl.w	8009566 <_scanf_float+0x66>
 80096a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80096aa:	6022      	str	r2, [r4, #0]
 80096ac:	e7f4      	b.n	8009698 <_scanf_float+0x198>
 80096ae:	f1ba 0f00 	cmp.w	sl, #0
 80096b2:	d10c      	bne.n	80096ce <_scanf_float+0x1ce>
 80096b4:	b977      	cbnz	r7, 80096d4 <_scanf_float+0x1d4>
 80096b6:	6822      	ldr	r2, [r4, #0]
 80096b8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80096bc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80096c0:	d108      	bne.n	80096d4 <_scanf_float+0x1d4>
 80096c2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80096c6:	6022      	str	r2, [r4, #0]
 80096c8:	f04f 0a01 	mov.w	sl, #1
 80096cc:	e7e4      	b.n	8009698 <_scanf_float+0x198>
 80096ce:	f1ba 0f02 	cmp.w	sl, #2
 80096d2:	d050      	beq.n	8009776 <_scanf_float+0x276>
 80096d4:	2d01      	cmp	r5, #1
 80096d6:	d002      	beq.n	80096de <_scanf_float+0x1de>
 80096d8:	2d04      	cmp	r5, #4
 80096da:	f47f af44 	bne.w	8009566 <_scanf_float+0x66>
 80096de:	3501      	adds	r5, #1
 80096e0:	b2ed      	uxtb	r5, r5
 80096e2:	e7d9      	b.n	8009698 <_scanf_float+0x198>
 80096e4:	f1ba 0f01 	cmp.w	sl, #1
 80096e8:	f47f af3d 	bne.w	8009566 <_scanf_float+0x66>
 80096ec:	f04f 0a02 	mov.w	sl, #2
 80096f0:	e7d2      	b.n	8009698 <_scanf_float+0x198>
 80096f2:	b975      	cbnz	r5, 8009712 <_scanf_float+0x212>
 80096f4:	2f00      	cmp	r7, #0
 80096f6:	f47f af37 	bne.w	8009568 <_scanf_float+0x68>
 80096fa:	6822      	ldr	r2, [r4, #0]
 80096fc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009700:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009704:	f040 8103 	bne.w	800990e <_scanf_float+0x40e>
 8009708:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800970c:	6022      	str	r2, [r4, #0]
 800970e:	2501      	movs	r5, #1
 8009710:	e7c2      	b.n	8009698 <_scanf_float+0x198>
 8009712:	2d03      	cmp	r5, #3
 8009714:	d0e3      	beq.n	80096de <_scanf_float+0x1de>
 8009716:	2d05      	cmp	r5, #5
 8009718:	e7df      	b.n	80096da <_scanf_float+0x1da>
 800971a:	2d02      	cmp	r5, #2
 800971c:	f47f af23 	bne.w	8009566 <_scanf_float+0x66>
 8009720:	2503      	movs	r5, #3
 8009722:	e7b9      	b.n	8009698 <_scanf_float+0x198>
 8009724:	2d06      	cmp	r5, #6
 8009726:	f47f af1e 	bne.w	8009566 <_scanf_float+0x66>
 800972a:	2507      	movs	r5, #7
 800972c:	e7b4      	b.n	8009698 <_scanf_float+0x198>
 800972e:	6822      	ldr	r2, [r4, #0]
 8009730:	0591      	lsls	r1, r2, #22
 8009732:	f57f af18 	bpl.w	8009566 <_scanf_float+0x66>
 8009736:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800973a:	6022      	str	r2, [r4, #0]
 800973c:	9702      	str	r7, [sp, #8]
 800973e:	e7ab      	b.n	8009698 <_scanf_float+0x198>
 8009740:	6822      	ldr	r2, [r4, #0]
 8009742:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009746:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800974a:	d005      	beq.n	8009758 <_scanf_float+0x258>
 800974c:	0550      	lsls	r0, r2, #21
 800974e:	f57f af0a 	bpl.w	8009566 <_scanf_float+0x66>
 8009752:	2f00      	cmp	r7, #0
 8009754:	f000 80db 	beq.w	800990e <_scanf_float+0x40e>
 8009758:	0591      	lsls	r1, r2, #22
 800975a:	bf58      	it	pl
 800975c:	9902      	ldrpl	r1, [sp, #8]
 800975e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009762:	bf58      	it	pl
 8009764:	1a79      	subpl	r1, r7, r1
 8009766:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800976a:	bf58      	it	pl
 800976c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009770:	6022      	str	r2, [r4, #0]
 8009772:	2700      	movs	r7, #0
 8009774:	e790      	b.n	8009698 <_scanf_float+0x198>
 8009776:	f04f 0a03 	mov.w	sl, #3
 800977a:	e78d      	b.n	8009698 <_scanf_float+0x198>
 800977c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009780:	4649      	mov	r1, r9
 8009782:	4640      	mov	r0, r8
 8009784:	4798      	blx	r3
 8009786:	2800      	cmp	r0, #0
 8009788:	f43f aedf 	beq.w	800954a <_scanf_float+0x4a>
 800978c:	e6eb      	b.n	8009566 <_scanf_float+0x66>
 800978e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009792:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009796:	464a      	mov	r2, r9
 8009798:	4640      	mov	r0, r8
 800979a:	4798      	blx	r3
 800979c:	6923      	ldr	r3, [r4, #16]
 800979e:	3b01      	subs	r3, #1
 80097a0:	6123      	str	r3, [r4, #16]
 80097a2:	e6eb      	b.n	800957c <_scanf_float+0x7c>
 80097a4:	1e6b      	subs	r3, r5, #1
 80097a6:	2b06      	cmp	r3, #6
 80097a8:	d824      	bhi.n	80097f4 <_scanf_float+0x2f4>
 80097aa:	2d02      	cmp	r5, #2
 80097ac:	d836      	bhi.n	800981c <_scanf_float+0x31c>
 80097ae:	9b01      	ldr	r3, [sp, #4]
 80097b0:	429e      	cmp	r6, r3
 80097b2:	f67f aee7 	bls.w	8009584 <_scanf_float+0x84>
 80097b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80097ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80097be:	464a      	mov	r2, r9
 80097c0:	4640      	mov	r0, r8
 80097c2:	4798      	blx	r3
 80097c4:	6923      	ldr	r3, [r4, #16]
 80097c6:	3b01      	subs	r3, #1
 80097c8:	6123      	str	r3, [r4, #16]
 80097ca:	e7f0      	b.n	80097ae <_scanf_float+0x2ae>
 80097cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80097d0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80097d4:	464a      	mov	r2, r9
 80097d6:	4640      	mov	r0, r8
 80097d8:	4798      	blx	r3
 80097da:	6923      	ldr	r3, [r4, #16]
 80097dc:	3b01      	subs	r3, #1
 80097de:	6123      	str	r3, [r4, #16]
 80097e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80097e4:	fa5f fa8a 	uxtb.w	sl, sl
 80097e8:	f1ba 0f02 	cmp.w	sl, #2
 80097ec:	d1ee      	bne.n	80097cc <_scanf_float+0x2cc>
 80097ee:	3d03      	subs	r5, #3
 80097f0:	b2ed      	uxtb	r5, r5
 80097f2:	1b76      	subs	r6, r6, r5
 80097f4:	6823      	ldr	r3, [r4, #0]
 80097f6:	05da      	lsls	r2, r3, #23
 80097f8:	d530      	bpl.n	800985c <_scanf_float+0x35c>
 80097fa:	055b      	lsls	r3, r3, #21
 80097fc:	d511      	bpl.n	8009822 <_scanf_float+0x322>
 80097fe:	9b01      	ldr	r3, [sp, #4]
 8009800:	429e      	cmp	r6, r3
 8009802:	f67f aebf 	bls.w	8009584 <_scanf_float+0x84>
 8009806:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800980a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800980e:	464a      	mov	r2, r9
 8009810:	4640      	mov	r0, r8
 8009812:	4798      	blx	r3
 8009814:	6923      	ldr	r3, [r4, #16]
 8009816:	3b01      	subs	r3, #1
 8009818:	6123      	str	r3, [r4, #16]
 800981a:	e7f0      	b.n	80097fe <_scanf_float+0x2fe>
 800981c:	46aa      	mov	sl, r5
 800981e:	46b3      	mov	fp, r6
 8009820:	e7de      	b.n	80097e0 <_scanf_float+0x2e0>
 8009822:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009826:	6923      	ldr	r3, [r4, #16]
 8009828:	2965      	cmp	r1, #101	@ 0x65
 800982a:	f103 33ff 	add.w	r3, r3, #4294967295
 800982e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009832:	6123      	str	r3, [r4, #16]
 8009834:	d00c      	beq.n	8009850 <_scanf_float+0x350>
 8009836:	2945      	cmp	r1, #69	@ 0x45
 8009838:	d00a      	beq.n	8009850 <_scanf_float+0x350>
 800983a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800983e:	464a      	mov	r2, r9
 8009840:	4640      	mov	r0, r8
 8009842:	4798      	blx	r3
 8009844:	6923      	ldr	r3, [r4, #16]
 8009846:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800984a:	3b01      	subs	r3, #1
 800984c:	1eb5      	subs	r5, r6, #2
 800984e:	6123      	str	r3, [r4, #16]
 8009850:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009854:	464a      	mov	r2, r9
 8009856:	4640      	mov	r0, r8
 8009858:	4798      	blx	r3
 800985a:	462e      	mov	r6, r5
 800985c:	6822      	ldr	r2, [r4, #0]
 800985e:	f012 0210 	ands.w	r2, r2, #16
 8009862:	d001      	beq.n	8009868 <_scanf_float+0x368>
 8009864:	2000      	movs	r0, #0
 8009866:	e68e      	b.n	8009586 <_scanf_float+0x86>
 8009868:	7032      	strb	r2, [r6, #0]
 800986a:	6823      	ldr	r3, [r4, #0]
 800986c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009870:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009874:	d125      	bne.n	80098c2 <_scanf_float+0x3c2>
 8009876:	9b02      	ldr	r3, [sp, #8]
 8009878:	429f      	cmp	r7, r3
 800987a:	d00a      	beq.n	8009892 <_scanf_float+0x392>
 800987c:	1bda      	subs	r2, r3, r7
 800987e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009882:	429e      	cmp	r6, r3
 8009884:	bf28      	it	cs
 8009886:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800988a:	4922      	ldr	r1, [pc, #136]	@ (8009914 <_scanf_float+0x414>)
 800988c:	4630      	mov	r0, r6
 800988e:	f000 f977 	bl	8009b80 <siprintf>
 8009892:	9901      	ldr	r1, [sp, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	4640      	mov	r0, r8
 8009898:	f7ff f9ca 	bl	8008c30 <_strtod_r>
 800989c:	9b03      	ldr	r3, [sp, #12]
 800989e:	6821      	ldr	r1, [r4, #0]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f011 0f02 	tst.w	r1, #2
 80098a6:	ec57 6b10 	vmov	r6, r7, d0
 80098aa:	f103 0204 	add.w	r2, r3, #4
 80098ae:	d015      	beq.n	80098dc <_scanf_float+0x3dc>
 80098b0:	9903      	ldr	r1, [sp, #12]
 80098b2:	600a      	str	r2, [r1, #0]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	e9c3 6700 	strd	r6, r7, [r3]
 80098ba:	68e3      	ldr	r3, [r4, #12]
 80098bc:	3301      	adds	r3, #1
 80098be:	60e3      	str	r3, [r4, #12]
 80098c0:	e7d0      	b.n	8009864 <_scanf_float+0x364>
 80098c2:	9b04      	ldr	r3, [sp, #16]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d0e4      	beq.n	8009892 <_scanf_float+0x392>
 80098c8:	9905      	ldr	r1, [sp, #20]
 80098ca:	230a      	movs	r3, #10
 80098cc:	3101      	adds	r1, #1
 80098ce:	4640      	mov	r0, r8
 80098d0:	f002 fb3e 	bl	800bf50 <_strtol_r>
 80098d4:	9b04      	ldr	r3, [sp, #16]
 80098d6:	9e05      	ldr	r6, [sp, #20]
 80098d8:	1ac2      	subs	r2, r0, r3
 80098da:	e7d0      	b.n	800987e <_scanf_float+0x37e>
 80098dc:	f011 0f04 	tst.w	r1, #4
 80098e0:	9903      	ldr	r1, [sp, #12]
 80098e2:	600a      	str	r2, [r1, #0]
 80098e4:	d1e6      	bne.n	80098b4 <_scanf_float+0x3b4>
 80098e6:	681d      	ldr	r5, [r3, #0]
 80098e8:	4632      	mov	r2, r6
 80098ea:	463b      	mov	r3, r7
 80098ec:	4630      	mov	r0, r6
 80098ee:	4639      	mov	r1, r7
 80098f0:	f7f7 f93c 	bl	8000b6c <__aeabi_dcmpun>
 80098f4:	b128      	cbz	r0, 8009902 <_scanf_float+0x402>
 80098f6:	4808      	ldr	r0, [pc, #32]	@ (8009918 <_scanf_float+0x418>)
 80098f8:	f000 fb5a 	bl	8009fb0 <nanf>
 80098fc:	ed85 0a00 	vstr	s0, [r5]
 8009900:	e7db      	b.n	80098ba <_scanf_float+0x3ba>
 8009902:	4630      	mov	r0, r6
 8009904:	4639      	mov	r1, r7
 8009906:	f7f7 f98f 	bl	8000c28 <__aeabi_d2f>
 800990a:	6028      	str	r0, [r5, #0]
 800990c:	e7d5      	b.n	80098ba <_scanf_float+0x3ba>
 800990e:	2700      	movs	r7, #0
 8009910:	e62e      	b.n	8009570 <_scanf_float+0x70>
 8009912:	bf00      	nop
 8009914:	0800cd1a 	.word	0x0800cd1a
 8009918:	0800ceb9 	.word	0x0800ceb9

0800991c <std>:
 800991c:	2300      	movs	r3, #0
 800991e:	b510      	push	{r4, lr}
 8009920:	4604      	mov	r4, r0
 8009922:	e9c0 3300 	strd	r3, r3, [r0]
 8009926:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800992a:	6083      	str	r3, [r0, #8]
 800992c:	8181      	strh	r1, [r0, #12]
 800992e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009930:	81c2      	strh	r2, [r0, #14]
 8009932:	6183      	str	r3, [r0, #24]
 8009934:	4619      	mov	r1, r3
 8009936:	2208      	movs	r2, #8
 8009938:	305c      	adds	r0, #92	@ 0x5c
 800993a:	f000 fa57 	bl	8009dec <memset>
 800993e:	4b0d      	ldr	r3, [pc, #52]	@ (8009974 <std+0x58>)
 8009940:	6263      	str	r3, [r4, #36]	@ 0x24
 8009942:	4b0d      	ldr	r3, [pc, #52]	@ (8009978 <std+0x5c>)
 8009944:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009946:	4b0d      	ldr	r3, [pc, #52]	@ (800997c <std+0x60>)
 8009948:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800994a:	4b0d      	ldr	r3, [pc, #52]	@ (8009980 <std+0x64>)
 800994c:	6323      	str	r3, [r4, #48]	@ 0x30
 800994e:	4b0d      	ldr	r3, [pc, #52]	@ (8009984 <std+0x68>)
 8009950:	6224      	str	r4, [r4, #32]
 8009952:	429c      	cmp	r4, r3
 8009954:	d006      	beq.n	8009964 <std+0x48>
 8009956:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800995a:	4294      	cmp	r4, r2
 800995c:	d002      	beq.n	8009964 <std+0x48>
 800995e:	33d0      	adds	r3, #208	@ 0xd0
 8009960:	429c      	cmp	r4, r3
 8009962:	d105      	bne.n	8009970 <std+0x54>
 8009964:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800996c:	f000 bb04 	b.w	8009f78 <__retarget_lock_init_recursive>
 8009970:	bd10      	pop	{r4, pc}
 8009972:	bf00      	nop
 8009974:	08009bc5 	.word	0x08009bc5
 8009978:	08009be7 	.word	0x08009be7
 800997c:	08009c1f 	.word	0x08009c1f
 8009980:	08009c43 	.word	0x08009c43
 8009984:	20000d58 	.word	0x20000d58

08009988 <stdio_exit_handler>:
 8009988:	4a02      	ldr	r2, [pc, #8]	@ (8009994 <stdio_exit_handler+0xc>)
 800998a:	4903      	ldr	r1, [pc, #12]	@ (8009998 <stdio_exit_handler+0x10>)
 800998c:	4803      	ldr	r0, [pc, #12]	@ (800999c <stdio_exit_handler+0x14>)
 800998e:	f000 b869 	b.w	8009a64 <_fwalk_sglue>
 8009992:	bf00      	nop
 8009994:	2000000c 	.word	0x2000000c
 8009998:	0800c5a9 	.word	0x0800c5a9
 800999c:	20000188 	.word	0x20000188

080099a0 <cleanup_stdio>:
 80099a0:	6841      	ldr	r1, [r0, #4]
 80099a2:	4b0c      	ldr	r3, [pc, #48]	@ (80099d4 <cleanup_stdio+0x34>)
 80099a4:	4299      	cmp	r1, r3
 80099a6:	b510      	push	{r4, lr}
 80099a8:	4604      	mov	r4, r0
 80099aa:	d001      	beq.n	80099b0 <cleanup_stdio+0x10>
 80099ac:	f002 fdfc 	bl	800c5a8 <_fflush_r>
 80099b0:	68a1      	ldr	r1, [r4, #8]
 80099b2:	4b09      	ldr	r3, [pc, #36]	@ (80099d8 <cleanup_stdio+0x38>)
 80099b4:	4299      	cmp	r1, r3
 80099b6:	d002      	beq.n	80099be <cleanup_stdio+0x1e>
 80099b8:	4620      	mov	r0, r4
 80099ba:	f002 fdf5 	bl	800c5a8 <_fflush_r>
 80099be:	68e1      	ldr	r1, [r4, #12]
 80099c0:	4b06      	ldr	r3, [pc, #24]	@ (80099dc <cleanup_stdio+0x3c>)
 80099c2:	4299      	cmp	r1, r3
 80099c4:	d004      	beq.n	80099d0 <cleanup_stdio+0x30>
 80099c6:	4620      	mov	r0, r4
 80099c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099cc:	f002 bdec 	b.w	800c5a8 <_fflush_r>
 80099d0:	bd10      	pop	{r4, pc}
 80099d2:	bf00      	nop
 80099d4:	20000d58 	.word	0x20000d58
 80099d8:	20000dc0 	.word	0x20000dc0
 80099dc:	20000e28 	.word	0x20000e28

080099e0 <global_stdio_init.part.0>:
 80099e0:	b510      	push	{r4, lr}
 80099e2:	4b0b      	ldr	r3, [pc, #44]	@ (8009a10 <global_stdio_init.part.0+0x30>)
 80099e4:	4c0b      	ldr	r4, [pc, #44]	@ (8009a14 <global_stdio_init.part.0+0x34>)
 80099e6:	4a0c      	ldr	r2, [pc, #48]	@ (8009a18 <global_stdio_init.part.0+0x38>)
 80099e8:	601a      	str	r2, [r3, #0]
 80099ea:	4620      	mov	r0, r4
 80099ec:	2200      	movs	r2, #0
 80099ee:	2104      	movs	r1, #4
 80099f0:	f7ff ff94 	bl	800991c <std>
 80099f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80099f8:	2201      	movs	r2, #1
 80099fa:	2109      	movs	r1, #9
 80099fc:	f7ff ff8e 	bl	800991c <std>
 8009a00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009a04:	2202      	movs	r2, #2
 8009a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a0a:	2112      	movs	r1, #18
 8009a0c:	f7ff bf86 	b.w	800991c <std>
 8009a10:	20000e90 	.word	0x20000e90
 8009a14:	20000d58 	.word	0x20000d58
 8009a18:	08009989 	.word	0x08009989

08009a1c <__sfp_lock_acquire>:
 8009a1c:	4801      	ldr	r0, [pc, #4]	@ (8009a24 <__sfp_lock_acquire+0x8>)
 8009a1e:	f000 baac 	b.w	8009f7a <__retarget_lock_acquire_recursive>
 8009a22:	bf00      	nop
 8009a24:	20000e99 	.word	0x20000e99

08009a28 <__sfp_lock_release>:
 8009a28:	4801      	ldr	r0, [pc, #4]	@ (8009a30 <__sfp_lock_release+0x8>)
 8009a2a:	f000 baa7 	b.w	8009f7c <__retarget_lock_release_recursive>
 8009a2e:	bf00      	nop
 8009a30:	20000e99 	.word	0x20000e99

08009a34 <__sinit>:
 8009a34:	b510      	push	{r4, lr}
 8009a36:	4604      	mov	r4, r0
 8009a38:	f7ff fff0 	bl	8009a1c <__sfp_lock_acquire>
 8009a3c:	6a23      	ldr	r3, [r4, #32]
 8009a3e:	b11b      	cbz	r3, 8009a48 <__sinit+0x14>
 8009a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a44:	f7ff bff0 	b.w	8009a28 <__sfp_lock_release>
 8009a48:	4b04      	ldr	r3, [pc, #16]	@ (8009a5c <__sinit+0x28>)
 8009a4a:	6223      	str	r3, [r4, #32]
 8009a4c:	4b04      	ldr	r3, [pc, #16]	@ (8009a60 <__sinit+0x2c>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1f5      	bne.n	8009a40 <__sinit+0xc>
 8009a54:	f7ff ffc4 	bl	80099e0 <global_stdio_init.part.0>
 8009a58:	e7f2      	b.n	8009a40 <__sinit+0xc>
 8009a5a:	bf00      	nop
 8009a5c:	080099a1 	.word	0x080099a1
 8009a60:	20000e90 	.word	0x20000e90

08009a64 <_fwalk_sglue>:
 8009a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a68:	4607      	mov	r7, r0
 8009a6a:	4688      	mov	r8, r1
 8009a6c:	4614      	mov	r4, r2
 8009a6e:	2600      	movs	r6, #0
 8009a70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a74:	f1b9 0901 	subs.w	r9, r9, #1
 8009a78:	d505      	bpl.n	8009a86 <_fwalk_sglue+0x22>
 8009a7a:	6824      	ldr	r4, [r4, #0]
 8009a7c:	2c00      	cmp	r4, #0
 8009a7e:	d1f7      	bne.n	8009a70 <_fwalk_sglue+0xc>
 8009a80:	4630      	mov	r0, r6
 8009a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a86:	89ab      	ldrh	r3, [r5, #12]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d907      	bls.n	8009a9c <_fwalk_sglue+0x38>
 8009a8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a90:	3301      	adds	r3, #1
 8009a92:	d003      	beq.n	8009a9c <_fwalk_sglue+0x38>
 8009a94:	4629      	mov	r1, r5
 8009a96:	4638      	mov	r0, r7
 8009a98:	47c0      	blx	r8
 8009a9a:	4306      	orrs	r6, r0
 8009a9c:	3568      	adds	r5, #104	@ 0x68
 8009a9e:	e7e9      	b.n	8009a74 <_fwalk_sglue+0x10>

08009aa0 <iprintf>:
 8009aa0:	b40f      	push	{r0, r1, r2, r3}
 8009aa2:	b507      	push	{r0, r1, r2, lr}
 8009aa4:	4906      	ldr	r1, [pc, #24]	@ (8009ac0 <iprintf+0x20>)
 8009aa6:	ab04      	add	r3, sp, #16
 8009aa8:	6808      	ldr	r0, [r1, #0]
 8009aaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009aae:	6881      	ldr	r1, [r0, #8]
 8009ab0:	9301      	str	r3, [sp, #4]
 8009ab2:	f002 fbdd 	bl	800c270 <_vfiprintf_r>
 8009ab6:	b003      	add	sp, #12
 8009ab8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009abc:	b004      	add	sp, #16
 8009abe:	4770      	bx	lr
 8009ac0:	20000184 	.word	0x20000184

08009ac4 <_puts_r>:
 8009ac4:	6a03      	ldr	r3, [r0, #32]
 8009ac6:	b570      	push	{r4, r5, r6, lr}
 8009ac8:	6884      	ldr	r4, [r0, #8]
 8009aca:	4605      	mov	r5, r0
 8009acc:	460e      	mov	r6, r1
 8009ace:	b90b      	cbnz	r3, 8009ad4 <_puts_r+0x10>
 8009ad0:	f7ff ffb0 	bl	8009a34 <__sinit>
 8009ad4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ad6:	07db      	lsls	r3, r3, #31
 8009ad8:	d405      	bmi.n	8009ae6 <_puts_r+0x22>
 8009ada:	89a3      	ldrh	r3, [r4, #12]
 8009adc:	0598      	lsls	r0, r3, #22
 8009ade:	d402      	bmi.n	8009ae6 <_puts_r+0x22>
 8009ae0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ae2:	f000 fa4a 	bl	8009f7a <__retarget_lock_acquire_recursive>
 8009ae6:	89a3      	ldrh	r3, [r4, #12]
 8009ae8:	0719      	lsls	r1, r3, #28
 8009aea:	d502      	bpl.n	8009af2 <_puts_r+0x2e>
 8009aec:	6923      	ldr	r3, [r4, #16]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d135      	bne.n	8009b5e <_puts_r+0x9a>
 8009af2:	4621      	mov	r1, r4
 8009af4:	4628      	mov	r0, r5
 8009af6:	f000 f923 	bl	8009d40 <__swsetup_r>
 8009afa:	b380      	cbz	r0, 8009b5e <_puts_r+0x9a>
 8009afc:	f04f 35ff 	mov.w	r5, #4294967295
 8009b00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b02:	07da      	lsls	r2, r3, #31
 8009b04:	d405      	bmi.n	8009b12 <_puts_r+0x4e>
 8009b06:	89a3      	ldrh	r3, [r4, #12]
 8009b08:	059b      	lsls	r3, r3, #22
 8009b0a:	d402      	bmi.n	8009b12 <_puts_r+0x4e>
 8009b0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b0e:	f000 fa35 	bl	8009f7c <__retarget_lock_release_recursive>
 8009b12:	4628      	mov	r0, r5
 8009b14:	bd70      	pop	{r4, r5, r6, pc}
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	da04      	bge.n	8009b24 <_puts_r+0x60>
 8009b1a:	69a2      	ldr	r2, [r4, #24]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	dc17      	bgt.n	8009b50 <_puts_r+0x8c>
 8009b20:	290a      	cmp	r1, #10
 8009b22:	d015      	beq.n	8009b50 <_puts_r+0x8c>
 8009b24:	6823      	ldr	r3, [r4, #0]
 8009b26:	1c5a      	adds	r2, r3, #1
 8009b28:	6022      	str	r2, [r4, #0]
 8009b2a:	7019      	strb	r1, [r3, #0]
 8009b2c:	68a3      	ldr	r3, [r4, #8]
 8009b2e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009b32:	3b01      	subs	r3, #1
 8009b34:	60a3      	str	r3, [r4, #8]
 8009b36:	2900      	cmp	r1, #0
 8009b38:	d1ed      	bne.n	8009b16 <_puts_r+0x52>
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	da11      	bge.n	8009b62 <_puts_r+0x9e>
 8009b3e:	4622      	mov	r2, r4
 8009b40:	210a      	movs	r1, #10
 8009b42:	4628      	mov	r0, r5
 8009b44:	f000 f8be 	bl	8009cc4 <__swbuf_r>
 8009b48:	3001      	adds	r0, #1
 8009b4a:	d0d7      	beq.n	8009afc <_puts_r+0x38>
 8009b4c:	250a      	movs	r5, #10
 8009b4e:	e7d7      	b.n	8009b00 <_puts_r+0x3c>
 8009b50:	4622      	mov	r2, r4
 8009b52:	4628      	mov	r0, r5
 8009b54:	f000 f8b6 	bl	8009cc4 <__swbuf_r>
 8009b58:	3001      	adds	r0, #1
 8009b5a:	d1e7      	bne.n	8009b2c <_puts_r+0x68>
 8009b5c:	e7ce      	b.n	8009afc <_puts_r+0x38>
 8009b5e:	3e01      	subs	r6, #1
 8009b60:	e7e4      	b.n	8009b2c <_puts_r+0x68>
 8009b62:	6823      	ldr	r3, [r4, #0]
 8009b64:	1c5a      	adds	r2, r3, #1
 8009b66:	6022      	str	r2, [r4, #0]
 8009b68:	220a      	movs	r2, #10
 8009b6a:	701a      	strb	r2, [r3, #0]
 8009b6c:	e7ee      	b.n	8009b4c <_puts_r+0x88>
	...

08009b70 <puts>:
 8009b70:	4b02      	ldr	r3, [pc, #8]	@ (8009b7c <puts+0xc>)
 8009b72:	4601      	mov	r1, r0
 8009b74:	6818      	ldr	r0, [r3, #0]
 8009b76:	f7ff bfa5 	b.w	8009ac4 <_puts_r>
 8009b7a:	bf00      	nop
 8009b7c:	20000184 	.word	0x20000184

08009b80 <siprintf>:
 8009b80:	b40e      	push	{r1, r2, r3}
 8009b82:	b510      	push	{r4, lr}
 8009b84:	b09d      	sub	sp, #116	@ 0x74
 8009b86:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009b88:	9002      	str	r0, [sp, #8]
 8009b8a:	9006      	str	r0, [sp, #24]
 8009b8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009b90:	480a      	ldr	r0, [pc, #40]	@ (8009bbc <siprintf+0x3c>)
 8009b92:	9107      	str	r1, [sp, #28]
 8009b94:	9104      	str	r1, [sp, #16]
 8009b96:	490a      	ldr	r1, [pc, #40]	@ (8009bc0 <siprintf+0x40>)
 8009b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b9c:	9105      	str	r1, [sp, #20]
 8009b9e:	2400      	movs	r4, #0
 8009ba0:	a902      	add	r1, sp, #8
 8009ba2:	6800      	ldr	r0, [r0, #0]
 8009ba4:	9301      	str	r3, [sp, #4]
 8009ba6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009ba8:	f002 fa3c 	bl	800c024 <_svfiprintf_r>
 8009bac:	9b02      	ldr	r3, [sp, #8]
 8009bae:	701c      	strb	r4, [r3, #0]
 8009bb0:	b01d      	add	sp, #116	@ 0x74
 8009bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bb6:	b003      	add	sp, #12
 8009bb8:	4770      	bx	lr
 8009bba:	bf00      	nop
 8009bbc:	20000184 	.word	0x20000184
 8009bc0:	ffff0208 	.word	0xffff0208

08009bc4 <__sread>:
 8009bc4:	b510      	push	{r4, lr}
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bcc:	f000 f986 	bl	8009edc <_read_r>
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	bfab      	itete	ge
 8009bd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009bd6:	89a3      	ldrhlt	r3, [r4, #12]
 8009bd8:	181b      	addge	r3, r3, r0
 8009bda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009bde:	bfac      	ite	ge
 8009be0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009be2:	81a3      	strhlt	r3, [r4, #12]
 8009be4:	bd10      	pop	{r4, pc}

08009be6 <__swrite>:
 8009be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bea:	461f      	mov	r7, r3
 8009bec:	898b      	ldrh	r3, [r1, #12]
 8009bee:	05db      	lsls	r3, r3, #23
 8009bf0:	4605      	mov	r5, r0
 8009bf2:	460c      	mov	r4, r1
 8009bf4:	4616      	mov	r6, r2
 8009bf6:	d505      	bpl.n	8009c04 <__swrite+0x1e>
 8009bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bfc:	2302      	movs	r3, #2
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f000 f95a 	bl	8009eb8 <_lseek_r>
 8009c04:	89a3      	ldrh	r3, [r4, #12]
 8009c06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c0e:	81a3      	strh	r3, [r4, #12]
 8009c10:	4632      	mov	r2, r6
 8009c12:	463b      	mov	r3, r7
 8009c14:	4628      	mov	r0, r5
 8009c16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c1a:	f000 b971 	b.w	8009f00 <_write_r>

08009c1e <__sseek>:
 8009c1e:	b510      	push	{r4, lr}
 8009c20:	460c      	mov	r4, r1
 8009c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c26:	f000 f947 	bl	8009eb8 <_lseek_r>
 8009c2a:	1c43      	adds	r3, r0, #1
 8009c2c:	89a3      	ldrh	r3, [r4, #12]
 8009c2e:	bf15      	itete	ne
 8009c30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009c32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009c36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009c3a:	81a3      	strheq	r3, [r4, #12]
 8009c3c:	bf18      	it	ne
 8009c3e:	81a3      	strhne	r3, [r4, #12]
 8009c40:	bd10      	pop	{r4, pc}

08009c42 <__sclose>:
 8009c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c46:	f000 b927 	b.w	8009e98 <_close_r>

08009c4a <_vsniprintf_r>:
 8009c4a:	b530      	push	{r4, r5, lr}
 8009c4c:	4614      	mov	r4, r2
 8009c4e:	2c00      	cmp	r4, #0
 8009c50:	b09b      	sub	sp, #108	@ 0x6c
 8009c52:	4605      	mov	r5, r0
 8009c54:	461a      	mov	r2, r3
 8009c56:	da05      	bge.n	8009c64 <_vsniprintf_r+0x1a>
 8009c58:	238b      	movs	r3, #139	@ 0x8b
 8009c5a:	6003      	str	r3, [r0, #0]
 8009c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c60:	b01b      	add	sp, #108	@ 0x6c
 8009c62:	bd30      	pop	{r4, r5, pc}
 8009c64:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009c68:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009c6c:	f04f 0300 	mov.w	r3, #0
 8009c70:	9319      	str	r3, [sp, #100]	@ 0x64
 8009c72:	bf14      	ite	ne
 8009c74:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009c78:	4623      	moveq	r3, r4
 8009c7a:	9302      	str	r3, [sp, #8]
 8009c7c:	9305      	str	r3, [sp, #20]
 8009c7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009c82:	9100      	str	r1, [sp, #0]
 8009c84:	9104      	str	r1, [sp, #16]
 8009c86:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009c8a:	4669      	mov	r1, sp
 8009c8c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009c8e:	f002 f9c9 	bl	800c024 <_svfiprintf_r>
 8009c92:	1c43      	adds	r3, r0, #1
 8009c94:	bfbc      	itt	lt
 8009c96:	238b      	movlt	r3, #139	@ 0x8b
 8009c98:	602b      	strlt	r3, [r5, #0]
 8009c9a:	2c00      	cmp	r4, #0
 8009c9c:	d0e0      	beq.n	8009c60 <_vsniprintf_r+0x16>
 8009c9e:	9b00      	ldr	r3, [sp, #0]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	701a      	strb	r2, [r3, #0]
 8009ca4:	e7dc      	b.n	8009c60 <_vsniprintf_r+0x16>
	...

08009ca8 <vsniprintf>:
 8009ca8:	b507      	push	{r0, r1, r2, lr}
 8009caa:	9300      	str	r3, [sp, #0]
 8009cac:	4613      	mov	r3, r2
 8009cae:	460a      	mov	r2, r1
 8009cb0:	4601      	mov	r1, r0
 8009cb2:	4803      	ldr	r0, [pc, #12]	@ (8009cc0 <vsniprintf+0x18>)
 8009cb4:	6800      	ldr	r0, [r0, #0]
 8009cb6:	f7ff ffc8 	bl	8009c4a <_vsniprintf_r>
 8009cba:	b003      	add	sp, #12
 8009cbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8009cc0:	20000184 	.word	0x20000184

08009cc4 <__swbuf_r>:
 8009cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cc6:	460e      	mov	r6, r1
 8009cc8:	4614      	mov	r4, r2
 8009cca:	4605      	mov	r5, r0
 8009ccc:	b118      	cbz	r0, 8009cd6 <__swbuf_r+0x12>
 8009cce:	6a03      	ldr	r3, [r0, #32]
 8009cd0:	b90b      	cbnz	r3, 8009cd6 <__swbuf_r+0x12>
 8009cd2:	f7ff feaf 	bl	8009a34 <__sinit>
 8009cd6:	69a3      	ldr	r3, [r4, #24]
 8009cd8:	60a3      	str	r3, [r4, #8]
 8009cda:	89a3      	ldrh	r3, [r4, #12]
 8009cdc:	071a      	lsls	r2, r3, #28
 8009cde:	d501      	bpl.n	8009ce4 <__swbuf_r+0x20>
 8009ce0:	6923      	ldr	r3, [r4, #16]
 8009ce2:	b943      	cbnz	r3, 8009cf6 <__swbuf_r+0x32>
 8009ce4:	4621      	mov	r1, r4
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	f000 f82a 	bl	8009d40 <__swsetup_r>
 8009cec:	b118      	cbz	r0, 8009cf6 <__swbuf_r+0x32>
 8009cee:	f04f 37ff 	mov.w	r7, #4294967295
 8009cf2:	4638      	mov	r0, r7
 8009cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cf6:	6823      	ldr	r3, [r4, #0]
 8009cf8:	6922      	ldr	r2, [r4, #16]
 8009cfa:	1a98      	subs	r0, r3, r2
 8009cfc:	6963      	ldr	r3, [r4, #20]
 8009cfe:	b2f6      	uxtb	r6, r6
 8009d00:	4283      	cmp	r3, r0
 8009d02:	4637      	mov	r7, r6
 8009d04:	dc05      	bgt.n	8009d12 <__swbuf_r+0x4e>
 8009d06:	4621      	mov	r1, r4
 8009d08:	4628      	mov	r0, r5
 8009d0a:	f002 fc4d 	bl	800c5a8 <_fflush_r>
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	d1ed      	bne.n	8009cee <__swbuf_r+0x2a>
 8009d12:	68a3      	ldr	r3, [r4, #8]
 8009d14:	3b01      	subs	r3, #1
 8009d16:	60a3      	str	r3, [r4, #8]
 8009d18:	6823      	ldr	r3, [r4, #0]
 8009d1a:	1c5a      	adds	r2, r3, #1
 8009d1c:	6022      	str	r2, [r4, #0]
 8009d1e:	701e      	strb	r6, [r3, #0]
 8009d20:	6962      	ldr	r2, [r4, #20]
 8009d22:	1c43      	adds	r3, r0, #1
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d004      	beq.n	8009d32 <__swbuf_r+0x6e>
 8009d28:	89a3      	ldrh	r3, [r4, #12]
 8009d2a:	07db      	lsls	r3, r3, #31
 8009d2c:	d5e1      	bpl.n	8009cf2 <__swbuf_r+0x2e>
 8009d2e:	2e0a      	cmp	r6, #10
 8009d30:	d1df      	bne.n	8009cf2 <__swbuf_r+0x2e>
 8009d32:	4621      	mov	r1, r4
 8009d34:	4628      	mov	r0, r5
 8009d36:	f002 fc37 	bl	800c5a8 <_fflush_r>
 8009d3a:	2800      	cmp	r0, #0
 8009d3c:	d0d9      	beq.n	8009cf2 <__swbuf_r+0x2e>
 8009d3e:	e7d6      	b.n	8009cee <__swbuf_r+0x2a>

08009d40 <__swsetup_r>:
 8009d40:	b538      	push	{r3, r4, r5, lr}
 8009d42:	4b29      	ldr	r3, [pc, #164]	@ (8009de8 <__swsetup_r+0xa8>)
 8009d44:	4605      	mov	r5, r0
 8009d46:	6818      	ldr	r0, [r3, #0]
 8009d48:	460c      	mov	r4, r1
 8009d4a:	b118      	cbz	r0, 8009d54 <__swsetup_r+0x14>
 8009d4c:	6a03      	ldr	r3, [r0, #32]
 8009d4e:	b90b      	cbnz	r3, 8009d54 <__swsetup_r+0x14>
 8009d50:	f7ff fe70 	bl	8009a34 <__sinit>
 8009d54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d58:	0719      	lsls	r1, r3, #28
 8009d5a:	d422      	bmi.n	8009da2 <__swsetup_r+0x62>
 8009d5c:	06da      	lsls	r2, r3, #27
 8009d5e:	d407      	bmi.n	8009d70 <__swsetup_r+0x30>
 8009d60:	2209      	movs	r2, #9
 8009d62:	602a      	str	r2, [r5, #0]
 8009d64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d68:	81a3      	strh	r3, [r4, #12]
 8009d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d6e:	e033      	b.n	8009dd8 <__swsetup_r+0x98>
 8009d70:	0758      	lsls	r0, r3, #29
 8009d72:	d512      	bpl.n	8009d9a <__swsetup_r+0x5a>
 8009d74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d76:	b141      	cbz	r1, 8009d8a <__swsetup_r+0x4a>
 8009d78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d7c:	4299      	cmp	r1, r3
 8009d7e:	d002      	beq.n	8009d86 <__swsetup_r+0x46>
 8009d80:	4628      	mov	r0, r5
 8009d82:	f000 ff75 	bl	800ac70 <_free_r>
 8009d86:	2300      	movs	r3, #0
 8009d88:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d8a:	89a3      	ldrh	r3, [r4, #12]
 8009d8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009d90:	81a3      	strh	r3, [r4, #12]
 8009d92:	2300      	movs	r3, #0
 8009d94:	6063      	str	r3, [r4, #4]
 8009d96:	6923      	ldr	r3, [r4, #16]
 8009d98:	6023      	str	r3, [r4, #0]
 8009d9a:	89a3      	ldrh	r3, [r4, #12]
 8009d9c:	f043 0308 	orr.w	r3, r3, #8
 8009da0:	81a3      	strh	r3, [r4, #12]
 8009da2:	6923      	ldr	r3, [r4, #16]
 8009da4:	b94b      	cbnz	r3, 8009dba <__swsetup_r+0x7a>
 8009da6:	89a3      	ldrh	r3, [r4, #12]
 8009da8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009dac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009db0:	d003      	beq.n	8009dba <__swsetup_r+0x7a>
 8009db2:	4621      	mov	r1, r4
 8009db4:	4628      	mov	r0, r5
 8009db6:	f002 fc45 	bl	800c644 <__smakebuf_r>
 8009dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dbe:	f013 0201 	ands.w	r2, r3, #1
 8009dc2:	d00a      	beq.n	8009dda <__swsetup_r+0x9a>
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	60a2      	str	r2, [r4, #8]
 8009dc8:	6962      	ldr	r2, [r4, #20]
 8009dca:	4252      	negs	r2, r2
 8009dcc:	61a2      	str	r2, [r4, #24]
 8009dce:	6922      	ldr	r2, [r4, #16]
 8009dd0:	b942      	cbnz	r2, 8009de4 <__swsetup_r+0xa4>
 8009dd2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009dd6:	d1c5      	bne.n	8009d64 <__swsetup_r+0x24>
 8009dd8:	bd38      	pop	{r3, r4, r5, pc}
 8009dda:	0799      	lsls	r1, r3, #30
 8009ddc:	bf58      	it	pl
 8009dde:	6962      	ldrpl	r2, [r4, #20]
 8009de0:	60a2      	str	r2, [r4, #8]
 8009de2:	e7f4      	b.n	8009dce <__swsetup_r+0x8e>
 8009de4:	2000      	movs	r0, #0
 8009de6:	e7f7      	b.n	8009dd8 <__swsetup_r+0x98>
 8009de8:	20000184 	.word	0x20000184

08009dec <memset>:
 8009dec:	4402      	add	r2, r0
 8009dee:	4603      	mov	r3, r0
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d100      	bne.n	8009df6 <memset+0xa>
 8009df4:	4770      	bx	lr
 8009df6:	f803 1b01 	strb.w	r1, [r3], #1
 8009dfa:	e7f9      	b.n	8009df0 <memset+0x4>

08009dfc <strchr>:
 8009dfc:	b2c9      	uxtb	r1, r1
 8009dfe:	4603      	mov	r3, r0
 8009e00:	4618      	mov	r0, r3
 8009e02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e06:	b112      	cbz	r2, 8009e0e <strchr+0x12>
 8009e08:	428a      	cmp	r2, r1
 8009e0a:	d1f9      	bne.n	8009e00 <strchr+0x4>
 8009e0c:	4770      	bx	lr
 8009e0e:	2900      	cmp	r1, #0
 8009e10:	bf18      	it	ne
 8009e12:	2000      	movne	r0, #0
 8009e14:	4770      	bx	lr

08009e16 <strncmp>:
 8009e16:	b510      	push	{r4, lr}
 8009e18:	b16a      	cbz	r2, 8009e36 <strncmp+0x20>
 8009e1a:	3901      	subs	r1, #1
 8009e1c:	1884      	adds	r4, r0, r2
 8009e1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e22:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d103      	bne.n	8009e32 <strncmp+0x1c>
 8009e2a:	42a0      	cmp	r0, r4
 8009e2c:	d001      	beq.n	8009e32 <strncmp+0x1c>
 8009e2e:	2a00      	cmp	r2, #0
 8009e30:	d1f5      	bne.n	8009e1e <strncmp+0x8>
 8009e32:	1ad0      	subs	r0, r2, r3
 8009e34:	bd10      	pop	{r4, pc}
 8009e36:	4610      	mov	r0, r2
 8009e38:	e7fc      	b.n	8009e34 <strncmp+0x1e>

08009e3a <__strtok_r>:
 8009e3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e3c:	4604      	mov	r4, r0
 8009e3e:	b908      	cbnz	r0, 8009e44 <__strtok_r+0xa>
 8009e40:	6814      	ldr	r4, [r2, #0]
 8009e42:	b144      	cbz	r4, 8009e56 <__strtok_r+0x1c>
 8009e44:	4620      	mov	r0, r4
 8009e46:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009e4a:	460f      	mov	r7, r1
 8009e4c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009e50:	b91e      	cbnz	r6, 8009e5a <__strtok_r+0x20>
 8009e52:	b965      	cbnz	r5, 8009e6e <__strtok_r+0x34>
 8009e54:	6015      	str	r5, [r2, #0]
 8009e56:	2000      	movs	r0, #0
 8009e58:	e005      	b.n	8009e66 <__strtok_r+0x2c>
 8009e5a:	42b5      	cmp	r5, r6
 8009e5c:	d1f6      	bne.n	8009e4c <__strtok_r+0x12>
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d1f0      	bne.n	8009e44 <__strtok_r+0xa>
 8009e62:	6014      	str	r4, [r2, #0]
 8009e64:	7003      	strb	r3, [r0, #0]
 8009e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e68:	461c      	mov	r4, r3
 8009e6a:	e00c      	b.n	8009e86 <__strtok_r+0x4c>
 8009e6c:	b91d      	cbnz	r5, 8009e76 <__strtok_r+0x3c>
 8009e6e:	4627      	mov	r7, r4
 8009e70:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009e74:	460e      	mov	r6, r1
 8009e76:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009e7a:	42ab      	cmp	r3, r5
 8009e7c:	d1f6      	bne.n	8009e6c <__strtok_r+0x32>
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d0f2      	beq.n	8009e68 <__strtok_r+0x2e>
 8009e82:	2300      	movs	r3, #0
 8009e84:	703b      	strb	r3, [r7, #0]
 8009e86:	6014      	str	r4, [r2, #0]
 8009e88:	e7ed      	b.n	8009e66 <__strtok_r+0x2c>

08009e8a <strtok_r>:
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	f7ff bfd5 	b.w	8009e3a <__strtok_r>

08009e90 <_localeconv_r>:
 8009e90:	4800      	ldr	r0, [pc, #0]	@ (8009e94 <_localeconv_r+0x4>)
 8009e92:	4770      	bx	lr
 8009e94:	20000108 	.word	0x20000108

08009e98 <_close_r>:
 8009e98:	b538      	push	{r3, r4, r5, lr}
 8009e9a:	4d06      	ldr	r5, [pc, #24]	@ (8009eb4 <_close_r+0x1c>)
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	4604      	mov	r4, r0
 8009ea0:	4608      	mov	r0, r1
 8009ea2:	602b      	str	r3, [r5, #0]
 8009ea4:	f7f9 fb00 	bl	80034a8 <_close>
 8009ea8:	1c43      	adds	r3, r0, #1
 8009eaa:	d102      	bne.n	8009eb2 <_close_r+0x1a>
 8009eac:	682b      	ldr	r3, [r5, #0]
 8009eae:	b103      	cbz	r3, 8009eb2 <_close_r+0x1a>
 8009eb0:	6023      	str	r3, [r4, #0]
 8009eb2:	bd38      	pop	{r3, r4, r5, pc}
 8009eb4:	20000e94 	.word	0x20000e94

08009eb8 <_lseek_r>:
 8009eb8:	b538      	push	{r3, r4, r5, lr}
 8009eba:	4d07      	ldr	r5, [pc, #28]	@ (8009ed8 <_lseek_r+0x20>)
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	4608      	mov	r0, r1
 8009ec0:	4611      	mov	r1, r2
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	602a      	str	r2, [r5, #0]
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	f7f9 fb15 	bl	80034f6 <_lseek>
 8009ecc:	1c43      	adds	r3, r0, #1
 8009ece:	d102      	bne.n	8009ed6 <_lseek_r+0x1e>
 8009ed0:	682b      	ldr	r3, [r5, #0]
 8009ed2:	b103      	cbz	r3, 8009ed6 <_lseek_r+0x1e>
 8009ed4:	6023      	str	r3, [r4, #0]
 8009ed6:	bd38      	pop	{r3, r4, r5, pc}
 8009ed8:	20000e94 	.word	0x20000e94

08009edc <_read_r>:
 8009edc:	b538      	push	{r3, r4, r5, lr}
 8009ede:	4d07      	ldr	r5, [pc, #28]	@ (8009efc <_read_r+0x20>)
 8009ee0:	4604      	mov	r4, r0
 8009ee2:	4608      	mov	r0, r1
 8009ee4:	4611      	mov	r1, r2
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	602a      	str	r2, [r5, #0]
 8009eea:	461a      	mov	r2, r3
 8009eec:	f7f9 faa3 	bl	8003436 <_read>
 8009ef0:	1c43      	adds	r3, r0, #1
 8009ef2:	d102      	bne.n	8009efa <_read_r+0x1e>
 8009ef4:	682b      	ldr	r3, [r5, #0]
 8009ef6:	b103      	cbz	r3, 8009efa <_read_r+0x1e>
 8009ef8:	6023      	str	r3, [r4, #0]
 8009efa:	bd38      	pop	{r3, r4, r5, pc}
 8009efc:	20000e94 	.word	0x20000e94

08009f00 <_write_r>:
 8009f00:	b538      	push	{r3, r4, r5, lr}
 8009f02:	4d07      	ldr	r5, [pc, #28]	@ (8009f20 <_write_r+0x20>)
 8009f04:	4604      	mov	r4, r0
 8009f06:	4608      	mov	r0, r1
 8009f08:	4611      	mov	r1, r2
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	602a      	str	r2, [r5, #0]
 8009f0e:	461a      	mov	r2, r3
 8009f10:	f7f9 faae 	bl	8003470 <_write>
 8009f14:	1c43      	adds	r3, r0, #1
 8009f16:	d102      	bne.n	8009f1e <_write_r+0x1e>
 8009f18:	682b      	ldr	r3, [r5, #0]
 8009f1a:	b103      	cbz	r3, 8009f1e <_write_r+0x1e>
 8009f1c:	6023      	str	r3, [r4, #0]
 8009f1e:	bd38      	pop	{r3, r4, r5, pc}
 8009f20:	20000e94 	.word	0x20000e94

08009f24 <__errno>:
 8009f24:	4b01      	ldr	r3, [pc, #4]	@ (8009f2c <__errno+0x8>)
 8009f26:	6818      	ldr	r0, [r3, #0]
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	20000184 	.word	0x20000184

08009f30 <__libc_init_array>:
 8009f30:	b570      	push	{r4, r5, r6, lr}
 8009f32:	4d0d      	ldr	r5, [pc, #52]	@ (8009f68 <__libc_init_array+0x38>)
 8009f34:	4c0d      	ldr	r4, [pc, #52]	@ (8009f6c <__libc_init_array+0x3c>)
 8009f36:	1b64      	subs	r4, r4, r5
 8009f38:	10a4      	asrs	r4, r4, #2
 8009f3a:	2600      	movs	r6, #0
 8009f3c:	42a6      	cmp	r6, r4
 8009f3e:	d109      	bne.n	8009f54 <__libc_init_array+0x24>
 8009f40:	4d0b      	ldr	r5, [pc, #44]	@ (8009f70 <__libc_init_array+0x40>)
 8009f42:	4c0c      	ldr	r4, [pc, #48]	@ (8009f74 <__libc_init_array+0x44>)
 8009f44:	f002 fccc 	bl	800c8e0 <_init>
 8009f48:	1b64      	subs	r4, r4, r5
 8009f4a:	10a4      	asrs	r4, r4, #2
 8009f4c:	2600      	movs	r6, #0
 8009f4e:	42a6      	cmp	r6, r4
 8009f50:	d105      	bne.n	8009f5e <__libc_init_array+0x2e>
 8009f52:	bd70      	pop	{r4, r5, r6, pc}
 8009f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f58:	4798      	blx	r3
 8009f5a:	3601      	adds	r6, #1
 8009f5c:	e7ee      	b.n	8009f3c <__libc_init_array+0xc>
 8009f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f62:	4798      	blx	r3
 8009f64:	3601      	adds	r6, #1
 8009f66:	e7f2      	b.n	8009f4e <__libc_init_array+0x1e>
 8009f68:	0800d118 	.word	0x0800d118
 8009f6c:	0800d118 	.word	0x0800d118
 8009f70:	0800d118 	.word	0x0800d118
 8009f74:	0800d11c 	.word	0x0800d11c

08009f78 <__retarget_lock_init_recursive>:
 8009f78:	4770      	bx	lr

08009f7a <__retarget_lock_acquire_recursive>:
 8009f7a:	4770      	bx	lr

08009f7c <__retarget_lock_release_recursive>:
 8009f7c:	4770      	bx	lr

08009f7e <memcpy>:
 8009f7e:	440a      	add	r2, r1
 8009f80:	4291      	cmp	r1, r2
 8009f82:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f86:	d100      	bne.n	8009f8a <memcpy+0xc>
 8009f88:	4770      	bx	lr
 8009f8a:	b510      	push	{r4, lr}
 8009f8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f94:	4291      	cmp	r1, r2
 8009f96:	d1f9      	bne.n	8009f8c <memcpy+0xe>
 8009f98:	bd10      	pop	{r4, pc}
 8009f9a:	0000      	movs	r0, r0
 8009f9c:	0000      	movs	r0, r0
	...

08009fa0 <nan>:
 8009fa0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009fa8 <nan+0x8>
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop
 8009fa8:	00000000 	.word	0x00000000
 8009fac:	7ff80000 	.word	0x7ff80000

08009fb0 <nanf>:
 8009fb0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009fb8 <nanf+0x8>
 8009fb4:	4770      	bx	lr
 8009fb6:	bf00      	nop
 8009fb8:	7fc00000 	.word	0x7fc00000

08009fbc <quorem>:
 8009fbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc0:	6903      	ldr	r3, [r0, #16]
 8009fc2:	690c      	ldr	r4, [r1, #16]
 8009fc4:	42a3      	cmp	r3, r4
 8009fc6:	4607      	mov	r7, r0
 8009fc8:	db7e      	blt.n	800a0c8 <quorem+0x10c>
 8009fca:	3c01      	subs	r4, #1
 8009fcc:	f101 0814 	add.w	r8, r1, #20
 8009fd0:	00a3      	lsls	r3, r4, #2
 8009fd2:	f100 0514 	add.w	r5, r0, #20
 8009fd6:	9300      	str	r3, [sp, #0]
 8009fd8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009fdc:	9301      	str	r3, [sp, #4]
 8009fde:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009fe2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009fee:	fbb2 f6f3 	udiv	r6, r2, r3
 8009ff2:	d32e      	bcc.n	800a052 <quorem+0x96>
 8009ff4:	f04f 0a00 	mov.w	sl, #0
 8009ff8:	46c4      	mov	ip, r8
 8009ffa:	46ae      	mov	lr, r5
 8009ffc:	46d3      	mov	fp, sl
 8009ffe:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a002:	b298      	uxth	r0, r3
 800a004:	fb06 a000 	mla	r0, r6, r0, sl
 800a008:	0c02      	lsrs	r2, r0, #16
 800a00a:	0c1b      	lsrs	r3, r3, #16
 800a00c:	fb06 2303 	mla	r3, r6, r3, r2
 800a010:	f8de 2000 	ldr.w	r2, [lr]
 800a014:	b280      	uxth	r0, r0
 800a016:	b292      	uxth	r2, r2
 800a018:	1a12      	subs	r2, r2, r0
 800a01a:	445a      	add	r2, fp
 800a01c:	f8de 0000 	ldr.w	r0, [lr]
 800a020:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a024:	b29b      	uxth	r3, r3
 800a026:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a02a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a02e:	b292      	uxth	r2, r2
 800a030:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a034:	45e1      	cmp	r9, ip
 800a036:	f84e 2b04 	str.w	r2, [lr], #4
 800a03a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a03e:	d2de      	bcs.n	8009ffe <quorem+0x42>
 800a040:	9b00      	ldr	r3, [sp, #0]
 800a042:	58eb      	ldr	r3, [r5, r3]
 800a044:	b92b      	cbnz	r3, 800a052 <quorem+0x96>
 800a046:	9b01      	ldr	r3, [sp, #4]
 800a048:	3b04      	subs	r3, #4
 800a04a:	429d      	cmp	r5, r3
 800a04c:	461a      	mov	r2, r3
 800a04e:	d32f      	bcc.n	800a0b0 <quorem+0xf4>
 800a050:	613c      	str	r4, [r7, #16]
 800a052:	4638      	mov	r0, r7
 800a054:	f001 fd14 	bl	800ba80 <__mcmp>
 800a058:	2800      	cmp	r0, #0
 800a05a:	db25      	blt.n	800a0a8 <quorem+0xec>
 800a05c:	4629      	mov	r1, r5
 800a05e:	2000      	movs	r0, #0
 800a060:	f858 2b04 	ldr.w	r2, [r8], #4
 800a064:	f8d1 c000 	ldr.w	ip, [r1]
 800a068:	fa1f fe82 	uxth.w	lr, r2
 800a06c:	fa1f f38c 	uxth.w	r3, ip
 800a070:	eba3 030e 	sub.w	r3, r3, lr
 800a074:	4403      	add	r3, r0
 800a076:	0c12      	lsrs	r2, r2, #16
 800a078:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a07c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a080:	b29b      	uxth	r3, r3
 800a082:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a086:	45c1      	cmp	r9, r8
 800a088:	f841 3b04 	str.w	r3, [r1], #4
 800a08c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a090:	d2e6      	bcs.n	800a060 <quorem+0xa4>
 800a092:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a096:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a09a:	b922      	cbnz	r2, 800a0a6 <quorem+0xea>
 800a09c:	3b04      	subs	r3, #4
 800a09e:	429d      	cmp	r5, r3
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	d30b      	bcc.n	800a0bc <quorem+0x100>
 800a0a4:	613c      	str	r4, [r7, #16]
 800a0a6:	3601      	adds	r6, #1
 800a0a8:	4630      	mov	r0, r6
 800a0aa:	b003      	add	sp, #12
 800a0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0b0:	6812      	ldr	r2, [r2, #0]
 800a0b2:	3b04      	subs	r3, #4
 800a0b4:	2a00      	cmp	r2, #0
 800a0b6:	d1cb      	bne.n	800a050 <quorem+0x94>
 800a0b8:	3c01      	subs	r4, #1
 800a0ba:	e7c6      	b.n	800a04a <quorem+0x8e>
 800a0bc:	6812      	ldr	r2, [r2, #0]
 800a0be:	3b04      	subs	r3, #4
 800a0c0:	2a00      	cmp	r2, #0
 800a0c2:	d1ef      	bne.n	800a0a4 <quorem+0xe8>
 800a0c4:	3c01      	subs	r4, #1
 800a0c6:	e7ea      	b.n	800a09e <quorem+0xe2>
 800a0c8:	2000      	movs	r0, #0
 800a0ca:	e7ee      	b.n	800a0aa <quorem+0xee>
 800a0cc:	0000      	movs	r0, r0
	...

0800a0d0 <_dtoa_r>:
 800a0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d4:	69c7      	ldr	r7, [r0, #28]
 800a0d6:	b097      	sub	sp, #92	@ 0x5c
 800a0d8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a0dc:	ec55 4b10 	vmov	r4, r5, d0
 800a0e0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a0e2:	9107      	str	r1, [sp, #28]
 800a0e4:	4681      	mov	r9, r0
 800a0e6:	920c      	str	r2, [sp, #48]	@ 0x30
 800a0e8:	9311      	str	r3, [sp, #68]	@ 0x44
 800a0ea:	b97f      	cbnz	r7, 800a10c <_dtoa_r+0x3c>
 800a0ec:	2010      	movs	r0, #16
 800a0ee:	f001 f943 	bl	800b378 <malloc>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	f8c9 001c 	str.w	r0, [r9, #28]
 800a0f8:	b920      	cbnz	r0, 800a104 <_dtoa_r+0x34>
 800a0fa:	4ba9      	ldr	r3, [pc, #676]	@ (800a3a0 <_dtoa_r+0x2d0>)
 800a0fc:	21ef      	movs	r1, #239	@ 0xef
 800a0fe:	48a9      	ldr	r0, [pc, #676]	@ (800a3a4 <_dtoa_r+0x2d4>)
 800a100:	f002 fb28 	bl	800c754 <__assert_func>
 800a104:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a108:	6007      	str	r7, [r0, #0]
 800a10a:	60c7      	str	r7, [r0, #12]
 800a10c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a110:	6819      	ldr	r1, [r3, #0]
 800a112:	b159      	cbz	r1, 800a12c <_dtoa_r+0x5c>
 800a114:	685a      	ldr	r2, [r3, #4]
 800a116:	604a      	str	r2, [r1, #4]
 800a118:	2301      	movs	r3, #1
 800a11a:	4093      	lsls	r3, r2
 800a11c:	608b      	str	r3, [r1, #8]
 800a11e:	4648      	mov	r0, r9
 800a120:	f001 fa32 	bl	800b588 <_Bfree>
 800a124:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a128:	2200      	movs	r2, #0
 800a12a:	601a      	str	r2, [r3, #0]
 800a12c:	1e2b      	subs	r3, r5, #0
 800a12e:	bfb9      	ittee	lt
 800a130:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a134:	9305      	strlt	r3, [sp, #20]
 800a136:	2300      	movge	r3, #0
 800a138:	6033      	strge	r3, [r6, #0]
 800a13a:	9f05      	ldr	r7, [sp, #20]
 800a13c:	4b9a      	ldr	r3, [pc, #616]	@ (800a3a8 <_dtoa_r+0x2d8>)
 800a13e:	bfbc      	itt	lt
 800a140:	2201      	movlt	r2, #1
 800a142:	6032      	strlt	r2, [r6, #0]
 800a144:	43bb      	bics	r3, r7
 800a146:	d112      	bne.n	800a16e <_dtoa_r+0x9e>
 800a148:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a14a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a14e:	6013      	str	r3, [r2, #0]
 800a150:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a154:	4323      	orrs	r3, r4
 800a156:	f000 855a 	beq.w	800ac0e <_dtoa_r+0xb3e>
 800a15a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a15c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a3bc <_dtoa_r+0x2ec>
 800a160:	2b00      	cmp	r3, #0
 800a162:	f000 855c 	beq.w	800ac1e <_dtoa_r+0xb4e>
 800a166:	f10a 0303 	add.w	r3, sl, #3
 800a16a:	f000 bd56 	b.w	800ac1a <_dtoa_r+0xb4a>
 800a16e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a172:	2200      	movs	r2, #0
 800a174:	ec51 0b17 	vmov	r0, r1, d7
 800a178:	2300      	movs	r3, #0
 800a17a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a17e:	f7f6 fcc3 	bl	8000b08 <__aeabi_dcmpeq>
 800a182:	4680      	mov	r8, r0
 800a184:	b158      	cbz	r0, 800a19e <_dtoa_r+0xce>
 800a186:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a188:	2301      	movs	r3, #1
 800a18a:	6013      	str	r3, [r2, #0]
 800a18c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a18e:	b113      	cbz	r3, 800a196 <_dtoa_r+0xc6>
 800a190:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a192:	4b86      	ldr	r3, [pc, #536]	@ (800a3ac <_dtoa_r+0x2dc>)
 800a194:	6013      	str	r3, [r2, #0]
 800a196:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a3c0 <_dtoa_r+0x2f0>
 800a19a:	f000 bd40 	b.w	800ac1e <_dtoa_r+0xb4e>
 800a19e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a1a2:	aa14      	add	r2, sp, #80	@ 0x50
 800a1a4:	a915      	add	r1, sp, #84	@ 0x54
 800a1a6:	4648      	mov	r0, r9
 800a1a8:	f001 fd8a 	bl	800bcc0 <__d2b>
 800a1ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a1b0:	9002      	str	r0, [sp, #8]
 800a1b2:	2e00      	cmp	r6, #0
 800a1b4:	d078      	beq.n	800a2a8 <_dtoa_r+0x1d8>
 800a1b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1b8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a1bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a1c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a1c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a1cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	4b76      	ldr	r3, [pc, #472]	@ (800a3b0 <_dtoa_r+0x2e0>)
 800a1d6:	f7f6 f877 	bl	80002c8 <__aeabi_dsub>
 800a1da:	a36b      	add	r3, pc, #428	@ (adr r3, 800a388 <_dtoa_r+0x2b8>)
 800a1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e0:	f7f6 fa2a 	bl	8000638 <__aeabi_dmul>
 800a1e4:	a36a      	add	r3, pc, #424	@ (adr r3, 800a390 <_dtoa_r+0x2c0>)
 800a1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ea:	f7f6 f86f 	bl	80002cc <__adddf3>
 800a1ee:	4604      	mov	r4, r0
 800a1f0:	4630      	mov	r0, r6
 800a1f2:	460d      	mov	r5, r1
 800a1f4:	f7f6 f9b6 	bl	8000564 <__aeabi_i2d>
 800a1f8:	a367      	add	r3, pc, #412	@ (adr r3, 800a398 <_dtoa_r+0x2c8>)
 800a1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fe:	f7f6 fa1b 	bl	8000638 <__aeabi_dmul>
 800a202:	4602      	mov	r2, r0
 800a204:	460b      	mov	r3, r1
 800a206:	4620      	mov	r0, r4
 800a208:	4629      	mov	r1, r5
 800a20a:	f7f6 f85f 	bl	80002cc <__adddf3>
 800a20e:	4604      	mov	r4, r0
 800a210:	460d      	mov	r5, r1
 800a212:	f7f6 fcc1 	bl	8000b98 <__aeabi_d2iz>
 800a216:	2200      	movs	r2, #0
 800a218:	4607      	mov	r7, r0
 800a21a:	2300      	movs	r3, #0
 800a21c:	4620      	mov	r0, r4
 800a21e:	4629      	mov	r1, r5
 800a220:	f7f6 fc7c 	bl	8000b1c <__aeabi_dcmplt>
 800a224:	b140      	cbz	r0, 800a238 <_dtoa_r+0x168>
 800a226:	4638      	mov	r0, r7
 800a228:	f7f6 f99c 	bl	8000564 <__aeabi_i2d>
 800a22c:	4622      	mov	r2, r4
 800a22e:	462b      	mov	r3, r5
 800a230:	f7f6 fc6a 	bl	8000b08 <__aeabi_dcmpeq>
 800a234:	b900      	cbnz	r0, 800a238 <_dtoa_r+0x168>
 800a236:	3f01      	subs	r7, #1
 800a238:	2f16      	cmp	r7, #22
 800a23a:	d852      	bhi.n	800a2e2 <_dtoa_r+0x212>
 800a23c:	4b5d      	ldr	r3, [pc, #372]	@ (800a3b4 <_dtoa_r+0x2e4>)
 800a23e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a246:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a24a:	f7f6 fc67 	bl	8000b1c <__aeabi_dcmplt>
 800a24e:	2800      	cmp	r0, #0
 800a250:	d049      	beq.n	800a2e6 <_dtoa_r+0x216>
 800a252:	3f01      	subs	r7, #1
 800a254:	2300      	movs	r3, #0
 800a256:	9310      	str	r3, [sp, #64]	@ 0x40
 800a258:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a25a:	1b9b      	subs	r3, r3, r6
 800a25c:	1e5a      	subs	r2, r3, #1
 800a25e:	bf45      	ittet	mi
 800a260:	f1c3 0301 	rsbmi	r3, r3, #1
 800a264:	9300      	strmi	r3, [sp, #0]
 800a266:	2300      	movpl	r3, #0
 800a268:	2300      	movmi	r3, #0
 800a26a:	9206      	str	r2, [sp, #24]
 800a26c:	bf54      	ite	pl
 800a26e:	9300      	strpl	r3, [sp, #0]
 800a270:	9306      	strmi	r3, [sp, #24]
 800a272:	2f00      	cmp	r7, #0
 800a274:	db39      	blt.n	800a2ea <_dtoa_r+0x21a>
 800a276:	9b06      	ldr	r3, [sp, #24]
 800a278:	970d      	str	r7, [sp, #52]	@ 0x34
 800a27a:	443b      	add	r3, r7
 800a27c:	9306      	str	r3, [sp, #24]
 800a27e:	2300      	movs	r3, #0
 800a280:	9308      	str	r3, [sp, #32]
 800a282:	9b07      	ldr	r3, [sp, #28]
 800a284:	2b09      	cmp	r3, #9
 800a286:	d863      	bhi.n	800a350 <_dtoa_r+0x280>
 800a288:	2b05      	cmp	r3, #5
 800a28a:	bfc4      	itt	gt
 800a28c:	3b04      	subgt	r3, #4
 800a28e:	9307      	strgt	r3, [sp, #28]
 800a290:	9b07      	ldr	r3, [sp, #28]
 800a292:	f1a3 0302 	sub.w	r3, r3, #2
 800a296:	bfcc      	ite	gt
 800a298:	2400      	movgt	r4, #0
 800a29a:	2401      	movle	r4, #1
 800a29c:	2b03      	cmp	r3, #3
 800a29e:	d863      	bhi.n	800a368 <_dtoa_r+0x298>
 800a2a0:	e8df f003 	tbb	[pc, r3]
 800a2a4:	2b375452 	.word	0x2b375452
 800a2a8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a2ac:	441e      	add	r6, r3
 800a2ae:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a2b2:	2b20      	cmp	r3, #32
 800a2b4:	bfc1      	itttt	gt
 800a2b6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a2ba:	409f      	lslgt	r7, r3
 800a2bc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a2c0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a2c4:	bfd6      	itet	le
 800a2c6:	f1c3 0320 	rsble	r3, r3, #32
 800a2ca:	ea47 0003 	orrgt.w	r0, r7, r3
 800a2ce:	fa04 f003 	lslle.w	r0, r4, r3
 800a2d2:	f7f6 f937 	bl	8000544 <__aeabi_ui2d>
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a2dc:	3e01      	subs	r6, #1
 800a2de:	9212      	str	r2, [sp, #72]	@ 0x48
 800a2e0:	e776      	b.n	800a1d0 <_dtoa_r+0x100>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e7b7      	b.n	800a256 <_dtoa_r+0x186>
 800a2e6:	9010      	str	r0, [sp, #64]	@ 0x40
 800a2e8:	e7b6      	b.n	800a258 <_dtoa_r+0x188>
 800a2ea:	9b00      	ldr	r3, [sp, #0]
 800a2ec:	1bdb      	subs	r3, r3, r7
 800a2ee:	9300      	str	r3, [sp, #0]
 800a2f0:	427b      	negs	r3, r7
 800a2f2:	9308      	str	r3, [sp, #32]
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	930d      	str	r3, [sp, #52]	@ 0x34
 800a2f8:	e7c3      	b.n	800a282 <_dtoa_r+0x1b2>
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a300:	eb07 0b03 	add.w	fp, r7, r3
 800a304:	f10b 0301 	add.w	r3, fp, #1
 800a308:	2b01      	cmp	r3, #1
 800a30a:	9303      	str	r3, [sp, #12]
 800a30c:	bfb8      	it	lt
 800a30e:	2301      	movlt	r3, #1
 800a310:	e006      	b.n	800a320 <_dtoa_r+0x250>
 800a312:	2301      	movs	r3, #1
 800a314:	9309      	str	r3, [sp, #36]	@ 0x24
 800a316:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a318:	2b00      	cmp	r3, #0
 800a31a:	dd28      	ble.n	800a36e <_dtoa_r+0x29e>
 800a31c:	469b      	mov	fp, r3
 800a31e:	9303      	str	r3, [sp, #12]
 800a320:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a324:	2100      	movs	r1, #0
 800a326:	2204      	movs	r2, #4
 800a328:	f102 0514 	add.w	r5, r2, #20
 800a32c:	429d      	cmp	r5, r3
 800a32e:	d926      	bls.n	800a37e <_dtoa_r+0x2ae>
 800a330:	6041      	str	r1, [r0, #4]
 800a332:	4648      	mov	r0, r9
 800a334:	f001 f8e8 	bl	800b508 <_Balloc>
 800a338:	4682      	mov	sl, r0
 800a33a:	2800      	cmp	r0, #0
 800a33c:	d142      	bne.n	800a3c4 <_dtoa_r+0x2f4>
 800a33e:	4b1e      	ldr	r3, [pc, #120]	@ (800a3b8 <_dtoa_r+0x2e8>)
 800a340:	4602      	mov	r2, r0
 800a342:	f240 11af 	movw	r1, #431	@ 0x1af
 800a346:	e6da      	b.n	800a0fe <_dtoa_r+0x2e>
 800a348:	2300      	movs	r3, #0
 800a34a:	e7e3      	b.n	800a314 <_dtoa_r+0x244>
 800a34c:	2300      	movs	r3, #0
 800a34e:	e7d5      	b.n	800a2fc <_dtoa_r+0x22c>
 800a350:	2401      	movs	r4, #1
 800a352:	2300      	movs	r3, #0
 800a354:	9307      	str	r3, [sp, #28]
 800a356:	9409      	str	r4, [sp, #36]	@ 0x24
 800a358:	f04f 3bff 	mov.w	fp, #4294967295
 800a35c:	2200      	movs	r2, #0
 800a35e:	f8cd b00c 	str.w	fp, [sp, #12]
 800a362:	2312      	movs	r3, #18
 800a364:	920c      	str	r2, [sp, #48]	@ 0x30
 800a366:	e7db      	b.n	800a320 <_dtoa_r+0x250>
 800a368:	2301      	movs	r3, #1
 800a36a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a36c:	e7f4      	b.n	800a358 <_dtoa_r+0x288>
 800a36e:	f04f 0b01 	mov.w	fp, #1
 800a372:	f8cd b00c 	str.w	fp, [sp, #12]
 800a376:	465b      	mov	r3, fp
 800a378:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a37c:	e7d0      	b.n	800a320 <_dtoa_r+0x250>
 800a37e:	3101      	adds	r1, #1
 800a380:	0052      	lsls	r2, r2, #1
 800a382:	e7d1      	b.n	800a328 <_dtoa_r+0x258>
 800a384:	f3af 8000 	nop.w
 800a388:	636f4361 	.word	0x636f4361
 800a38c:	3fd287a7 	.word	0x3fd287a7
 800a390:	8b60c8b3 	.word	0x8b60c8b3
 800a394:	3fc68a28 	.word	0x3fc68a28
 800a398:	509f79fb 	.word	0x509f79fb
 800a39c:	3fd34413 	.word	0x3fd34413
 800a3a0:	0800cd34 	.word	0x0800cd34
 800a3a4:	0800cd4b 	.word	0x0800cd4b
 800a3a8:	7ff00000 	.word	0x7ff00000
 800a3ac:	0800ccf7 	.word	0x0800ccf7
 800a3b0:	3ff80000 	.word	0x3ff80000
 800a3b4:	0800d048 	.word	0x0800d048
 800a3b8:	0800cda3 	.word	0x0800cda3
 800a3bc:	0800cd30 	.word	0x0800cd30
 800a3c0:	0800ccf6 	.word	0x0800ccf6
 800a3c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a3c8:	6018      	str	r0, [r3, #0]
 800a3ca:	9b03      	ldr	r3, [sp, #12]
 800a3cc:	2b0e      	cmp	r3, #14
 800a3ce:	f200 80a1 	bhi.w	800a514 <_dtoa_r+0x444>
 800a3d2:	2c00      	cmp	r4, #0
 800a3d4:	f000 809e 	beq.w	800a514 <_dtoa_r+0x444>
 800a3d8:	2f00      	cmp	r7, #0
 800a3da:	dd33      	ble.n	800a444 <_dtoa_r+0x374>
 800a3dc:	4b9c      	ldr	r3, [pc, #624]	@ (800a650 <_dtoa_r+0x580>)
 800a3de:	f007 020f 	and.w	r2, r7, #15
 800a3e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3e6:	ed93 7b00 	vldr	d7, [r3]
 800a3ea:	05f8      	lsls	r0, r7, #23
 800a3ec:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a3f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a3f4:	d516      	bpl.n	800a424 <_dtoa_r+0x354>
 800a3f6:	4b97      	ldr	r3, [pc, #604]	@ (800a654 <_dtoa_r+0x584>)
 800a3f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a3fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a400:	f7f6 fa44 	bl	800088c <__aeabi_ddiv>
 800a404:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a408:	f004 040f 	and.w	r4, r4, #15
 800a40c:	2603      	movs	r6, #3
 800a40e:	4d91      	ldr	r5, [pc, #580]	@ (800a654 <_dtoa_r+0x584>)
 800a410:	b954      	cbnz	r4, 800a428 <_dtoa_r+0x358>
 800a412:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a416:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a41a:	f7f6 fa37 	bl	800088c <__aeabi_ddiv>
 800a41e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a422:	e028      	b.n	800a476 <_dtoa_r+0x3a6>
 800a424:	2602      	movs	r6, #2
 800a426:	e7f2      	b.n	800a40e <_dtoa_r+0x33e>
 800a428:	07e1      	lsls	r1, r4, #31
 800a42a:	d508      	bpl.n	800a43e <_dtoa_r+0x36e>
 800a42c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a430:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a434:	f7f6 f900 	bl	8000638 <__aeabi_dmul>
 800a438:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a43c:	3601      	adds	r6, #1
 800a43e:	1064      	asrs	r4, r4, #1
 800a440:	3508      	adds	r5, #8
 800a442:	e7e5      	b.n	800a410 <_dtoa_r+0x340>
 800a444:	f000 80af 	beq.w	800a5a6 <_dtoa_r+0x4d6>
 800a448:	427c      	negs	r4, r7
 800a44a:	4b81      	ldr	r3, [pc, #516]	@ (800a650 <_dtoa_r+0x580>)
 800a44c:	4d81      	ldr	r5, [pc, #516]	@ (800a654 <_dtoa_r+0x584>)
 800a44e:	f004 020f 	and.w	r2, r4, #15
 800a452:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a45e:	f7f6 f8eb 	bl	8000638 <__aeabi_dmul>
 800a462:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a466:	1124      	asrs	r4, r4, #4
 800a468:	2300      	movs	r3, #0
 800a46a:	2602      	movs	r6, #2
 800a46c:	2c00      	cmp	r4, #0
 800a46e:	f040 808f 	bne.w	800a590 <_dtoa_r+0x4c0>
 800a472:	2b00      	cmp	r3, #0
 800a474:	d1d3      	bne.n	800a41e <_dtoa_r+0x34e>
 800a476:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a478:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	f000 8094 	beq.w	800a5aa <_dtoa_r+0x4da>
 800a482:	4b75      	ldr	r3, [pc, #468]	@ (800a658 <_dtoa_r+0x588>)
 800a484:	2200      	movs	r2, #0
 800a486:	4620      	mov	r0, r4
 800a488:	4629      	mov	r1, r5
 800a48a:	f7f6 fb47 	bl	8000b1c <__aeabi_dcmplt>
 800a48e:	2800      	cmp	r0, #0
 800a490:	f000 808b 	beq.w	800a5aa <_dtoa_r+0x4da>
 800a494:	9b03      	ldr	r3, [sp, #12]
 800a496:	2b00      	cmp	r3, #0
 800a498:	f000 8087 	beq.w	800a5aa <_dtoa_r+0x4da>
 800a49c:	f1bb 0f00 	cmp.w	fp, #0
 800a4a0:	dd34      	ble.n	800a50c <_dtoa_r+0x43c>
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	4b6d      	ldr	r3, [pc, #436]	@ (800a65c <_dtoa_r+0x58c>)
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	4629      	mov	r1, r5
 800a4aa:	f7f6 f8c5 	bl	8000638 <__aeabi_dmul>
 800a4ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4b2:	f107 38ff 	add.w	r8, r7, #4294967295
 800a4b6:	3601      	adds	r6, #1
 800a4b8:	465c      	mov	r4, fp
 800a4ba:	4630      	mov	r0, r6
 800a4bc:	f7f6 f852 	bl	8000564 <__aeabi_i2d>
 800a4c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4c4:	f7f6 f8b8 	bl	8000638 <__aeabi_dmul>
 800a4c8:	4b65      	ldr	r3, [pc, #404]	@ (800a660 <_dtoa_r+0x590>)
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f7f5 fefe 	bl	80002cc <__adddf3>
 800a4d0:	4605      	mov	r5, r0
 800a4d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a4d6:	2c00      	cmp	r4, #0
 800a4d8:	d16a      	bne.n	800a5b0 <_dtoa_r+0x4e0>
 800a4da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4de:	4b61      	ldr	r3, [pc, #388]	@ (800a664 <_dtoa_r+0x594>)
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	f7f5 fef1 	bl	80002c8 <__aeabi_dsub>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a4ee:	462a      	mov	r2, r5
 800a4f0:	4633      	mov	r3, r6
 800a4f2:	f7f6 fb31 	bl	8000b58 <__aeabi_dcmpgt>
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	f040 8298 	bne.w	800aa2c <_dtoa_r+0x95c>
 800a4fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a500:	462a      	mov	r2, r5
 800a502:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a506:	f7f6 fb09 	bl	8000b1c <__aeabi_dcmplt>
 800a50a:	bb38      	cbnz	r0, 800a55c <_dtoa_r+0x48c>
 800a50c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a510:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a514:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a516:	2b00      	cmp	r3, #0
 800a518:	f2c0 8157 	blt.w	800a7ca <_dtoa_r+0x6fa>
 800a51c:	2f0e      	cmp	r7, #14
 800a51e:	f300 8154 	bgt.w	800a7ca <_dtoa_r+0x6fa>
 800a522:	4b4b      	ldr	r3, [pc, #300]	@ (800a650 <_dtoa_r+0x580>)
 800a524:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a528:	ed93 7b00 	vldr	d7, [r3]
 800a52c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a52e:	2b00      	cmp	r3, #0
 800a530:	ed8d 7b00 	vstr	d7, [sp]
 800a534:	f280 80e5 	bge.w	800a702 <_dtoa_r+0x632>
 800a538:	9b03      	ldr	r3, [sp, #12]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	f300 80e1 	bgt.w	800a702 <_dtoa_r+0x632>
 800a540:	d10c      	bne.n	800a55c <_dtoa_r+0x48c>
 800a542:	4b48      	ldr	r3, [pc, #288]	@ (800a664 <_dtoa_r+0x594>)
 800a544:	2200      	movs	r2, #0
 800a546:	ec51 0b17 	vmov	r0, r1, d7
 800a54a:	f7f6 f875 	bl	8000638 <__aeabi_dmul>
 800a54e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a552:	f7f6 faf7 	bl	8000b44 <__aeabi_dcmpge>
 800a556:	2800      	cmp	r0, #0
 800a558:	f000 8266 	beq.w	800aa28 <_dtoa_r+0x958>
 800a55c:	2400      	movs	r4, #0
 800a55e:	4625      	mov	r5, r4
 800a560:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a562:	4656      	mov	r6, sl
 800a564:	ea6f 0803 	mvn.w	r8, r3
 800a568:	2700      	movs	r7, #0
 800a56a:	4621      	mov	r1, r4
 800a56c:	4648      	mov	r0, r9
 800a56e:	f001 f80b 	bl	800b588 <_Bfree>
 800a572:	2d00      	cmp	r5, #0
 800a574:	f000 80bd 	beq.w	800a6f2 <_dtoa_r+0x622>
 800a578:	b12f      	cbz	r7, 800a586 <_dtoa_r+0x4b6>
 800a57a:	42af      	cmp	r7, r5
 800a57c:	d003      	beq.n	800a586 <_dtoa_r+0x4b6>
 800a57e:	4639      	mov	r1, r7
 800a580:	4648      	mov	r0, r9
 800a582:	f001 f801 	bl	800b588 <_Bfree>
 800a586:	4629      	mov	r1, r5
 800a588:	4648      	mov	r0, r9
 800a58a:	f000 fffd 	bl	800b588 <_Bfree>
 800a58e:	e0b0      	b.n	800a6f2 <_dtoa_r+0x622>
 800a590:	07e2      	lsls	r2, r4, #31
 800a592:	d505      	bpl.n	800a5a0 <_dtoa_r+0x4d0>
 800a594:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a598:	f7f6 f84e 	bl	8000638 <__aeabi_dmul>
 800a59c:	3601      	adds	r6, #1
 800a59e:	2301      	movs	r3, #1
 800a5a0:	1064      	asrs	r4, r4, #1
 800a5a2:	3508      	adds	r5, #8
 800a5a4:	e762      	b.n	800a46c <_dtoa_r+0x39c>
 800a5a6:	2602      	movs	r6, #2
 800a5a8:	e765      	b.n	800a476 <_dtoa_r+0x3a6>
 800a5aa:	9c03      	ldr	r4, [sp, #12]
 800a5ac:	46b8      	mov	r8, r7
 800a5ae:	e784      	b.n	800a4ba <_dtoa_r+0x3ea>
 800a5b0:	4b27      	ldr	r3, [pc, #156]	@ (800a650 <_dtoa_r+0x580>)
 800a5b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a5b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a5b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a5bc:	4454      	add	r4, sl
 800a5be:	2900      	cmp	r1, #0
 800a5c0:	d054      	beq.n	800a66c <_dtoa_r+0x59c>
 800a5c2:	4929      	ldr	r1, [pc, #164]	@ (800a668 <_dtoa_r+0x598>)
 800a5c4:	2000      	movs	r0, #0
 800a5c6:	f7f6 f961 	bl	800088c <__aeabi_ddiv>
 800a5ca:	4633      	mov	r3, r6
 800a5cc:	462a      	mov	r2, r5
 800a5ce:	f7f5 fe7b 	bl	80002c8 <__aeabi_dsub>
 800a5d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a5d6:	4656      	mov	r6, sl
 800a5d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5dc:	f7f6 fadc 	bl	8000b98 <__aeabi_d2iz>
 800a5e0:	4605      	mov	r5, r0
 800a5e2:	f7f5 ffbf 	bl	8000564 <__aeabi_i2d>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5ee:	f7f5 fe6b 	bl	80002c8 <__aeabi_dsub>
 800a5f2:	3530      	adds	r5, #48	@ 0x30
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a5fc:	f806 5b01 	strb.w	r5, [r6], #1
 800a600:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a604:	f7f6 fa8a 	bl	8000b1c <__aeabi_dcmplt>
 800a608:	2800      	cmp	r0, #0
 800a60a:	d172      	bne.n	800a6f2 <_dtoa_r+0x622>
 800a60c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a610:	4911      	ldr	r1, [pc, #68]	@ (800a658 <_dtoa_r+0x588>)
 800a612:	2000      	movs	r0, #0
 800a614:	f7f5 fe58 	bl	80002c8 <__aeabi_dsub>
 800a618:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a61c:	f7f6 fa7e 	bl	8000b1c <__aeabi_dcmplt>
 800a620:	2800      	cmp	r0, #0
 800a622:	f040 80b4 	bne.w	800a78e <_dtoa_r+0x6be>
 800a626:	42a6      	cmp	r6, r4
 800a628:	f43f af70 	beq.w	800a50c <_dtoa_r+0x43c>
 800a62c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a630:	4b0a      	ldr	r3, [pc, #40]	@ (800a65c <_dtoa_r+0x58c>)
 800a632:	2200      	movs	r2, #0
 800a634:	f7f6 f800 	bl	8000638 <__aeabi_dmul>
 800a638:	4b08      	ldr	r3, [pc, #32]	@ (800a65c <_dtoa_r+0x58c>)
 800a63a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a63e:	2200      	movs	r2, #0
 800a640:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a644:	f7f5 fff8 	bl	8000638 <__aeabi_dmul>
 800a648:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a64c:	e7c4      	b.n	800a5d8 <_dtoa_r+0x508>
 800a64e:	bf00      	nop
 800a650:	0800d048 	.word	0x0800d048
 800a654:	0800d020 	.word	0x0800d020
 800a658:	3ff00000 	.word	0x3ff00000
 800a65c:	40240000 	.word	0x40240000
 800a660:	401c0000 	.word	0x401c0000
 800a664:	40140000 	.word	0x40140000
 800a668:	3fe00000 	.word	0x3fe00000
 800a66c:	4631      	mov	r1, r6
 800a66e:	4628      	mov	r0, r5
 800a670:	f7f5 ffe2 	bl	8000638 <__aeabi_dmul>
 800a674:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a678:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a67a:	4656      	mov	r6, sl
 800a67c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a680:	f7f6 fa8a 	bl	8000b98 <__aeabi_d2iz>
 800a684:	4605      	mov	r5, r0
 800a686:	f7f5 ff6d 	bl	8000564 <__aeabi_i2d>
 800a68a:	4602      	mov	r2, r0
 800a68c:	460b      	mov	r3, r1
 800a68e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a692:	f7f5 fe19 	bl	80002c8 <__aeabi_dsub>
 800a696:	3530      	adds	r5, #48	@ 0x30
 800a698:	f806 5b01 	strb.w	r5, [r6], #1
 800a69c:	4602      	mov	r2, r0
 800a69e:	460b      	mov	r3, r1
 800a6a0:	42a6      	cmp	r6, r4
 800a6a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a6a6:	f04f 0200 	mov.w	r2, #0
 800a6aa:	d124      	bne.n	800a6f6 <_dtoa_r+0x626>
 800a6ac:	4baf      	ldr	r3, [pc, #700]	@ (800a96c <_dtoa_r+0x89c>)
 800a6ae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a6b2:	f7f5 fe0b 	bl	80002cc <__adddf3>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6be:	f7f6 fa4b 	bl	8000b58 <__aeabi_dcmpgt>
 800a6c2:	2800      	cmp	r0, #0
 800a6c4:	d163      	bne.n	800a78e <_dtoa_r+0x6be>
 800a6c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a6ca:	49a8      	ldr	r1, [pc, #672]	@ (800a96c <_dtoa_r+0x89c>)
 800a6cc:	2000      	movs	r0, #0
 800a6ce:	f7f5 fdfb 	bl	80002c8 <__aeabi_dsub>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6da:	f7f6 fa1f 	bl	8000b1c <__aeabi_dcmplt>
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	f43f af14 	beq.w	800a50c <_dtoa_r+0x43c>
 800a6e4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a6e6:	1e73      	subs	r3, r6, #1
 800a6e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a6ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a6ee:	2b30      	cmp	r3, #48	@ 0x30
 800a6f0:	d0f8      	beq.n	800a6e4 <_dtoa_r+0x614>
 800a6f2:	4647      	mov	r7, r8
 800a6f4:	e03b      	b.n	800a76e <_dtoa_r+0x69e>
 800a6f6:	4b9e      	ldr	r3, [pc, #632]	@ (800a970 <_dtoa_r+0x8a0>)
 800a6f8:	f7f5 ff9e 	bl	8000638 <__aeabi_dmul>
 800a6fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a700:	e7bc      	b.n	800a67c <_dtoa_r+0x5ac>
 800a702:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a706:	4656      	mov	r6, sl
 800a708:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a70c:	4620      	mov	r0, r4
 800a70e:	4629      	mov	r1, r5
 800a710:	f7f6 f8bc 	bl	800088c <__aeabi_ddiv>
 800a714:	f7f6 fa40 	bl	8000b98 <__aeabi_d2iz>
 800a718:	4680      	mov	r8, r0
 800a71a:	f7f5 ff23 	bl	8000564 <__aeabi_i2d>
 800a71e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a722:	f7f5 ff89 	bl	8000638 <__aeabi_dmul>
 800a726:	4602      	mov	r2, r0
 800a728:	460b      	mov	r3, r1
 800a72a:	4620      	mov	r0, r4
 800a72c:	4629      	mov	r1, r5
 800a72e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a732:	f7f5 fdc9 	bl	80002c8 <__aeabi_dsub>
 800a736:	f806 4b01 	strb.w	r4, [r6], #1
 800a73a:	9d03      	ldr	r5, [sp, #12]
 800a73c:	eba6 040a 	sub.w	r4, r6, sl
 800a740:	42a5      	cmp	r5, r4
 800a742:	4602      	mov	r2, r0
 800a744:	460b      	mov	r3, r1
 800a746:	d133      	bne.n	800a7b0 <_dtoa_r+0x6e0>
 800a748:	f7f5 fdc0 	bl	80002cc <__adddf3>
 800a74c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a750:	4604      	mov	r4, r0
 800a752:	460d      	mov	r5, r1
 800a754:	f7f6 fa00 	bl	8000b58 <__aeabi_dcmpgt>
 800a758:	b9c0      	cbnz	r0, 800a78c <_dtoa_r+0x6bc>
 800a75a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a75e:	4620      	mov	r0, r4
 800a760:	4629      	mov	r1, r5
 800a762:	f7f6 f9d1 	bl	8000b08 <__aeabi_dcmpeq>
 800a766:	b110      	cbz	r0, 800a76e <_dtoa_r+0x69e>
 800a768:	f018 0f01 	tst.w	r8, #1
 800a76c:	d10e      	bne.n	800a78c <_dtoa_r+0x6bc>
 800a76e:	9902      	ldr	r1, [sp, #8]
 800a770:	4648      	mov	r0, r9
 800a772:	f000 ff09 	bl	800b588 <_Bfree>
 800a776:	2300      	movs	r3, #0
 800a778:	7033      	strb	r3, [r6, #0]
 800a77a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a77c:	3701      	adds	r7, #1
 800a77e:	601f      	str	r7, [r3, #0]
 800a780:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a782:	2b00      	cmp	r3, #0
 800a784:	f000 824b 	beq.w	800ac1e <_dtoa_r+0xb4e>
 800a788:	601e      	str	r6, [r3, #0]
 800a78a:	e248      	b.n	800ac1e <_dtoa_r+0xb4e>
 800a78c:	46b8      	mov	r8, r7
 800a78e:	4633      	mov	r3, r6
 800a790:	461e      	mov	r6, r3
 800a792:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a796:	2a39      	cmp	r2, #57	@ 0x39
 800a798:	d106      	bne.n	800a7a8 <_dtoa_r+0x6d8>
 800a79a:	459a      	cmp	sl, r3
 800a79c:	d1f8      	bne.n	800a790 <_dtoa_r+0x6c0>
 800a79e:	2230      	movs	r2, #48	@ 0x30
 800a7a0:	f108 0801 	add.w	r8, r8, #1
 800a7a4:	f88a 2000 	strb.w	r2, [sl]
 800a7a8:	781a      	ldrb	r2, [r3, #0]
 800a7aa:	3201      	adds	r2, #1
 800a7ac:	701a      	strb	r2, [r3, #0]
 800a7ae:	e7a0      	b.n	800a6f2 <_dtoa_r+0x622>
 800a7b0:	4b6f      	ldr	r3, [pc, #444]	@ (800a970 <_dtoa_r+0x8a0>)
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f7f5 ff40 	bl	8000638 <__aeabi_dmul>
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	4604      	mov	r4, r0
 800a7be:	460d      	mov	r5, r1
 800a7c0:	f7f6 f9a2 	bl	8000b08 <__aeabi_dcmpeq>
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	d09f      	beq.n	800a708 <_dtoa_r+0x638>
 800a7c8:	e7d1      	b.n	800a76e <_dtoa_r+0x69e>
 800a7ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7cc:	2a00      	cmp	r2, #0
 800a7ce:	f000 80ea 	beq.w	800a9a6 <_dtoa_r+0x8d6>
 800a7d2:	9a07      	ldr	r2, [sp, #28]
 800a7d4:	2a01      	cmp	r2, #1
 800a7d6:	f300 80cd 	bgt.w	800a974 <_dtoa_r+0x8a4>
 800a7da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a7dc:	2a00      	cmp	r2, #0
 800a7de:	f000 80c1 	beq.w	800a964 <_dtoa_r+0x894>
 800a7e2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a7e6:	9c08      	ldr	r4, [sp, #32]
 800a7e8:	9e00      	ldr	r6, [sp, #0]
 800a7ea:	9a00      	ldr	r2, [sp, #0]
 800a7ec:	441a      	add	r2, r3
 800a7ee:	9200      	str	r2, [sp, #0]
 800a7f0:	9a06      	ldr	r2, [sp, #24]
 800a7f2:	2101      	movs	r1, #1
 800a7f4:	441a      	add	r2, r3
 800a7f6:	4648      	mov	r0, r9
 800a7f8:	9206      	str	r2, [sp, #24]
 800a7fa:	f000 ffc3 	bl	800b784 <__i2b>
 800a7fe:	4605      	mov	r5, r0
 800a800:	b166      	cbz	r6, 800a81c <_dtoa_r+0x74c>
 800a802:	9b06      	ldr	r3, [sp, #24]
 800a804:	2b00      	cmp	r3, #0
 800a806:	dd09      	ble.n	800a81c <_dtoa_r+0x74c>
 800a808:	42b3      	cmp	r3, r6
 800a80a:	9a00      	ldr	r2, [sp, #0]
 800a80c:	bfa8      	it	ge
 800a80e:	4633      	movge	r3, r6
 800a810:	1ad2      	subs	r2, r2, r3
 800a812:	9200      	str	r2, [sp, #0]
 800a814:	9a06      	ldr	r2, [sp, #24]
 800a816:	1af6      	subs	r6, r6, r3
 800a818:	1ad3      	subs	r3, r2, r3
 800a81a:	9306      	str	r3, [sp, #24]
 800a81c:	9b08      	ldr	r3, [sp, #32]
 800a81e:	b30b      	cbz	r3, 800a864 <_dtoa_r+0x794>
 800a820:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a822:	2b00      	cmp	r3, #0
 800a824:	f000 80c6 	beq.w	800a9b4 <_dtoa_r+0x8e4>
 800a828:	2c00      	cmp	r4, #0
 800a82a:	f000 80c0 	beq.w	800a9ae <_dtoa_r+0x8de>
 800a82e:	4629      	mov	r1, r5
 800a830:	4622      	mov	r2, r4
 800a832:	4648      	mov	r0, r9
 800a834:	f001 f85e 	bl	800b8f4 <__pow5mult>
 800a838:	9a02      	ldr	r2, [sp, #8]
 800a83a:	4601      	mov	r1, r0
 800a83c:	4605      	mov	r5, r0
 800a83e:	4648      	mov	r0, r9
 800a840:	f000 ffb6 	bl	800b7b0 <__multiply>
 800a844:	9902      	ldr	r1, [sp, #8]
 800a846:	4680      	mov	r8, r0
 800a848:	4648      	mov	r0, r9
 800a84a:	f000 fe9d 	bl	800b588 <_Bfree>
 800a84e:	9b08      	ldr	r3, [sp, #32]
 800a850:	1b1b      	subs	r3, r3, r4
 800a852:	9308      	str	r3, [sp, #32]
 800a854:	f000 80b1 	beq.w	800a9ba <_dtoa_r+0x8ea>
 800a858:	9a08      	ldr	r2, [sp, #32]
 800a85a:	4641      	mov	r1, r8
 800a85c:	4648      	mov	r0, r9
 800a85e:	f001 f849 	bl	800b8f4 <__pow5mult>
 800a862:	9002      	str	r0, [sp, #8]
 800a864:	2101      	movs	r1, #1
 800a866:	4648      	mov	r0, r9
 800a868:	f000 ff8c 	bl	800b784 <__i2b>
 800a86c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a86e:	4604      	mov	r4, r0
 800a870:	2b00      	cmp	r3, #0
 800a872:	f000 81d8 	beq.w	800ac26 <_dtoa_r+0xb56>
 800a876:	461a      	mov	r2, r3
 800a878:	4601      	mov	r1, r0
 800a87a:	4648      	mov	r0, r9
 800a87c:	f001 f83a 	bl	800b8f4 <__pow5mult>
 800a880:	9b07      	ldr	r3, [sp, #28]
 800a882:	2b01      	cmp	r3, #1
 800a884:	4604      	mov	r4, r0
 800a886:	f300 809f 	bgt.w	800a9c8 <_dtoa_r+0x8f8>
 800a88a:	9b04      	ldr	r3, [sp, #16]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	f040 8097 	bne.w	800a9c0 <_dtoa_r+0x8f0>
 800a892:	9b05      	ldr	r3, [sp, #20]
 800a894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a898:	2b00      	cmp	r3, #0
 800a89a:	f040 8093 	bne.w	800a9c4 <_dtoa_r+0x8f4>
 800a89e:	9b05      	ldr	r3, [sp, #20]
 800a8a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a8a4:	0d1b      	lsrs	r3, r3, #20
 800a8a6:	051b      	lsls	r3, r3, #20
 800a8a8:	b133      	cbz	r3, 800a8b8 <_dtoa_r+0x7e8>
 800a8aa:	9b00      	ldr	r3, [sp, #0]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	9300      	str	r3, [sp, #0]
 800a8b0:	9b06      	ldr	r3, [sp, #24]
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	9306      	str	r3, [sp, #24]
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	9308      	str	r3, [sp, #32]
 800a8ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	f000 81b8 	beq.w	800ac32 <_dtoa_r+0xb62>
 800a8c2:	6923      	ldr	r3, [r4, #16]
 800a8c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a8c8:	6918      	ldr	r0, [r3, #16]
 800a8ca:	f000 ff0f 	bl	800b6ec <__hi0bits>
 800a8ce:	f1c0 0020 	rsb	r0, r0, #32
 800a8d2:	9b06      	ldr	r3, [sp, #24]
 800a8d4:	4418      	add	r0, r3
 800a8d6:	f010 001f 	ands.w	r0, r0, #31
 800a8da:	f000 8082 	beq.w	800a9e2 <_dtoa_r+0x912>
 800a8de:	f1c0 0320 	rsb	r3, r0, #32
 800a8e2:	2b04      	cmp	r3, #4
 800a8e4:	dd73      	ble.n	800a9ce <_dtoa_r+0x8fe>
 800a8e6:	9b00      	ldr	r3, [sp, #0]
 800a8e8:	f1c0 001c 	rsb	r0, r0, #28
 800a8ec:	4403      	add	r3, r0
 800a8ee:	9300      	str	r3, [sp, #0]
 800a8f0:	9b06      	ldr	r3, [sp, #24]
 800a8f2:	4403      	add	r3, r0
 800a8f4:	4406      	add	r6, r0
 800a8f6:	9306      	str	r3, [sp, #24]
 800a8f8:	9b00      	ldr	r3, [sp, #0]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	dd05      	ble.n	800a90a <_dtoa_r+0x83a>
 800a8fe:	9902      	ldr	r1, [sp, #8]
 800a900:	461a      	mov	r2, r3
 800a902:	4648      	mov	r0, r9
 800a904:	f001 f850 	bl	800b9a8 <__lshift>
 800a908:	9002      	str	r0, [sp, #8]
 800a90a:	9b06      	ldr	r3, [sp, #24]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	dd05      	ble.n	800a91c <_dtoa_r+0x84c>
 800a910:	4621      	mov	r1, r4
 800a912:	461a      	mov	r2, r3
 800a914:	4648      	mov	r0, r9
 800a916:	f001 f847 	bl	800b9a8 <__lshift>
 800a91a:	4604      	mov	r4, r0
 800a91c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d061      	beq.n	800a9e6 <_dtoa_r+0x916>
 800a922:	9802      	ldr	r0, [sp, #8]
 800a924:	4621      	mov	r1, r4
 800a926:	f001 f8ab 	bl	800ba80 <__mcmp>
 800a92a:	2800      	cmp	r0, #0
 800a92c:	da5b      	bge.n	800a9e6 <_dtoa_r+0x916>
 800a92e:	2300      	movs	r3, #0
 800a930:	9902      	ldr	r1, [sp, #8]
 800a932:	220a      	movs	r2, #10
 800a934:	4648      	mov	r0, r9
 800a936:	f000 fe49 	bl	800b5cc <__multadd>
 800a93a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a93c:	9002      	str	r0, [sp, #8]
 800a93e:	f107 38ff 	add.w	r8, r7, #4294967295
 800a942:	2b00      	cmp	r3, #0
 800a944:	f000 8177 	beq.w	800ac36 <_dtoa_r+0xb66>
 800a948:	4629      	mov	r1, r5
 800a94a:	2300      	movs	r3, #0
 800a94c:	220a      	movs	r2, #10
 800a94e:	4648      	mov	r0, r9
 800a950:	f000 fe3c 	bl	800b5cc <__multadd>
 800a954:	f1bb 0f00 	cmp.w	fp, #0
 800a958:	4605      	mov	r5, r0
 800a95a:	dc6f      	bgt.n	800aa3c <_dtoa_r+0x96c>
 800a95c:	9b07      	ldr	r3, [sp, #28]
 800a95e:	2b02      	cmp	r3, #2
 800a960:	dc49      	bgt.n	800a9f6 <_dtoa_r+0x926>
 800a962:	e06b      	b.n	800aa3c <_dtoa_r+0x96c>
 800a964:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a966:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a96a:	e73c      	b.n	800a7e6 <_dtoa_r+0x716>
 800a96c:	3fe00000 	.word	0x3fe00000
 800a970:	40240000 	.word	0x40240000
 800a974:	9b03      	ldr	r3, [sp, #12]
 800a976:	1e5c      	subs	r4, r3, #1
 800a978:	9b08      	ldr	r3, [sp, #32]
 800a97a:	42a3      	cmp	r3, r4
 800a97c:	db09      	blt.n	800a992 <_dtoa_r+0x8c2>
 800a97e:	1b1c      	subs	r4, r3, r4
 800a980:	9b03      	ldr	r3, [sp, #12]
 800a982:	2b00      	cmp	r3, #0
 800a984:	f6bf af30 	bge.w	800a7e8 <_dtoa_r+0x718>
 800a988:	9b00      	ldr	r3, [sp, #0]
 800a98a:	9a03      	ldr	r2, [sp, #12]
 800a98c:	1a9e      	subs	r6, r3, r2
 800a98e:	2300      	movs	r3, #0
 800a990:	e72b      	b.n	800a7ea <_dtoa_r+0x71a>
 800a992:	9b08      	ldr	r3, [sp, #32]
 800a994:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a996:	9408      	str	r4, [sp, #32]
 800a998:	1ae3      	subs	r3, r4, r3
 800a99a:	441a      	add	r2, r3
 800a99c:	9e00      	ldr	r6, [sp, #0]
 800a99e:	9b03      	ldr	r3, [sp, #12]
 800a9a0:	920d      	str	r2, [sp, #52]	@ 0x34
 800a9a2:	2400      	movs	r4, #0
 800a9a4:	e721      	b.n	800a7ea <_dtoa_r+0x71a>
 800a9a6:	9c08      	ldr	r4, [sp, #32]
 800a9a8:	9e00      	ldr	r6, [sp, #0]
 800a9aa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a9ac:	e728      	b.n	800a800 <_dtoa_r+0x730>
 800a9ae:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a9b2:	e751      	b.n	800a858 <_dtoa_r+0x788>
 800a9b4:	9a08      	ldr	r2, [sp, #32]
 800a9b6:	9902      	ldr	r1, [sp, #8]
 800a9b8:	e750      	b.n	800a85c <_dtoa_r+0x78c>
 800a9ba:	f8cd 8008 	str.w	r8, [sp, #8]
 800a9be:	e751      	b.n	800a864 <_dtoa_r+0x794>
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	e779      	b.n	800a8b8 <_dtoa_r+0x7e8>
 800a9c4:	9b04      	ldr	r3, [sp, #16]
 800a9c6:	e777      	b.n	800a8b8 <_dtoa_r+0x7e8>
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	9308      	str	r3, [sp, #32]
 800a9cc:	e779      	b.n	800a8c2 <_dtoa_r+0x7f2>
 800a9ce:	d093      	beq.n	800a8f8 <_dtoa_r+0x828>
 800a9d0:	9a00      	ldr	r2, [sp, #0]
 800a9d2:	331c      	adds	r3, #28
 800a9d4:	441a      	add	r2, r3
 800a9d6:	9200      	str	r2, [sp, #0]
 800a9d8:	9a06      	ldr	r2, [sp, #24]
 800a9da:	441a      	add	r2, r3
 800a9dc:	441e      	add	r6, r3
 800a9de:	9206      	str	r2, [sp, #24]
 800a9e0:	e78a      	b.n	800a8f8 <_dtoa_r+0x828>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	e7f4      	b.n	800a9d0 <_dtoa_r+0x900>
 800a9e6:	9b03      	ldr	r3, [sp, #12]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	46b8      	mov	r8, r7
 800a9ec:	dc20      	bgt.n	800aa30 <_dtoa_r+0x960>
 800a9ee:	469b      	mov	fp, r3
 800a9f0:	9b07      	ldr	r3, [sp, #28]
 800a9f2:	2b02      	cmp	r3, #2
 800a9f4:	dd1e      	ble.n	800aa34 <_dtoa_r+0x964>
 800a9f6:	f1bb 0f00 	cmp.w	fp, #0
 800a9fa:	f47f adb1 	bne.w	800a560 <_dtoa_r+0x490>
 800a9fe:	4621      	mov	r1, r4
 800aa00:	465b      	mov	r3, fp
 800aa02:	2205      	movs	r2, #5
 800aa04:	4648      	mov	r0, r9
 800aa06:	f000 fde1 	bl	800b5cc <__multadd>
 800aa0a:	4601      	mov	r1, r0
 800aa0c:	4604      	mov	r4, r0
 800aa0e:	9802      	ldr	r0, [sp, #8]
 800aa10:	f001 f836 	bl	800ba80 <__mcmp>
 800aa14:	2800      	cmp	r0, #0
 800aa16:	f77f ada3 	ble.w	800a560 <_dtoa_r+0x490>
 800aa1a:	4656      	mov	r6, sl
 800aa1c:	2331      	movs	r3, #49	@ 0x31
 800aa1e:	f806 3b01 	strb.w	r3, [r6], #1
 800aa22:	f108 0801 	add.w	r8, r8, #1
 800aa26:	e59f      	b.n	800a568 <_dtoa_r+0x498>
 800aa28:	9c03      	ldr	r4, [sp, #12]
 800aa2a:	46b8      	mov	r8, r7
 800aa2c:	4625      	mov	r5, r4
 800aa2e:	e7f4      	b.n	800aa1a <_dtoa_r+0x94a>
 800aa30:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800aa34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	f000 8101 	beq.w	800ac3e <_dtoa_r+0xb6e>
 800aa3c:	2e00      	cmp	r6, #0
 800aa3e:	dd05      	ble.n	800aa4c <_dtoa_r+0x97c>
 800aa40:	4629      	mov	r1, r5
 800aa42:	4632      	mov	r2, r6
 800aa44:	4648      	mov	r0, r9
 800aa46:	f000 ffaf 	bl	800b9a8 <__lshift>
 800aa4a:	4605      	mov	r5, r0
 800aa4c:	9b08      	ldr	r3, [sp, #32]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d05c      	beq.n	800ab0c <_dtoa_r+0xa3c>
 800aa52:	6869      	ldr	r1, [r5, #4]
 800aa54:	4648      	mov	r0, r9
 800aa56:	f000 fd57 	bl	800b508 <_Balloc>
 800aa5a:	4606      	mov	r6, r0
 800aa5c:	b928      	cbnz	r0, 800aa6a <_dtoa_r+0x99a>
 800aa5e:	4b82      	ldr	r3, [pc, #520]	@ (800ac68 <_dtoa_r+0xb98>)
 800aa60:	4602      	mov	r2, r0
 800aa62:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800aa66:	f7ff bb4a 	b.w	800a0fe <_dtoa_r+0x2e>
 800aa6a:	692a      	ldr	r2, [r5, #16]
 800aa6c:	3202      	adds	r2, #2
 800aa6e:	0092      	lsls	r2, r2, #2
 800aa70:	f105 010c 	add.w	r1, r5, #12
 800aa74:	300c      	adds	r0, #12
 800aa76:	f7ff fa82 	bl	8009f7e <memcpy>
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	4631      	mov	r1, r6
 800aa7e:	4648      	mov	r0, r9
 800aa80:	f000 ff92 	bl	800b9a8 <__lshift>
 800aa84:	f10a 0301 	add.w	r3, sl, #1
 800aa88:	9300      	str	r3, [sp, #0]
 800aa8a:	eb0a 030b 	add.w	r3, sl, fp
 800aa8e:	9308      	str	r3, [sp, #32]
 800aa90:	9b04      	ldr	r3, [sp, #16]
 800aa92:	f003 0301 	and.w	r3, r3, #1
 800aa96:	462f      	mov	r7, r5
 800aa98:	9306      	str	r3, [sp, #24]
 800aa9a:	4605      	mov	r5, r0
 800aa9c:	9b00      	ldr	r3, [sp, #0]
 800aa9e:	9802      	ldr	r0, [sp, #8]
 800aaa0:	4621      	mov	r1, r4
 800aaa2:	f103 3bff 	add.w	fp, r3, #4294967295
 800aaa6:	f7ff fa89 	bl	8009fbc <quorem>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	3330      	adds	r3, #48	@ 0x30
 800aaae:	9003      	str	r0, [sp, #12]
 800aab0:	4639      	mov	r1, r7
 800aab2:	9802      	ldr	r0, [sp, #8]
 800aab4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aab6:	f000 ffe3 	bl	800ba80 <__mcmp>
 800aaba:	462a      	mov	r2, r5
 800aabc:	9004      	str	r0, [sp, #16]
 800aabe:	4621      	mov	r1, r4
 800aac0:	4648      	mov	r0, r9
 800aac2:	f000 fff9 	bl	800bab8 <__mdiff>
 800aac6:	68c2      	ldr	r2, [r0, #12]
 800aac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaca:	4606      	mov	r6, r0
 800aacc:	bb02      	cbnz	r2, 800ab10 <_dtoa_r+0xa40>
 800aace:	4601      	mov	r1, r0
 800aad0:	9802      	ldr	r0, [sp, #8]
 800aad2:	f000 ffd5 	bl	800ba80 <__mcmp>
 800aad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aad8:	4602      	mov	r2, r0
 800aada:	4631      	mov	r1, r6
 800aadc:	4648      	mov	r0, r9
 800aade:	920c      	str	r2, [sp, #48]	@ 0x30
 800aae0:	9309      	str	r3, [sp, #36]	@ 0x24
 800aae2:	f000 fd51 	bl	800b588 <_Bfree>
 800aae6:	9b07      	ldr	r3, [sp, #28]
 800aae8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800aaea:	9e00      	ldr	r6, [sp, #0]
 800aaec:	ea42 0103 	orr.w	r1, r2, r3
 800aaf0:	9b06      	ldr	r3, [sp, #24]
 800aaf2:	4319      	orrs	r1, r3
 800aaf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaf6:	d10d      	bne.n	800ab14 <_dtoa_r+0xa44>
 800aaf8:	2b39      	cmp	r3, #57	@ 0x39
 800aafa:	d027      	beq.n	800ab4c <_dtoa_r+0xa7c>
 800aafc:	9a04      	ldr	r2, [sp, #16]
 800aafe:	2a00      	cmp	r2, #0
 800ab00:	dd01      	ble.n	800ab06 <_dtoa_r+0xa36>
 800ab02:	9b03      	ldr	r3, [sp, #12]
 800ab04:	3331      	adds	r3, #49	@ 0x31
 800ab06:	f88b 3000 	strb.w	r3, [fp]
 800ab0a:	e52e      	b.n	800a56a <_dtoa_r+0x49a>
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	e7b9      	b.n	800aa84 <_dtoa_r+0x9b4>
 800ab10:	2201      	movs	r2, #1
 800ab12:	e7e2      	b.n	800aada <_dtoa_r+0xa0a>
 800ab14:	9904      	ldr	r1, [sp, #16]
 800ab16:	2900      	cmp	r1, #0
 800ab18:	db04      	blt.n	800ab24 <_dtoa_r+0xa54>
 800ab1a:	9807      	ldr	r0, [sp, #28]
 800ab1c:	4301      	orrs	r1, r0
 800ab1e:	9806      	ldr	r0, [sp, #24]
 800ab20:	4301      	orrs	r1, r0
 800ab22:	d120      	bne.n	800ab66 <_dtoa_r+0xa96>
 800ab24:	2a00      	cmp	r2, #0
 800ab26:	ddee      	ble.n	800ab06 <_dtoa_r+0xa36>
 800ab28:	9902      	ldr	r1, [sp, #8]
 800ab2a:	9300      	str	r3, [sp, #0]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	4648      	mov	r0, r9
 800ab30:	f000 ff3a 	bl	800b9a8 <__lshift>
 800ab34:	4621      	mov	r1, r4
 800ab36:	9002      	str	r0, [sp, #8]
 800ab38:	f000 ffa2 	bl	800ba80 <__mcmp>
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	9b00      	ldr	r3, [sp, #0]
 800ab40:	dc02      	bgt.n	800ab48 <_dtoa_r+0xa78>
 800ab42:	d1e0      	bne.n	800ab06 <_dtoa_r+0xa36>
 800ab44:	07da      	lsls	r2, r3, #31
 800ab46:	d5de      	bpl.n	800ab06 <_dtoa_r+0xa36>
 800ab48:	2b39      	cmp	r3, #57	@ 0x39
 800ab4a:	d1da      	bne.n	800ab02 <_dtoa_r+0xa32>
 800ab4c:	2339      	movs	r3, #57	@ 0x39
 800ab4e:	f88b 3000 	strb.w	r3, [fp]
 800ab52:	4633      	mov	r3, r6
 800ab54:	461e      	mov	r6, r3
 800ab56:	3b01      	subs	r3, #1
 800ab58:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ab5c:	2a39      	cmp	r2, #57	@ 0x39
 800ab5e:	d04e      	beq.n	800abfe <_dtoa_r+0xb2e>
 800ab60:	3201      	adds	r2, #1
 800ab62:	701a      	strb	r2, [r3, #0]
 800ab64:	e501      	b.n	800a56a <_dtoa_r+0x49a>
 800ab66:	2a00      	cmp	r2, #0
 800ab68:	dd03      	ble.n	800ab72 <_dtoa_r+0xaa2>
 800ab6a:	2b39      	cmp	r3, #57	@ 0x39
 800ab6c:	d0ee      	beq.n	800ab4c <_dtoa_r+0xa7c>
 800ab6e:	3301      	adds	r3, #1
 800ab70:	e7c9      	b.n	800ab06 <_dtoa_r+0xa36>
 800ab72:	9a00      	ldr	r2, [sp, #0]
 800ab74:	9908      	ldr	r1, [sp, #32]
 800ab76:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ab7a:	428a      	cmp	r2, r1
 800ab7c:	d028      	beq.n	800abd0 <_dtoa_r+0xb00>
 800ab7e:	9902      	ldr	r1, [sp, #8]
 800ab80:	2300      	movs	r3, #0
 800ab82:	220a      	movs	r2, #10
 800ab84:	4648      	mov	r0, r9
 800ab86:	f000 fd21 	bl	800b5cc <__multadd>
 800ab8a:	42af      	cmp	r7, r5
 800ab8c:	9002      	str	r0, [sp, #8]
 800ab8e:	f04f 0300 	mov.w	r3, #0
 800ab92:	f04f 020a 	mov.w	r2, #10
 800ab96:	4639      	mov	r1, r7
 800ab98:	4648      	mov	r0, r9
 800ab9a:	d107      	bne.n	800abac <_dtoa_r+0xadc>
 800ab9c:	f000 fd16 	bl	800b5cc <__multadd>
 800aba0:	4607      	mov	r7, r0
 800aba2:	4605      	mov	r5, r0
 800aba4:	9b00      	ldr	r3, [sp, #0]
 800aba6:	3301      	adds	r3, #1
 800aba8:	9300      	str	r3, [sp, #0]
 800abaa:	e777      	b.n	800aa9c <_dtoa_r+0x9cc>
 800abac:	f000 fd0e 	bl	800b5cc <__multadd>
 800abb0:	4629      	mov	r1, r5
 800abb2:	4607      	mov	r7, r0
 800abb4:	2300      	movs	r3, #0
 800abb6:	220a      	movs	r2, #10
 800abb8:	4648      	mov	r0, r9
 800abba:	f000 fd07 	bl	800b5cc <__multadd>
 800abbe:	4605      	mov	r5, r0
 800abc0:	e7f0      	b.n	800aba4 <_dtoa_r+0xad4>
 800abc2:	f1bb 0f00 	cmp.w	fp, #0
 800abc6:	bfcc      	ite	gt
 800abc8:	465e      	movgt	r6, fp
 800abca:	2601      	movle	r6, #1
 800abcc:	4456      	add	r6, sl
 800abce:	2700      	movs	r7, #0
 800abd0:	9902      	ldr	r1, [sp, #8]
 800abd2:	9300      	str	r3, [sp, #0]
 800abd4:	2201      	movs	r2, #1
 800abd6:	4648      	mov	r0, r9
 800abd8:	f000 fee6 	bl	800b9a8 <__lshift>
 800abdc:	4621      	mov	r1, r4
 800abde:	9002      	str	r0, [sp, #8]
 800abe0:	f000 ff4e 	bl	800ba80 <__mcmp>
 800abe4:	2800      	cmp	r0, #0
 800abe6:	dcb4      	bgt.n	800ab52 <_dtoa_r+0xa82>
 800abe8:	d102      	bne.n	800abf0 <_dtoa_r+0xb20>
 800abea:	9b00      	ldr	r3, [sp, #0]
 800abec:	07db      	lsls	r3, r3, #31
 800abee:	d4b0      	bmi.n	800ab52 <_dtoa_r+0xa82>
 800abf0:	4633      	mov	r3, r6
 800abf2:	461e      	mov	r6, r3
 800abf4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800abf8:	2a30      	cmp	r2, #48	@ 0x30
 800abfa:	d0fa      	beq.n	800abf2 <_dtoa_r+0xb22>
 800abfc:	e4b5      	b.n	800a56a <_dtoa_r+0x49a>
 800abfe:	459a      	cmp	sl, r3
 800ac00:	d1a8      	bne.n	800ab54 <_dtoa_r+0xa84>
 800ac02:	2331      	movs	r3, #49	@ 0x31
 800ac04:	f108 0801 	add.w	r8, r8, #1
 800ac08:	f88a 3000 	strb.w	r3, [sl]
 800ac0c:	e4ad      	b.n	800a56a <_dtoa_r+0x49a>
 800ac0e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ac10:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ac6c <_dtoa_r+0xb9c>
 800ac14:	b11b      	cbz	r3, 800ac1e <_dtoa_r+0xb4e>
 800ac16:	f10a 0308 	add.w	r3, sl, #8
 800ac1a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ac1c:	6013      	str	r3, [r2, #0]
 800ac1e:	4650      	mov	r0, sl
 800ac20:	b017      	add	sp, #92	@ 0x5c
 800ac22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac26:	9b07      	ldr	r3, [sp, #28]
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	f77f ae2e 	ble.w	800a88a <_dtoa_r+0x7ba>
 800ac2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac30:	9308      	str	r3, [sp, #32]
 800ac32:	2001      	movs	r0, #1
 800ac34:	e64d      	b.n	800a8d2 <_dtoa_r+0x802>
 800ac36:	f1bb 0f00 	cmp.w	fp, #0
 800ac3a:	f77f aed9 	ble.w	800a9f0 <_dtoa_r+0x920>
 800ac3e:	4656      	mov	r6, sl
 800ac40:	9802      	ldr	r0, [sp, #8]
 800ac42:	4621      	mov	r1, r4
 800ac44:	f7ff f9ba 	bl	8009fbc <quorem>
 800ac48:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ac4c:	f806 3b01 	strb.w	r3, [r6], #1
 800ac50:	eba6 020a 	sub.w	r2, r6, sl
 800ac54:	4593      	cmp	fp, r2
 800ac56:	ddb4      	ble.n	800abc2 <_dtoa_r+0xaf2>
 800ac58:	9902      	ldr	r1, [sp, #8]
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	220a      	movs	r2, #10
 800ac5e:	4648      	mov	r0, r9
 800ac60:	f000 fcb4 	bl	800b5cc <__multadd>
 800ac64:	9002      	str	r0, [sp, #8]
 800ac66:	e7eb      	b.n	800ac40 <_dtoa_r+0xb70>
 800ac68:	0800cda3 	.word	0x0800cda3
 800ac6c:	0800cd27 	.word	0x0800cd27

0800ac70 <_free_r>:
 800ac70:	b538      	push	{r3, r4, r5, lr}
 800ac72:	4605      	mov	r5, r0
 800ac74:	2900      	cmp	r1, #0
 800ac76:	d041      	beq.n	800acfc <_free_r+0x8c>
 800ac78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac7c:	1f0c      	subs	r4, r1, #4
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	bfb8      	it	lt
 800ac82:	18e4      	addlt	r4, r4, r3
 800ac84:	f000 fc34 	bl	800b4f0 <__malloc_lock>
 800ac88:	4a1d      	ldr	r2, [pc, #116]	@ (800ad00 <_free_r+0x90>)
 800ac8a:	6813      	ldr	r3, [r2, #0]
 800ac8c:	b933      	cbnz	r3, 800ac9c <_free_r+0x2c>
 800ac8e:	6063      	str	r3, [r4, #4]
 800ac90:	6014      	str	r4, [r2, #0]
 800ac92:	4628      	mov	r0, r5
 800ac94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac98:	f000 bc30 	b.w	800b4fc <__malloc_unlock>
 800ac9c:	42a3      	cmp	r3, r4
 800ac9e:	d908      	bls.n	800acb2 <_free_r+0x42>
 800aca0:	6820      	ldr	r0, [r4, #0]
 800aca2:	1821      	adds	r1, r4, r0
 800aca4:	428b      	cmp	r3, r1
 800aca6:	bf01      	itttt	eq
 800aca8:	6819      	ldreq	r1, [r3, #0]
 800acaa:	685b      	ldreq	r3, [r3, #4]
 800acac:	1809      	addeq	r1, r1, r0
 800acae:	6021      	streq	r1, [r4, #0]
 800acb0:	e7ed      	b.n	800ac8e <_free_r+0x1e>
 800acb2:	461a      	mov	r2, r3
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	b10b      	cbz	r3, 800acbc <_free_r+0x4c>
 800acb8:	42a3      	cmp	r3, r4
 800acba:	d9fa      	bls.n	800acb2 <_free_r+0x42>
 800acbc:	6811      	ldr	r1, [r2, #0]
 800acbe:	1850      	adds	r0, r2, r1
 800acc0:	42a0      	cmp	r0, r4
 800acc2:	d10b      	bne.n	800acdc <_free_r+0x6c>
 800acc4:	6820      	ldr	r0, [r4, #0]
 800acc6:	4401      	add	r1, r0
 800acc8:	1850      	adds	r0, r2, r1
 800acca:	4283      	cmp	r3, r0
 800accc:	6011      	str	r1, [r2, #0]
 800acce:	d1e0      	bne.n	800ac92 <_free_r+0x22>
 800acd0:	6818      	ldr	r0, [r3, #0]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	6053      	str	r3, [r2, #4]
 800acd6:	4408      	add	r0, r1
 800acd8:	6010      	str	r0, [r2, #0]
 800acda:	e7da      	b.n	800ac92 <_free_r+0x22>
 800acdc:	d902      	bls.n	800ace4 <_free_r+0x74>
 800acde:	230c      	movs	r3, #12
 800ace0:	602b      	str	r3, [r5, #0]
 800ace2:	e7d6      	b.n	800ac92 <_free_r+0x22>
 800ace4:	6820      	ldr	r0, [r4, #0]
 800ace6:	1821      	adds	r1, r4, r0
 800ace8:	428b      	cmp	r3, r1
 800acea:	bf04      	itt	eq
 800acec:	6819      	ldreq	r1, [r3, #0]
 800acee:	685b      	ldreq	r3, [r3, #4]
 800acf0:	6063      	str	r3, [r4, #4]
 800acf2:	bf04      	itt	eq
 800acf4:	1809      	addeq	r1, r1, r0
 800acf6:	6021      	streq	r1, [r4, #0]
 800acf8:	6054      	str	r4, [r2, #4]
 800acfa:	e7ca      	b.n	800ac92 <_free_r+0x22>
 800acfc:	bd38      	pop	{r3, r4, r5, pc}
 800acfe:	bf00      	nop
 800ad00:	20000ea0 	.word	0x20000ea0

0800ad04 <rshift>:
 800ad04:	6903      	ldr	r3, [r0, #16]
 800ad06:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ad0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad0e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ad12:	f100 0414 	add.w	r4, r0, #20
 800ad16:	dd45      	ble.n	800ada4 <rshift+0xa0>
 800ad18:	f011 011f 	ands.w	r1, r1, #31
 800ad1c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ad20:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ad24:	d10c      	bne.n	800ad40 <rshift+0x3c>
 800ad26:	f100 0710 	add.w	r7, r0, #16
 800ad2a:	4629      	mov	r1, r5
 800ad2c:	42b1      	cmp	r1, r6
 800ad2e:	d334      	bcc.n	800ad9a <rshift+0x96>
 800ad30:	1a9b      	subs	r3, r3, r2
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	1eea      	subs	r2, r5, #3
 800ad36:	4296      	cmp	r6, r2
 800ad38:	bf38      	it	cc
 800ad3a:	2300      	movcc	r3, #0
 800ad3c:	4423      	add	r3, r4
 800ad3e:	e015      	b.n	800ad6c <rshift+0x68>
 800ad40:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ad44:	f1c1 0820 	rsb	r8, r1, #32
 800ad48:	40cf      	lsrs	r7, r1
 800ad4a:	f105 0e04 	add.w	lr, r5, #4
 800ad4e:	46a1      	mov	r9, r4
 800ad50:	4576      	cmp	r6, lr
 800ad52:	46f4      	mov	ip, lr
 800ad54:	d815      	bhi.n	800ad82 <rshift+0x7e>
 800ad56:	1a9a      	subs	r2, r3, r2
 800ad58:	0092      	lsls	r2, r2, #2
 800ad5a:	3a04      	subs	r2, #4
 800ad5c:	3501      	adds	r5, #1
 800ad5e:	42ae      	cmp	r6, r5
 800ad60:	bf38      	it	cc
 800ad62:	2200      	movcc	r2, #0
 800ad64:	18a3      	adds	r3, r4, r2
 800ad66:	50a7      	str	r7, [r4, r2]
 800ad68:	b107      	cbz	r7, 800ad6c <rshift+0x68>
 800ad6a:	3304      	adds	r3, #4
 800ad6c:	1b1a      	subs	r2, r3, r4
 800ad6e:	42a3      	cmp	r3, r4
 800ad70:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ad74:	bf08      	it	eq
 800ad76:	2300      	moveq	r3, #0
 800ad78:	6102      	str	r2, [r0, #16]
 800ad7a:	bf08      	it	eq
 800ad7c:	6143      	streq	r3, [r0, #20]
 800ad7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad82:	f8dc c000 	ldr.w	ip, [ip]
 800ad86:	fa0c fc08 	lsl.w	ip, ip, r8
 800ad8a:	ea4c 0707 	orr.w	r7, ip, r7
 800ad8e:	f849 7b04 	str.w	r7, [r9], #4
 800ad92:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ad96:	40cf      	lsrs	r7, r1
 800ad98:	e7da      	b.n	800ad50 <rshift+0x4c>
 800ad9a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ad9e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ada2:	e7c3      	b.n	800ad2c <rshift+0x28>
 800ada4:	4623      	mov	r3, r4
 800ada6:	e7e1      	b.n	800ad6c <rshift+0x68>

0800ada8 <__hexdig_fun>:
 800ada8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800adac:	2b09      	cmp	r3, #9
 800adae:	d802      	bhi.n	800adb6 <__hexdig_fun+0xe>
 800adb0:	3820      	subs	r0, #32
 800adb2:	b2c0      	uxtb	r0, r0
 800adb4:	4770      	bx	lr
 800adb6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800adba:	2b05      	cmp	r3, #5
 800adbc:	d801      	bhi.n	800adc2 <__hexdig_fun+0x1a>
 800adbe:	3847      	subs	r0, #71	@ 0x47
 800adc0:	e7f7      	b.n	800adb2 <__hexdig_fun+0xa>
 800adc2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800adc6:	2b05      	cmp	r3, #5
 800adc8:	d801      	bhi.n	800adce <__hexdig_fun+0x26>
 800adca:	3827      	subs	r0, #39	@ 0x27
 800adcc:	e7f1      	b.n	800adb2 <__hexdig_fun+0xa>
 800adce:	2000      	movs	r0, #0
 800add0:	4770      	bx	lr
	...

0800add4 <__gethex>:
 800add4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add8:	b085      	sub	sp, #20
 800adda:	468a      	mov	sl, r1
 800addc:	9302      	str	r3, [sp, #8]
 800adde:	680b      	ldr	r3, [r1, #0]
 800ade0:	9001      	str	r0, [sp, #4]
 800ade2:	4690      	mov	r8, r2
 800ade4:	1c9c      	adds	r4, r3, #2
 800ade6:	46a1      	mov	r9, r4
 800ade8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800adec:	2830      	cmp	r0, #48	@ 0x30
 800adee:	d0fa      	beq.n	800ade6 <__gethex+0x12>
 800adf0:	eba9 0303 	sub.w	r3, r9, r3
 800adf4:	f1a3 0b02 	sub.w	fp, r3, #2
 800adf8:	f7ff ffd6 	bl	800ada8 <__hexdig_fun>
 800adfc:	4605      	mov	r5, r0
 800adfe:	2800      	cmp	r0, #0
 800ae00:	d168      	bne.n	800aed4 <__gethex+0x100>
 800ae02:	49a0      	ldr	r1, [pc, #640]	@ (800b084 <__gethex+0x2b0>)
 800ae04:	2201      	movs	r2, #1
 800ae06:	4648      	mov	r0, r9
 800ae08:	f7ff f805 	bl	8009e16 <strncmp>
 800ae0c:	4607      	mov	r7, r0
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	d167      	bne.n	800aee2 <__gethex+0x10e>
 800ae12:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ae16:	4626      	mov	r6, r4
 800ae18:	f7ff ffc6 	bl	800ada8 <__hexdig_fun>
 800ae1c:	2800      	cmp	r0, #0
 800ae1e:	d062      	beq.n	800aee6 <__gethex+0x112>
 800ae20:	4623      	mov	r3, r4
 800ae22:	7818      	ldrb	r0, [r3, #0]
 800ae24:	2830      	cmp	r0, #48	@ 0x30
 800ae26:	4699      	mov	r9, r3
 800ae28:	f103 0301 	add.w	r3, r3, #1
 800ae2c:	d0f9      	beq.n	800ae22 <__gethex+0x4e>
 800ae2e:	f7ff ffbb 	bl	800ada8 <__hexdig_fun>
 800ae32:	fab0 f580 	clz	r5, r0
 800ae36:	096d      	lsrs	r5, r5, #5
 800ae38:	f04f 0b01 	mov.w	fp, #1
 800ae3c:	464a      	mov	r2, r9
 800ae3e:	4616      	mov	r6, r2
 800ae40:	3201      	adds	r2, #1
 800ae42:	7830      	ldrb	r0, [r6, #0]
 800ae44:	f7ff ffb0 	bl	800ada8 <__hexdig_fun>
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	d1f8      	bne.n	800ae3e <__gethex+0x6a>
 800ae4c:	498d      	ldr	r1, [pc, #564]	@ (800b084 <__gethex+0x2b0>)
 800ae4e:	2201      	movs	r2, #1
 800ae50:	4630      	mov	r0, r6
 800ae52:	f7fe ffe0 	bl	8009e16 <strncmp>
 800ae56:	2800      	cmp	r0, #0
 800ae58:	d13f      	bne.n	800aeda <__gethex+0x106>
 800ae5a:	b944      	cbnz	r4, 800ae6e <__gethex+0x9a>
 800ae5c:	1c74      	adds	r4, r6, #1
 800ae5e:	4622      	mov	r2, r4
 800ae60:	4616      	mov	r6, r2
 800ae62:	3201      	adds	r2, #1
 800ae64:	7830      	ldrb	r0, [r6, #0]
 800ae66:	f7ff ff9f 	bl	800ada8 <__hexdig_fun>
 800ae6a:	2800      	cmp	r0, #0
 800ae6c:	d1f8      	bne.n	800ae60 <__gethex+0x8c>
 800ae6e:	1ba4      	subs	r4, r4, r6
 800ae70:	00a7      	lsls	r7, r4, #2
 800ae72:	7833      	ldrb	r3, [r6, #0]
 800ae74:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ae78:	2b50      	cmp	r3, #80	@ 0x50
 800ae7a:	d13e      	bne.n	800aefa <__gethex+0x126>
 800ae7c:	7873      	ldrb	r3, [r6, #1]
 800ae7e:	2b2b      	cmp	r3, #43	@ 0x2b
 800ae80:	d033      	beq.n	800aeea <__gethex+0x116>
 800ae82:	2b2d      	cmp	r3, #45	@ 0x2d
 800ae84:	d034      	beq.n	800aef0 <__gethex+0x11c>
 800ae86:	1c71      	adds	r1, r6, #1
 800ae88:	2400      	movs	r4, #0
 800ae8a:	7808      	ldrb	r0, [r1, #0]
 800ae8c:	f7ff ff8c 	bl	800ada8 <__hexdig_fun>
 800ae90:	1e43      	subs	r3, r0, #1
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	2b18      	cmp	r3, #24
 800ae96:	d830      	bhi.n	800aefa <__gethex+0x126>
 800ae98:	f1a0 0210 	sub.w	r2, r0, #16
 800ae9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aea0:	f7ff ff82 	bl	800ada8 <__hexdig_fun>
 800aea4:	f100 3cff 	add.w	ip, r0, #4294967295
 800aea8:	fa5f fc8c 	uxtb.w	ip, ip
 800aeac:	f1bc 0f18 	cmp.w	ip, #24
 800aeb0:	f04f 030a 	mov.w	r3, #10
 800aeb4:	d91e      	bls.n	800aef4 <__gethex+0x120>
 800aeb6:	b104      	cbz	r4, 800aeba <__gethex+0xe6>
 800aeb8:	4252      	negs	r2, r2
 800aeba:	4417      	add	r7, r2
 800aebc:	f8ca 1000 	str.w	r1, [sl]
 800aec0:	b1ed      	cbz	r5, 800aefe <__gethex+0x12a>
 800aec2:	f1bb 0f00 	cmp.w	fp, #0
 800aec6:	bf0c      	ite	eq
 800aec8:	2506      	moveq	r5, #6
 800aeca:	2500      	movne	r5, #0
 800aecc:	4628      	mov	r0, r5
 800aece:	b005      	add	sp, #20
 800aed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aed4:	2500      	movs	r5, #0
 800aed6:	462c      	mov	r4, r5
 800aed8:	e7b0      	b.n	800ae3c <__gethex+0x68>
 800aeda:	2c00      	cmp	r4, #0
 800aedc:	d1c7      	bne.n	800ae6e <__gethex+0x9a>
 800aede:	4627      	mov	r7, r4
 800aee0:	e7c7      	b.n	800ae72 <__gethex+0x9e>
 800aee2:	464e      	mov	r6, r9
 800aee4:	462f      	mov	r7, r5
 800aee6:	2501      	movs	r5, #1
 800aee8:	e7c3      	b.n	800ae72 <__gethex+0x9e>
 800aeea:	2400      	movs	r4, #0
 800aeec:	1cb1      	adds	r1, r6, #2
 800aeee:	e7cc      	b.n	800ae8a <__gethex+0xb6>
 800aef0:	2401      	movs	r4, #1
 800aef2:	e7fb      	b.n	800aeec <__gethex+0x118>
 800aef4:	fb03 0002 	mla	r0, r3, r2, r0
 800aef8:	e7ce      	b.n	800ae98 <__gethex+0xc4>
 800aefa:	4631      	mov	r1, r6
 800aefc:	e7de      	b.n	800aebc <__gethex+0xe8>
 800aefe:	eba6 0309 	sub.w	r3, r6, r9
 800af02:	3b01      	subs	r3, #1
 800af04:	4629      	mov	r1, r5
 800af06:	2b07      	cmp	r3, #7
 800af08:	dc0a      	bgt.n	800af20 <__gethex+0x14c>
 800af0a:	9801      	ldr	r0, [sp, #4]
 800af0c:	f000 fafc 	bl	800b508 <_Balloc>
 800af10:	4604      	mov	r4, r0
 800af12:	b940      	cbnz	r0, 800af26 <__gethex+0x152>
 800af14:	4b5c      	ldr	r3, [pc, #368]	@ (800b088 <__gethex+0x2b4>)
 800af16:	4602      	mov	r2, r0
 800af18:	21e4      	movs	r1, #228	@ 0xe4
 800af1a:	485c      	ldr	r0, [pc, #368]	@ (800b08c <__gethex+0x2b8>)
 800af1c:	f001 fc1a 	bl	800c754 <__assert_func>
 800af20:	3101      	adds	r1, #1
 800af22:	105b      	asrs	r3, r3, #1
 800af24:	e7ef      	b.n	800af06 <__gethex+0x132>
 800af26:	f100 0a14 	add.w	sl, r0, #20
 800af2a:	2300      	movs	r3, #0
 800af2c:	4655      	mov	r5, sl
 800af2e:	469b      	mov	fp, r3
 800af30:	45b1      	cmp	r9, r6
 800af32:	d337      	bcc.n	800afa4 <__gethex+0x1d0>
 800af34:	f845 bb04 	str.w	fp, [r5], #4
 800af38:	eba5 050a 	sub.w	r5, r5, sl
 800af3c:	10ad      	asrs	r5, r5, #2
 800af3e:	6125      	str	r5, [r4, #16]
 800af40:	4658      	mov	r0, fp
 800af42:	f000 fbd3 	bl	800b6ec <__hi0bits>
 800af46:	016d      	lsls	r5, r5, #5
 800af48:	f8d8 6000 	ldr.w	r6, [r8]
 800af4c:	1a2d      	subs	r5, r5, r0
 800af4e:	42b5      	cmp	r5, r6
 800af50:	dd54      	ble.n	800affc <__gethex+0x228>
 800af52:	1bad      	subs	r5, r5, r6
 800af54:	4629      	mov	r1, r5
 800af56:	4620      	mov	r0, r4
 800af58:	f000 ff5f 	bl	800be1a <__any_on>
 800af5c:	4681      	mov	r9, r0
 800af5e:	b178      	cbz	r0, 800af80 <__gethex+0x1ac>
 800af60:	1e6b      	subs	r3, r5, #1
 800af62:	1159      	asrs	r1, r3, #5
 800af64:	f003 021f 	and.w	r2, r3, #31
 800af68:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800af6c:	f04f 0901 	mov.w	r9, #1
 800af70:	fa09 f202 	lsl.w	r2, r9, r2
 800af74:	420a      	tst	r2, r1
 800af76:	d003      	beq.n	800af80 <__gethex+0x1ac>
 800af78:	454b      	cmp	r3, r9
 800af7a:	dc36      	bgt.n	800afea <__gethex+0x216>
 800af7c:	f04f 0902 	mov.w	r9, #2
 800af80:	4629      	mov	r1, r5
 800af82:	4620      	mov	r0, r4
 800af84:	f7ff febe 	bl	800ad04 <rshift>
 800af88:	442f      	add	r7, r5
 800af8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af8e:	42bb      	cmp	r3, r7
 800af90:	da42      	bge.n	800b018 <__gethex+0x244>
 800af92:	9801      	ldr	r0, [sp, #4]
 800af94:	4621      	mov	r1, r4
 800af96:	f000 faf7 	bl	800b588 <_Bfree>
 800af9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af9c:	2300      	movs	r3, #0
 800af9e:	6013      	str	r3, [r2, #0]
 800afa0:	25a3      	movs	r5, #163	@ 0xa3
 800afa2:	e793      	b.n	800aecc <__gethex+0xf8>
 800afa4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800afa8:	2a2e      	cmp	r2, #46	@ 0x2e
 800afaa:	d012      	beq.n	800afd2 <__gethex+0x1fe>
 800afac:	2b20      	cmp	r3, #32
 800afae:	d104      	bne.n	800afba <__gethex+0x1e6>
 800afb0:	f845 bb04 	str.w	fp, [r5], #4
 800afb4:	f04f 0b00 	mov.w	fp, #0
 800afb8:	465b      	mov	r3, fp
 800afba:	7830      	ldrb	r0, [r6, #0]
 800afbc:	9303      	str	r3, [sp, #12]
 800afbe:	f7ff fef3 	bl	800ada8 <__hexdig_fun>
 800afc2:	9b03      	ldr	r3, [sp, #12]
 800afc4:	f000 000f 	and.w	r0, r0, #15
 800afc8:	4098      	lsls	r0, r3
 800afca:	ea4b 0b00 	orr.w	fp, fp, r0
 800afce:	3304      	adds	r3, #4
 800afd0:	e7ae      	b.n	800af30 <__gethex+0x15c>
 800afd2:	45b1      	cmp	r9, r6
 800afd4:	d8ea      	bhi.n	800afac <__gethex+0x1d8>
 800afd6:	492b      	ldr	r1, [pc, #172]	@ (800b084 <__gethex+0x2b0>)
 800afd8:	9303      	str	r3, [sp, #12]
 800afda:	2201      	movs	r2, #1
 800afdc:	4630      	mov	r0, r6
 800afde:	f7fe ff1a 	bl	8009e16 <strncmp>
 800afe2:	9b03      	ldr	r3, [sp, #12]
 800afe4:	2800      	cmp	r0, #0
 800afe6:	d1e1      	bne.n	800afac <__gethex+0x1d8>
 800afe8:	e7a2      	b.n	800af30 <__gethex+0x15c>
 800afea:	1ea9      	subs	r1, r5, #2
 800afec:	4620      	mov	r0, r4
 800afee:	f000 ff14 	bl	800be1a <__any_on>
 800aff2:	2800      	cmp	r0, #0
 800aff4:	d0c2      	beq.n	800af7c <__gethex+0x1a8>
 800aff6:	f04f 0903 	mov.w	r9, #3
 800affa:	e7c1      	b.n	800af80 <__gethex+0x1ac>
 800affc:	da09      	bge.n	800b012 <__gethex+0x23e>
 800affe:	1b75      	subs	r5, r6, r5
 800b000:	4621      	mov	r1, r4
 800b002:	9801      	ldr	r0, [sp, #4]
 800b004:	462a      	mov	r2, r5
 800b006:	f000 fccf 	bl	800b9a8 <__lshift>
 800b00a:	1b7f      	subs	r7, r7, r5
 800b00c:	4604      	mov	r4, r0
 800b00e:	f100 0a14 	add.w	sl, r0, #20
 800b012:	f04f 0900 	mov.w	r9, #0
 800b016:	e7b8      	b.n	800af8a <__gethex+0x1b6>
 800b018:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b01c:	42bd      	cmp	r5, r7
 800b01e:	dd6f      	ble.n	800b100 <__gethex+0x32c>
 800b020:	1bed      	subs	r5, r5, r7
 800b022:	42ae      	cmp	r6, r5
 800b024:	dc34      	bgt.n	800b090 <__gethex+0x2bc>
 800b026:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b02a:	2b02      	cmp	r3, #2
 800b02c:	d022      	beq.n	800b074 <__gethex+0x2a0>
 800b02e:	2b03      	cmp	r3, #3
 800b030:	d024      	beq.n	800b07c <__gethex+0x2a8>
 800b032:	2b01      	cmp	r3, #1
 800b034:	d115      	bne.n	800b062 <__gethex+0x28e>
 800b036:	42ae      	cmp	r6, r5
 800b038:	d113      	bne.n	800b062 <__gethex+0x28e>
 800b03a:	2e01      	cmp	r6, #1
 800b03c:	d10b      	bne.n	800b056 <__gethex+0x282>
 800b03e:	9a02      	ldr	r2, [sp, #8]
 800b040:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b044:	6013      	str	r3, [r2, #0]
 800b046:	2301      	movs	r3, #1
 800b048:	6123      	str	r3, [r4, #16]
 800b04a:	f8ca 3000 	str.w	r3, [sl]
 800b04e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b050:	2562      	movs	r5, #98	@ 0x62
 800b052:	601c      	str	r4, [r3, #0]
 800b054:	e73a      	b.n	800aecc <__gethex+0xf8>
 800b056:	1e71      	subs	r1, r6, #1
 800b058:	4620      	mov	r0, r4
 800b05a:	f000 fede 	bl	800be1a <__any_on>
 800b05e:	2800      	cmp	r0, #0
 800b060:	d1ed      	bne.n	800b03e <__gethex+0x26a>
 800b062:	9801      	ldr	r0, [sp, #4]
 800b064:	4621      	mov	r1, r4
 800b066:	f000 fa8f 	bl	800b588 <_Bfree>
 800b06a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b06c:	2300      	movs	r3, #0
 800b06e:	6013      	str	r3, [r2, #0]
 800b070:	2550      	movs	r5, #80	@ 0x50
 800b072:	e72b      	b.n	800aecc <__gethex+0xf8>
 800b074:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b076:	2b00      	cmp	r3, #0
 800b078:	d1f3      	bne.n	800b062 <__gethex+0x28e>
 800b07a:	e7e0      	b.n	800b03e <__gethex+0x26a>
 800b07c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d1dd      	bne.n	800b03e <__gethex+0x26a>
 800b082:	e7ee      	b.n	800b062 <__gethex+0x28e>
 800b084:	0800cce4 	.word	0x0800cce4
 800b088:	0800cda3 	.word	0x0800cda3
 800b08c:	0800cdb4 	.word	0x0800cdb4
 800b090:	1e6f      	subs	r7, r5, #1
 800b092:	f1b9 0f00 	cmp.w	r9, #0
 800b096:	d130      	bne.n	800b0fa <__gethex+0x326>
 800b098:	b127      	cbz	r7, 800b0a4 <__gethex+0x2d0>
 800b09a:	4639      	mov	r1, r7
 800b09c:	4620      	mov	r0, r4
 800b09e:	f000 febc 	bl	800be1a <__any_on>
 800b0a2:	4681      	mov	r9, r0
 800b0a4:	117a      	asrs	r2, r7, #5
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b0ac:	f007 071f 	and.w	r7, r7, #31
 800b0b0:	40bb      	lsls	r3, r7
 800b0b2:	4213      	tst	r3, r2
 800b0b4:	4629      	mov	r1, r5
 800b0b6:	4620      	mov	r0, r4
 800b0b8:	bf18      	it	ne
 800b0ba:	f049 0902 	orrne.w	r9, r9, #2
 800b0be:	f7ff fe21 	bl	800ad04 <rshift>
 800b0c2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b0c6:	1b76      	subs	r6, r6, r5
 800b0c8:	2502      	movs	r5, #2
 800b0ca:	f1b9 0f00 	cmp.w	r9, #0
 800b0ce:	d047      	beq.n	800b160 <__gethex+0x38c>
 800b0d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b0d4:	2b02      	cmp	r3, #2
 800b0d6:	d015      	beq.n	800b104 <__gethex+0x330>
 800b0d8:	2b03      	cmp	r3, #3
 800b0da:	d017      	beq.n	800b10c <__gethex+0x338>
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d109      	bne.n	800b0f4 <__gethex+0x320>
 800b0e0:	f019 0f02 	tst.w	r9, #2
 800b0e4:	d006      	beq.n	800b0f4 <__gethex+0x320>
 800b0e6:	f8da 3000 	ldr.w	r3, [sl]
 800b0ea:	ea49 0903 	orr.w	r9, r9, r3
 800b0ee:	f019 0f01 	tst.w	r9, #1
 800b0f2:	d10e      	bne.n	800b112 <__gethex+0x33e>
 800b0f4:	f045 0510 	orr.w	r5, r5, #16
 800b0f8:	e032      	b.n	800b160 <__gethex+0x38c>
 800b0fa:	f04f 0901 	mov.w	r9, #1
 800b0fe:	e7d1      	b.n	800b0a4 <__gethex+0x2d0>
 800b100:	2501      	movs	r5, #1
 800b102:	e7e2      	b.n	800b0ca <__gethex+0x2f6>
 800b104:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b106:	f1c3 0301 	rsb	r3, r3, #1
 800b10a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b10c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d0f0      	beq.n	800b0f4 <__gethex+0x320>
 800b112:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b116:	f104 0314 	add.w	r3, r4, #20
 800b11a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b11e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b122:	f04f 0c00 	mov.w	ip, #0
 800b126:	4618      	mov	r0, r3
 800b128:	f853 2b04 	ldr.w	r2, [r3], #4
 800b12c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b130:	d01b      	beq.n	800b16a <__gethex+0x396>
 800b132:	3201      	adds	r2, #1
 800b134:	6002      	str	r2, [r0, #0]
 800b136:	2d02      	cmp	r5, #2
 800b138:	f104 0314 	add.w	r3, r4, #20
 800b13c:	d13c      	bne.n	800b1b8 <__gethex+0x3e4>
 800b13e:	f8d8 2000 	ldr.w	r2, [r8]
 800b142:	3a01      	subs	r2, #1
 800b144:	42b2      	cmp	r2, r6
 800b146:	d109      	bne.n	800b15c <__gethex+0x388>
 800b148:	1171      	asrs	r1, r6, #5
 800b14a:	2201      	movs	r2, #1
 800b14c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b150:	f006 061f 	and.w	r6, r6, #31
 800b154:	fa02 f606 	lsl.w	r6, r2, r6
 800b158:	421e      	tst	r6, r3
 800b15a:	d13a      	bne.n	800b1d2 <__gethex+0x3fe>
 800b15c:	f045 0520 	orr.w	r5, r5, #32
 800b160:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b162:	601c      	str	r4, [r3, #0]
 800b164:	9b02      	ldr	r3, [sp, #8]
 800b166:	601f      	str	r7, [r3, #0]
 800b168:	e6b0      	b.n	800aecc <__gethex+0xf8>
 800b16a:	4299      	cmp	r1, r3
 800b16c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b170:	d8d9      	bhi.n	800b126 <__gethex+0x352>
 800b172:	68a3      	ldr	r3, [r4, #8]
 800b174:	459b      	cmp	fp, r3
 800b176:	db17      	blt.n	800b1a8 <__gethex+0x3d4>
 800b178:	6861      	ldr	r1, [r4, #4]
 800b17a:	9801      	ldr	r0, [sp, #4]
 800b17c:	3101      	adds	r1, #1
 800b17e:	f000 f9c3 	bl	800b508 <_Balloc>
 800b182:	4681      	mov	r9, r0
 800b184:	b918      	cbnz	r0, 800b18e <__gethex+0x3ba>
 800b186:	4b1a      	ldr	r3, [pc, #104]	@ (800b1f0 <__gethex+0x41c>)
 800b188:	4602      	mov	r2, r0
 800b18a:	2184      	movs	r1, #132	@ 0x84
 800b18c:	e6c5      	b.n	800af1a <__gethex+0x146>
 800b18e:	6922      	ldr	r2, [r4, #16]
 800b190:	3202      	adds	r2, #2
 800b192:	f104 010c 	add.w	r1, r4, #12
 800b196:	0092      	lsls	r2, r2, #2
 800b198:	300c      	adds	r0, #12
 800b19a:	f7fe fef0 	bl	8009f7e <memcpy>
 800b19e:	4621      	mov	r1, r4
 800b1a0:	9801      	ldr	r0, [sp, #4]
 800b1a2:	f000 f9f1 	bl	800b588 <_Bfree>
 800b1a6:	464c      	mov	r4, r9
 800b1a8:	6923      	ldr	r3, [r4, #16]
 800b1aa:	1c5a      	adds	r2, r3, #1
 800b1ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b1b0:	6122      	str	r2, [r4, #16]
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	615a      	str	r2, [r3, #20]
 800b1b6:	e7be      	b.n	800b136 <__gethex+0x362>
 800b1b8:	6922      	ldr	r2, [r4, #16]
 800b1ba:	455a      	cmp	r2, fp
 800b1bc:	dd0b      	ble.n	800b1d6 <__gethex+0x402>
 800b1be:	2101      	movs	r1, #1
 800b1c0:	4620      	mov	r0, r4
 800b1c2:	f7ff fd9f 	bl	800ad04 <rshift>
 800b1c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b1ca:	3701      	adds	r7, #1
 800b1cc:	42bb      	cmp	r3, r7
 800b1ce:	f6ff aee0 	blt.w	800af92 <__gethex+0x1be>
 800b1d2:	2501      	movs	r5, #1
 800b1d4:	e7c2      	b.n	800b15c <__gethex+0x388>
 800b1d6:	f016 061f 	ands.w	r6, r6, #31
 800b1da:	d0fa      	beq.n	800b1d2 <__gethex+0x3fe>
 800b1dc:	4453      	add	r3, sl
 800b1de:	f1c6 0620 	rsb	r6, r6, #32
 800b1e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b1e6:	f000 fa81 	bl	800b6ec <__hi0bits>
 800b1ea:	42b0      	cmp	r0, r6
 800b1ec:	dbe7      	blt.n	800b1be <__gethex+0x3ea>
 800b1ee:	e7f0      	b.n	800b1d2 <__gethex+0x3fe>
 800b1f0:	0800cda3 	.word	0x0800cda3

0800b1f4 <L_shift>:
 800b1f4:	f1c2 0208 	rsb	r2, r2, #8
 800b1f8:	0092      	lsls	r2, r2, #2
 800b1fa:	b570      	push	{r4, r5, r6, lr}
 800b1fc:	f1c2 0620 	rsb	r6, r2, #32
 800b200:	6843      	ldr	r3, [r0, #4]
 800b202:	6804      	ldr	r4, [r0, #0]
 800b204:	fa03 f506 	lsl.w	r5, r3, r6
 800b208:	432c      	orrs	r4, r5
 800b20a:	40d3      	lsrs	r3, r2
 800b20c:	6004      	str	r4, [r0, #0]
 800b20e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b212:	4288      	cmp	r0, r1
 800b214:	d3f4      	bcc.n	800b200 <L_shift+0xc>
 800b216:	bd70      	pop	{r4, r5, r6, pc}

0800b218 <__match>:
 800b218:	b530      	push	{r4, r5, lr}
 800b21a:	6803      	ldr	r3, [r0, #0]
 800b21c:	3301      	adds	r3, #1
 800b21e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b222:	b914      	cbnz	r4, 800b22a <__match+0x12>
 800b224:	6003      	str	r3, [r0, #0]
 800b226:	2001      	movs	r0, #1
 800b228:	bd30      	pop	{r4, r5, pc}
 800b22a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b22e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b232:	2d19      	cmp	r5, #25
 800b234:	bf98      	it	ls
 800b236:	3220      	addls	r2, #32
 800b238:	42a2      	cmp	r2, r4
 800b23a:	d0f0      	beq.n	800b21e <__match+0x6>
 800b23c:	2000      	movs	r0, #0
 800b23e:	e7f3      	b.n	800b228 <__match+0x10>

0800b240 <__hexnan>:
 800b240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b244:	680b      	ldr	r3, [r1, #0]
 800b246:	6801      	ldr	r1, [r0, #0]
 800b248:	115e      	asrs	r6, r3, #5
 800b24a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b24e:	f013 031f 	ands.w	r3, r3, #31
 800b252:	b087      	sub	sp, #28
 800b254:	bf18      	it	ne
 800b256:	3604      	addne	r6, #4
 800b258:	2500      	movs	r5, #0
 800b25a:	1f37      	subs	r7, r6, #4
 800b25c:	4682      	mov	sl, r0
 800b25e:	4690      	mov	r8, r2
 800b260:	9301      	str	r3, [sp, #4]
 800b262:	f846 5c04 	str.w	r5, [r6, #-4]
 800b266:	46b9      	mov	r9, r7
 800b268:	463c      	mov	r4, r7
 800b26a:	9502      	str	r5, [sp, #8]
 800b26c:	46ab      	mov	fp, r5
 800b26e:	784a      	ldrb	r2, [r1, #1]
 800b270:	1c4b      	adds	r3, r1, #1
 800b272:	9303      	str	r3, [sp, #12]
 800b274:	b342      	cbz	r2, 800b2c8 <__hexnan+0x88>
 800b276:	4610      	mov	r0, r2
 800b278:	9105      	str	r1, [sp, #20]
 800b27a:	9204      	str	r2, [sp, #16]
 800b27c:	f7ff fd94 	bl	800ada8 <__hexdig_fun>
 800b280:	2800      	cmp	r0, #0
 800b282:	d151      	bne.n	800b328 <__hexnan+0xe8>
 800b284:	9a04      	ldr	r2, [sp, #16]
 800b286:	9905      	ldr	r1, [sp, #20]
 800b288:	2a20      	cmp	r2, #32
 800b28a:	d818      	bhi.n	800b2be <__hexnan+0x7e>
 800b28c:	9b02      	ldr	r3, [sp, #8]
 800b28e:	459b      	cmp	fp, r3
 800b290:	dd13      	ble.n	800b2ba <__hexnan+0x7a>
 800b292:	454c      	cmp	r4, r9
 800b294:	d206      	bcs.n	800b2a4 <__hexnan+0x64>
 800b296:	2d07      	cmp	r5, #7
 800b298:	dc04      	bgt.n	800b2a4 <__hexnan+0x64>
 800b29a:	462a      	mov	r2, r5
 800b29c:	4649      	mov	r1, r9
 800b29e:	4620      	mov	r0, r4
 800b2a0:	f7ff ffa8 	bl	800b1f4 <L_shift>
 800b2a4:	4544      	cmp	r4, r8
 800b2a6:	d952      	bls.n	800b34e <__hexnan+0x10e>
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	f1a4 0904 	sub.w	r9, r4, #4
 800b2ae:	f844 3c04 	str.w	r3, [r4, #-4]
 800b2b2:	f8cd b008 	str.w	fp, [sp, #8]
 800b2b6:	464c      	mov	r4, r9
 800b2b8:	461d      	mov	r5, r3
 800b2ba:	9903      	ldr	r1, [sp, #12]
 800b2bc:	e7d7      	b.n	800b26e <__hexnan+0x2e>
 800b2be:	2a29      	cmp	r2, #41	@ 0x29
 800b2c0:	d157      	bne.n	800b372 <__hexnan+0x132>
 800b2c2:	3102      	adds	r1, #2
 800b2c4:	f8ca 1000 	str.w	r1, [sl]
 800b2c8:	f1bb 0f00 	cmp.w	fp, #0
 800b2cc:	d051      	beq.n	800b372 <__hexnan+0x132>
 800b2ce:	454c      	cmp	r4, r9
 800b2d0:	d206      	bcs.n	800b2e0 <__hexnan+0xa0>
 800b2d2:	2d07      	cmp	r5, #7
 800b2d4:	dc04      	bgt.n	800b2e0 <__hexnan+0xa0>
 800b2d6:	462a      	mov	r2, r5
 800b2d8:	4649      	mov	r1, r9
 800b2da:	4620      	mov	r0, r4
 800b2dc:	f7ff ff8a 	bl	800b1f4 <L_shift>
 800b2e0:	4544      	cmp	r4, r8
 800b2e2:	d936      	bls.n	800b352 <__hexnan+0x112>
 800b2e4:	f1a8 0204 	sub.w	r2, r8, #4
 800b2e8:	4623      	mov	r3, r4
 800b2ea:	f853 1b04 	ldr.w	r1, [r3], #4
 800b2ee:	f842 1f04 	str.w	r1, [r2, #4]!
 800b2f2:	429f      	cmp	r7, r3
 800b2f4:	d2f9      	bcs.n	800b2ea <__hexnan+0xaa>
 800b2f6:	1b3b      	subs	r3, r7, r4
 800b2f8:	f023 0303 	bic.w	r3, r3, #3
 800b2fc:	3304      	adds	r3, #4
 800b2fe:	3401      	adds	r4, #1
 800b300:	3e03      	subs	r6, #3
 800b302:	42b4      	cmp	r4, r6
 800b304:	bf88      	it	hi
 800b306:	2304      	movhi	r3, #4
 800b308:	4443      	add	r3, r8
 800b30a:	2200      	movs	r2, #0
 800b30c:	f843 2b04 	str.w	r2, [r3], #4
 800b310:	429f      	cmp	r7, r3
 800b312:	d2fb      	bcs.n	800b30c <__hexnan+0xcc>
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	b91b      	cbnz	r3, 800b320 <__hexnan+0xe0>
 800b318:	4547      	cmp	r7, r8
 800b31a:	d128      	bne.n	800b36e <__hexnan+0x12e>
 800b31c:	2301      	movs	r3, #1
 800b31e:	603b      	str	r3, [r7, #0]
 800b320:	2005      	movs	r0, #5
 800b322:	b007      	add	sp, #28
 800b324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b328:	3501      	adds	r5, #1
 800b32a:	2d08      	cmp	r5, #8
 800b32c:	f10b 0b01 	add.w	fp, fp, #1
 800b330:	dd06      	ble.n	800b340 <__hexnan+0x100>
 800b332:	4544      	cmp	r4, r8
 800b334:	d9c1      	bls.n	800b2ba <__hexnan+0x7a>
 800b336:	2300      	movs	r3, #0
 800b338:	f844 3c04 	str.w	r3, [r4, #-4]
 800b33c:	2501      	movs	r5, #1
 800b33e:	3c04      	subs	r4, #4
 800b340:	6822      	ldr	r2, [r4, #0]
 800b342:	f000 000f 	and.w	r0, r0, #15
 800b346:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b34a:	6020      	str	r0, [r4, #0]
 800b34c:	e7b5      	b.n	800b2ba <__hexnan+0x7a>
 800b34e:	2508      	movs	r5, #8
 800b350:	e7b3      	b.n	800b2ba <__hexnan+0x7a>
 800b352:	9b01      	ldr	r3, [sp, #4]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d0dd      	beq.n	800b314 <__hexnan+0xd4>
 800b358:	f1c3 0320 	rsb	r3, r3, #32
 800b35c:	f04f 32ff 	mov.w	r2, #4294967295
 800b360:	40da      	lsrs	r2, r3
 800b362:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b366:	4013      	ands	r3, r2
 800b368:	f846 3c04 	str.w	r3, [r6, #-4]
 800b36c:	e7d2      	b.n	800b314 <__hexnan+0xd4>
 800b36e:	3f04      	subs	r7, #4
 800b370:	e7d0      	b.n	800b314 <__hexnan+0xd4>
 800b372:	2004      	movs	r0, #4
 800b374:	e7d5      	b.n	800b322 <__hexnan+0xe2>
	...

0800b378 <malloc>:
 800b378:	4b02      	ldr	r3, [pc, #8]	@ (800b384 <malloc+0xc>)
 800b37a:	4601      	mov	r1, r0
 800b37c:	6818      	ldr	r0, [r3, #0]
 800b37e:	f000 b825 	b.w	800b3cc <_malloc_r>
 800b382:	bf00      	nop
 800b384:	20000184 	.word	0x20000184

0800b388 <sbrk_aligned>:
 800b388:	b570      	push	{r4, r5, r6, lr}
 800b38a:	4e0f      	ldr	r6, [pc, #60]	@ (800b3c8 <sbrk_aligned+0x40>)
 800b38c:	460c      	mov	r4, r1
 800b38e:	6831      	ldr	r1, [r6, #0]
 800b390:	4605      	mov	r5, r0
 800b392:	b911      	cbnz	r1, 800b39a <sbrk_aligned+0x12>
 800b394:	f001 f9ce 	bl	800c734 <_sbrk_r>
 800b398:	6030      	str	r0, [r6, #0]
 800b39a:	4621      	mov	r1, r4
 800b39c:	4628      	mov	r0, r5
 800b39e:	f001 f9c9 	bl	800c734 <_sbrk_r>
 800b3a2:	1c43      	adds	r3, r0, #1
 800b3a4:	d103      	bne.n	800b3ae <sbrk_aligned+0x26>
 800b3a6:	f04f 34ff 	mov.w	r4, #4294967295
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	bd70      	pop	{r4, r5, r6, pc}
 800b3ae:	1cc4      	adds	r4, r0, #3
 800b3b0:	f024 0403 	bic.w	r4, r4, #3
 800b3b4:	42a0      	cmp	r0, r4
 800b3b6:	d0f8      	beq.n	800b3aa <sbrk_aligned+0x22>
 800b3b8:	1a21      	subs	r1, r4, r0
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	f001 f9ba 	bl	800c734 <_sbrk_r>
 800b3c0:	3001      	adds	r0, #1
 800b3c2:	d1f2      	bne.n	800b3aa <sbrk_aligned+0x22>
 800b3c4:	e7ef      	b.n	800b3a6 <sbrk_aligned+0x1e>
 800b3c6:	bf00      	nop
 800b3c8:	20000e9c 	.word	0x20000e9c

0800b3cc <_malloc_r>:
 800b3cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3d0:	1ccd      	adds	r5, r1, #3
 800b3d2:	f025 0503 	bic.w	r5, r5, #3
 800b3d6:	3508      	adds	r5, #8
 800b3d8:	2d0c      	cmp	r5, #12
 800b3da:	bf38      	it	cc
 800b3dc:	250c      	movcc	r5, #12
 800b3de:	2d00      	cmp	r5, #0
 800b3e0:	4606      	mov	r6, r0
 800b3e2:	db01      	blt.n	800b3e8 <_malloc_r+0x1c>
 800b3e4:	42a9      	cmp	r1, r5
 800b3e6:	d904      	bls.n	800b3f2 <_malloc_r+0x26>
 800b3e8:	230c      	movs	r3, #12
 800b3ea:	6033      	str	r3, [r6, #0]
 800b3ec:	2000      	movs	r0, #0
 800b3ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b4c8 <_malloc_r+0xfc>
 800b3f6:	f000 f87b 	bl	800b4f0 <__malloc_lock>
 800b3fa:	f8d8 3000 	ldr.w	r3, [r8]
 800b3fe:	461c      	mov	r4, r3
 800b400:	bb44      	cbnz	r4, 800b454 <_malloc_r+0x88>
 800b402:	4629      	mov	r1, r5
 800b404:	4630      	mov	r0, r6
 800b406:	f7ff ffbf 	bl	800b388 <sbrk_aligned>
 800b40a:	1c43      	adds	r3, r0, #1
 800b40c:	4604      	mov	r4, r0
 800b40e:	d158      	bne.n	800b4c2 <_malloc_r+0xf6>
 800b410:	f8d8 4000 	ldr.w	r4, [r8]
 800b414:	4627      	mov	r7, r4
 800b416:	2f00      	cmp	r7, #0
 800b418:	d143      	bne.n	800b4a2 <_malloc_r+0xd6>
 800b41a:	2c00      	cmp	r4, #0
 800b41c:	d04b      	beq.n	800b4b6 <_malloc_r+0xea>
 800b41e:	6823      	ldr	r3, [r4, #0]
 800b420:	4639      	mov	r1, r7
 800b422:	4630      	mov	r0, r6
 800b424:	eb04 0903 	add.w	r9, r4, r3
 800b428:	f001 f984 	bl	800c734 <_sbrk_r>
 800b42c:	4581      	cmp	r9, r0
 800b42e:	d142      	bne.n	800b4b6 <_malloc_r+0xea>
 800b430:	6821      	ldr	r1, [r4, #0]
 800b432:	1a6d      	subs	r5, r5, r1
 800b434:	4629      	mov	r1, r5
 800b436:	4630      	mov	r0, r6
 800b438:	f7ff ffa6 	bl	800b388 <sbrk_aligned>
 800b43c:	3001      	adds	r0, #1
 800b43e:	d03a      	beq.n	800b4b6 <_malloc_r+0xea>
 800b440:	6823      	ldr	r3, [r4, #0]
 800b442:	442b      	add	r3, r5
 800b444:	6023      	str	r3, [r4, #0]
 800b446:	f8d8 3000 	ldr.w	r3, [r8]
 800b44a:	685a      	ldr	r2, [r3, #4]
 800b44c:	bb62      	cbnz	r2, 800b4a8 <_malloc_r+0xdc>
 800b44e:	f8c8 7000 	str.w	r7, [r8]
 800b452:	e00f      	b.n	800b474 <_malloc_r+0xa8>
 800b454:	6822      	ldr	r2, [r4, #0]
 800b456:	1b52      	subs	r2, r2, r5
 800b458:	d420      	bmi.n	800b49c <_malloc_r+0xd0>
 800b45a:	2a0b      	cmp	r2, #11
 800b45c:	d917      	bls.n	800b48e <_malloc_r+0xc2>
 800b45e:	1961      	adds	r1, r4, r5
 800b460:	42a3      	cmp	r3, r4
 800b462:	6025      	str	r5, [r4, #0]
 800b464:	bf18      	it	ne
 800b466:	6059      	strne	r1, [r3, #4]
 800b468:	6863      	ldr	r3, [r4, #4]
 800b46a:	bf08      	it	eq
 800b46c:	f8c8 1000 	streq.w	r1, [r8]
 800b470:	5162      	str	r2, [r4, r5]
 800b472:	604b      	str	r3, [r1, #4]
 800b474:	4630      	mov	r0, r6
 800b476:	f000 f841 	bl	800b4fc <__malloc_unlock>
 800b47a:	f104 000b 	add.w	r0, r4, #11
 800b47e:	1d23      	adds	r3, r4, #4
 800b480:	f020 0007 	bic.w	r0, r0, #7
 800b484:	1ac2      	subs	r2, r0, r3
 800b486:	bf1c      	itt	ne
 800b488:	1a1b      	subne	r3, r3, r0
 800b48a:	50a3      	strne	r3, [r4, r2]
 800b48c:	e7af      	b.n	800b3ee <_malloc_r+0x22>
 800b48e:	6862      	ldr	r2, [r4, #4]
 800b490:	42a3      	cmp	r3, r4
 800b492:	bf0c      	ite	eq
 800b494:	f8c8 2000 	streq.w	r2, [r8]
 800b498:	605a      	strne	r2, [r3, #4]
 800b49a:	e7eb      	b.n	800b474 <_malloc_r+0xa8>
 800b49c:	4623      	mov	r3, r4
 800b49e:	6864      	ldr	r4, [r4, #4]
 800b4a0:	e7ae      	b.n	800b400 <_malloc_r+0x34>
 800b4a2:	463c      	mov	r4, r7
 800b4a4:	687f      	ldr	r7, [r7, #4]
 800b4a6:	e7b6      	b.n	800b416 <_malloc_r+0x4a>
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	42a3      	cmp	r3, r4
 800b4ae:	d1fb      	bne.n	800b4a8 <_malloc_r+0xdc>
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	6053      	str	r3, [r2, #4]
 800b4b4:	e7de      	b.n	800b474 <_malloc_r+0xa8>
 800b4b6:	230c      	movs	r3, #12
 800b4b8:	6033      	str	r3, [r6, #0]
 800b4ba:	4630      	mov	r0, r6
 800b4bc:	f000 f81e 	bl	800b4fc <__malloc_unlock>
 800b4c0:	e794      	b.n	800b3ec <_malloc_r+0x20>
 800b4c2:	6005      	str	r5, [r0, #0]
 800b4c4:	e7d6      	b.n	800b474 <_malloc_r+0xa8>
 800b4c6:	bf00      	nop
 800b4c8:	20000ea0 	.word	0x20000ea0

0800b4cc <__ascii_mbtowc>:
 800b4cc:	b082      	sub	sp, #8
 800b4ce:	b901      	cbnz	r1, 800b4d2 <__ascii_mbtowc+0x6>
 800b4d0:	a901      	add	r1, sp, #4
 800b4d2:	b142      	cbz	r2, 800b4e6 <__ascii_mbtowc+0x1a>
 800b4d4:	b14b      	cbz	r3, 800b4ea <__ascii_mbtowc+0x1e>
 800b4d6:	7813      	ldrb	r3, [r2, #0]
 800b4d8:	600b      	str	r3, [r1, #0]
 800b4da:	7812      	ldrb	r2, [r2, #0]
 800b4dc:	1e10      	subs	r0, r2, #0
 800b4de:	bf18      	it	ne
 800b4e0:	2001      	movne	r0, #1
 800b4e2:	b002      	add	sp, #8
 800b4e4:	4770      	bx	lr
 800b4e6:	4610      	mov	r0, r2
 800b4e8:	e7fb      	b.n	800b4e2 <__ascii_mbtowc+0x16>
 800b4ea:	f06f 0001 	mvn.w	r0, #1
 800b4ee:	e7f8      	b.n	800b4e2 <__ascii_mbtowc+0x16>

0800b4f0 <__malloc_lock>:
 800b4f0:	4801      	ldr	r0, [pc, #4]	@ (800b4f8 <__malloc_lock+0x8>)
 800b4f2:	f7fe bd42 	b.w	8009f7a <__retarget_lock_acquire_recursive>
 800b4f6:	bf00      	nop
 800b4f8:	20000e98 	.word	0x20000e98

0800b4fc <__malloc_unlock>:
 800b4fc:	4801      	ldr	r0, [pc, #4]	@ (800b504 <__malloc_unlock+0x8>)
 800b4fe:	f7fe bd3d 	b.w	8009f7c <__retarget_lock_release_recursive>
 800b502:	bf00      	nop
 800b504:	20000e98 	.word	0x20000e98

0800b508 <_Balloc>:
 800b508:	b570      	push	{r4, r5, r6, lr}
 800b50a:	69c6      	ldr	r6, [r0, #28]
 800b50c:	4604      	mov	r4, r0
 800b50e:	460d      	mov	r5, r1
 800b510:	b976      	cbnz	r6, 800b530 <_Balloc+0x28>
 800b512:	2010      	movs	r0, #16
 800b514:	f7ff ff30 	bl	800b378 <malloc>
 800b518:	4602      	mov	r2, r0
 800b51a:	61e0      	str	r0, [r4, #28]
 800b51c:	b920      	cbnz	r0, 800b528 <_Balloc+0x20>
 800b51e:	4b18      	ldr	r3, [pc, #96]	@ (800b580 <_Balloc+0x78>)
 800b520:	4818      	ldr	r0, [pc, #96]	@ (800b584 <_Balloc+0x7c>)
 800b522:	216b      	movs	r1, #107	@ 0x6b
 800b524:	f001 f916 	bl	800c754 <__assert_func>
 800b528:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b52c:	6006      	str	r6, [r0, #0]
 800b52e:	60c6      	str	r6, [r0, #12]
 800b530:	69e6      	ldr	r6, [r4, #28]
 800b532:	68f3      	ldr	r3, [r6, #12]
 800b534:	b183      	cbz	r3, 800b558 <_Balloc+0x50>
 800b536:	69e3      	ldr	r3, [r4, #28]
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b53e:	b9b8      	cbnz	r0, 800b570 <_Balloc+0x68>
 800b540:	2101      	movs	r1, #1
 800b542:	fa01 f605 	lsl.w	r6, r1, r5
 800b546:	1d72      	adds	r2, r6, #5
 800b548:	0092      	lsls	r2, r2, #2
 800b54a:	4620      	mov	r0, r4
 800b54c:	f001 f920 	bl	800c790 <_calloc_r>
 800b550:	b160      	cbz	r0, 800b56c <_Balloc+0x64>
 800b552:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b556:	e00e      	b.n	800b576 <_Balloc+0x6e>
 800b558:	2221      	movs	r2, #33	@ 0x21
 800b55a:	2104      	movs	r1, #4
 800b55c:	4620      	mov	r0, r4
 800b55e:	f001 f917 	bl	800c790 <_calloc_r>
 800b562:	69e3      	ldr	r3, [r4, #28]
 800b564:	60f0      	str	r0, [r6, #12]
 800b566:	68db      	ldr	r3, [r3, #12]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d1e4      	bne.n	800b536 <_Balloc+0x2e>
 800b56c:	2000      	movs	r0, #0
 800b56e:	bd70      	pop	{r4, r5, r6, pc}
 800b570:	6802      	ldr	r2, [r0, #0]
 800b572:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b576:	2300      	movs	r3, #0
 800b578:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b57c:	e7f7      	b.n	800b56e <_Balloc+0x66>
 800b57e:	bf00      	nop
 800b580:	0800cd34 	.word	0x0800cd34
 800b584:	0800ce14 	.word	0x0800ce14

0800b588 <_Bfree>:
 800b588:	b570      	push	{r4, r5, r6, lr}
 800b58a:	69c6      	ldr	r6, [r0, #28]
 800b58c:	4605      	mov	r5, r0
 800b58e:	460c      	mov	r4, r1
 800b590:	b976      	cbnz	r6, 800b5b0 <_Bfree+0x28>
 800b592:	2010      	movs	r0, #16
 800b594:	f7ff fef0 	bl	800b378 <malloc>
 800b598:	4602      	mov	r2, r0
 800b59a:	61e8      	str	r0, [r5, #28]
 800b59c:	b920      	cbnz	r0, 800b5a8 <_Bfree+0x20>
 800b59e:	4b09      	ldr	r3, [pc, #36]	@ (800b5c4 <_Bfree+0x3c>)
 800b5a0:	4809      	ldr	r0, [pc, #36]	@ (800b5c8 <_Bfree+0x40>)
 800b5a2:	218f      	movs	r1, #143	@ 0x8f
 800b5a4:	f001 f8d6 	bl	800c754 <__assert_func>
 800b5a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5ac:	6006      	str	r6, [r0, #0]
 800b5ae:	60c6      	str	r6, [r0, #12]
 800b5b0:	b13c      	cbz	r4, 800b5c2 <_Bfree+0x3a>
 800b5b2:	69eb      	ldr	r3, [r5, #28]
 800b5b4:	6862      	ldr	r2, [r4, #4]
 800b5b6:	68db      	ldr	r3, [r3, #12]
 800b5b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b5bc:	6021      	str	r1, [r4, #0]
 800b5be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b5c2:	bd70      	pop	{r4, r5, r6, pc}
 800b5c4:	0800cd34 	.word	0x0800cd34
 800b5c8:	0800ce14 	.word	0x0800ce14

0800b5cc <__multadd>:
 800b5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5d0:	690d      	ldr	r5, [r1, #16]
 800b5d2:	4607      	mov	r7, r0
 800b5d4:	460c      	mov	r4, r1
 800b5d6:	461e      	mov	r6, r3
 800b5d8:	f101 0c14 	add.w	ip, r1, #20
 800b5dc:	2000      	movs	r0, #0
 800b5de:	f8dc 3000 	ldr.w	r3, [ip]
 800b5e2:	b299      	uxth	r1, r3
 800b5e4:	fb02 6101 	mla	r1, r2, r1, r6
 800b5e8:	0c1e      	lsrs	r6, r3, #16
 800b5ea:	0c0b      	lsrs	r3, r1, #16
 800b5ec:	fb02 3306 	mla	r3, r2, r6, r3
 800b5f0:	b289      	uxth	r1, r1
 800b5f2:	3001      	adds	r0, #1
 800b5f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b5f8:	4285      	cmp	r5, r0
 800b5fa:	f84c 1b04 	str.w	r1, [ip], #4
 800b5fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b602:	dcec      	bgt.n	800b5de <__multadd+0x12>
 800b604:	b30e      	cbz	r6, 800b64a <__multadd+0x7e>
 800b606:	68a3      	ldr	r3, [r4, #8]
 800b608:	42ab      	cmp	r3, r5
 800b60a:	dc19      	bgt.n	800b640 <__multadd+0x74>
 800b60c:	6861      	ldr	r1, [r4, #4]
 800b60e:	4638      	mov	r0, r7
 800b610:	3101      	adds	r1, #1
 800b612:	f7ff ff79 	bl	800b508 <_Balloc>
 800b616:	4680      	mov	r8, r0
 800b618:	b928      	cbnz	r0, 800b626 <__multadd+0x5a>
 800b61a:	4602      	mov	r2, r0
 800b61c:	4b0c      	ldr	r3, [pc, #48]	@ (800b650 <__multadd+0x84>)
 800b61e:	480d      	ldr	r0, [pc, #52]	@ (800b654 <__multadd+0x88>)
 800b620:	21ba      	movs	r1, #186	@ 0xba
 800b622:	f001 f897 	bl	800c754 <__assert_func>
 800b626:	6922      	ldr	r2, [r4, #16]
 800b628:	3202      	adds	r2, #2
 800b62a:	f104 010c 	add.w	r1, r4, #12
 800b62e:	0092      	lsls	r2, r2, #2
 800b630:	300c      	adds	r0, #12
 800b632:	f7fe fca4 	bl	8009f7e <memcpy>
 800b636:	4621      	mov	r1, r4
 800b638:	4638      	mov	r0, r7
 800b63a:	f7ff ffa5 	bl	800b588 <_Bfree>
 800b63e:	4644      	mov	r4, r8
 800b640:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b644:	3501      	adds	r5, #1
 800b646:	615e      	str	r6, [r3, #20]
 800b648:	6125      	str	r5, [r4, #16]
 800b64a:	4620      	mov	r0, r4
 800b64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b650:	0800cda3 	.word	0x0800cda3
 800b654:	0800ce14 	.word	0x0800ce14

0800b658 <__s2b>:
 800b658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b65c:	460c      	mov	r4, r1
 800b65e:	4615      	mov	r5, r2
 800b660:	461f      	mov	r7, r3
 800b662:	2209      	movs	r2, #9
 800b664:	3308      	adds	r3, #8
 800b666:	4606      	mov	r6, r0
 800b668:	fb93 f3f2 	sdiv	r3, r3, r2
 800b66c:	2100      	movs	r1, #0
 800b66e:	2201      	movs	r2, #1
 800b670:	429a      	cmp	r2, r3
 800b672:	db09      	blt.n	800b688 <__s2b+0x30>
 800b674:	4630      	mov	r0, r6
 800b676:	f7ff ff47 	bl	800b508 <_Balloc>
 800b67a:	b940      	cbnz	r0, 800b68e <__s2b+0x36>
 800b67c:	4602      	mov	r2, r0
 800b67e:	4b19      	ldr	r3, [pc, #100]	@ (800b6e4 <__s2b+0x8c>)
 800b680:	4819      	ldr	r0, [pc, #100]	@ (800b6e8 <__s2b+0x90>)
 800b682:	21d3      	movs	r1, #211	@ 0xd3
 800b684:	f001 f866 	bl	800c754 <__assert_func>
 800b688:	0052      	lsls	r2, r2, #1
 800b68a:	3101      	adds	r1, #1
 800b68c:	e7f0      	b.n	800b670 <__s2b+0x18>
 800b68e:	9b08      	ldr	r3, [sp, #32]
 800b690:	6143      	str	r3, [r0, #20]
 800b692:	2d09      	cmp	r5, #9
 800b694:	f04f 0301 	mov.w	r3, #1
 800b698:	6103      	str	r3, [r0, #16]
 800b69a:	dd16      	ble.n	800b6ca <__s2b+0x72>
 800b69c:	f104 0909 	add.w	r9, r4, #9
 800b6a0:	46c8      	mov	r8, r9
 800b6a2:	442c      	add	r4, r5
 800b6a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b6a8:	4601      	mov	r1, r0
 800b6aa:	3b30      	subs	r3, #48	@ 0x30
 800b6ac:	220a      	movs	r2, #10
 800b6ae:	4630      	mov	r0, r6
 800b6b0:	f7ff ff8c 	bl	800b5cc <__multadd>
 800b6b4:	45a0      	cmp	r8, r4
 800b6b6:	d1f5      	bne.n	800b6a4 <__s2b+0x4c>
 800b6b8:	f1a5 0408 	sub.w	r4, r5, #8
 800b6bc:	444c      	add	r4, r9
 800b6be:	1b2d      	subs	r5, r5, r4
 800b6c0:	1963      	adds	r3, r4, r5
 800b6c2:	42bb      	cmp	r3, r7
 800b6c4:	db04      	blt.n	800b6d0 <__s2b+0x78>
 800b6c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6ca:	340a      	adds	r4, #10
 800b6cc:	2509      	movs	r5, #9
 800b6ce:	e7f6      	b.n	800b6be <__s2b+0x66>
 800b6d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b6d4:	4601      	mov	r1, r0
 800b6d6:	3b30      	subs	r3, #48	@ 0x30
 800b6d8:	220a      	movs	r2, #10
 800b6da:	4630      	mov	r0, r6
 800b6dc:	f7ff ff76 	bl	800b5cc <__multadd>
 800b6e0:	e7ee      	b.n	800b6c0 <__s2b+0x68>
 800b6e2:	bf00      	nop
 800b6e4:	0800cda3 	.word	0x0800cda3
 800b6e8:	0800ce14 	.word	0x0800ce14

0800b6ec <__hi0bits>:
 800b6ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	bf36      	itet	cc
 800b6f4:	0403      	lslcc	r3, r0, #16
 800b6f6:	2000      	movcs	r0, #0
 800b6f8:	2010      	movcc	r0, #16
 800b6fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b6fe:	bf3c      	itt	cc
 800b700:	021b      	lslcc	r3, r3, #8
 800b702:	3008      	addcc	r0, #8
 800b704:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b708:	bf3c      	itt	cc
 800b70a:	011b      	lslcc	r3, r3, #4
 800b70c:	3004      	addcc	r0, #4
 800b70e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b712:	bf3c      	itt	cc
 800b714:	009b      	lslcc	r3, r3, #2
 800b716:	3002      	addcc	r0, #2
 800b718:	2b00      	cmp	r3, #0
 800b71a:	db05      	blt.n	800b728 <__hi0bits+0x3c>
 800b71c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b720:	f100 0001 	add.w	r0, r0, #1
 800b724:	bf08      	it	eq
 800b726:	2020      	moveq	r0, #32
 800b728:	4770      	bx	lr

0800b72a <__lo0bits>:
 800b72a:	6803      	ldr	r3, [r0, #0]
 800b72c:	4602      	mov	r2, r0
 800b72e:	f013 0007 	ands.w	r0, r3, #7
 800b732:	d00b      	beq.n	800b74c <__lo0bits+0x22>
 800b734:	07d9      	lsls	r1, r3, #31
 800b736:	d421      	bmi.n	800b77c <__lo0bits+0x52>
 800b738:	0798      	lsls	r0, r3, #30
 800b73a:	bf49      	itett	mi
 800b73c:	085b      	lsrmi	r3, r3, #1
 800b73e:	089b      	lsrpl	r3, r3, #2
 800b740:	2001      	movmi	r0, #1
 800b742:	6013      	strmi	r3, [r2, #0]
 800b744:	bf5c      	itt	pl
 800b746:	6013      	strpl	r3, [r2, #0]
 800b748:	2002      	movpl	r0, #2
 800b74a:	4770      	bx	lr
 800b74c:	b299      	uxth	r1, r3
 800b74e:	b909      	cbnz	r1, 800b754 <__lo0bits+0x2a>
 800b750:	0c1b      	lsrs	r3, r3, #16
 800b752:	2010      	movs	r0, #16
 800b754:	b2d9      	uxtb	r1, r3
 800b756:	b909      	cbnz	r1, 800b75c <__lo0bits+0x32>
 800b758:	3008      	adds	r0, #8
 800b75a:	0a1b      	lsrs	r3, r3, #8
 800b75c:	0719      	lsls	r1, r3, #28
 800b75e:	bf04      	itt	eq
 800b760:	091b      	lsreq	r3, r3, #4
 800b762:	3004      	addeq	r0, #4
 800b764:	0799      	lsls	r1, r3, #30
 800b766:	bf04      	itt	eq
 800b768:	089b      	lsreq	r3, r3, #2
 800b76a:	3002      	addeq	r0, #2
 800b76c:	07d9      	lsls	r1, r3, #31
 800b76e:	d403      	bmi.n	800b778 <__lo0bits+0x4e>
 800b770:	085b      	lsrs	r3, r3, #1
 800b772:	f100 0001 	add.w	r0, r0, #1
 800b776:	d003      	beq.n	800b780 <__lo0bits+0x56>
 800b778:	6013      	str	r3, [r2, #0]
 800b77a:	4770      	bx	lr
 800b77c:	2000      	movs	r0, #0
 800b77e:	4770      	bx	lr
 800b780:	2020      	movs	r0, #32
 800b782:	4770      	bx	lr

0800b784 <__i2b>:
 800b784:	b510      	push	{r4, lr}
 800b786:	460c      	mov	r4, r1
 800b788:	2101      	movs	r1, #1
 800b78a:	f7ff febd 	bl	800b508 <_Balloc>
 800b78e:	4602      	mov	r2, r0
 800b790:	b928      	cbnz	r0, 800b79e <__i2b+0x1a>
 800b792:	4b05      	ldr	r3, [pc, #20]	@ (800b7a8 <__i2b+0x24>)
 800b794:	4805      	ldr	r0, [pc, #20]	@ (800b7ac <__i2b+0x28>)
 800b796:	f240 1145 	movw	r1, #325	@ 0x145
 800b79a:	f000 ffdb 	bl	800c754 <__assert_func>
 800b79e:	2301      	movs	r3, #1
 800b7a0:	6144      	str	r4, [r0, #20]
 800b7a2:	6103      	str	r3, [r0, #16]
 800b7a4:	bd10      	pop	{r4, pc}
 800b7a6:	bf00      	nop
 800b7a8:	0800cda3 	.word	0x0800cda3
 800b7ac:	0800ce14 	.word	0x0800ce14

0800b7b0 <__multiply>:
 800b7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b4:	4617      	mov	r7, r2
 800b7b6:	690a      	ldr	r2, [r1, #16]
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	bfa8      	it	ge
 800b7be:	463b      	movge	r3, r7
 800b7c0:	4689      	mov	r9, r1
 800b7c2:	bfa4      	itt	ge
 800b7c4:	460f      	movge	r7, r1
 800b7c6:	4699      	movge	r9, r3
 800b7c8:	693d      	ldr	r5, [r7, #16]
 800b7ca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	6879      	ldr	r1, [r7, #4]
 800b7d2:	eb05 060a 	add.w	r6, r5, sl
 800b7d6:	42b3      	cmp	r3, r6
 800b7d8:	b085      	sub	sp, #20
 800b7da:	bfb8      	it	lt
 800b7dc:	3101      	addlt	r1, #1
 800b7de:	f7ff fe93 	bl	800b508 <_Balloc>
 800b7e2:	b930      	cbnz	r0, 800b7f2 <__multiply+0x42>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	4b41      	ldr	r3, [pc, #260]	@ (800b8ec <__multiply+0x13c>)
 800b7e8:	4841      	ldr	r0, [pc, #260]	@ (800b8f0 <__multiply+0x140>)
 800b7ea:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b7ee:	f000 ffb1 	bl	800c754 <__assert_func>
 800b7f2:	f100 0414 	add.w	r4, r0, #20
 800b7f6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b7fa:	4623      	mov	r3, r4
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	4573      	cmp	r3, lr
 800b800:	d320      	bcc.n	800b844 <__multiply+0x94>
 800b802:	f107 0814 	add.w	r8, r7, #20
 800b806:	f109 0114 	add.w	r1, r9, #20
 800b80a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b80e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b812:	9302      	str	r3, [sp, #8]
 800b814:	1beb      	subs	r3, r5, r7
 800b816:	3b15      	subs	r3, #21
 800b818:	f023 0303 	bic.w	r3, r3, #3
 800b81c:	3304      	adds	r3, #4
 800b81e:	3715      	adds	r7, #21
 800b820:	42bd      	cmp	r5, r7
 800b822:	bf38      	it	cc
 800b824:	2304      	movcc	r3, #4
 800b826:	9301      	str	r3, [sp, #4]
 800b828:	9b02      	ldr	r3, [sp, #8]
 800b82a:	9103      	str	r1, [sp, #12]
 800b82c:	428b      	cmp	r3, r1
 800b82e:	d80c      	bhi.n	800b84a <__multiply+0x9a>
 800b830:	2e00      	cmp	r6, #0
 800b832:	dd03      	ble.n	800b83c <__multiply+0x8c>
 800b834:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d055      	beq.n	800b8e8 <__multiply+0x138>
 800b83c:	6106      	str	r6, [r0, #16]
 800b83e:	b005      	add	sp, #20
 800b840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b844:	f843 2b04 	str.w	r2, [r3], #4
 800b848:	e7d9      	b.n	800b7fe <__multiply+0x4e>
 800b84a:	f8b1 a000 	ldrh.w	sl, [r1]
 800b84e:	f1ba 0f00 	cmp.w	sl, #0
 800b852:	d01f      	beq.n	800b894 <__multiply+0xe4>
 800b854:	46c4      	mov	ip, r8
 800b856:	46a1      	mov	r9, r4
 800b858:	2700      	movs	r7, #0
 800b85a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b85e:	f8d9 3000 	ldr.w	r3, [r9]
 800b862:	fa1f fb82 	uxth.w	fp, r2
 800b866:	b29b      	uxth	r3, r3
 800b868:	fb0a 330b 	mla	r3, sl, fp, r3
 800b86c:	443b      	add	r3, r7
 800b86e:	f8d9 7000 	ldr.w	r7, [r9]
 800b872:	0c12      	lsrs	r2, r2, #16
 800b874:	0c3f      	lsrs	r7, r7, #16
 800b876:	fb0a 7202 	mla	r2, sl, r2, r7
 800b87a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b87e:	b29b      	uxth	r3, r3
 800b880:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b884:	4565      	cmp	r5, ip
 800b886:	f849 3b04 	str.w	r3, [r9], #4
 800b88a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b88e:	d8e4      	bhi.n	800b85a <__multiply+0xaa>
 800b890:	9b01      	ldr	r3, [sp, #4]
 800b892:	50e7      	str	r7, [r4, r3]
 800b894:	9b03      	ldr	r3, [sp, #12]
 800b896:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b89a:	3104      	adds	r1, #4
 800b89c:	f1b9 0f00 	cmp.w	r9, #0
 800b8a0:	d020      	beq.n	800b8e4 <__multiply+0x134>
 800b8a2:	6823      	ldr	r3, [r4, #0]
 800b8a4:	4647      	mov	r7, r8
 800b8a6:	46a4      	mov	ip, r4
 800b8a8:	f04f 0a00 	mov.w	sl, #0
 800b8ac:	f8b7 b000 	ldrh.w	fp, [r7]
 800b8b0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b8b4:	fb09 220b 	mla	r2, r9, fp, r2
 800b8b8:	4452      	add	r2, sl
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8c0:	f84c 3b04 	str.w	r3, [ip], #4
 800b8c4:	f857 3b04 	ldr.w	r3, [r7], #4
 800b8c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b8cc:	f8bc 3000 	ldrh.w	r3, [ip]
 800b8d0:	fb09 330a 	mla	r3, r9, sl, r3
 800b8d4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b8d8:	42bd      	cmp	r5, r7
 800b8da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b8de:	d8e5      	bhi.n	800b8ac <__multiply+0xfc>
 800b8e0:	9a01      	ldr	r2, [sp, #4]
 800b8e2:	50a3      	str	r3, [r4, r2]
 800b8e4:	3404      	adds	r4, #4
 800b8e6:	e79f      	b.n	800b828 <__multiply+0x78>
 800b8e8:	3e01      	subs	r6, #1
 800b8ea:	e7a1      	b.n	800b830 <__multiply+0x80>
 800b8ec:	0800cda3 	.word	0x0800cda3
 800b8f0:	0800ce14 	.word	0x0800ce14

0800b8f4 <__pow5mult>:
 800b8f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8f8:	4615      	mov	r5, r2
 800b8fa:	f012 0203 	ands.w	r2, r2, #3
 800b8fe:	4607      	mov	r7, r0
 800b900:	460e      	mov	r6, r1
 800b902:	d007      	beq.n	800b914 <__pow5mult+0x20>
 800b904:	4c25      	ldr	r4, [pc, #148]	@ (800b99c <__pow5mult+0xa8>)
 800b906:	3a01      	subs	r2, #1
 800b908:	2300      	movs	r3, #0
 800b90a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b90e:	f7ff fe5d 	bl	800b5cc <__multadd>
 800b912:	4606      	mov	r6, r0
 800b914:	10ad      	asrs	r5, r5, #2
 800b916:	d03d      	beq.n	800b994 <__pow5mult+0xa0>
 800b918:	69fc      	ldr	r4, [r7, #28]
 800b91a:	b97c      	cbnz	r4, 800b93c <__pow5mult+0x48>
 800b91c:	2010      	movs	r0, #16
 800b91e:	f7ff fd2b 	bl	800b378 <malloc>
 800b922:	4602      	mov	r2, r0
 800b924:	61f8      	str	r0, [r7, #28]
 800b926:	b928      	cbnz	r0, 800b934 <__pow5mult+0x40>
 800b928:	4b1d      	ldr	r3, [pc, #116]	@ (800b9a0 <__pow5mult+0xac>)
 800b92a:	481e      	ldr	r0, [pc, #120]	@ (800b9a4 <__pow5mult+0xb0>)
 800b92c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b930:	f000 ff10 	bl	800c754 <__assert_func>
 800b934:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b938:	6004      	str	r4, [r0, #0]
 800b93a:	60c4      	str	r4, [r0, #12]
 800b93c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b940:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b944:	b94c      	cbnz	r4, 800b95a <__pow5mult+0x66>
 800b946:	f240 2171 	movw	r1, #625	@ 0x271
 800b94a:	4638      	mov	r0, r7
 800b94c:	f7ff ff1a 	bl	800b784 <__i2b>
 800b950:	2300      	movs	r3, #0
 800b952:	f8c8 0008 	str.w	r0, [r8, #8]
 800b956:	4604      	mov	r4, r0
 800b958:	6003      	str	r3, [r0, #0]
 800b95a:	f04f 0900 	mov.w	r9, #0
 800b95e:	07eb      	lsls	r3, r5, #31
 800b960:	d50a      	bpl.n	800b978 <__pow5mult+0x84>
 800b962:	4631      	mov	r1, r6
 800b964:	4622      	mov	r2, r4
 800b966:	4638      	mov	r0, r7
 800b968:	f7ff ff22 	bl	800b7b0 <__multiply>
 800b96c:	4631      	mov	r1, r6
 800b96e:	4680      	mov	r8, r0
 800b970:	4638      	mov	r0, r7
 800b972:	f7ff fe09 	bl	800b588 <_Bfree>
 800b976:	4646      	mov	r6, r8
 800b978:	106d      	asrs	r5, r5, #1
 800b97a:	d00b      	beq.n	800b994 <__pow5mult+0xa0>
 800b97c:	6820      	ldr	r0, [r4, #0]
 800b97e:	b938      	cbnz	r0, 800b990 <__pow5mult+0x9c>
 800b980:	4622      	mov	r2, r4
 800b982:	4621      	mov	r1, r4
 800b984:	4638      	mov	r0, r7
 800b986:	f7ff ff13 	bl	800b7b0 <__multiply>
 800b98a:	6020      	str	r0, [r4, #0]
 800b98c:	f8c0 9000 	str.w	r9, [r0]
 800b990:	4604      	mov	r4, r0
 800b992:	e7e4      	b.n	800b95e <__pow5mult+0x6a>
 800b994:	4630      	mov	r0, r6
 800b996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b99a:	bf00      	nop
 800b99c:	0800d014 	.word	0x0800d014
 800b9a0:	0800cd34 	.word	0x0800cd34
 800b9a4:	0800ce14 	.word	0x0800ce14

0800b9a8 <__lshift>:
 800b9a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9ac:	460c      	mov	r4, r1
 800b9ae:	6849      	ldr	r1, [r1, #4]
 800b9b0:	6923      	ldr	r3, [r4, #16]
 800b9b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b9b6:	68a3      	ldr	r3, [r4, #8]
 800b9b8:	4607      	mov	r7, r0
 800b9ba:	4691      	mov	r9, r2
 800b9bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b9c0:	f108 0601 	add.w	r6, r8, #1
 800b9c4:	42b3      	cmp	r3, r6
 800b9c6:	db0b      	blt.n	800b9e0 <__lshift+0x38>
 800b9c8:	4638      	mov	r0, r7
 800b9ca:	f7ff fd9d 	bl	800b508 <_Balloc>
 800b9ce:	4605      	mov	r5, r0
 800b9d0:	b948      	cbnz	r0, 800b9e6 <__lshift+0x3e>
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	4b28      	ldr	r3, [pc, #160]	@ (800ba78 <__lshift+0xd0>)
 800b9d6:	4829      	ldr	r0, [pc, #164]	@ (800ba7c <__lshift+0xd4>)
 800b9d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b9dc:	f000 feba 	bl	800c754 <__assert_func>
 800b9e0:	3101      	adds	r1, #1
 800b9e2:	005b      	lsls	r3, r3, #1
 800b9e4:	e7ee      	b.n	800b9c4 <__lshift+0x1c>
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	f100 0114 	add.w	r1, r0, #20
 800b9ec:	f100 0210 	add.w	r2, r0, #16
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	4553      	cmp	r3, sl
 800b9f4:	db33      	blt.n	800ba5e <__lshift+0xb6>
 800b9f6:	6920      	ldr	r0, [r4, #16]
 800b9f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b9fc:	f104 0314 	add.w	r3, r4, #20
 800ba00:	f019 091f 	ands.w	r9, r9, #31
 800ba04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ba0c:	d02b      	beq.n	800ba66 <__lshift+0xbe>
 800ba0e:	f1c9 0e20 	rsb	lr, r9, #32
 800ba12:	468a      	mov	sl, r1
 800ba14:	2200      	movs	r2, #0
 800ba16:	6818      	ldr	r0, [r3, #0]
 800ba18:	fa00 f009 	lsl.w	r0, r0, r9
 800ba1c:	4310      	orrs	r0, r2
 800ba1e:	f84a 0b04 	str.w	r0, [sl], #4
 800ba22:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba26:	459c      	cmp	ip, r3
 800ba28:	fa22 f20e 	lsr.w	r2, r2, lr
 800ba2c:	d8f3      	bhi.n	800ba16 <__lshift+0x6e>
 800ba2e:	ebac 0304 	sub.w	r3, ip, r4
 800ba32:	3b15      	subs	r3, #21
 800ba34:	f023 0303 	bic.w	r3, r3, #3
 800ba38:	3304      	adds	r3, #4
 800ba3a:	f104 0015 	add.w	r0, r4, #21
 800ba3e:	4560      	cmp	r0, ip
 800ba40:	bf88      	it	hi
 800ba42:	2304      	movhi	r3, #4
 800ba44:	50ca      	str	r2, [r1, r3]
 800ba46:	b10a      	cbz	r2, 800ba4c <__lshift+0xa4>
 800ba48:	f108 0602 	add.w	r6, r8, #2
 800ba4c:	3e01      	subs	r6, #1
 800ba4e:	4638      	mov	r0, r7
 800ba50:	612e      	str	r6, [r5, #16]
 800ba52:	4621      	mov	r1, r4
 800ba54:	f7ff fd98 	bl	800b588 <_Bfree>
 800ba58:	4628      	mov	r0, r5
 800ba5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba5e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ba62:	3301      	adds	r3, #1
 800ba64:	e7c5      	b.n	800b9f2 <__lshift+0x4a>
 800ba66:	3904      	subs	r1, #4
 800ba68:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba6c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba70:	459c      	cmp	ip, r3
 800ba72:	d8f9      	bhi.n	800ba68 <__lshift+0xc0>
 800ba74:	e7ea      	b.n	800ba4c <__lshift+0xa4>
 800ba76:	bf00      	nop
 800ba78:	0800cda3 	.word	0x0800cda3
 800ba7c:	0800ce14 	.word	0x0800ce14

0800ba80 <__mcmp>:
 800ba80:	690a      	ldr	r2, [r1, #16]
 800ba82:	4603      	mov	r3, r0
 800ba84:	6900      	ldr	r0, [r0, #16]
 800ba86:	1a80      	subs	r0, r0, r2
 800ba88:	b530      	push	{r4, r5, lr}
 800ba8a:	d10e      	bne.n	800baaa <__mcmp+0x2a>
 800ba8c:	3314      	adds	r3, #20
 800ba8e:	3114      	adds	r1, #20
 800ba90:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ba94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ba98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ba9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800baa0:	4295      	cmp	r5, r2
 800baa2:	d003      	beq.n	800baac <__mcmp+0x2c>
 800baa4:	d205      	bcs.n	800bab2 <__mcmp+0x32>
 800baa6:	f04f 30ff 	mov.w	r0, #4294967295
 800baaa:	bd30      	pop	{r4, r5, pc}
 800baac:	42a3      	cmp	r3, r4
 800baae:	d3f3      	bcc.n	800ba98 <__mcmp+0x18>
 800bab0:	e7fb      	b.n	800baaa <__mcmp+0x2a>
 800bab2:	2001      	movs	r0, #1
 800bab4:	e7f9      	b.n	800baaa <__mcmp+0x2a>
	...

0800bab8 <__mdiff>:
 800bab8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800babc:	4689      	mov	r9, r1
 800babe:	4606      	mov	r6, r0
 800bac0:	4611      	mov	r1, r2
 800bac2:	4648      	mov	r0, r9
 800bac4:	4614      	mov	r4, r2
 800bac6:	f7ff ffdb 	bl	800ba80 <__mcmp>
 800baca:	1e05      	subs	r5, r0, #0
 800bacc:	d112      	bne.n	800baf4 <__mdiff+0x3c>
 800bace:	4629      	mov	r1, r5
 800bad0:	4630      	mov	r0, r6
 800bad2:	f7ff fd19 	bl	800b508 <_Balloc>
 800bad6:	4602      	mov	r2, r0
 800bad8:	b928      	cbnz	r0, 800bae6 <__mdiff+0x2e>
 800bada:	4b3f      	ldr	r3, [pc, #252]	@ (800bbd8 <__mdiff+0x120>)
 800badc:	f240 2137 	movw	r1, #567	@ 0x237
 800bae0:	483e      	ldr	r0, [pc, #248]	@ (800bbdc <__mdiff+0x124>)
 800bae2:	f000 fe37 	bl	800c754 <__assert_func>
 800bae6:	2301      	movs	r3, #1
 800bae8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800baec:	4610      	mov	r0, r2
 800baee:	b003      	add	sp, #12
 800baf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baf4:	bfbc      	itt	lt
 800baf6:	464b      	movlt	r3, r9
 800baf8:	46a1      	movlt	r9, r4
 800bafa:	4630      	mov	r0, r6
 800bafc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bb00:	bfba      	itte	lt
 800bb02:	461c      	movlt	r4, r3
 800bb04:	2501      	movlt	r5, #1
 800bb06:	2500      	movge	r5, #0
 800bb08:	f7ff fcfe 	bl	800b508 <_Balloc>
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	b918      	cbnz	r0, 800bb18 <__mdiff+0x60>
 800bb10:	4b31      	ldr	r3, [pc, #196]	@ (800bbd8 <__mdiff+0x120>)
 800bb12:	f240 2145 	movw	r1, #581	@ 0x245
 800bb16:	e7e3      	b.n	800bae0 <__mdiff+0x28>
 800bb18:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bb1c:	6926      	ldr	r6, [r4, #16]
 800bb1e:	60c5      	str	r5, [r0, #12]
 800bb20:	f109 0310 	add.w	r3, r9, #16
 800bb24:	f109 0514 	add.w	r5, r9, #20
 800bb28:	f104 0e14 	add.w	lr, r4, #20
 800bb2c:	f100 0b14 	add.w	fp, r0, #20
 800bb30:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bb34:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bb38:	9301      	str	r3, [sp, #4]
 800bb3a:	46d9      	mov	r9, fp
 800bb3c:	f04f 0c00 	mov.w	ip, #0
 800bb40:	9b01      	ldr	r3, [sp, #4]
 800bb42:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bb46:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bb4a:	9301      	str	r3, [sp, #4]
 800bb4c:	fa1f f38a 	uxth.w	r3, sl
 800bb50:	4619      	mov	r1, r3
 800bb52:	b283      	uxth	r3, r0
 800bb54:	1acb      	subs	r3, r1, r3
 800bb56:	0c00      	lsrs	r0, r0, #16
 800bb58:	4463      	add	r3, ip
 800bb5a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bb5e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bb68:	4576      	cmp	r6, lr
 800bb6a:	f849 3b04 	str.w	r3, [r9], #4
 800bb6e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bb72:	d8e5      	bhi.n	800bb40 <__mdiff+0x88>
 800bb74:	1b33      	subs	r3, r6, r4
 800bb76:	3b15      	subs	r3, #21
 800bb78:	f023 0303 	bic.w	r3, r3, #3
 800bb7c:	3415      	adds	r4, #21
 800bb7e:	3304      	adds	r3, #4
 800bb80:	42a6      	cmp	r6, r4
 800bb82:	bf38      	it	cc
 800bb84:	2304      	movcc	r3, #4
 800bb86:	441d      	add	r5, r3
 800bb88:	445b      	add	r3, fp
 800bb8a:	461e      	mov	r6, r3
 800bb8c:	462c      	mov	r4, r5
 800bb8e:	4544      	cmp	r4, r8
 800bb90:	d30e      	bcc.n	800bbb0 <__mdiff+0xf8>
 800bb92:	f108 0103 	add.w	r1, r8, #3
 800bb96:	1b49      	subs	r1, r1, r5
 800bb98:	f021 0103 	bic.w	r1, r1, #3
 800bb9c:	3d03      	subs	r5, #3
 800bb9e:	45a8      	cmp	r8, r5
 800bba0:	bf38      	it	cc
 800bba2:	2100      	movcc	r1, #0
 800bba4:	440b      	add	r3, r1
 800bba6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bbaa:	b191      	cbz	r1, 800bbd2 <__mdiff+0x11a>
 800bbac:	6117      	str	r7, [r2, #16]
 800bbae:	e79d      	b.n	800baec <__mdiff+0x34>
 800bbb0:	f854 1b04 	ldr.w	r1, [r4], #4
 800bbb4:	46e6      	mov	lr, ip
 800bbb6:	0c08      	lsrs	r0, r1, #16
 800bbb8:	fa1c fc81 	uxtah	ip, ip, r1
 800bbbc:	4471      	add	r1, lr
 800bbbe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bbc2:	b289      	uxth	r1, r1
 800bbc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bbc8:	f846 1b04 	str.w	r1, [r6], #4
 800bbcc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bbd0:	e7dd      	b.n	800bb8e <__mdiff+0xd6>
 800bbd2:	3f01      	subs	r7, #1
 800bbd4:	e7e7      	b.n	800bba6 <__mdiff+0xee>
 800bbd6:	bf00      	nop
 800bbd8:	0800cda3 	.word	0x0800cda3
 800bbdc:	0800ce14 	.word	0x0800ce14

0800bbe0 <__ulp>:
 800bbe0:	b082      	sub	sp, #8
 800bbe2:	ed8d 0b00 	vstr	d0, [sp]
 800bbe6:	9a01      	ldr	r2, [sp, #4]
 800bbe8:	4b0f      	ldr	r3, [pc, #60]	@ (800bc28 <__ulp+0x48>)
 800bbea:	4013      	ands	r3, r2
 800bbec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	dc08      	bgt.n	800bc06 <__ulp+0x26>
 800bbf4:	425b      	negs	r3, r3
 800bbf6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bbfa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bbfe:	da04      	bge.n	800bc0a <__ulp+0x2a>
 800bc00:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bc04:	4113      	asrs	r3, r2
 800bc06:	2200      	movs	r2, #0
 800bc08:	e008      	b.n	800bc1c <__ulp+0x3c>
 800bc0a:	f1a2 0314 	sub.w	r3, r2, #20
 800bc0e:	2b1e      	cmp	r3, #30
 800bc10:	bfda      	itte	le
 800bc12:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bc16:	40da      	lsrle	r2, r3
 800bc18:	2201      	movgt	r2, #1
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	4610      	mov	r0, r2
 800bc20:	ec41 0b10 	vmov	d0, r0, r1
 800bc24:	b002      	add	sp, #8
 800bc26:	4770      	bx	lr
 800bc28:	7ff00000 	.word	0x7ff00000

0800bc2c <__b2d>:
 800bc2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc30:	6906      	ldr	r6, [r0, #16]
 800bc32:	f100 0814 	add.w	r8, r0, #20
 800bc36:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bc3a:	1f37      	subs	r7, r6, #4
 800bc3c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bc40:	4610      	mov	r0, r2
 800bc42:	f7ff fd53 	bl	800b6ec <__hi0bits>
 800bc46:	f1c0 0320 	rsb	r3, r0, #32
 800bc4a:	280a      	cmp	r0, #10
 800bc4c:	600b      	str	r3, [r1, #0]
 800bc4e:	491b      	ldr	r1, [pc, #108]	@ (800bcbc <__b2d+0x90>)
 800bc50:	dc15      	bgt.n	800bc7e <__b2d+0x52>
 800bc52:	f1c0 0c0b 	rsb	ip, r0, #11
 800bc56:	fa22 f30c 	lsr.w	r3, r2, ip
 800bc5a:	45b8      	cmp	r8, r7
 800bc5c:	ea43 0501 	orr.w	r5, r3, r1
 800bc60:	bf34      	ite	cc
 800bc62:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bc66:	2300      	movcs	r3, #0
 800bc68:	3015      	adds	r0, #21
 800bc6a:	fa02 f000 	lsl.w	r0, r2, r0
 800bc6e:	fa23 f30c 	lsr.w	r3, r3, ip
 800bc72:	4303      	orrs	r3, r0
 800bc74:	461c      	mov	r4, r3
 800bc76:	ec45 4b10 	vmov	d0, r4, r5
 800bc7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc7e:	45b8      	cmp	r8, r7
 800bc80:	bf3a      	itte	cc
 800bc82:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bc86:	f1a6 0708 	subcc.w	r7, r6, #8
 800bc8a:	2300      	movcs	r3, #0
 800bc8c:	380b      	subs	r0, #11
 800bc8e:	d012      	beq.n	800bcb6 <__b2d+0x8a>
 800bc90:	f1c0 0120 	rsb	r1, r0, #32
 800bc94:	fa23 f401 	lsr.w	r4, r3, r1
 800bc98:	4082      	lsls	r2, r0
 800bc9a:	4322      	orrs	r2, r4
 800bc9c:	4547      	cmp	r7, r8
 800bc9e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bca2:	bf8c      	ite	hi
 800bca4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bca8:	2200      	movls	r2, #0
 800bcaa:	4083      	lsls	r3, r0
 800bcac:	40ca      	lsrs	r2, r1
 800bcae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	e7de      	b.n	800bc74 <__b2d+0x48>
 800bcb6:	ea42 0501 	orr.w	r5, r2, r1
 800bcba:	e7db      	b.n	800bc74 <__b2d+0x48>
 800bcbc:	3ff00000 	.word	0x3ff00000

0800bcc0 <__d2b>:
 800bcc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bcc4:	460f      	mov	r7, r1
 800bcc6:	2101      	movs	r1, #1
 800bcc8:	ec59 8b10 	vmov	r8, r9, d0
 800bccc:	4616      	mov	r6, r2
 800bcce:	f7ff fc1b 	bl	800b508 <_Balloc>
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	b930      	cbnz	r0, 800bce4 <__d2b+0x24>
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	4b23      	ldr	r3, [pc, #140]	@ (800bd68 <__d2b+0xa8>)
 800bcda:	4824      	ldr	r0, [pc, #144]	@ (800bd6c <__d2b+0xac>)
 800bcdc:	f240 310f 	movw	r1, #783	@ 0x30f
 800bce0:	f000 fd38 	bl	800c754 <__assert_func>
 800bce4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bce8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bcec:	b10d      	cbz	r5, 800bcf2 <__d2b+0x32>
 800bcee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bcf2:	9301      	str	r3, [sp, #4]
 800bcf4:	f1b8 0300 	subs.w	r3, r8, #0
 800bcf8:	d023      	beq.n	800bd42 <__d2b+0x82>
 800bcfa:	4668      	mov	r0, sp
 800bcfc:	9300      	str	r3, [sp, #0]
 800bcfe:	f7ff fd14 	bl	800b72a <__lo0bits>
 800bd02:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bd06:	b1d0      	cbz	r0, 800bd3e <__d2b+0x7e>
 800bd08:	f1c0 0320 	rsb	r3, r0, #32
 800bd0c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd10:	430b      	orrs	r3, r1
 800bd12:	40c2      	lsrs	r2, r0
 800bd14:	6163      	str	r3, [r4, #20]
 800bd16:	9201      	str	r2, [sp, #4]
 800bd18:	9b01      	ldr	r3, [sp, #4]
 800bd1a:	61a3      	str	r3, [r4, #24]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	bf0c      	ite	eq
 800bd20:	2201      	moveq	r2, #1
 800bd22:	2202      	movne	r2, #2
 800bd24:	6122      	str	r2, [r4, #16]
 800bd26:	b1a5      	cbz	r5, 800bd52 <__d2b+0x92>
 800bd28:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bd2c:	4405      	add	r5, r0
 800bd2e:	603d      	str	r5, [r7, #0]
 800bd30:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bd34:	6030      	str	r0, [r6, #0]
 800bd36:	4620      	mov	r0, r4
 800bd38:	b003      	add	sp, #12
 800bd3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd3e:	6161      	str	r1, [r4, #20]
 800bd40:	e7ea      	b.n	800bd18 <__d2b+0x58>
 800bd42:	a801      	add	r0, sp, #4
 800bd44:	f7ff fcf1 	bl	800b72a <__lo0bits>
 800bd48:	9b01      	ldr	r3, [sp, #4]
 800bd4a:	6163      	str	r3, [r4, #20]
 800bd4c:	3020      	adds	r0, #32
 800bd4e:	2201      	movs	r2, #1
 800bd50:	e7e8      	b.n	800bd24 <__d2b+0x64>
 800bd52:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bd56:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bd5a:	6038      	str	r0, [r7, #0]
 800bd5c:	6918      	ldr	r0, [r3, #16]
 800bd5e:	f7ff fcc5 	bl	800b6ec <__hi0bits>
 800bd62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bd66:	e7e5      	b.n	800bd34 <__d2b+0x74>
 800bd68:	0800cda3 	.word	0x0800cda3
 800bd6c:	0800ce14 	.word	0x0800ce14

0800bd70 <__ratio>:
 800bd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd74:	b085      	sub	sp, #20
 800bd76:	e9cd 1000 	strd	r1, r0, [sp]
 800bd7a:	a902      	add	r1, sp, #8
 800bd7c:	f7ff ff56 	bl	800bc2c <__b2d>
 800bd80:	9800      	ldr	r0, [sp, #0]
 800bd82:	a903      	add	r1, sp, #12
 800bd84:	ec55 4b10 	vmov	r4, r5, d0
 800bd88:	f7ff ff50 	bl	800bc2c <__b2d>
 800bd8c:	9b01      	ldr	r3, [sp, #4]
 800bd8e:	6919      	ldr	r1, [r3, #16]
 800bd90:	9b00      	ldr	r3, [sp, #0]
 800bd92:	691b      	ldr	r3, [r3, #16]
 800bd94:	1ac9      	subs	r1, r1, r3
 800bd96:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bd9a:	1a9b      	subs	r3, r3, r2
 800bd9c:	ec5b ab10 	vmov	sl, fp, d0
 800bda0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	bfce      	itee	gt
 800bda8:	462a      	movgt	r2, r5
 800bdaa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bdae:	465a      	movle	r2, fp
 800bdb0:	462f      	mov	r7, r5
 800bdb2:	46d9      	mov	r9, fp
 800bdb4:	bfcc      	ite	gt
 800bdb6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bdba:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800bdbe:	464b      	mov	r3, r9
 800bdc0:	4652      	mov	r2, sl
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	4639      	mov	r1, r7
 800bdc6:	f7f4 fd61 	bl	800088c <__aeabi_ddiv>
 800bdca:	ec41 0b10 	vmov	d0, r0, r1
 800bdce:	b005      	add	sp, #20
 800bdd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bdd4 <__copybits>:
 800bdd4:	3901      	subs	r1, #1
 800bdd6:	b570      	push	{r4, r5, r6, lr}
 800bdd8:	1149      	asrs	r1, r1, #5
 800bdda:	6914      	ldr	r4, [r2, #16]
 800bddc:	3101      	adds	r1, #1
 800bdde:	f102 0314 	add.w	r3, r2, #20
 800bde2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bde6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bdea:	1f05      	subs	r5, r0, #4
 800bdec:	42a3      	cmp	r3, r4
 800bdee:	d30c      	bcc.n	800be0a <__copybits+0x36>
 800bdf0:	1aa3      	subs	r3, r4, r2
 800bdf2:	3b11      	subs	r3, #17
 800bdf4:	f023 0303 	bic.w	r3, r3, #3
 800bdf8:	3211      	adds	r2, #17
 800bdfa:	42a2      	cmp	r2, r4
 800bdfc:	bf88      	it	hi
 800bdfe:	2300      	movhi	r3, #0
 800be00:	4418      	add	r0, r3
 800be02:	2300      	movs	r3, #0
 800be04:	4288      	cmp	r0, r1
 800be06:	d305      	bcc.n	800be14 <__copybits+0x40>
 800be08:	bd70      	pop	{r4, r5, r6, pc}
 800be0a:	f853 6b04 	ldr.w	r6, [r3], #4
 800be0e:	f845 6f04 	str.w	r6, [r5, #4]!
 800be12:	e7eb      	b.n	800bdec <__copybits+0x18>
 800be14:	f840 3b04 	str.w	r3, [r0], #4
 800be18:	e7f4      	b.n	800be04 <__copybits+0x30>

0800be1a <__any_on>:
 800be1a:	f100 0214 	add.w	r2, r0, #20
 800be1e:	6900      	ldr	r0, [r0, #16]
 800be20:	114b      	asrs	r3, r1, #5
 800be22:	4298      	cmp	r0, r3
 800be24:	b510      	push	{r4, lr}
 800be26:	db11      	blt.n	800be4c <__any_on+0x32>
 800be28:	dd0a      	ble.n	800be40 <__any_on+0x26>
 800be2a:	f011 011f 	ands.w	r1, r1, #31
 800be2e:	d007      	beq.n	800be40 <__any_on+0x26>
 800be30:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800be34:	fa24 f001 	lsr.w	r0, r4, r1
 800be38:	fa00 f101 	lsl.w	r1, r0, r1
 800be3c:	428c      	cmp	r4, r1
 800be3e:	d10b      	bne.n	800be58 <__any_on+0x3e>
 800be40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800be44:	4293      	cmp	r3, r2
 800be46:	d803      	bhi.n	800be50 <__any_on+0x36>
 800be48:	2000      	movs	r0, #0
 800be4a:	bd10      	pop	{r4, pc}
 800be4c:	4603      	mov	r3, r0
 800be4e:	e7f7      	b.n	800be40 <__any_on+0x26>
 800be50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be54:	2900      	cmp	r1, #0
 800be56:	d0f5      	beq.n	800be44 <__any_on+0x2a>
 800be58:	2001      	movs	r0, #1
 800be5a:	e7f6      	b.n	800be4a <__any_on+0x30>

0800be5c <_strtol_l.isra.0>:
 800be5c:	2b24      	cmp	r3, #36	@ 0x24
 800be5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be62:	4686      	mov	lr, r0
 800be64:	4690      	mov	r8, r2
 800be66:	d801      	bhi.n	800be6c <_strtol_l.isra.0+0x10>
 800be68:	2b01      	cmp	r3, #1
 800be6a:	d106      	bne.n	800be7a <_strtol_l.isra.0+0x1e>
 800be6c:	f7fe f85a 	bl	8009f24 <__errno>
 800be70:	2316      	movs	r3, #22
 800be72:	6003      	str	r3, [r0, #0]
 800be74:	2000      	movs	r0, #0
 800be76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be7a:	4834      	ldr	r0, [pc, #208]	@ (800bf4c <_strtol_l.isra.0+0xf0>)
 800be7c:	460d      	mov	r5, r1
 800be7e:	462a      	mov	r2, r5
 800be80:	f815 4b01 	ldrb.w	r4, [r5], #1
 800be84:	5d06      	ldrb	r6, [r0, r4]
 800be86:	f016 0608 	ands.w	r6, r6, #8
 800be8a:	d1f8      	bne.n	800be7e <_strtol_l.isra.0+0x22>
 800be8c:	2c2d      	cmp	r4, #45	@ 0x2d
 800be8e:	d110      	bne.n	800beb2 <_strtol_l.isra.0+0x56>
 800be90:	782c      	ldrb	r4, [r5, #0]
 800be92:	2601      	movs	r6, #1
 800be94:	1c95      	adds	r5, r2, #2
 800be96:	f033 0210 	bics.w	r2, r3, #16
 800be9a:	d115      	bne.n	800bec8 <_strtol_l.isra.0+0x6c>
 800be9c:	2c30      	cmp	r4, #48	@ 0x30
 800be9e:	d10d      	bne.n	800bebc <_strtol_l.isra.0+0x60>
 800bea0:	782a      	ldrb	r2, [r5, #0]
 800bea2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bea6:	2a58      	cmp	r2, #88	@ 0x58
 800bea8:	d108      	bne.n	800bebc <_strtol_l.isra.0+0x60>
 800beaa:	786c      	ldrb	r4, [r5, #1]
 800beac:	3502      	adds	r5, #2
 800beae:	2310      	movs	r3, #16
 800beb0:	e00a      	b.n	800bec8 <_strtol_l.isra.0+0x6c>
 800beb2:	2c2b      	cmp	r4, #43	@ 0x2b
 800beb4:	bf04      	itt	eq
 800beb6:	782c      	ldrbeq	r4, [r5, #0]
 800beb8:	1c95      	addeq	r5, r2, #2
 800beba:	e7ec      	b.n	800be96 <_strtol_l.isra.0+0x3a>
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d1f6      	bne.n	800beae <_strtol_l.isra.0+0x52>
 800bec0:	2c30      	cmp	r4, #48	@ 0x30
 800bec2:	bf14      	ite	ne
 800bec4:	230a      	movne	r3, #10
 800bec6:	2308      	moveq	r3, #8
 800bec8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800becc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bed0:	2200      	movs	r2, #0
 800bed2:	fbbc f9f3 	udiv	r9, ip, r3
 800bed6:	4610      	mov	r0, r2
 800bed8:	fb03 ca19 	mls	sl, r3, r9, ip
 800bedc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bee0:	2f09      	cmp	r7, #9
 800bee2:	d80f      	bhi.n	800bf04 <_strtol_l.isra.0+0xa8>
 800bee4:	463c      	mov	r4, r7
 800bee6:	42a3      	cmp	r3, r4
 800bee8:	dd1b      	ble.n	800bf22 <_strtol_l.isra.0+0xc6>
 800beea:	1c57      	adds	r7, r2, #1
 800beec:	d007      	beq.n	800befe <_strtol_l.isra.0+0xa2>
 800beee:	4581      	cmp	r9, r0
 800bef0:	d314      	bcc.n	800bf1c <_strtol_l.isra.0+0xc0>
 800bef2:	d101      	bne.n	800bef8 <_strtol_l.isra.0+0x9c>
 800bef4:	45a2      	cmp	sl, r4
 800bef6:	db11      	blt.n	800bf1c <_strtol_l.isra.0+0xc0>
 800bef8:	fb00 4003 	mla	r0, r0, r3, r4
 800befc:	2201      	movs	r2, #1
 800befe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf02:	e7eb      	b.n	800bedc <_strtol_l.isra.0+0x80>
 800bf04:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bf08:	2f19      	cmp	r7, #25
 800bf0a:	d801      	bhi.n	800bf10 <_strtol_l.isra.0+0xb4>
 800bf0c:	3c37      	subs	r4, #55	@ 0x37
 800bf0e:	e7ea      	b.n	800bee6 <_strtol_l.isra.0+0x8a>
 800bf10:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bf14:	2f19      	cmp	r7, #25
 800bf16:	d804      	bhi.n	800bf22 <_strtol_l.isra.0+0xc6>
 800bf18:	3c57      	subs	r4, #87	@ 0x57
 800bf1a:	e7e4      	b.n	800bee6 <_strtol_l.isra.0+0x8a>
 800bf1c:	f04f 32ff 	mov.w	r2, #4294967295
 800bf20:	e7ed      	b.n	800befe <_strtol_l.isra.0+0xa2>
 800bf22:	1c53      	adds	r3, r2, #1
 800bf24:	d108      	bne.n	800bf38 <_strtol_l.isra.0+0xdc>
 800bf26:	2322      	movs	r3, #34	@ 0x22
 800bf28:	f8ce 3000 	str.w	r3, [lr]
 800bf2c:	4660      	mov	r0, ip
 800bf2e:	f1b8 0f00 	cmp.w	r8, #0
 800bf32:	d0a0      	beq.n	800be76 <_strtol_l.isra.0+0x1a>
 800bf34:	1e69      	subs	r1, r5, #1
 800bf36:	e006      	b.n	800bf46 <_strtol_l.isra.0+0xea>
 800bf38:	b106      	cbz	r6, 800bf3c <_strtol_l.isra.0+0xe0>
 800bf3a:	4240      	negs	r0, r0
 800bf3c:	f1b8 0f00 	cmp.w	r8, #0
 800bf40:	d099      	beq.n	800be76 <_strtol_l.isra.0+0x1a>
 800bf42:	2a00      	cmp	r2, #0
 800bf44:	d1f6      	bne.n	800bf34 <_strtol_l.isra.0+0xd8>
 800bf46:	f8c8 1000 	str.w	r1, [r8]
 800bf4a:	e794      	b.n	800be76 <_strtol_l.isra.0+0x1a>
 800bf4c:	0800cf11 	.word	0x0800cf11

0800bf50 <_strtol_r>:
 800bf50:	f7ff bf84 	b.w	800be5c <_strtol_l.isra.0>

0800bf54 <__ascii_wctomb>:
 800bf54:	4603      	mov	r3, r0
 800bf56:	4608      	mov	r0, r1
 800bf58:	b141      	cbz	r1, 800bf6c <__ascii_wctomb+0x18>
 800bf5a:	2aff      	cmp	r2, #255	@ 0xff
 800bf5c:	d904      	bls.n	800bf68 <__ascii_wctomb+0x14>
 800bf5e:	228a      	movs	r2, #138	@ 0x8a
 800bf60:	601a      	str	r2, [r3, #0]
 800bf62:	f04f 30ff 	mov.w	r0, #4294967295
 800bf66:	4770      	bx	lr
 800bf68:	700a      	strb	r2, [r1, #0]
 800bf6a:	2001      	movs	r0, #1
 800bf6c:	4770      	bx	lr

0800bf6e <__ssputs_r>:
 800bf6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf72:	688e      	ldr	r6, [r1, #8]
 800bf74:	461f      	mov	r7, r3
 800bf76:	42be      	cmp	r6, r7
 800bf78:	680b      	ldr	r3, [r1, #0]
 800bf7a:	4682      	mov	sl, r0
 800bf7c:	460c      	mov	r4, r1
 800bf7e:	4690      	mov	r8, r2
 800bf80:	d82d      	bhi.n	800bfde <__ssputs_r+0x70>
 800bf82:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bf86:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bf8a:	d026      	beq.n	800bfda <__ssputs_r+0x6c>
 800bf8c:	6965      	ldr	r5, [r4, #20]
 800bf8e:	6909      	ldr	r1, [r1, #16]
 800bf90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf94:	eba3 0901 	sub.w	r9, r3, r1
 800bf98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bf9c:	1c7b      	adds	r3, r7, #1
 800bf9e:	444b      	add	r3, r9
 800bfa0:	106d      	asrs	r5, r5, #1
 800bfa2:	429d      	cmp	r5, r3
 800bfa4:	bf38      	it	cc
 800bfa6:	461d      	movcc	r5, r3
 800bfa8:	0553      	lsls	r3, r2, #21
 800bfaa:	d527      	bpl.n	800bffc <__ssputs_r+0x8e>
 800bfac:	4629      	mov	r1, r5
 800bfae:	f7ff fa0d 	bl	800b3cc <_malloc_r>
 800bfb2:	4606      	mov	r6, r0
 800bfb4:	b360      	cbz	r0, 800c010 <__ssputs_r+0xa2>
 800bfb6:	6921      	ldr	r1, [r4, #16]
 800bfb8:	464a      	mov	r2, r9
 800bfba:	f7fd ffe0 	bl	8009f7e <memcpy>
 800bfbe:	89a3      	ldrh	r3, [r4, #12]
 800bfc0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bfc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfc8:	81a3      	strh	r3, [r4, #12]
 800bfca:	6126      	str	r6, [r4, #16]
 800bfcc:	6165      	str	r5, [r4, #20]
 800bfce:	444e      	add	r6, r9
 800bfd0:	eba5 0509 	sub.w	r5, r5, r9
 800bfd4:	6026      	str	r6, [r4, #0]
 800bfd6:	60a5      	str	r5, [r4, #8]
 800bfd8:	463e      	mov	r6, r7
 800bfda:	42be      	cmp	r6, r7
 800bfdc:	d900      	bls.n	800bfe0 <__ssputs_r+0x72>
 800bfde:	463e      	mov	r6, r7
 800bfe0:	6820      	ldr	r0, [r4, #0]
 800bfe2:	4632      	mov	r2, r6
 800bfe4:	4641      	mov	r1, r8
 800bfe6:	f000 fb69 	bl	800c6bc <memmove>
 800bfea:	68a3      	ldr	r3, [r4, #8]
 800bfec:	1b9b      	subs	r3, r3, r6
 800bfee:	60a3      	str	r3, [r4, #8]
 800bff0:	6823      	ldr	r3, [r4, #0]
 800bff2:	4433      	add	r3, r6
 800bff4:	6023      	str	r3, [r4, #0]
 800bff6:	2000      	movs	r0, #0
 800bff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bffc:	462a      	mov	r2, r5
 800bffe:	f000 fbdb 	bl	800c7b8 <_realloc_r>
 800c002:	4606      	mov	r6, r0
 800c004:	2800      	cmp	r0, #0
 800c006:	d1e0      	bne.n	800bfca <__ssputs_r+0x5c>
 800c008:	6921      	ldr	r1, [r4, #16]
 800c00a:	4650      	mov	r0, sl
 800c00c:	f7fe fe30 	bl	800ac70 <_free_r>
 800c010:	230c      	movs	r3, #12
 800c012:	f8ca 3000 	str.w	r3, [sl]
 800c016:	89a3      	ldrh	r3, [r4, #12]
 800c018:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c01c:	81a3      	strh	r3, [r4, #12]
 800c01e:	f04f 30ff 	mov.w	r0, #4294967295
 800c022:	e7e9      	b.n	800bff8 <__ssputs_r+0x8a>

0800c024 <_svfiprintf_r>:
 800c024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c028:	4698      	mov	r8, r3
 800c02a:	898b      	ldrh	r3, [r1, #12]
 800c02c:	061b      	lsls	r3, r3, #24
 800c02e:	b09d      	sub	sp, #116	@ 0x74
 800c030:	4607      	mov	r7, r0
 800c032:	460d      	mov	r5, r1
 800c034:	4614      	mov	r4, r2
 800c036:	d510      	bpl.n	800c05a <_svfiprintf_r+0x36>
 800c038:	690b      	ldr	r3, [r1, #16]
 800c03a:	b973      	cbnz	r3, 800c05a <_svfiprintf_r+0x36>
 800c03c:	2140      	movs	r1, #64	@ 0x40
 800c03e:	f7ff f9c5 	bl	800b3cc <_malloc_r>
 800c042:	6028      	str	r0, [r5, #0]
 800c044:	6128      	str	r0, [r5, #16]
 800c046:	b930      	cbnz	r0, 800c056 <_svfiprintf_r+0x32>
 800c048:	230c      	movs	r3, #12
 800c04a:	603b      	str	r3, [r7, #0]
 800c04c:	f04f 30ff 	mov.w	r0, #4294967295
 800c050:	b01d      	add	sp, #116	@ 0x74
 800c052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c056:	2340      	movs	r3, #64	@ 0x40
 800c058:	616b      	str	r3, [r5, #20]
 800c05a:	2300      	movs	r3, #0
 800c05c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c05e:	2320      	movs	r3, #32
 800c060:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c064:	f8cd 800c 	str.w	r8, [sp, #12]
 800c068:	2330      	movs	r3, #48	@ 0x30
 800c06a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c208 <_svfiprintf_r+0x1e4>
 800c06e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c072:	f04f 0901 	mov.w	r9, #1
 800c076:	4623      	mov	r3, r4
 800c078:	469a      	mov	sl, r3
 800c07a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c07e:	b10a      	cbz	r2, 800c084 <_svfiprintf_r+0x60>
 800c080:	2a25      	cmp	r2, #37	@ 0x25
 800c082:	d1f9      	bne.n	800c078 <_svfiprintf_r+0x54>
 800c084:	ebba 0b04 	subs.w	fp, sl, r4
 800c088:	d00b      	beq.n	800c0a2 <_svfiprintf_r+0x7e>
 800c08a:	465b      	mov	r3, fp
 800c08c:	4622      	mov	r2, r4
 800c08e:	4629      	mov	r1, r5
 800c090:	4638      	mov	r0, r7
 800c092:	f7ff ff6c 	bl	800bf6e <__ssputs_r>
 800c096:	3001      	adds	r0, #1
 800c098:	f000 80a7 	beq.w	800c1ea <_svfiprintf_r+0x1c6>
 800c09c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c09e:	445a      	add	r2, fp
 800c0a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c0a2:	f89a 3000 	ldrb.w	r3, [sl]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	f000 809f 	beq.w	800c1ea <_svfiprintf_r+0x1c6>
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c0b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0b6:	f10a 0a01 	add.w	sl, sl, #1
 800c0ba:	9304      	str	r3, [sp, #16]
 800c0bc:	9307      	str	r3, [sp, #28]
 800c0be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c0c2:	931a      	str	r3, [sp, #104]	@ 0x68
 800c0c4:	4654      	mov	r4, sl
 800c0c6:	2205      	movs	r2, #5
 800c0c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0cc:	484e      	ldr	r0, [pc, #312]	@ (800c208 <_svfiprintf_r+0x1e4>)
 800c0ce:	f7f4 f89f 	bl	8000210 <memchr>
 800c0d2:	9a04      	ldr	r2, [sp, #16]
 800c0d4:	b9d8      	cbnz	r0, 800c10e <_svfiprintf_r+0xea>
 800c0d6:	06d0      	lsls	r0, r2, #27
 800c0d8:	bf44      	itt	mi
 800c0da:	2320      	movmi	r3, #32
 800c0dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0e0:	0711      	lsls	r1, r2, #28
 800c0e2:	bf44      	itt	mi
 800c0e4:	232b      	movmi	r3, #43	@ 0x2b
 800c0e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0ea:	f89a 3000 	ldrb.w	r3, [sl]
 800c0ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800c0f0:	d015      	beq.n	800c11e <_svfiprintf_r+0xfa>
 800c0f2:	9a07      	ldr	r2, [sp, #28]
 800c0f4:	4654      	mov	r4, sl
 800c0f6:	2000      	movs	r0, #0
 800c0f8:	f04f 0c0a 	mov.w	ip, #10
 800c0fc:	4621      	mov	r1, r4
 800c0fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c102:	3b30      	subs	r3, #48	@ 0x30
 800c104:	2b09      	cmp	r3, #9
 800c106:	d94b      	bls.n	800c1a0 <_svfiprintf_r+0x17c>
 800c108:	b1b0      	cbz	r0, 800c138 <_svfiprintf_r+0x114>
 800c10a:	9207      	str	r2, [sp, #28]
 800c10c:	e014      	b.n	800c138 <_svfiprintf_r+0x114>
 800c10e:	eba0 0308 	sub.w	r3, r0, r8
 800c112:	fa09 f303 	lsl.w	r3, r9, r3
 800c116:	4313      	orrs	r3, r2
 800c118:	9304      	str	r3, [sp, #16]
 800c11a:	46a2      	mov	sl, r4
 800c11c:	e7d2      	b.n	800c0c4 <_svfiprintf_r+0xa0>
 800c11e:	9b03      	ldr	r3, [sp, #12]
 800c120:	1d19      	adds	r1, r3, #4
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	9103      	str	r1, [sp, #12]
 800c126:	2b00      	cmp	r3, #0
 800c128:	bfbb      	ittet	lt
 800c12a:	425b      	neglt	r3, r3
 800c12c:	f042 0202 	orrlt.w	r2, r2, #2
 800c130:	9307      	strge	r3, [sp, #28]
 800c132:	9307      	strlt	r3, [sp, #28]
 800c134:	bfb8      	it	lt
 800c136:	9204      	strlt	r2, [sp, #16]
 800c138:	7823      	ldrb	r3, [r4, #0]
 800c13a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c13c:	d10a      	bne.n	800c154 <_svfiprintf_r+0x130>
 800c13e:	7863      	ldrb	r3, [r4, #1]
 800c140:	2b2a      	cmp	r3, #42	@ 0x2a
 800c142:	d132      	bne.n	800c1aa <_svfiprintf_r+0x186>
 800c144:	9b03      	ldr	r3, [sp, #12]
 800c146:	1d1a      	adds	r2, r3, #4
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	9203      	str	r2, [sp, #12]
 800c14c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c150:	3402      	adds	r4, #2
 800c152:	9305      	str	r3, [sp, #20]
 800c154:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c218 <_svfiprintf_r+0x1f4>
 800c158:	7821      	ldrb	r1, [r4, #0]
 800c15a:	2203      	movs	r2, #3
 800c15c:	4650      	mov	r0, sl
 800c15e:	f7f4 f857 	bl	8000210 <memchr>
 800c162:	b138      	cbz	r0, 800c174 <_svfiprintf_r+0x150>
 800c164:	9b04      	ldr	r3, [sp, #16]
 800c166:	eba0 000a 	sub.w	r0, r0, sl
 800c16a:	2240      	movs	r2, #64	@ 0x40
 800c16c:	4082      	lsls	r2, r0
 800c16e:	4313      	orrs	r3, r2
 800c170:	3401      	adds	r4, #1
 800c172:	9304      	str	r3, [sp, #16]
 800c174:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c178:	4824      	ldr	r0, [pc, #144]	@ (800c20c <_svfiprintf_r+0x1e8>)
 800c17a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c17e:	2206      	movs	r2, #6
 800c180:	f7f4 f846 	bl	8000210 <memchr>
 800c184:	2800      	cmp	r0, #0
 800c186:	d036      	beq.n	800c1f6 <_svfiprintf_r+0x1d2>
 800c188:	4b21      	ldr	r3, [pc, #132]	@ (800c210 <_svfiprintf_r+0x1ec>)
 800c18a:	bb1b      	cbnz	r3, 800c1d4 <_svfiprintf_r+0x1b0>
 800c18c:	9b03      	ldr	r3, [sp, #12]
 800c18e:	3307      	adds	r3, #7
 800c190:	f023 0307 	bic.w	r3, r3, #7
 800c194:	3308      	adds	r3, #8
 800c196:	9303      	str	r3, [sp, #12]
 800c198:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c19a:	4433      	add	r3, r6
 800c19c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c19e:	e76a      	b.n	800c076 <_svfiprintf_r+0x52>
 800c1a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1a4:	460c      	mov	r4, r1
 800c1a6:	2001      	movs	r0, #1
 800c1a8:	e7a8      	b.n	800c0fc <_svfiprintf_r+0xd8>
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	3401      	adds	r4, #1
 800c1ae:	9305      	str	r3, [sp, #20]
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	f04f 0c0a 	mov.w	ip, #10
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1bc:	3a30      	subs	r2, #48	@ 0x30
 800c1be:	2a09      	cmp	r2, #9
 800c1c0:	d903      	bls.n	800c1ca <_svfiprintf_r+0x1a6>
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d0c6      	beq.n	800c154 <_svfiprintf_r+0x130>
 800c1c6:	9105      	str	r1, [sp, #20]
 800c1c8:	e7c4      	b.n	800c154 <_svfiprintf_r+0x130>
 800c1ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1ce:	4604      	mov	r4, r0
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	e7f0      	b.n	800c1b6 <_svfiprintf_r+0x192>
 800c1d4:	ab03      	add	r3, sp, #12
 800c1d6:	9300      	str	r3, [sp, #0]
 800c1d8:	462a      	mov	r2, r5
 800c1da:	4b0e      	ldr	r3, [pc, #56]	@ (800c214 <_svfiprintf_r+0x1f0>)
 800c1dc:	a904      	add	r1, sp, #16
 800c1de:	4638      	mov	r0, r7
 800c1e0:	f7fc fdd8 	bl	8008d94 <_printf_float>
 800c1e4:	1c42      	adds	r2, r0, #1
 800c1e6:	4606      	mov	r6, r0
 800c1e8:	d1d6      	bne.n	800c198 <_svfiprintf_r+0x174>
 800c1ea:	89ab      	ldrh	r3, [r5, #12]
 800c1ec:	065b      	lsls	r3, r3, #25
 800c1ee:	f53f af2d 	bmi.w	800c04c <_svfiprintf_r+0x28>
 800c1f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c1f4:	e72c      	b.n	800c050 <_svfiprintf_r+0x2c>
 800c1f6:	ab03      	add	r3, sp, #12
 800c1f8:	9300      	str	r3, [sp, #0]
 800c1fa:	462a      	mov	r2, r5
 800c1fc:	4b05      	ldr	r3, [pc, #20]	@ (800c214 <_svfiprintf_r+0x1f0>)
 800c1fe:	a904      	add	r1, sp, #16
 800c200:	4638      	mov	r0, r7
 800c202:	f7fd f85f 	bl	80092c4 <_printf_i>
 800c206:	e7ed      	b.n	800c1e4 <_svfiprintf_r+0x1c0>
 800c208:	0800ce6d 	.word	0x0800ce6d
 800c20c:	0800ce77 	.word	0x0800ce77
 800c210:	08008d95 	.word	0x08008d95
 800c214:	0800bf6f 	.word	0x0800bf6f
 800c218:	0800ce73 	.word	0x0800ce73

0800c21c <__sfputc_r>:
 800c21c:	6893      	ldr	r3, [r2, #8]
 800c21e:	3b01      	subs	r3, #1
 800c220:	2b00      	cmp	r3, #0
 800c222:	b410      	push	{r4}
 800c224:	6093      	str	r3, [r2, #8]
 800c226:	da08      	bge.n	800c23a <__sfputc_r+0x1e>
 800c228:	6994      	ldr	r4, [r2, #24]
 800c22a:	42a3      	cmp	r3, r4
 800c22c:	db01      	blt.n	800c232 <__sfputc_r+0x16>
 800c22e:	290a      	cmp	r1, #10
 800c230:	d103      	bne.n	800c23a <__sfputc_r+0x1e>
 800c232:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c236:	f7fd bd45 	b.w	8009cc4 <__swbuf_r>
 800c23a:	6813      	ldr	r3, [r2, #0]
 800c23c:	1c58      	adds	r0, r3, #1
 800c23e:	6010      	str	r0, [r2, #0]
 800c240:	7019      	strb	r1, [r3, #0]
 800c242:	4608      	mov	r0, r1
 800c244:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c248:	4770      	bx	lr

0800c24a <__sfputs_r>:
 800c24a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c24c:	4606      	mov	r6, r0
 800c24e:	460f      	mov	r7, r1
 800c250:	4614      	mov	r4, r2
 800c252:	18d5      	adds	r5, r2, r3
 800c254:	42ac      	cmp	r4, r5
 800c256:	d101      	bne.n	800c25c <__sfputs_r+0x12>
 800c258:	2000      	movs	r0, #0
 800c25a:	e007      	b.n	800c26c <__sfputs_r+0x22>
 800c25c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c260:	463a      	mov	r2, r7
 800c262:	4630      	mov	r0, r6
 800c264:	f7ff ffda 	bl	800c21c <__sfputc_r>
 800c268:	1c43      	adds	r3, r0, #1
 800c26a:	d1f3      	bne.n	800c254 <__sfputs_r+0xa>
 800c26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c270 <_vfiprintf_r>:
 800c270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c274:	460d      	mov	r5, r1
 800c276:	b09d      	sub	sp, #116	@ 0x74
 800c278:	4614      	mov	r4, r2
 800c27a:	4698      	mov	r8, r3
 800c27c:	4606      	mov	r6, r0
 800c27e:	b118      	cbz	r0, 800c288 <_vfiprintf_r+0x18>
 800c280:	6a03      	ldr	r3, [r0, #32]
 800c282:	b90b      	cbnz	r3, 800c288 <_vfiprintf_r+0x18>
 800c284:	f7fd fbd6 	bl	8009a34 <__sinit>
 800c288:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c28a:	07d9      	lsls	r1, r3, #31
 800c28c:	d405      	bmi.n	800c29a <_vfiprintf_r+0x2a>
 800c28e:	89ab      	ldrh	r3, [r5, #12]
 800c290:	059a      	lsls	r2, r3, #22
 800c292:	d402      	bmi.n	800c29a <_vfiprintf_r+0x2a>
 800c294:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c296:	f7fd fe70 	bl	8009f7a <__retarget_lock_acquire_recursive>
 800c29a:	89ab      	ldrh	r3, [r5, #12]
 800c29c:	071b      	lsls	r3, r3, #28
 800c29e:	d501      	bpl.n	800c2a4 <_vfiprintf_r+0x34>
 800c2a0:	692b      	ldr	r3, [r5, #16]
 800c2a2:	b99b      	cbnz	r3, 800c2cc <_vfiprintf_r+0x5c>
 800c2a4:	4629      	mov	r1, r5
 800c2a6:	4630      	mov	r0, r6
 800c2a8:	f7fd fd4a 	bl	8009d40 <__swsetup_r>
 800c2ac:	b170      	cbz	r0, 800c2cc <_vfiprintf_r+0x5c>
 800c2ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c2b0:	07dc      	lsls	r4, r3, #31
 800c2b2:	d504      	bpl.n	800c2be <_vfiprintf_r+0x4e>
 800c2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b8:	b01d      	add	sp, #116	@ 0x74
 800c2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2be:	89ab      	ldrh	r3, [r5, #12]
 800c2c0:	0598      	lsls	r0, r3, #22
 800c2c2:	d4f7      	bmi.n	800c2b4 <_vfiprintf_r+0x44>
 800c2c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c2c6:	f7fd fe59 	bl	8009f7c <__retarget_lock_release_recursive>
 800c2ca:	e7f3      	b.n	800c2b4 <_vfiprintf_r+0x44>
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2d0:	2320      	movs	r3, #32
 800c2d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c2d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2da:	2330      	movs	r3, #48	@ 0x30
 800c2dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c48c <_vfiprintf_r+0x21c>
 800c2e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c2e4:	f04f 0901 	mov.w	r9, #1
 800c2e8:	4623      	mov	r3, r4
 800c2ea:	469a      	mov	sl, r3
 800c2ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2f0:	b10a      	cbz	r2, 800c2f6 <_vfiprintf_r+0x86>
 800c2f2:	2a25      	cmp	r2, #37	@ 0x25
 800c2f4:	d1f9      	bne.n	800c2ea <_vfiprintf_r+0x7a>
 800c2f6:	ebba 0b04 	subs.w	fp, sl, r4
 800c2fa:	d00b      	beq.n	800c314 <_vfiprintf_r+0xa4>
 800c2fc:	465b      	mov	r3, fp
 800c2fe:	4622      	mov	r2, r4
 800c300:	4629      	mov	r1, r5
 800c302:	4630      	mov	r0, r6
 800c304:	f7ff ffa1 	bl	800c24a <__sfputs_r>
 800c308:	3001      	adds	r0, #1
 800c30a:	f000 80a7 	beq.w	800c45c <_vfiprintf_r+0x1ec>
 800c30e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c310:	445a      	add	r2, fp
 800c312:	9209      	str	r2, [sp, #36]	@ 0x24
 800c314:	f89a 3000 	ldrb.w	r3, [sl]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	f000 809f 	beq.w	800c45c <_vfiprintf_r+0x1ec>
 800c31e:	2300      	movs	r3, #0
 800c320:	f04f 32ff 	mov.w	r2, #4294967295
 800c324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c328:	f10a 0a01 	add.w	sl, sl, #1
 800c32c:	9304      	str	r3, [sp, #16]
 800c32e:	9307      	str	r3, [sp, #28]
 800c330:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c334:	931a      	str	r3, [sp, #104]	@ 0x68
 800c336:	4654      	mov	r4, sl
 800c338:	2205      	movs	r2, #5
 800c33a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c33e:	4853      	ldr	r0, [pc, #332]	@ (800c48c <_vfiprintf_r+0x21c>)
 800c340:	f7f3 ff66 	bl	8000210 <memchr>
 800c344:	9a04      	ldr	r2, [sp, #16]
 800c346:	b9d8      	cbnz	r0, 800c380 <_vfiprintf_r+0x110>
 800c348:	06d1      	lsls	r1, r2, #27
 800c34a:	bf44      	itt	mi
 800c34c:	2320      	movmi	r3, #32
 800c34e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c352:	0713      	lsls	r3, r2, #28
 800c354:	bf44      	itt	mi
 800c356:	232b      	movmi	r3, #43	@ 0x2b
 800c358:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c35c:	f89a 3000 	ldrb.w	r3, [sl]
 800c360:	2b2a      	cmp	r3, #42	@ 0x2a
 800c362:	d015      	beq.n	800c390 <_vfiprintf_r+0x120>
 800c364:	9a07      	ldr	r2, [sp, #28]
 800c366:	4654      	mov	r4, sl
 800c368:	2000      	movs	r0, #0
 800c36a:	f04f 0c0a 	mov.w	ip, #10
 800c36e:	4621      	mov	r1, r4
 800c370:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c374:	3b30      	subs	r3, #48	@ 0x30
 800c376:	2b09      	cmp	r3, #9
 800c378:	d94b      	bls.n	800c412 <_vfiprintf_r+0x1a2>
 800c37a:	b1b0      	cbz	r0, 800c3aa <_vfiprintf_r+0x13a>
 800c37c:	9207      	str	r2, [sp, #28]
 800c37e:	e014      	b.n	800c3aa <_vfiprintf_r+0x13a>
 800c380:	eba0 0308 	sub.w	r3, r0, r8
 800c384:	fa09 f303 	lsl.w	r3, r9, r3
 800c388:	4313      	orrs	r3, r2
 800c38a:	9304      	str	r3, [sp, #16]
 800c38c:	46a2      	mov	sl, r4
 800c38e:	e7d2      	b.n	800c336 <_vfiprintf_r+0xc6>
 800c390:	9b03      	ldr	r3, [sp, #12]
 800c392:	1d19      	adds	r1, r3, #4
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	9103      	str	r1, [sp, #12]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	bfbb      	ittet	lt
 800c39c:	425b      	neglt	r3, r3
 800c39e:	f042 0202 	orrlt.w	r2, r2, #2
 800c3a2:	9307      	strge	r3, [sp, #28]
 800c3a4:	9307      	strlt	r3, [sp, #28]
 800c3a6:	bfb8      	it	lt
 800c3a8:	9204      	strlt	r2, [sp, #16]
 800c3aa:	7823      	ldrb	r3, [r4, #0]
 800c3ac:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3ae:	d10a      	bne.n	800c3c6 <_vfiprintf_r+0x156>
 800c3b0:	7863      	ldrb	r3, [r4, #1]
 800c3b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3b4:	d132      	bne.n	800c41c <_vfiprintf_r+0x1ac>
 800c3b6:	9b03      	ldr	r3, [sp, #12]
 800c3b8:	1d1a      	adds	r2, r3, #4
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	9203      	str	r2, [sp, #12]
 800c3be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c3c2:	3402      	adds	r4, #2
 800c3c4:	9305      	str	r3, [sp, #20]
 800c3c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c49c <_vfiprintf_r+0x22c>
 800c3ca:	7821      	ldrb	r1, [r4, #0]
 800c3cc:	2203      	movs	r2, #3
 800c3ce:	4650      	mov	r0, sl
 800c3d0:	f7f3 ff1e 	bl	8000210 <memchr>
 800c3d4:	b138      	cbz	r0, 800c3e6 <_vfiprintf_r+0x176>
 800c3d6:	9b04      	ldr	r3, [sp, #16]
 800c3d8:	eba0 000a 	sub.w	r0, r0, sl
 800c3dc:	2240      	movs	r2, #64	@ 0x40
 800c3de:	4082      	lsls	r2, r0
 800c3e0:	4313      	orrs	r3, r2
 800c3e2:	3401      	adds	r4, #1
 800c3e4:	9304      	str	r3, [sp, #16]
 800c3e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3ea:	4829      	ldr	r0, [pc, #164]	@ (800c490 <_vfiprintf_r+0x220>)
 800c3ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c3f0:	2206      	movs	r2, #6
 800c3f2:	f7f3 ff0d 	bl	8000210 <memchr>
 800c3f6:	2800      	cmp	r0, #0
 800c3f8:	d03f      	beq.n	800c47a <_vfiprintf_r+0x20a>
 800c3fa:	4b26      	ldr	r3, [pc, #152]	@ (800c494 <_vfiprintf_r+0x224>)
 800c3fc:	bb1b      	cbnz	r3, 800c446 <_vfiprintf_r+0x1d6>
 800c3fe:	9b03      	ldr	r3, [sp, #12]
 800c400:	3307      	adds	r3, #7
 800c402:	f023 0307 	bic.w	r3, r3, #7
 800c406:	3308      	adds	r3, #8
 800c408:	9303      	str	r3, [sp, #12]
 800c40a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c40c:	443b      	add	r3, r7
 800c40e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c410:	e76a      	b.n	800c2e8 <_vfiprintf_r+0x78>
 800c412:	fb0c 3202 	mla	r2, ip, r2, r3
 800c416:	460c      	mov	r4, r1
 800c418:	2001      	movs	r0, #1
 800c41a:	e7a8      	b.n	800c36e <_vfiprintf_r+0xfe>
 800c41c:	2300      	movs	r3, #0
 800c41e:	3401      	adds	r4, #1
 800c420:	9305      	str	r3, [sp, #20]
 800c422:	4619      	mov	r1, r3
 800c424:	f04f 0c0a 	mov.w	ip, #10
 800c428:	4620      	mov	r0, r4
 800c42a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c42e:	3a30      	subs	r2, #48	@ 0x30
 800c430:	2a09      	cmp	r2, #9
 800c432:	d903      	bls.n	800c43c <_vfiprintf_r+0x1cc>
 800c434:	2b00      	cmp	r3, #0
 800c436:	d0c6      	beq.n	800c3c6 <_vfiprintf_r+0x156>
 800c438:	9105      	str	r1, [sp, #20]
 800c43a:	e7c4      	b.n	800c3c6 <_vfiprintf_r+0x156>
 800c43c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c440:	4604      	mov	r4, r0
 800c442:	2301      	movs	r3, #1
 800c444:	e7f0      	b.n	800c428 <_vfiprintf_r+0x1b8>
 800c446:	ab03      	add	r3, sp, #12
 800c448:	9300      	str	r3, [sp, #0]
 800c44a:	462a      	mov	r2, r5
 800c44c:	4b12      	ldr	r3, [pc, #72]	@ (800c498 <_vfiprintf_r+0x228>)
 800c44e:	a904      	add	r1, sp, #16
 800c450:	4630      	mov	r0, r6
 800c452:	f7fc fc9f 	bl	8008d94 <_printf_float>
 800c456:	4607      	mov	r7, r0
 800c458:	1c78      	adds	r0, r7, #1
 800c45a:	d1d6      	bne.n	800c40a <_vfiprintf_r+0x19a>
 800c45c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c45e:	07d9      	lsls	r1, r3, #31
 800c460:	d405      	bmi.n	800c46e <_vfiprintf_r+0x1fe>
 800c462:	89ab      	ldrh	r3, [r5, #12]
 800c464:	059a      	lsls	r2, r3, #22
 800c466:	d402      	bmi.n	800c46e <_vfiprintf_r+0x1fe>
 800c468:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c46a:	f7fd fd87 	bl	8009f7c <__retarget_lock_release_recursive>
 800c46e:	89ab      	ldrh	r3, [r5, #12]
 800c470:	065b      	lsls	r3, r3, #25
 800c472:	f53f af1f 	bmi.w	800c2b4 <_vfiprintf_r+0x44>
 800c476:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c478:	e71e      	b.n	800c2b8 <_vfiprintf_r+0x48>
 800c47a:	ab03      	add	r3, sp, #12
 800c47c:	9300      	str	r3, [sp, #0]
 800c47e:	462a      	mov	r2, r5
 800c480:	4b05      	ldr	r3, [pc, #20]	@ (800c498 <_vfiprintf_r+0x228>)
 800c482:	a904      	add	r1, sp, #16
 800c484:	4630      	mov	r0, r6
 800c486:	f7fc ff1d 	bl	80092c4 <_printf_i>
 800c48a:	e7e4      	b.n	800c456 <_vfiprintf_r+0x1e6>
 800c48c:	0800ce6d 	.word	0x0800ce6d
 800c490:	0800ce77 	.word	0x0800ce77
 800c494:	08008d95 	.word	0x08008d95
 800c498:	0800c24b 	.word	0x0800c24b
 800c49c:	0800ce73 	.word	0x0800ce73

0800c4a0 <__sflush_r>:
 800c4a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4a8:	0716      	lsls	r6, r2, #28
 800c4aa:	4605      	mov	r5, r0
 800c4ac:	460c      	mov	r4, r1
 800c4ae:	d454      	bmi.n	800c55a <__sflush_r+0xba>
 800c4b0:	684b      	ldr	r3, [r1, #4]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	dc02      	bgt.n	800c4bc <__sflush_r+0x1c>
 800c4b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	dd48      	ble.n	800c54e <__sflush_r+0xae>
 800c4bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c4be:	2e00      	cmp	r6, #0
 800c4c0:	d045      	beq.n	800c54e <__sflush_r+0xae>
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c4c8:	682f      	ldr	r7, [r5, #0]
 800c4ca:	6a21      	ldr	r1, [r4, #32]
 800c4cc:	602b      	str	r3, [r5, #0]
 800c4ce:	d030      	beq.n	800c532 <__sflush_r+0x92>
 800c4d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c4d2:	89a3      	ldrh	r3, [r4, #12]
 800c4d4:	0759      	lsls	r1, r3, #29
 800c4d6:	d505      	bpl.n	800c4e4 <__sflush_r+0x44>
 800c4d8:	6863      	ldr	r3, [r4, #4]
 800c4da:	1ad2      	subs	r2, r2, r3
 800c4dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c4de:	b10b      	cbz	r3, 800c4e4 <__sflush_r+0x44>
 800c4e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c4e2:	1ad2      	subs	r2, r2, r3
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c4e8:	6a21      	ldr	r1, [r4, #32]
 800c4ea:	4628      	mov	r0, r5
 800c4ec:	47b0      	blx	r6
 800c4ee:	1c43      	adds	r3, r0, #1
 800c4f0:	89a3      	ldrh	r3, [r4, #12]
 800c4f2:	d106      	bne.n	800c502 <__sflush_r+0x62>
 800c4f4:	6829      	ldr	r1, [r5, #0]
 800c4f6:	291d      	cmp	r1, #29
 800c4f8:	d82b      	bhi.n	800c552 <__sflush_r+0xb2>
 800c4fa:	4a2a      	ldr	r2, [pc, #168]	@ (800c5a4 <__sflush_r+0x104>)
 800c4fc:	40ca      	lsrs	r2, r1
 800c4fe:	07d6      	lsls	r6, r2, #31
 800c500:	d527      	bpl.n	800c552 <__sflush_r+0xb2>
 800c502:	2200      	movs	r2, #0
 800c504:	6062      	str	r2, [r4, #4]
 800c506:	04d9      	lsls	r1, r3, #19
 800c508:	6922      	ldr	r2, [r4, #16]
 800c50a:	6022      	str	r2, [r4, #0]
 800c50c:	d504      	bpl.n	800c518 <__sflush_r+0x78>
 800c50e:	1c42      	adds	r2, r0, #1
 800c510:	d101      	bne.n	800c516 <__sflush_r+0x76>
 800c512:	682b      	ldr	r3, [r5, #0]
 800c514:	b903      	cbnz	r3, 800c518 <__sflush_r+0x78>
 800c516:	6560      	str	r0, [r4, #84]	@ 0x54
 800c518:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c51a:	602f      	str	r7, [r5, #0]
 800c51c:	b1b9      	cbz	r1, 800c54e <__sflush_r+0xae>
 800c51e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c522:	4299      	cmp	r1, r3
 800c524:	d002      	beq.n	800c52c <__sflush_r+0x8c>
 800c526:	4628      	mov	r0, r5
 800c528:	f7fe fba2 	bl	800ac70 <_free_r>
 800c52c:	2300      	movs	r3, #0
 800c52e:	6363      	str	r3, [r4, #52]	@ 0x34
 800c530:	e00d      	b.n	800c54e <__sflush_r+0xae>
 800c532:	2301      	movs	r3, #1
 800c534:	4628      	mov	r0, r5
 800c536:	47b0      	blx	r6
 800c538:	4602      	mov	r2, r0
 800c53a:	1c50      	adds	r0, r2, #1
 800c53c:	d1c9      	bne.n	800c4d2 <__sflush_r+0x32>
 800c53e:	682b      	ldr	r3, [r5, #0]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d0c6      	beq.n	800c4d2 <__sflush_r+0x32>
 800c544:	2b1d      	cmp	r3, #29
 800c546:	d001      	beq.n	800c54c <__sflush_r+0xac>
 800c548:	2b16      	cmp	r3, #22
 800c54a:	d11e      	bne.n	800c58a <__sflush_r+0xea>
 800c54c:	602f      	str	r7, [r5, #0]
 800c54e:	2000      	movs	r0, #0
 800c550:	e022      	b.n	800c598 <__sflush_r+0xf8>
 800c552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c556:	b21b      	sxth	r3, r3
 800c558:	e01b      	b.n	800c592 <__sflush_r+0xf2>
 800c55a:	690f      	ldr	r7, [r1, #16]
 800c55c:	2f00      	cmp	r7, #0
 800c55e:	d0f6      	beq.n	800c54e <__sflush_r+0xae>
 800c560:	0793      	lsls	r3, r2, #30
 800c562:	680e      	ldr	r6, [r1, #0]
 800c564:	bf08      	it	eq
 800c566:	694b      	ldreq	r3, [r1, #20]
 800c568:	600f      	str	r7, [r1, #0]
 800c56a:	bf18      	it	ne
 800c56c:	2300      	movne	r3, #0
 800c56e:	eba6 0807 	sub.w	r8, r6, r7
 800c572:	608b      	str	r3, [r1, #8]
 800c574:	f1b8 0f00 	cmp.w	r8, #0
 800c578:	dde9      	ble.n	800c54e <__sflush_r+0xae>
 800c57a:	6a21      	ldr	r1, [r4, #32]
 800c57c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c57e:	4643      	mov	r3, r8
 800c580:	463a      	mov	r2, r7
 800c582:	4628      	mov	r0, r5
 800c584:	47b0      	blx	r6
 800c586:	2800      	cmp	r0, #0
 800c588:	dc08      	bgt.n	800c59c <__sflush_r+0xfc>
 800c58a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c58e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c592:	81a3      	strh	r3, [r4, #12]
 800c594:	f04f 30ff 	mov.w	r0, #4294967295
 800c598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c59c:	4407      	add	r7, r0
 800c59e:	eba8 0800 	sub.w	r8, r8, r0
 800c5a2:	e7e7      	b.n	800c574 <__sflush_r+0xd4>
 800c5a4:	20400001 	.word	0x20400001

0800c5a8 <_fflush_r>:
 800c5a8:	b538      	push	{r3, r4, r5, lr}
 800c5aa:	690b      	ldr	r3, [r1, #16]
 800c5ac:	4605      	mov	r5, r0
 800c5ae:	460c      	mov	r4, r1
 800c5b0:	b913      	cbnz	r3, 800c5b8 <_fflush_r+0x10>
 800c5b2:	2500      	movs	r5, #0
 800c5b4:	4628      	mov	r0, r5
 800c5b6:	bd38      	pop	{r3, r4, r5, pc}
 800c5b8:	b118      	cbz	r0, 800c5c2 <_fflush_r+0x1a>
 800c5ba:	6a03      	ldr	r3, [r0, #32]
 800c5bc:	b90b      	cbnz	r3, 800c5c2 <_fflush_r+0x1a>
 800c5be:	f7fd fa39 	bl	8009a34 <__sinit>
 800c5c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d0f3      	beq.n	800c5b2 <_fflush_r+0xa>
 800c5ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c5cc:	07d0      	lsls	r0, r2, #31
 800c5ce:	d404      	bmi.n	800c5da <_fflush_r+0x32>
 800c5d0:	0599      	lsls	r1, r3, #22
 800c5d2:	d402      	bmi.n	800c5da <_fflush_r+0x32>
 800c5d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5d6:	f7fd fcd0 	bl	8009f7a <__retarget_lock_acquire_recursive>
 800c5da:	4628      	mov	r0, r5
 800c5dc:	4621      	mov	r1, r4
 800c5de:	f7ff ff5f 	bl	800c4a0 <__sflush_r>
 800c5e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c5e4:	07da      	lsls	r2, r3, #31
 800c5e6:	4605      	mov	r5, r0
 800c5e8:	d4e4      	bmi.n	800c5b4 <_fflush_r+0xc>
 800c5ea:	89a3      	ldrh	r3, [r4, #12]
 800c5ec:	059b      	lsls	r3, r3, #22
 800c5ee:	d4e1      	bmi.n	800c5b4 <_fflush_r+0xc>
 800c5f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5f2:	f7fd fcc3 	bl	8009f7c <__retarget_lock_release_recursive>
 800c5f6:	e7dd      	b.n	800c5b4 <_fflush_r+0xc>

0800c5f8 <__swhatbuf_r>:
 800c5f8:	b570      	push	{r4, r5, r6, lr}
 800c5fa:	460c      	mov	r4, r1
 800c5fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c600:	2900      	cmp	r1, #0
 800c602:	b096      	sub	sp, #88	@ 0x58
 800c604:	4615      	mov	r5, r2
 800c606:	461e      	mov	r6, r3
 800c608:	da0d      	bge.n	800c626 <__swhatbuf_r+0x2e>
 800c60a:	89a3      	ldrh	r3, [r4, #12]
 800c60c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c610:	f04f 0100 	mov.w	r1, #0
 800c614:	bf14      	ite	ne
 800c616:	2340      	movne	r3, #64	@ 0x40
 800c618:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c61c:	2000      	movs	r0, #0
 800c61e:	6031      	str	r1, [r6, #0]
 800c620:	602b      	str	r3, [r5, #0]
 800c622:	b016      	add	sp, #88	@ 0x58
 800c624:	bd70      	pop	{r4, r5, r6, pc}
 800c626:	466a      	mov	r2, sp
 800c628:	f000 f862 	bl	800c6f0 <_fstat_r>
 800c62c:	2800      	cmp	r0, #0
 800c62e:	dbec      	blt.n	800c60a <__swhatbuf_r+0x12>
 800c630:	9901      	ldr	r1, [sp, #4]
 800c632:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c636:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c63a:	4259      	negs	r1, r3
 800c63c:	4159      	adcs	r1, r3
 800c63e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c642:	e7eb      	b.n	800c61c <__swhatbuf_r+0x24>

0800c644 <__smakebuf_r>:
 800c644:	898b      	ldrh	r3, [r1, #12]
 800c646:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c648:	079d      	lsls	r5, r3, #30
 800c64a:	4606      	mov	r6, r0
 800c64c:	460c      	mov	r4, r1
 800c64e:	d507      	bpl.n	800c660 <__smakebuf_r+0x1c>
 800c650:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c654:	6023      	str	r3, [r4, #0]
 800c656:	6123      	str	r3, [r4, #16]
 800c658:	2301      	movs	r3, #1
 800c65a:	6163      	str	r3, [r4, #20]
 800c65c:	b003      	add	sp, #12
 800c65e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c660:	ab01      	add	r3, sp, #4
 800c662:	466a      	mov	r2, sp
 800c664:	f7ff ffc8 	bl	800c5f8 <__swhatbuf_r>
 800c668:	9f00      	ldr	r7, [sp, #0]
 800c66a:	4605      	mov	r5, r0
 800c66c:	4639      	mov	r1, r7
 800c66e:	4630      	mov	r0, r6
 800c670:	f7fe feac 	bl	800b3cc <_malloc_r>
 800c674:	b948      	cbnz	r0, 800c68a <__smakebuf_r+0x46>
 800c676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c67a:	059a      	lsls	r2, r3, #22
 800c67c:	d4ee      	bmi.n	800c65c <__smakebuf_r+0x18>
 800c67e:	f023 0303 	bic.w	r3, r3, #3
 800c682:	f043 0302 	orr.w	r3, r3, #2
 800c686:	81a3      	strh	r3, [r4, #12]
 800c688:	e7e2      	b.n	800c650 <__smakebuf_r+0xc>
 800c68a:	89a3      	ldrh	r3, [r4, #12]
 800c68c:	6020      	str	r0, [r4, #0]
 800c68e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c692:	81a3      	strh	r3, [r4, #12]
 800c694:	9b01      	ldr	r3, [sp, #4]
 800c696:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c69a:	b15b      	cbz	r3, 800c6b4 <__smakebuf_r+0x70>
 800c69c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6a0:	4630      	mov	r0, r6
 800c6a2:	f000 f837 	bl	800c714 <_isatty_r>
 800c6a6:	b128      	cbz	r0, 800c6b4 <__smakebuf_r+0x70>
 800c6a8:	89a3      	ldrh	r3, [r4, #12]
 800c6aa:	f023 0303 	bic.w	r3, r3, #3
 800c6ae:	f043 0301 	orr.w	r3, r3, #1
 800c6b2:	81a3      	strh	r3, [r4, #12]
 800c6b4:	89a3      	ldrh	r3, [r4, #12]
 800c6b6:	431d      	orrs	r5, r3
 800c6b8:	81a5      	strh	r5, [r4, #12]
 800c6ba:	e7cf      	b.n	800c65c <__smakebuf_r+0x18>

0800c6bc <memmove>:
 800c6bc:	4288      	cmp	r0, r1
 800c6be:	b510      	push	{r4, lr}
 800c6c0:	eb01 0402 	add.w	r4, r1, r2
 800c6c4:	d902      	bls.n	800c6cc <memmove+0x10>
 800c6c6:	4284      	cmp	r4, r0
 800c6c8:	4623      	mov	r3, r4
 800c6ca:	d807      	bhi.n	800c6dc <memmove+0x20>
 800c6cc:	1e43      	subs	r3, r0, #1
 800c6ce:	42a1      	cmp	r1, r4
 800c6d0:	d008      	beq.n	800c6e4 <memmove+0x28>
 800c6d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6da:	e7f8      	b.n	800c6ce <memmove+0x12>
 800c6dc:	4402      	add	r2, r0
 800c6de:	4601      	mov	r1, r0
 800c6e0:	428a      	cmp	r2, r1
 800c6e2:	d100      	bne.n	800c6e6 <memmove+0x2a>
 800c6e4:	bd10      	pop	{r4, pc}
 800c6e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c6ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c6ee:	e7f7      	b.n	800c6e0 <memmove+0x24>

0800c6f0 <_fstat_r>:
 800c6f0:	b538      	push	{r3, r4, r5, lr}
 800c6f2:	4d07      	ldr	r5, [pc, #28]	@ (800c710 <_fstat_r+0x20>)
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	4604      	mov	r4, r0
 800c6f8:	4608      	mov	r0, r1
 800c6fa:	4611      	mov	r1, r2
 800c6fc:	602b      	str	r3, [r5, #0]
 800c6fe:	f7f6 fedf 	bl	80034c0 <_fstat>
 800c702:	1c43      	adds	r3, r0, #1
 800c704:	d102      	bne.n	800c70c <_fstat_r+0x1c>
 800c706:	682b      	ldr	r3, [r5, #0]
 800c708:	b103      	cbz	r3, 800c70c <_fstat_r+0x1c>
 800c70a:	6023      	str	r3, [r4, #0]
 800c70c:	bd38      	pop	{r3, r4, r5, pc}
 800c70e:	bf00      	nop
 800c710:	20000e94 	.word	0x20000e94

0800c714 <_isatty_r>:
 800c714:	b538      	push	{r3, r4, r5, lr}
 800c716:	4d06      	ldr	r5, [pc, #24]	@ (800c730 <_isatty_r+0x1c>)
 800c718:	2300      	movs	r3, #0
 800c71a:	4604      	mov	r4, r0
 800c71c:	4608      	mov	r0, r1
 800c71e:	602b      	str	r3, [r5, #0]
 800c720:	f7f6 fede 	bl	80034e0 <_isatty>
 800c724:	1c43      	adds	r3, r0, #1
 800c726:	d102      	bne.n	800c72e <_isatty_r+0x1a>
 800c728:	682b      	ldr	r3, [r5, #0]
 800c72a:	b103      	cbz	r3, 800c72e <_isatty_r+0x1a>
 800c72c:	6023      	str	r3, [r4, #0]
 800c72e:	bd38      	pop	{r3, r4, r5, pc}
 800c730:	20000e94 	.word	0x20000e94

0800c734 <_sbrk_r>:
 800c734:	b538      	push	{r3, r4, r5, lr}
 800c736:	4d06      	ldr	r5, [pc, #24]	@ (800c750 <_sbrk_r+0x1c>)
 800c738:	2300      	movs	r3, #0
 800c73a:	4604      	mov	r4, r0
 800c73c:	4608      	mov	r0, r1
 800c73e:	602b      	str	r3, [r5, #0]
 800c740:	f7f6 fee6 	bl	8003510 <_sbrk>
 800c744:	1c43      	adds	r3, r0, #1
 800c746:	d102      	bne.n	800c74e <_sbrk_r+0x1a>
 800c748:	682b      	ldr	r3, [r5, #0]
 800c74a:	b103      	cbz	r3, 800c74e <_sbrk_r+0x1a>
 800c74c:	6023      	str	r3, [r4, #0]
 800c74e:	bd38      	pop	{r3, r4, r5, pc}
 800c750:	20000e94 	.word	0x20000e94

0800c754 <__assert_func>:
 800c754:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c756:	4614      	mov	r4, r2
 800c758:	461a      	mov	r2, r3
 800c75a:	4b09      	ldr	r3, [pc, #36]	@ (800c780 <__assert_func+0x2c>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	4605      	mov	r5, r0
 800c760:	68d8      	ldr	r0, [r3, #12]
 800c762:	b14c      	cbz	r4, 800c778 <__assert_func+0x24>
 800c764:	4b07      	ldr	r3, [pc, #28]	@ (800c784 <__assert_func+0x30>)
 800c766:	9100      	str	r1, [sp, #0]
 800c768:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c76c:	4906      	ldr	r1, [pc, #24]	@ (800c788 <__assert_func+0x34>)
 800c76e:	462b      	mov	r3, r5
 800c770:	f000 f850 	bl	800c814 <fiprintf>
 800c774:	f000 f860 	bl	800c838 <abort>
 800c778:	4b04      	ldr	r3, [pc, #16]	@ (800c78c <__assert_func+0x38>)
 800c77a:	461c      	mov	r4, r3
 800c77c:	e7f3      	b.n	800c766 <__assert_func+0x12>
 800c77e:	bf00      	nop
 800c780:	20000184 	.word	0x20000184
 800c784:	0800ce7e 	.word	0x0800ce7e
 800c788:	0800ce8b 	.word	0x0800ce8b
 800c78c:	0800ceb9 	.word	0x0800ceb9

0800c790 <_calloc_r>:
 800c790:	b570      	push	{r4, r5, r6, lr}
 800c792:	fba1 5402 	umull	r5, r4, r1, r2
 800c796:	b934      	cbnz	r4, 800c7a6 <_calloc_r+0x16>
 800c798:	4629      	mov	r1, r5
 800c79a:	f7fe fe17 	bl	800b3cc <_malloc_r>
 800c79e:	4606      	mov	r6, r0
 800c7a0:	b928      	cbnz	r0, 800c7ae <_calloc_r+0x1e>
 800c7a2:	4630      	mov	r0, r6
 800c7a4:	bd70      	pop	{r4, r5, r6, pc}
 800c7a6:	220c      	movs	r2, #12
 800c7a8:	6002      	str	r2, [r0, #0]
 800c7aa:	2600      	movs	r6, #0
 800c7ac:	e7f9      	b.n	800c7a2 <_calloc_r+0x12>
 800c7ae:	462a      	mov	r2, r5
 800c7b0:	4621      	mov	r1, r4
 800c7b2:	f7fd fb1b 	bl	8009dec <memset>
 800c7b6:	e7f4      	b.n	800c7a2 <_calloc_r+0x12>

0800c7b8 <_realloc_r>:
 800c7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7bc:	4607      	mov	r7, r0
 800c7be:	4614      	mov	r4, r2
 800c7c0:	460d      	mov	r5, r1
 800c7c2:	b921      	cbnz	r1, 800c7ce <_realloc_r+0x16>
 800c7c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7c8:	4611      	mov	r1, r2
 800c7ca:	f7fe bdff 	b.w	800b3cc <_malloc_r>
 800c7ce:	b92a      	cbnz	r2, 800c7dc <_realloc_r+0x24>
 800c7d0:	f7fe fa4e 	bl	800ac70 <_free_r>
 800c7d4:	4625      	mov	r5, r4
 800c7d6:	4628      	mov	r0, r5
 800c7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7dc:	f000 f833 	bl	800c846 <_malloc_usable_size_r>
 800c7e0:	4284      	cmp	r4, r0
 800c7e2:	4606      	mov	r6, r0
 800c7e4:	d802      	bhi.n	800c7ec <_realloc_r+0x34>
 800c7e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c7ea:	d8f4      	bhi.n	800c7d6 <_realloc_r+0x1e>
 800c7ec:	4621      	mov	r1, r4
 800c7ee:	4638      	mov	r0, r7
 800c7f0:	f7fe fdec 	bl	800b3cc <_malloc_r>
 800c7f4:	4680      	mov	r8, r0
 800c7f6:	b908      	cbnz	r0, 800c7fc <_realloc_r+0x44>
 800c7f8:	4645      	mov	r5, r8
 800c7fa:	e7ec      	b.n	800c7d6 <_realloc_r+0x1e>
 800c7fc:	42b4      	cmp	r4, r6
 800c7fe:	4622      	mov	r2, r4
 800c800:	4629      	mov	r1, r5
 800c802:	bf28      	it	cs
 800c804:	4632      	movcs	r2, r6
 800c806:	f7fd fbba 	bl	8009f7e <memcpy>
 800c80a:	4629      	mov	r1, r5
 800c80c:	4638      	mov	r0, r7
 800c80e:	f7fe fa2f 	bl	800ac70 <_free_r>
 800c812:	e7f1      	b.n	800c7f8 <_realloc_r+0x40>

0800c814 <fiprintf>:
 800c814:	b40e      	push	{r1, r2, r3}
 800c816:	b503      	push	{r0, r1, lr}
 800c818:	4601      	mov	r1, r0
 800c81a:	ab03      	add	r3, sp, #12
 800c81c:	4805      	ldr	r0, [pc, #20]	@ (800c834 <fiprintf+0x20>)
 800c81e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c822:	6800      	ldr	r0, [r0, #0]
 800c824:	9301      	str	r3, [sp, #4]
 800c826:	f7ff fd23 	bl	800c270 <_vfiprintf_r>
 800c82a:	b002      	add	sp, #8
 800c82c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c830:	b003      	add	sp, #12
 800c832:	4770      	bx	lr
 800c834:	20000184 	.word	0x20000184

0800c838 <abort>:
 800c838:	b508      	push	{r3, lr}
 800c83a:	2006      	movs	r0, #6
 800c83c:	f000 f834 	bl	800c8a8 <raise>
 800c840:	2001      	movs	r0, #1
 800c842:	f7f6 fded 	bl	8003420 <_exit>

0800c846 <_malloc_usable_size_r>:
 800c846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c84a:	1f18      	subs	r0, r3, #4
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	bfbc      	itt	lt
 800c850:	580b      	ldrlt	r3, [r1, r0]
 800c852:	18c0      	addlt	r0, r0, r3
 800c854:	4770      	bx	lr

0800c856 <_raise_r>:
 800c856:	291f      	cmp	r1, #31
 800c858:	b538      	push	{r3, r4, r5, lr}
 800c85a:	4605      	mov	r5, r0
 800c85c:	460c      	mov	r4, r1
 800c85e:	d904      	bls.n	800c86a <_raise_r+0x14>
 800c860:	2316      	movs	r3, #22
 800c862:	6003      	str	r3, [r0, #0]
 800c864:	f04f 30ff 	mov.w	r0, #4294967295
 800c868:	bd38      	pop	{r3, r4, r5, pc}
 800c86a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c86c:	b112      	cbz	r2, 800c874 <_raise_r+0x1e>
 800c86e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c872:	b94b      	cbnz	r3, 800c888 <_raise_r+0x32>
 800c874:	4628      	mov	r0, r5
 800c876:	f000 f831 	bl	800c8dc <_getpid_r>
 800c87a:	4622      	mov	r2, r4
 800c87c:	4601      	mov	r1, r0
 800c87e:	4628      	mov	r0, r5
 800c880:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c884:	f000 b818 	b.w	800c8b8 <_kill_r>
 800c888:	2b01      	cmp	r3, #1
 800c88a:	d00a      	beq.n	800c8a2 <_raise_r+0x4c>
 800c88c:	1c59      	adds	r1, r3, #1
 800c88e:	d103      	bne.n	800c898 <_raise_r+0x42>
 800c890:	2316      	movs	r3, #22
 800c892:	6003      	str	r3, [r0, #0]
 800c894:	2001      	movs	r0, #1
 800c896:	e7e7      	b.n	800c868 <_raise_r+0x12>
 800c898:	2100      	movs	r1, #0
 800c89a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c89e:	4620      	mov	r0, r4
 800c8a0:	4798      	blx	r3
 800c8a2:	2000      	movs	r0, #0
 800c8a4:	e7e0      	b.n	800c868 <_raise_r+0x12>
	...

0800c8a8 <raise>:
 800c8a8:	4b02      	ldr	r3, [pc, #8]	@ (800c8b4 <raise+0xc>)
 800c8aa:	4601      	mov	r1, r0
 800c8ac:	6818      	ldr	r0, [r3, #0]
 800c8ae:	f7ff bfd2 	b.w	800c856 <_raise_r>
 800c8b2:	bf00      	nop
 800c8b4:	20000184 	.word	0x20000184

0800c8b8 <_kill_r>:
 800c8b8:	b538      	push	{r3, r4, r5, lr}
 800c8ba:	4d07      	ldr	r5, [pc, #28]	@ (800c8d8 <_kill_r+0x20>)
 800c8bc:	2300      	movs	r3, #0
 800c8be:	4604      	mov	r4, r0
 800c8c0:	4608      	mov	r0, r1
 800c8c2:	4611      	mov	r1, r2
 800c8c4:	602b      	str	r3, [r5, #0]
 800c8c6:	f7f6 fd9b 	bl	8003400 <_kill>
 800c8ca:	1c43      	adds	r3, r0, #1
 800c8cc:	d102      	bne.n	800c8d4 <_kill_r+0x1c>
 800c8ce:	682b      	ldr	r3, [r5, #0]
 800c8d0:	b103      	cbz	r3, 800c8d4 <_kill_r+0x1c>
 800c8d2:	6023      	str	r3, [r4, #0]
 800c8d4:	bd38      	pop	{r3, r4, r5, pc}
 800c8d6:	bf00      	nop
 800c8d8:	20000e94 	.word	0x20000e94

0800c8dc <_getpid_r>:
 800c8dc:	f7f6 bd88 	b.w	80033f0 <_getpid>

0800c8e0 <_init>:
 800c8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8e2:	bf00      	nop
 800c8e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8e6:	bc08      	pop	{r3}
 800c8e8:	469e      	mov	lr, r3
 800c8ea:	4770      	bx	lr

0800c8ec <_fini>:
 800c8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ee:	bf00      	nop
 800c8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8f2:	bc08      	pop	{r3}
 800c8f4:	469e      	mov	lr, r3
 800c8f6:	4770      	bx	lr
