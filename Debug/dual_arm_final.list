
dual_arm_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0e0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  0800d2b0  0800d2b0  0000e2b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da68  0800da68  0000f1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800da68  0800da68  0000ea68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da70  0800da70  0000f1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da70  0800da70  0000ea70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800da74  0800da74  0000ea74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800da78  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000da8  200001d4  0800dc4c  0000f1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f7c  0800dc4c  0000ff7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a91  00000000  00000000  0000f204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038f2  00000000  00000000  00023c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  00027588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dcb  00000000  00000000  00028748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002626e  00000000  00000000  00029513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001910d  00000000  00000000  0004f781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e156a  00000000  00000000  0006888e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00149df8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e64  00000000  00000000  00149e3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0014fca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d298 	.word	0x0800d298

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800d298 	.word	0x0800d298

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001066:	463b      	mov	r3, r7
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001072:	4b21      	ldr	r3, [pc, #132]	@ (80010f8 <MX_ADC1_Init+0x98>)
 8001074:	4a21      	ldr	r2, [pc, #132]	@ (80010fc <MX_ADC1_Init+0x9c>)
 8001076:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001078:	4b1f      	ldr	r3, [pc, #124]	@ (80010f8 <MX_ADC1_Init+0x98>)
 800107a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800107e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001080:	4b1d      	ldr	r3, [pc, #116]	@ (80010f8 <MX_ADC1_Init+0x98>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001086:	4b1c      	ldr	r3, [pc, #112]	@ (80010f8 <MX_ADC1_Init+0x98>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800108c:	4b1a      	ldr	r3, [pc, #104]	@ (80010f8 <MX_ADC1_Init+0x98>)
 800108e:	2200      	movs	r2, #0
 8001090:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001092:	4b19      	ldr	r3, [pc, #100]	@ (80010f8 <MX_ADC1_Init+0x98>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800109a:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <MX_ADC1_Init+0x98>)
 800109c:	2200      	movs	r2, #0
 800109e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a0:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010a2:	4a17      	ldr	r2, [pc, #92]	@ (8001100 <MX_ADC1_Init+0xa0>)
 80010a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a6:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010ac:	4b12      	ldr	r3, [pc, #72]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b2:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ba:	4b0f      	ldr	r3, [pc, #60]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010bc:	2201      	movs	r2, #1
 80010be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c0:	480d      	ldr	r0, [pc, #52]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010c2:	f003 fa8f 	bl	80045e4 <HAL_ADC_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010cc:	f001 fa70 	bl	80025b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010d0:	230a      	movs	r3, #10
 80010d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010d4:	2301      	movs	r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010dc:	463b      	mov	r3, r7
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010e2:	f003 fac3 	bl	800466c <HAL_ADC_ConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010ec:	f001 fa60 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	200001f0 	.word	0x200001f0
 80010fc:	40012000 	.word	0x40012000
 8001100:	0f000001 	.word	0x0f000001

08001104 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800110a:	463b      	mov	r3, r7
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001116:	4b21      	ldr	r3, [pc, #132]	@ (800119c <MX_ADC2_Init+0x98>)
 8001118:	4a21      	ldr	r2, [pc, #132]	@ (80011a0 <MX_ADC2_Init+0x9c>)
 800111a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800111c:	4b1f      	ldr	r3, [pc, #124]	@ (800119c <MX_ADC2_Init+0x98>)
 800111e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001122:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001124:	4b1d      	ldr	r3, [pc, #116]	@ (800119c <MX_ADC2_Init+0x98>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800112a:	4b1c      	ldr	r3, [pc, #112]	@ (800119c <MX_ADC2_Init+0x98>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001130:	4b1a      	ldr	r3, [pc, #104]	@ (800119c <MX_ADC2_Init+0x98>)
 8001132:	2200      	movs	r2, #0
 8001134:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001136:	4b19      	ldr	r3, [pc, #100]	@ (800119c <MX_ADC2_Init+0x98>)
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800113e:	4b17      	ldr	r3, [pc, #92]	@ (800119c <MX_ADC2_Init+0x98>)
 8001140:	2200      	movs	r2, #0
 8001142:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001144:	4b15      	ldr	r3, [pc, #84]	@ (800119c <MX_ADC2_Init+0x98>)
 8001146:	4a17      	ldr	r2, [pc, #92]	@ (80011a4 <MX_ADC2_Init+0xa0>)
 8001148:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800114a:	4b14      	ldr	r3, [pc, #80]	@ (800119c <MX_ADC2_Init+0x98>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001150:	4b12      	ldr	r3, [pc, #72]	@ (800119c <MX_ADC2_Init+0x98>)
 8001152:	2201      	movs	r2, #1
 8001154:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001156:	4b11      	ldr	r3, [pc, #68]	@ (800119c <MX_ADC2_Init+0x98>)
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800115e:	4b0f      	ldr	r3, [pc, #60]	@ (800119c <MX_ADC2_Init+0x98>)
 8001160:	2201      	movs	r2, #1
 8001162:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001164:	480d      	ldr	r0, [pc, #52]	@ (800119c <MX_ADC2_Init+0x98>)
 8001166:	f003 fa3d 	bl	80045e4 <HAL_ADC_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001170:	f001 fa1e 	bl	80025b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001174:	230b      	movs	r3, #11
 8001176:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001180:	463b      	mov	r3, r7
 8001182:	4619      	mov	r1, r3
 8001184:	4805      	ldr	r0, [pc, #20]	@ (800119c <MX_ADC2_Init+0x98>)
 8001186:	f003 fa71 	bl	800466c <HAL_ADC_ConfigChannel>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001190:	f001 fa0e 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000238 	.word	0x20000238
 80011a0:	40012100 	.word	0x40012100
 80011a4:	0f000001 	.word	0x0f000001

080011a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08c      	sub	sp, #48	@ 0x30
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a2e      	ldr	r2, [pc, #184]	@ (8001280 <HAL_ADC_MspInit+0xd8>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d128      	bne.n	800121c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
 80011ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d2:	4a2c      	ldr	r2, [pc, #176]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 80011d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011da:	4b2a      	ldr	r3, [pc, #168]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011e2:	61bb      	str	r3, [r7, #24]
 80011e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	4b26      	ldr	r3, [pc, #152]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a25      	ldr	r2, [pc, #148]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 80011f0:	f043 0304 	orr.w	r3, r3, #4
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b23      	ldr	r3, [pc, #140]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0304 	and.w	r3, r3, #4
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001202:	2301      	movs	r3, #1
 8001204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001206:	2303      	movs	r3, #3
 8001208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4619      	mov	r1, r3
 8001214:	481c      	ldr	r0, [pc, #112]	@ (8001288 <HAL_ADC_MspInit+0xe0>)
 8001216:	f004 f96b 	bl	80054f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800121a:	e02c      	b.n	8001276 <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a1a      	ldr	r2, [pc, #104]	@ (800128c <HAL_ADC_MspInit+0xe4>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d127      	bne.n	8001276 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122e:	4a15      	ldr	r2, [pc, #84]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 8001230:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001234:	6453      	str	r3, [r2, #68]	@ 0x44
 8001236:	4b13      	ldr	r3, [pc, #76]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	4a0e      	ldr	r2, [pc, #56]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	6313      	str	r3, [r2, #48]	@ 0x30
 8001252:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <HAL_ADC_MspInit+0xdc>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800125e:	2302      	movs	r3, #2
 8001260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001262:	2303      	movs	r3, #3
 8001264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126a:	f107 031c 	add.w	r3, r7, #28
 800126e:	4619      	mov	r1, r3
 8001270:	4805      	ldr	r0, [pc, #20]	@ (8001288 <HAL_ADC_MspInit+0xe0>)
 8001272:	f004 f93d 	bl	80054f0 <HAL_GPIO_Init>
}
 8001276:	bf00      	nop
 8001278:	3730      	adds	r7, #48	@ 0x30
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40012000 	.word	0x40012000
 8001284:	40023800 	.word	0x40023800
 8001288:	40020800 	.word	0x40020800
 800128c:	40012100 	.word	0x40012100

08001290 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	4b1b      	ldr	r3, [pc, #108]	@ (8001308 <MX_DMA_Init+0x78>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	4a1a      	ldr	r2, [pc, #104]	@ (8001308 <MX_DMA_Init+0x78>)
 80012a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a6:	4b18      	ldr	r3, [pc, #96]	@ (8001308 <MX_DMA_Init+0x78>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <MX_DMA_Init+0x78>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	4a13      	ldr	r2, [pc, #76]	@ (8001308 <MX_DMA_Init+0x78>)
 80012bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c2:	4b11      	ldr	r3, [pc, #68]	@ (8001308 <MX_DMA_Init+0x78>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	200b      	movs	r0, #11
 80012d4:	f003 fcd3 	bl	8004c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80012d8:	200b      	movs	r0, #11
 80012da:	f003 fcec 	bl	8004cb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	200d      	movs	r0, #13
 80012e4:	f003 fccb 	bl	8004c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80012e8:	200d      	movs	r0, #13
 80012ea:	f003 fce4 	bl	8004cb6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	2039      	movs	r0, #57	@ 0x39
 80012f4:	f003 fcc3 	bl	8004c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80012f8:	2039      	movs	r0, #57	@ 0x39
 80012fa:	f003 fcdc 	bl	8004cb6 <HAL_NVIC_EnableIRQ>

}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800

0800130c <DWT_Init>:

#include "dwt_util.h"
#include "stm32f4xx_hal.h"

void DWT_Init(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8001310:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <DWT_Init+0x38>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d105      	bne.n	8001328 <DWT_Init+0x1c>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800131c:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <DWT_Init+0x38>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	4a08      	ldr	r2, [pc, #32]	@ (8001344 <DWT_Init+0x38>)
 8001322:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001326:	60d3      	str	r3, [r2, #12]
    }
    DWT->CYCCNT = 0;
 8001328:	4b07      	ldr	r3, [pc, #28]	@ (8001348 <DWT_Init+0x3c>)
 800132a:	2200      	movs	r2, #0
 800132c:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <DWT_Init+0x3c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a05      	ldr	r2, [pc, #20]	@ (8001348 <DWT_Init+0x3c>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6013      	str	r3, [r2, #0]
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000edf0 	.word	0xe000edf0
 8001348:	e0001000 	.word	0xe0001000

0800134c <bus_for_id>:
DynamixelBus_t Dynamixel_Handle_R;
DynamixelBus_t Dynamixel_Handle_L;

static DynamixelBus_t* g_active_bus = NULL;

static inline DynamixelBus_t* bus_for_id(uint8_t id){
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
    if (id >= DXL_RIGHT_ID_MIN && id <= DXL_RIGHT_ID_MAX) return &Dynamixel_Handle_R;
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d004      	beq.n	8001366 <bus_for_id+0x1a>
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	2b07      	cmp	r3, #7
 8001360:	d801      	bhi.n	8001366 <bus_for_id+0x1a>
 8001362:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <bus_for_id+0x38>)
 8001364:	e008      	b.n	8001378 <bus_for_id+0x2c>
    if (id >= DXL_LEFT_ID_MIN  && id <= DXL_LEFT_ID_MAX)  return &Dynamixel_Handle_L;
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	2b07      	cmp	r3, #7
 800136a:	d904      	bls.n	8001376 <bus_for_id+0x2a>
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	2b0e      	cmp	r3, #14
 8001370:	d801      	bhi.n	8001376 <bus_for_id+0x2a>
 8001372:	4b05      	ldr	r3, [pc, #20]	@ (8001388 <bus_for_id+0x3c>)
 8001374:	e000      	b.n	8001378 <bus_for_id+0x2c>
    return &Dynamixel_Handle_R;
 8001376:	4b03      	ldr	r3, [pc, #12]	@ (8001384 <bus_for_id+0x38>)
}
 8001378:	4618      	mov	r0, r3
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	20000280 	.word	0x20000280
 8001388:	2000028c 	.word	0x2000028c

0800138c <bus_begin>:

static void bus_begin(DynamixelBus_t* b, UART_HandleTypeDef* uart, GPIO_TypeDef* dir_port, uint16_t pin){
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
 8001398:	807b      	strh	r3, [r7, #2]
    b->huart   = uart;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	68ba      	ldr	r2, [r7, #8]
 800139e:	601a      	str	r2, [r3, #0]
    b->dir_port= dir_port;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	605a      	str	r2, [r3, #4]
    b->dir_pin = pin;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	887a      	ldrh	r2, [r7, #2]
 80013aa:	811a      	strh	r2, [r3, #8]
    b->dma_rx_complete_flag = false;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2200      	movs	r2, #0
 80013b0:	729a      	strb	r2, [r3, #10]
    HAL_GPIO_WritePin(dir_port, pin, GPIO_PIN_RESET);
 80013b2:	887b      	ldrh	r3, [r7, #2]
 80013b4:	2200      	movs	r2, #0
 80013b6:	4619      	mov	r1, r3
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f004 fa2d 	bl	8005818 <HAL_GPIO_WritePin>
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <Dynamixel_begin_right>:

void Dynamixel_begin_right(UART_HandleTypeDef* uart, GPIO_TypeDef* dir_port, uint16_t pin){ bus_begin(&Dynamixel_Handle_R, uart, dir_port, pin); }
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	4613      	mov	r3, r2
 80013d4:	80fb      	strh	r3, [r7, #6]
 80013d6:	88fb      	ldrh	r3, [r7, #6]
 80013d8:	68ba      	ldr	r2, [r7, #8]
 80013da:	68f9      	ldr	r1, [r7, #12]
 80013dc:	4803      	ldr	r0, [pc, #12]	@ (80013ec <Dynamixel_begin_right+0x24>)
 80013de:	f7ff ffd5 	bl	800138c <bus_begin>
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000280 	.word	0x20000280

080013f0 <Dynamixel_begin_left>:
void Dynamixel_begin_left (UART_HandleTypeDef* uart, GPIO_TypeDef* dir_port, uint16_t pin){ bus_begin(&Dynamixel_Handle_L, uart, dir_port, pin); }
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	4613      	mov	r3, r2
 80013fc:	80fb      	strh	r3, [r7, #6]
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	68ba      	ldr	r2, [r7, #8]
 8001402:	68f9      	ldr	r1, [r7, #12]
 8001404:	4803      	ldr	r0, [pc, #12]	@ (8001414 <Dynamixel_begin_left+0x24>)
 8001406:	f7ff ffc1 	bl	800138c <bus_begin>
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2000028c 	.word	0x2000028c

08001418 <Dynamixel_onDmaRxComplete>:

void Dynamixel_onDmaRxComplete(UART_HandleTypeDef *huart){
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
    if (Dynamixel_Handle_R.huart && huart->Instance == Dynamixel_Handle_R.huart->Instance) {
 8001420:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <Dynamixel_onDmaRxComplete+0x50>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00a      	beq.n	800143e <Dynamixel_onDmaRxComplete+0x26>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b0e      	ldr	r3, [pc, #56]	@ (8001468 <Dynamixel_onDmaRxComplete+0x50>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d103      	bne.n	800143e <Dynamixel_onDmaRxComplete+0x26>
        Dynamixel_Handle_R.dma_rx_complete_flag = true;
 8001436:	4b0c      	ldr	r3, [pc, #48]	@ (8001468 <Dynamixel_onDmaRxComplete+0x50>)
 8001438:	2201      	movs	r2, #1
 800143a:	729a      	strb	r2, [r3, #10]
    } else if (Dynamixel_Handle_L.huart && huart->Instance == Dynamixel_Handle_L.huart->Instance) {
        Dynamixel_Handle_L.dma_rx_complete_flag = true;
    }
}
 800143c:	e00d      	b.n	800145a <Dynamixel_onDmaRxComplete+0x42>
    } else if (Dynamixel_Handle_L.huart && huart->Instance == Dynamixel_Handle_L.huart->Instance) {
 800143e:	4b0b      	ldr	r3, [pc, #44]	@ (800146c <Dynamixel_onDmaRxComplete+0x54>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <Dynamixel_onDmaRxComplete+0x42>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	4b08      	ldr	r3, [pc, #32]	@ (800146c <Dynamixel_onDmaRxComplete+0x54>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	429a      	cmp	r2, r3
 8001452:	d102      	bne.n	800145a <Dynamixel_onDmaRxComplete+0x42>
        Dynamixel_Handle_L.dma_rx_complete_flag = true;
 8001454:	4b05      	ldr	r3, [pc, #20]	@ (800146c <Dynamixel_onDmaRxComplete+0x54>)
 8001456:	2201      	movs	r2, #1
 8001458:	729a      	strb	r2, [r3, #10]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000280 	.word	0x20000280
 800146c:	2000028c 	.word	0x2000028c

08001470 <setDirPin>:

static inline void setDirPin(DynamixelBus_t* b, bool is_tx){
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(b->dir_port, b->dir_pin, is_tx ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6858      	ldr	r0, [r3, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	891b      	ldrh	r3, [r3, #8]
 8001484:	78fa      	ldrb	r2, [r7, #3]
 8001486:	4619      	mov	r1, r3
 8001488:	f004 f9c6 	bl	8005818 <HAL_GPIO_WritePin>
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <Dynamixel_transmitPacket>:

void Dynamixel_transmitPacket(uint8_t id,
                              uint8_t instruction,
                              const uint8_t* params,
                              uint16_t param_len)
{
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b0d1      	sub	sp, #324	@ 0x144
 8001498:	af00      	add	r7, sp, #0
 800149a:	4604      	mov	r4, r0
 800149c:	4608      	mov	r0, r1
 800149e:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80014a2:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 80014a6:	600a      	str	r2, [r1, #0]
 80014a8:	4619      	mov	r1, r3
 80014aa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80014ae:	f2a3 1339 	subw	r3, r3, #313	@ 0x139
 80014b2:	4622      	mov	r2, r4
 80014b4:	701a      	strb	r2, [r3, #0]
 80014b6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80014ba:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 80014be:	4602      	mov	r2, r0
 80014c0:	701a      	strb	r2, [r3, #0]
 80014c2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80014c6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80014ca:	460a      	mov	r2, r1
 80014cc:	801a      	strh	r2, [r3, #0]
    uint8_t packet[300];
    if (param_len > (sizeof(packet) - 14)) {
 80014ce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80014d2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	f5b3 7f8f 	cmp.w	r3, #286	@ 0x11e
 80014dc:	f200 80ce 	bhi.w	800167c <Dynamixel_transmitPacket+0x1e8>
        return;
    }
    if (id != 0xFE) {
 80014e0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80014e4:	f2a3 1339 	subw	r3, r3, #313	@ 0x139
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2bfe      	cmp	r3, #254	@ 0xfe
 80014ec:	d00b      	beq.n	8001506 <Dynamixel_transmitPacket+0x72>
        g_active_bus = bus_for_id(id);
 80014ee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80014f2:	f2a3 1339 	subw	r3, r3, #313	@ 0x139
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff27 	bl	800134c <bus_for_id>
 80014fe:	4603      	mov	r3, r0
 8001500:	4a61      	ldr	r2, [pc, #388]	@ (8001688 <Dynamixel_transmitPacket+0x1f4>)
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	e006      	b.n	8001514 <Dynamixel_transmitPacket+0x80>
    } else if (g_active_bus == NULL) {
 8001506:	4b60      	ldr	r3, [pc, #384]	@ (8001688 <Dynamixel_transmitPacket+0x1f4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d102      	bne.n	8001514 <Dynamixel_transmitPacket+0x80>
        g_active_bus = &Dynamixel_Handle_R;
 800150e:	4b5e      	ldr	r3, [pc, #376]	@ (8001688 <Dynamixel_transmitPacket+0x1f4>)
 8001510:	4a5e      	ldr	r2, [pc, #376]	@ (800168c <Dynamixel_transmitPacket+0x1f8>)
 8001512:	601a      	str	r2, [r3, #0]
    }
    const uint16_t length_field = (uint16_t)(param_len + 3);
 8001514:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001518:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	3303      	adds	r3, #3
 8001520:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
    uint16_t total_len = (uint16_t)(param_len + 10);
 8001524:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001528:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	330a      	adds	r3, #10
 8001530:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
    packet[0] = 0xFF;
 8001534:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001538:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800153c:	22ff      	movs	r2, #255	@ 0xff
 800153e:	701a      	strb	r2, [r3, #0]
    packet[1] = 0xFF;
 8001540:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001544:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001548:	22ff      	movs	r2, #255	@ 0xff
 800154a:	705a      	strb	r2, [r3, #1]
    packet[2] = 0xFD;
 800154c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001550:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001554:	22fd      	movs	r2, #253	@ 0xfd
 8001556:	709a      	strb	r2, [r3, #2]
    packet[3] = 0x00;
 8001558:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800155c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001560:	2200      	movs	r2, #0
 8001562:	70da      	strb	r2, [r3, #3]
    packet[4] = id;
 8001564:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001568:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800156c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8001570:	f2a2 1239 	subw	r2, r2, #313	@ 0x139
 8001574:	7812      	ldrb	r2, [r2, #0]
 8001576:	711a      	strb	r2, [r3, #4]
    packet[5] = (uint8_t)(length_field & 0xFF);
 8001578:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 800157c:	b2da      	uxtb	r2, r3
 800157e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001582:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001586:	715a      	strb	r2, [r3, #5]
    packet[6] = (uint8_t)((length_field >> 8) & 0xFF);
 8001588:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 800158c:	0a1b      	lsrs	r3, r3, #8
 800158e:	b29b      	uxth	r3, r3
 8001590:	b2da      	uxtb	r2, r3
 8001592:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001596:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800159a:	719a      	strb	r2, [r3, #6]
    packet[7] = instruction;
 800159c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80015a0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80015a4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80015a8:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 80015ac:	7812      	ldrb	r2, [r2, #0]
 80015ae:	71da      	strb	r2, [r3, #7]
    if (param_len > 0 && params) {
 80015b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80015b4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d017      	beq.n	80015ee <Dynamixel_transmitPacket+0x15a>
 80015be:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80015c2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d010      	beq.n	80015ee <Dynamixel_transmitPacket+0x15a>
        memcpy(&packet[8], params, param_len);
 80015cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80015d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80015d4:	8819      	ldrh	r1, [r3, #0]
 80015d6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80015da:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80015de:	f107 020c 	add.w	r2, r7, #12
 80015e2:	f102 0008 	add.w	r0, r2, #8
 80015e6:	460a      	mov	r2, r1
 80015e8:	6819      	ldr	r1, [r3, #0]
 80015ea:	f009 f9a4 	bl	800a936 <memcpy>
    }
    uint16_t crc = update_crc(0, packet, (uint16_t)(total_len - 2));
 80015ee:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80015f2:	3b02      	subs	r3, #2
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	f107 030c 	add.w	r3, r7, #12
 80015fa:	4619      	mov	r1, r3
 80015fc:	2000      	movs	r0, #0
 80015fe:	f000 fc27 	bl	8001e50 <update_crc>
 8001602:	4603      	mov	r3, r0
 8001604:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
    packet[total_len - 2] = (uint8_t)(crc & 0xFF);
 8001608:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800160c:	3b02      	subs	r3, #2
 800160e:	f8b7 213a 	ldrh.w	r2, [r7, #314]	@ 0x13a
 8001612:	b2d1      	uxtb	r1, r2
 8001614:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8001618:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800161c:	54d1      	strb	r1, [r2, r3]
    packet[total_len - 1] = (uint8_t)((crc >> 8) & 0xFF);
 800161e:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 8001622:	0a1b      	lsrs	r3, r3, #8
 8001624:	b29a      	uxth	r2, r3
 8001626:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800162a:	3b01      	subs	r3, #1
 800162c:	b2d1      	uxtb	r1, r2
 800162e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8001632:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8001636:	54d1      	strb	r1, [r2, r3]
    setDirPin(g_active_bus, true);
 8001638:	4b13      	ldr	r3, [pc, #76]	@ (8001688 <Dynamixel_transmitPacket+0x1f4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2101      	movs	r1, #1
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ff16 	bl	8001470 <setDirPin>
    HAL_UART_Transmit(g_active_bus->huart, packet, total_len, HAL_MAX_DELAY);
 8001644:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <Dynamixel_transmitPacket+0x1f4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6818      	ldr	r0, [r3, #0]
 800164a:	f8b7 213c 	ldrh.w	r2, [r7, #316]	@ 0x13c
 800164e:	f107 010c 	add.w	r1, r7, #12
 8001652:	f04f 33ff 	mov.w	r3, #4294967295
 8001656:	f005 fe0d 	bl	8007274 <HAL_UART_Transmit>
    while (__HAL_UART_GET_FLAG(g_active_bus->huart, UART_FLAG_TC) == RESET) {
 800165a:	bf00      	nop
 800165c:	4b0a      	ldr	r3, [pc, #40]	@ (8001688 <Dynamixel_transmitPacket+0x1f4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800166a:	2b40      	cmp	r3, #64	@ 0x40
 800166c:	d1f6      	bne.n	800165c <Dynamixel_transmitPacket+0x1c8>
    }
    setDirPin(g_active_bus, false);
 800166e:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <Dynamixel_transmitPacket+0x1f4>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fefb 	bl	8001470 <setDirPin>
 800167a:	e000      	b.n	800167e <Dynamixel_transmitPacket+0x1ea>
        return;
 800167c:	bf00      	nop

}
 800167e:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8001682:	46bd      	mov	sp, r7
 8001684:	bd90      	pop	{r4, r7, pc}
 8001686:	bf00      	nop
 8001688:	20000298 	.word	0x20000298
 800168c:	20000280 	.word	0x20000280

08001690 <Dynamixel_receiveStatusPacket>:

bool Dynamixel_receiveStatusPacket(uint8_t* buf, uint16_t size, uint32_t tmo){
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	460b      	mov	r3, r1
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	817b      	strh	r3, [r7, #10]
    if (!g_active_bus) return false;
 800169e:	4b34      	ldr	r3, [pc, #208]	@ (8001770 <Dynamixel_receiveStatusPacket+0xe0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <Dynamixel_receiveStatusPacket+0x1a>
 80016a6:	2300      	movs	r3, #0
 80016a8:	e05e      	b.n	8001768 <Dynamixel_receiveStatusPacket+0xd8>
    g_active_bus->dma_rx_complete_flag = false;
 80016aa:	4b31      	ldr	r3, [pc, #196]	@ (8001770 <Dynamixel_receiveStatusPacket+0xe0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2200      	movs	r2, #0
 80016b0:	729a      	strb	r2, [r3, #10]

    if (HAL_UART_GetState(g_active_bus->huart) != HAL_UART_STATE_READY)
 80016b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001770 <Dynamixel_receiveStatusPacket+0xe0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f006 faa3 	bl	8007c04 <HAL_UART_GetState>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b20      	cmp	r3, #32
 80016c2:	d005      	beq.n	80016d0 <Dynamixel_receiveStatusPacket+0x40>
        HAL_UART_Abort_IT(g_active_bus->huart);
 80016c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001770 <Dynamixel_receiveStatusPacket+0xe0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f005 fea8 	bl	8007420 <HAL_UART_Abort_IT>

    if (HAL_UART_Receive_DMA(g_active_bus->huart, buf, size) != HAL_OK) return false;
 80016d0:	4b27      	ldr	r3, [pc, #156]	@ (8001770 <Dynamixel_receiveStatusPacket+0xe0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	897a      	ldrh	r2, [r7, #10]
 80016d8:	68f9      	ldr	r1, [r7, #12]
 80016da:	4618      	mov	r0, r3
 80016dc:	f005 fe7a 	bl	80073d4 <HAL_UART_Receive_DMA>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <Dynamixel_receiveStatusPacket+0x5a>
 80016e6:	2300      	movs	r3, #0
 80016e8:	e03e      	b.n	8001768 <Dynamixel_receiveStatusPacket+0xd8>

    uint32_t st = HAL_GetTick();
 80016ea:	f002 ff4b 	bl	8004584 <HAL_GetTick>
 80016ee:	6178      	str	r0, [r7, #20]
    while (!g_active_bus->dma_rx_complete_flag && (HAL_GetTick() - st < tmo));
 80016f0:	bf00      	nop
 80016f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001770 <Dynamixel_receiveStatusPacket+0xe0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	7a9b      	ldrb	r3, [r3, #10]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	f083 0301 	eor.w	r3, r3, #1
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d007      	beq.n	8001714 <Dynamixel_receiveStatusPacket+0x84>
 8001704:	f002 ff3e 	bl	8004584 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	429a      	cmp	r2, r3
 8001712:	d8ee      	bhi.n	80016f2 <Dynamixel_receiveStatusPacket+0x62>
    if (!g_active_bus->dma_rx_complete_flag){
 8001714:	4b16      	ldr	r3, [pc, #88]	@ (8001770 <Dynamixel_receiveStatusPacket+0xe0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	7a9b      	ldrb	r3, [r3, #10]
 800171a:	b2db      	uxtb	r3, r3
 800171c:	f083 0301 	eor.w	r3, r3, #1
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d007      	beq.n	8001736 <Dynamixel_receiveStatusPacket+0xa6>
        HAL_UART_Abort_IT(g_active_bus->huart);
 8001726:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <Dynamixel_receiveStatusPacket+0xe0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f005 fe77 	bl	8007420 <HAL_UART_Abort_IT>
        return false;
 8001732:	2300      	movs	r3, #0
 8001734:	e018      	b.n	8001768 <Dynamixel_receiveStatusPacket+0xd8>
    }
    return (buf[0]==0xFF && buf[1]==0xFF && buf[2]==0xFD && buf[8]==0x00);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2bff      	cmp	r3, #255	@ 0xff
 800173c:	d110      	bne.n	8001760 <Dynamixel_receiveStatusPacket+0xd0>
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	3301      	adds	r3, #1
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2bff      	cmp	r3, #255	@ 0xff
 8001746:	d10b      	bne.n	8001760 <Dynamixel_receiveStatusPacket+0xd0>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	3302      	adds	r3, #2
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2bfd      	cmp	r3, #253	@ 0xfd
 8001750:	d106      	bne.n	8001760 <Dynamixel_receiveStatusPacket+0xd0>
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	3308      	adds	r3, #8
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <Dynamixel_receiveStatusPacket+0xd0>
 800175c:	2301      	movs	r3, #1
 800175e:	e000      	b.n	8001762 <Dynamixel_receiveStatusPacket+0xd2>
 8001760:	2300      	movs	r3, #0
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	b2db      	uxtb	r3, r3
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000298 	.word	0x20000298

08001774 <Dynamixel_write>:
        return true;
    }
    return false;
}

void Dynamixel_write(uint8_t id,uint16_t addr,const uint8_t* d,uint16_t len){
 8001774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001778:	b089      	sub	sp, #36	@ 0x24
 800177a:	af00      	add	r7, sp, #0
 800177c:	60ba      	str	r2, [r7, #8]
 800177e:	461a      	mov	r2, r3
 8001780:	4603      	mov	r3, r0
 8001782:	73fb      	strb	r3, [r7, #15]
 8001784:	460b      	mov	r3, r1
 8001786:	81bb      	strh	r3, [r7, #12]
 8001788:	4613      	mov	r3, r2
 800178a:	80fb      	strh	r3, [r7, #6]
 800178c:	466b      	mov	r3, sp
 800178e:	461e      	mov	r6, r3
    const uint8_t INST_WRITE=0x03;
 8001790:	2303      	movs	r3, #3
 8001792:	77fb      	strb	r3, [r7, #31]
    uint8_t p[len+2];p[0]=addr&0xFF;p[1]=(addr>>8)&0xFF;
 8001794:	88fb      	ldrh	r3, [r7, #6]
 8001796:	1c99      	adds	r1, r3, #2
 8001798:	1e4b      	subs	r3, r1, #1
 800179a:	61bb      	str	r3, [r7, #24]
 800179c:	460a      	mov	r2, r1
 800179e:	2300      	movs	r3, #0
 80017a0:	4690      	mov	r8, r2
 80017a2:	4699      	mov	r9, r3
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017b8:	460a      	mov	r2, r1
 80017ba:	2300      	movs	r3, #0
 80017bc:	4614      	mov	r4, r2
 80017be:	461d      	mov	r5, r3
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	00eb      	lsls	r3, r5, #3
 80017ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017ce:	00e2      	lsls	r2, r4, #3
 80017d0:	460b      	mov	r3, r1
 80017d2:	3307      	adds	r3, #7
 80017d4:	08db      	lsrs	r3, r3, #3
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	ebad 0d03 	sub.w	sp, sp, r3
 80017dc:	466b      	mov	r3, sp
 80017de:	3300      	adds	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	89bb      	ldrh	r3, [r7, #12]
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	701a      	strb	r2, [r3, #0]
 80017ea:	89bb      	ldrh	r3, [r7, #12]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	705a      	strb	r2, [r3, #1]
    memcpy(&p[2],d,len);
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	3302      	adds	r3, #2
 80017fa:	88fa      	ldrh	r2, [r7, #6]
 80017fc:	68b9      	ldr	r1, [r7, #8]
 80017fe:	4618      	mov	r0, r3
 8001800:	f009 f899 	bl	800a936 <memcpy>
    Dynamixel_transmitPacket(id,INST_WRITE,p,len+2);
 8001804:	88fb      	ldrh	r3, [r7, #6]
 8001806:	3302      	adds	r3, #2
 8001808:	b29b      	uxth	r3, r3
 800180a:	7ff9      	ldrb	r1, [r7, #31]
 800180c:	7bf8      	ldrb	r0, [r7, #15]
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	f7ff fe40 	bl	8001494 <Dynamixel_transmitPacket>
 8001814:	46b5      	mov	sp, r6
}
 8001816:	bf00      	nop
 8001818:	3724      	adds	r7, #36	@ 0x24
 800181a:	46bd      	mov	sp, r7
 800181c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001820 <Dynamixel_SyncWrite>:
}

void Dynamixel_SyncWrite(uint16_t address, uint16_t data_len,
                         const uint8_t* ids, uint8_t id_count,
                         const uint8_t* all_data)
{
 8001820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001824:	b0a7      	sub	sp, #156	@ 0x9c
 8001826:	af00      	add	r7, sp, #0
 8001828:	633a      	str	r2, [r7, #48]	@ 0x30
 800182a:	461a      	mov	r2, r3
 800182c:	4603      	mov	r3, r0
 800182e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001830:	460b      	mov	r3, r1
 8001832:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001834:	4613      	mov	r3, r2
 8001836:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800183a:	466b      	mov	r3, sp
 800183c:	461e      	mov	r6, r3
    const uint8_t INST_SYNC_WRITE = 0x83;
 800183e:	2383      	movs	r3, #131	@ 0x83
 8001840:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88

    uint8_t  idsR[14], idsL[14];
    uint8_t  nR = 0, nL = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800184a:	2300      	movs	r3, #0
 800184c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
    uint8_t  dataR[(size_t)14 * (size_t)data_len];
 8001850:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001852:	4613      	mov	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	1a9b      	subs	r3, r3, r2
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	4619      	mov	r1, r3
 800185c:	460b      	mov	r3, r1
 800185e:	3b01      	subs	r3, #1
 8001860:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001864:	2300      	movs	r3, #0
 8001866:	460c      	mov	r4, r1
 8001868:	461d      	mov	r5, r3
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	f04f 0300 	mov.w	r3, #0
 8001872:	00eb      	lsls	r3, r5, #3
 8001874:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001878:	00e2      	lsls	r2, r4, #3
 800187a:	2300      	movs	r3, #0
 800187c:	4688      	mov	r8, r1
 800187e:	4699      	mov	r9, r3
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800188c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001890:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001894:	1dcb      	adds	r3, r1, #7
 8001896:	08db      	lsrs	r3, r3, #3
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	ebad 0d03 	sub.w	sp, sp, r3
 800189e:	466b      	mov	r3, sp
 80018a0:	3300      	adds	r3, #0
 80018a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    uint8_t  dataL[(size_t)14 * (size_t)data_len];
 80018a6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80018a8:	4613      	mov	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	4619      	mov	r1, r3
 80018b2:	460b      	mov	r3, r1
 80018b4:	3b01      	subs	r3, #1
 80018b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80018b8:	2300      	movs	r3, #0
 80018ba:	468a      	mov	sl, r1
 80018bc:	469b      	mov	fp, r3
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	f04f 0300 	mov.w	r3, #0
 80018c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80018ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80018ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80018d2:	2300      	movs	r3, #0
 80018d4:	6239      	str	r1, [r7, #32]
 80018d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80018e4:	4628      	mov	r0, r5
 80018e6:	00c3      	lsls	r3, r0, #3
 80018e8:	4620      	mov	r0, r4
 80018ea:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80018ee:	4620      	mov	r0, r4
 80018f0:	00c2      	lsls	r2, r0, #3
 80018f2:	1dcb      	adds	r3, r1, #7
 80018f4:	08db      	lsrs	r3, r3, #3
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	ebad 0d03 	sub.w	sp, sp, r3
 80018fc:	466b      	mov	r3, sp
 80018fe:	3300      	adds	r3, #0
 8001900:	67bb      	str	r3, [r7, #120]	@ 0x78
    uint16_t posR = 0, posL = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8001908:	2300      	movs	r3, #0
 800190a:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

    for (uint8_t i = 0; i < id_count; i++) {
 800190e:	2300      	movs	r3, #0
 8001910:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 8001914:	e05e      	b.n	80019d4 <Dynamixel_SyncWrite+0x1b4>
        const uint8_t id = ids[i];
 8001916:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800191a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800191c:	4413      	add	r3, r2
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        const uint8_t* chunk = &all_data[(size_t)i * (size_t)data_len]; // ★用 i 對齊
 8001924:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 8001928:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800192a:	fb02 f303 	mul.w	r3, r2, r3
 800192e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001932:	4413      	add	r3, r2
 8001934:	65bb      	str	r3, [r7, #88]	@ 0x58
        if (id >= DXL_RIGHT_ID_MIN && id <= DXL_RIGHT_ID_MAX) {
 8001936:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800193a:	2b00      	cmp	r3, #0
 800193c:	d021      	beq.n	8001982 <Dynamixel_SyncWrite+0x162>
 800193e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001942:	2b07      	cmp	r3, #7
 8001944:	d81d      	bhi.n	8001982 <Dynamixel_SyncWrite+0x162>
            idsR[nR++] = id;
 8001946:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	f887 2097 	strb.w	r2, [r7, #151]	@ 0x97
 8001950:	3370      	adds	r3, #112	@ 0x70
 8001952:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001956:	4413      	add	r3, r2
 8001958:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800195c:	f803 2c50 	strb.w	r2, [r3, #-80]
            memcpy(&dataR[posR], chunk, data_len);
 8001960:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8001964:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001968:	4413      	add	r3, r2
 800196a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800196c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800196e:	4618      	mov	r0, r3
 8001970:	f008 ffe1 	bl	800a936 <memcpy>
            posR += data_len;
 8001974:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 8001978:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800197a:	4413      	add	r3, r2
 800197c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8001980:	e023      	b.n	80019ca <Dynamixel_SyncWrite+0x1aa>
        } else if (id >= DXL_LEFT_ID_MIN && id <= DXL_LEFT_ID_MAX) {
 8001982:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001986:	2b07      	cmp	r3, #7
 8001988:	d91f      	bls.n	80019ca <Dynamixel_SyncWrite+0x1aa>
 800198a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800198e:	2b0e      	cmp	r3, #14
 8001990:	d81b      	bhi.n	80019ca <Dynamixel_SyncWrite+0x1aa>
            idsL[nL++] = id;
 8001992:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	f887 2096 	strb.w	r2, [r7, #150]	@ 0x96
 800199c:	3370      	adds	r3, #112	@ 0x70
 800199e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80019a2:	4413      	add	r3, r2
 80019a4:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 80019a8:	f803 2c60 	strb.w	r2, [r3, #-96]
            memcpy(&dataL[posL], chunk, data_len);
 80019ac:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80019b0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80019b2:	4413      	add	r3, r2
 80019b4:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80019b6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80019b8:	4618      	mov	r0, r3
 80019ba:	f008 ffbc 	bl	800a936 <memcpy>
            posL += data_len;
 80019be:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80019c2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80019c4:	4413      	add	r3, r2
 80019c6:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
    for (uint8_t i = 0; i < id_count; i++) {
 80019ca:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 80019ce:	3301      	adds	r3, #1
 80019d0:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 80019d4:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 80019d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019dc:	429a      	cmp	r2, r3
 80019de:	d39a      	bcc.n	8001916 <Dynamixel_SyncWrite+0xf6>
        }
    }

    if (nR) {
 80019e0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 809a 	beq.w	8001b1e <Dynamixel_SyncWrite+0x2fe>
 80019ea:	466b      	mov	r3, sp
 80019ec:	461c      	mov	r4, r3
        g_active_bus = &Dynamixel_Handle_R;
 80019ee:	4b9e      	ldr	r3, [pc, #632]	@ (8001c68 <Dynamixel_SyncWrite+0x448>)
 80019f0:	4a9e      	ldr	r2, [pc, #632]	@ (8001c6c <Dynamixel_SyncWrite+0x44c>)
 80019f2:	601a      	str	r2, [r3, #0]
        uint16_t plen = 4 + (uint16_t)nR * (data_len + 1);
 80019f4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80019fc:	3301      	adds	r3, #1
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	fb12 f303 	smulbb	r3, r2, r3
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	3304      	adds	r3, #4
 8001a08:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
        uint8_t  p[4 + (size_t)14 * (size_t)(data_len + 1)];
 8001a0c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001a0e:	3301      	adds	r3, #1
 8001a10:	461a      	mov	r2, r3
 8001a12:	4613      	mov	r3, r2
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	1a9b      	subs	r3, r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	1d19      	adds	r1, r3, #4
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	673b      	str	r3, [r7, #112]	@ 0x70
 8001a22:	2300      	movs	r3, #0
 8001a24:	61b9      	str	r1, [r7, #24]
 8001a26:	61fb      	str	r3, [r7, #28]
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	f04f 0300 	mov.w	r3, #0
 8001a30:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001a34:	4648      	mov	r0, r9
 8001a36:	00c3      	lsls	r3, r0, #3
 8001a38:	4640      	mov	r0, r8
 8001a3a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001a3e:	4640      	mov	r0, r8
 8001a40:	00c2      	lsls	r2, r0, #3
 8001a42:	2300      	movs	r3, #0
 8001a44:	6139      	str	r1, [r7, #16]
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	f04f 0300 	mov.w	r3, #0
 8001a50:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001a54:	4648      	mov	r0, r9
 8001a56:	00c3      	lsls	r3, r0, #3
 8001a58:	4640      	mov	r0, r8
 8001a5a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001a5e:	4640      	mov	r0, r8
 8001a60:	00c2      	lsls	r2, r0, #3
 8001a62:	1dcb      	adds	r3, r1, #7
 8001a64:	08db      	lsrs	r3, r3, #3
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	ebad 0d03 	sub.w	sp, sp, r3
 8001a6c:	466b      	mov	r3, sp
 8001a6e:	3300      	adds	r3, #0
 8001a70:	66fb      	str	r3, [r7, #108]	@ 0x6c
        p[0]=address&0xFF; p[1]=(address>>8)&0xFF; p[2]=data_len&0xFF; p[3]=(data_len>>8)&0xFF;
 8001a72:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a78:	701a      	strb	r2, [r3, #0]
 8001a7a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001a7c:	0a1b      	lsrs	r3, r3, #8
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a84:	705a      	strb	r2, [r3, #1]
 8001a86:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a8c:	709a      	strb	r2, [r3, #2]
 8001a8e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001a90:	0a1b      	lsrs	r3, r3, #8
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a98:	70da      	strb	r2, [r3, #3]
        uint16_t w=4;
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
        for (uint8_t k=0;k<nR;k++){ p[w++]=idsR[k]; memcpy(&p[w], &dataR[(size_t)k*data_len], data_len); w+=data_len; }
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
 8001aa6:	e02b      	b.n	8001b00 <Dynamixel_SyncWrite+0x2e0>
 8001aa8:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 8001aac:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8001ab0:	1c59      	adds	r1, r3, #1
 8001ab2:	f8a7 108e 	strh.w	r1, [r7, #142]	@ 0x8e
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f102 0370 	add.w	r3, r2, #112	@ 0x70
 8001abc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001ac0:	4413      	add	r3, r2
 8001ac2:	f813 2c50 	ldrb.w	r2, [r3, #-80]
 8001ac6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ac8:	545a      	strb	r2, [r3, r1]
 8001aca:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8001ace:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001ad0:	18d0      	adds	r0, r2, r3
 8001ad2:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8001ad6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001ad8:	fb02 f303 	mul.w	r3, r2, r3
 8001adc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001ae0:	4413      	add	r3, r2
 8001ae2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f008 ff26 	bl	800a936 <memcpy>
 8001aea:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8001aee:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001af0:	4413      	add	r3, r2
 8001af2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8001af6:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8001afa:	3301      	adds	r3, #1
 8001afc:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
 8001b00:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 8001b04:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d3cd      	bcc.n	8001aa8 <Dynamixel_SyncWrite+0x288>
        Dynamixel_transmitPacket(0xFE, INST_SYNC_WRITE, p, plen);
 8001b0c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8001b10:	f897 1088 	ldrb.w	r1, [r7, #136]	@ 0x88
 8001b14:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001b16:	20fe      	movs	r0, #254	@ 0xfe
 8001b18:	f7ff fcbc 	bl	8001494 <Dynamixel_transmitPacket>
 8001b1c:	46a5      	mov	sp, r4
    }
    if (nL) {
 8001b1e:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 8099 	beq.w	8001c5a <Dynamixel_SyncWrite+0x43a>
 8001b28:	466b      	mov	r3, sp
 8001b2a:	461c      	mov	r4, r3
        g_active_bus = &Dynamixel_Handle_L;
 8001b2c:	4b4e      	ldr	r3, [pc, #312]	@ (8001c68 <Dynamixel_SyncWrite+0x448>)
 8001b2e:	4a50      	ldr	r2, [pc, #320]	@ (8001c70 <Dynamixel_SyncWrite+0x450>)
 8001b30:	601a      	str	r2, [r3, #0]
        uint16_t plen = 4 + (uint16_t)nL * (data_len + 1);
 8001b32:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	fb12 f303 	smulbb	r3, r2, r3
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	3304      	adds	r3, #4
 8001b46:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
        uint8_t  p[4 + (size_t)14 * (size_t)(data_len + 1)];
 8001b4a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4613      	mov	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	1a9b      	subs	r3, r3, r2
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	1d19      	adds	r1, r3, #4
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001b60:	2300      	movs	r3, #0
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001b72:	4648      	mov	r0, r9
 8001b74:	00c3      	lsls	r3, r0, #3
 8001b76:	4640      	mov	r0, r8
 8001b78:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001b7c:	4640      	mov	r0, r8
 8001b7e:	00c2      	lsls	r2, r0, #3
 8001b80:	2300      	movs	r3, #0
 8001b82:	6039      	str	r1, [r7, #0]
 8001b84:	607b      	str	r3, [r7, #4]
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	e9d7 8900 	ldrd	r8, r9, [r7]
 8001b92:	4648      	mov	r0, r9
 8001b94:	00c3      	lsls	r3, r0, #3
 8001b96:	4640      	mov	r0, r8
 8001b98:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001b9c:	4640      	mov	r0, r8
 8001b9e:	00c2      	lsls	r2, r0, #3
 8001ba0:	1dcb      	adds	r3, r1, #7
 8001ba2:	08db      	lsrs	r3, r3, #3
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	ebad 0d03 	sub.w	sp, sp, r3
 8001baa:	466b      	mov	r3, sp
 8001bac:	3300      	adds	r3, #0
 8001bae:	663b      	str	r3, [r7, #96]	@ 0x60
        p[0]=address&0xFF; p[1]=(address>>8)&0xFF; p[2]=data_len&0xFF; p[3]=(data_len>>8)&0xFF;
 8001bb0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001bb6:	701a      	strb	r2, [r3, #0]
 8001bb8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001bba:	0a1b      	lsrs	r3, r3, #8
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001bc2:	705a      	strb	r2, [r3, #1]
 8001bc4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001bca:	709a      	strb	r2, [r3, #2]
 8001bcc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001bce:	0a1b      	lsrs	r3, r3, #8
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001bd6:	70da      	strb	r2, [r3, #3]
        uint16_t w=4;
 8001bd8:	2304      	movs	r3, #4
 8001bda:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
        for (uint8_t k=0;k<nL;k++){ p[w++]=idsL[k]; memcpy(&p[w], &dataL[(size_t)k*data_len], data_len); w+=data_len; }
 8001bde:	2300      	movs	r3, #0
 8001be0:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 8001be4:	e02a      	b.n	8001c3c <Dynamixel_SyncWrite+0x41c>
 8001be6:	f897 2089 	ldrb.w	r2, [r7, #137]	@ 0x89
 8001bea:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8001bee:	1c59      	adds	r1, r3, #1
 8001bf0:	f8a7 108a 	strh.w	r1, [r7, #138]	@ 0x8a
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f102 0370 	add.w	r3, r2, #112	@ 0x70
 8001bfa:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001bfe:	4413      	add	r3, r2
 8001c00:	f813 2c60 	ldrb.w	r2, [r3, #-96]
 8001c04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c06:	545a      	strb	r2, [r3, r1]
 8001c08:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8001c0c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001c0e:	18d0      	adds	r0, r2, r3
 8001c10:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 8001c14:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001c16:	fb02 f303 	mul.w	r3, r2, r3
 8001c1a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001c1c:	4413      	add	r3, r2
 8001c1e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001c20:	4619      	mov	r1, r3
 8001c22:	f008 fe88 	bl	800a936 <memcpy>
 8001c26:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8001c2a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8001c32:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 8001c36:	3301      	adds	r3, #1
 8001c38:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 8001c3c:	f897 2089 	ldrb.w	r2, [r7, #137]	@ 0x89
 8001c40:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d3ce      	bcc.n	8001be6 <Dynamixel_SyncWrite+0x3c6>
        Dynamixel_transmitPacket(0xFE, INST_SYNC_WRITE, p, plen);
 8001c48:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8001c4c:	f897 1088 	ldrb.w	r1, [r7, #136]	@ 0x88
 8001c50:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001c52:	20fe      	movs	r0, #254	@ 0xfe
 8001c54:	f7ff fc1e 	bl	8001494 <Dynamixel_transmitPacket>
 8001c58:	46a5      	mov	sp, r4
 8001c5a:	46b5      	mov	sp, r6
    }
}
 8001c5c:	bf00      	nop
 8001c5e:	379c      	adds	r7, #156	@ 0x9c
 8001c60:	46bd      	mov	sp, r7
 8001c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c66:	bf00      	nop
 8001c68:	20000298 	.word	0x20000298
 8001c6c:	20000280 	.word	0x20000280
 8001c70:	2000028c 	.word	0x2000028c

08001c74 <Dynamixel_SyncRead>:

void Dynamixel_SyncRead(uint16_t address, uint16_t data_len, const uint8_t* ids, uint8_t id_count){
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b098      	sub	sp, #96	@ 0x60
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60ba      	str	r2, [r7, #8]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4603      	mov	r3, r0
 8001c80:	81fb      	strh	r3, [r7, #14]
 8001c82:	460b      	mov	r3, r1
 8001c84:	81bb      	strh	r3, [r7, #12]
 8001c86:	4613      	mov	r3, r2
 8001c88:	71fb      	strb	r3, [r7, #7]
    const uint8_t INST_SYNC_READ=0x82;
 8001c8a:	2382      	movs	r3, #130	@ 0x82
 8001c8c:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a

    uint8_t idsR[14], idsL[14]; uint8_t nR=0, nL=0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001c96:	2300      	movs	r3, #0
 8001c98:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    for (uint8_t i = 0; i < id_count; i++) {
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
 8001ca2:	e03d      	b.n	8001d20 <Dynamixel_SyncRead+0xac>
        if (ids[i] >= DXL_RIGHT_ID_MIN && ids[i] <= DXL_RIGHT_ID_MAX) {
 8001ca4:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001ca8:	68ba      	ldr	r2, [r7, #8]
 8001caa:	4413      	add	r3, r2
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d015      	beq.n	8001cde <Dynamixel_SyncRead+0x6a>
 8001cb2:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	4413      	add	r3, r2
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b07      	cmp	r3, #7
 8001cbe:	d80e      	bhi.n	8001cde <Dynamixel_SyncRead+0x6a>
            idsR[nR++] = ids[i];
 8001cc0:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001cc4:	68ba      	ldr	r2, [r7, #8]
 8001cc6:	441a      	add	r2, r3
 8001cc8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001ccc:	1c59      	adds	r1, r3, #1
 8001cce:	f887 105f 	strb.w	r1, [r7, #95]	@ 0x5f
 8001cd2:	7812      	ldrb	r2, [r2, #0]
 8001cd4:	3360      	adds	r3, #96	@ 0x60
 8001cd6:	443b      	add	r3, r7
 8001cd8:	f803 2c18 	strb.w	r2, [r3, #-24]
 8001cdc:	e01b      	b.n	8001d16 <Dynamixel_SyncRead+0xa2>
        } else if (ids[i] >= DXL_LEFT_ID_MIN && ids[i] <= DXL_LEFT_ID_MAX) {
 8001cde:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b07      	cmp	r3, #7
 8001cea:	d914      	bls.n	8001d16 <Dynamixel_SyncRead+0xa2>
 8001cec:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001cf0:	68ba      	ldr	r2, [r7, #8]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b0e      	cmp	r3, #14
 8001cf8:	d80d      	bhi.n	8001d16 <Dynamixel_SyncRead+0xa2>
            idsL[nL++] = ids[i];
 8001cfa:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	441a      	add	r2, r3
 8001d02:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8001d06:	1c59      	adds	r1, r3, #1
 8001d08:	f887 105e 	strb.w	r1, [r7, #94]	@ 0x5e
 8001d0c:	7812      	ldrb	r2, [r2, #0]
 8001d0e:	3360      	adds	r3, #96	@ 0x60
 8001d10:	443b      	add	r3, r7
 8001d12:	f803 2c28 	strb.w	r2, [r3, #-40]
    for (uint8_t i = 0; i < id_count; i++) {
 8001d16:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
 8001d20:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d3bc      	bcc.n	8001ca4 <Dynamixel_SyncRead+0x30>
        }
    }

    if (nR){
 8001d2a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d041      	beq.n	8001db6 <Dynamixel_SyncRead+0x142>
        g_active_bus = &Dynamixel_Handle_R;
 8001d32:	4b44      	ldr	r3, [pc, #272]	@ (8001e44 <Dynamixel_SyncRead+0x1d0>)
 8001d34:	4a44      	ldr	r2, [pc, #272]	@ (8001e48 <Dynamixel_SyncRead+0x1d4>)
 8001d36:	601a      	str	r2, [r3, #0]
        uint16_t plen=4+nR;
 8001d38:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	3304      	adds	r3, #4
 8001d40:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
        uint8_t p[4+14];
        p[0]=address&0xFF; p[1]=(address>>8)&0xFF; p[2]=data_len&0xFF; p[3]=(data_len>>8)&0xFF;
 8001d44:	89fb      	ldrh	r3, [r7, #14]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001d4c:	89fb      	ldrh	r3, [r7, #14]
 8001d4e:	0a1b      	lsrs	r3, r3, #8
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001d58:	89bb      	ldrh	r3, [r7, #12]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001d60:	89bb      	ldrh	r3, [r7, #12]
 8001d62:	0a1b      	lsrs	r3, r3, #8
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        for (uint8_t i=0;i<nR;i++) p[4+i]=idsR[i];
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
 8001d72:	e011      	b.n	8001d98 <Dynamixel_SyncRead+0x124>
 8001d74:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8001d78:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	3260      	adds	r2, #96	@ 0x60
 8001d80:	443a      	add	r2, r7
 8001d82:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001d86:	3360      	adds	r3, #96	@ 0x60
 8001d88:	443b      	add	r3, r7
 8001d8a:	f803 2c3c 	strb.w	r2, [r3, #-60]
 8001d8e:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8001d92:	3301      	adds	r3, #1
 8001d94:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
 8001d98:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8001d9c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d3e7      	bcc.n	8001d74 <Dynamixel_SyncRead+0x100>
        Dynamixel_transmitPacket(0xFE, INST_SYNC_READ, p, plen);
 8001da4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001da8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001dac:	f897 105a 	ldrb.w	r1, [r7, #90]	@ 0x5a
 8001db0:	20fe      	movs	r0, #254	@ 0xfe
 8001db2:	f7ff fb6f 	bl	8001494 <Dynamixel_transmitPacket>
    }
    if (nL){
 8001db6:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d03d      	beq.n	8001e3a <Dynamixel_SyncRead+0x1c6>
        g_active_bus = &Dynamixel_Handle_L;
 8001dbe:	4b21      	ldr	r3, [pc, #132]	@ (8001e44 <Dynamixel_SyncRead+0x1d0>)
 8001dc0:	4a22      	ldr	r2, [pc, #136]	@ (8001e4c <Dynamixel_SyncRead+0x1d8>)
 8001dc2:	601a      	str	r2, [r3, #0]
        uint16_t plen=4+nL;
 8001dc4:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	3304      	adds	r3, #4
 8001dcc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
        uint8_t p[4+14];
        p[0]=address&0xFF; p[1]=(address>>8)&0xFF; p[2]=data_len&0xFF; p[3]=(data_len>>8)&0xFF;
 8001dd0:	89fb      	ldrh	r3, [r7, #14]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	743b      	strb	r3, [r7, #16]
 8001dd6:	89fb      	ldrh	r3, [r7, #14]
 8001dd8:	0a1b      	lsrs	r3, r3, #8
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	747b      	strb	r3, [r7, #17]
 8001de0:	89bb      	ldrh	r3, [r7, #12]
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	74bb      	strb	r3, [r7, #18]
 8001de6:	89bb      	ldrh	r3, [r7, #12]
 8001de8:	0a1b      	lsrs	r3, r3, #8
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	74fb      	strb	r3, [r7, #19]
        for (uint8_t i=0;i<nL;i++) p[4+i]=idsL[i];
 8001df0:	2300      	movs	r3, #0
 8001df2:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8001df6:	e011      	b.n	8001e1c <Dynamixel_SyncRead+0x1a8>
 8001df8:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8001dfc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001e00:	3304      	adds	r3, #4
 8001e02:	3260      	adds	r2, #96	@ 0x60
 8001e04:	443a      	add	r2, r7
 8001e06:	f812 2c28 	ldrb.w	r2, [r2, #-40]
 8001e0a:	3360      	adds	r3, #96	@ 0x60
 8001e0c:	443b      	add	r3, r7
 8001e0e:	f803 2c50 	strb.w	r2, [r3, #-80]
 8001e12:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001e16:	3301      	adds	r3, #1
 8001e18:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8001e1c:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8001e20:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d3e7      	bcc.n	8001df8 <Dynamixel_SyncRead+0x184>
        Dynamixel_transmitPacket(0xFE, INST_SYNC_READ, p, plen);
 8001e28:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001e2c:	f107 0210 	add.w	r2, r7, #16
 8001e30:	f897 105a 	ldrb.w	r1, [r7, #90]	@ 0x5a
 8001e34:	20fe      	movs	r0, #254	@ 0xfe
 8001e36:	f7ff fb2d 	bl	8001494 <Dynamixel_transmitPacket>
    }
}
 8001e3a:	bf00      	nop
 8001e3c:	3760      	adds	r7, #96	@ 0x60
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000298 	.word	0x20000298
 8001e48:	20000280 	.word	0x20000280
 8001e4c:	2000028c 	.word	0x2000028c

08001e50 <update_crc>:

unsigned short update_crc(unsigned short c,unsigned char *d,unsigned short s){
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	6039      	str	r1, [r7, #0]
 8001e5a:	80fb      	strh	r3, [r7, #6]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	80bb      	strh	r3, [r7, #4]
            0x03A6, 0x03AC, 0x83A9, 0x03B8, 0x83BD, 0x83B7, 0x03B2, 0x0390, 0x8395, 0x839F, 0x039A, 0x838B, 0x038E, 0x0384, 0x8381, 0x0280, 0x8285, 0x828F,
            0x028A, 0x829B, 0x029E, 0x0294, 0x8291, 0x82B3, 0x02B6, 0x02BC, 0x82B9, 0x02A8, 0x82AD, 0x82A7, 0x02A2, 0x82E3, 0x02E6, 0x02EC, 0x82E9, 0x02F8,
            0x82FD, 0x82F7, 0x02F2, 0x02D0, 0x82D5, 0x82DF, 0x02DA, 0x82CB, 0x02CE, 0x02C4, 0x82C1, 0x8243, 0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257,
            0x0252, 0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231, 0x8213,
            0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202};
    for(unsigned short j=0;j<s;j++){unsigned short i=((c>>8)^d[j])&0xFF;c=(c<<8)^t[i];}
 8001e60:	2300      	movs	r3, #0
 8001e62:	81fb      	strh	r3, [r7, #14]
 8001e64:	e019      	b.n	8001e9a <update_crc+0x4a>
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	0a1b      	lsrs	r3, r3, #8
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	89fa      	ldrh	r2, [r7, #14]
 8001e6e:	6839      	ldr	r1, [r7, #0]
 8001e70:	440a      	add	r2, r1
 8001e72:	7812      	ldrb	r2, [r2, #0]
 8001e74:	4053      	eors	r3, r2
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	81bb      	strh	r3, [r7, #12]
 8001e7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e80:	021b      	lsls	r3, r3, #8
 8001e82:	b21a      	sxth	r2, r3
 8001e84:	89bb      	ldrh	r3, [r7, #12]
 8001e86:	490a      	ldr	r1, [pc, #40]	@ (8001eb0 <update_crc+0x60>)
 8001e88:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001e8c:	b21b      	sxth	r3, r3
 8001e8e:	4053      	eors	r3, r2
 8001e90:	b21b      	sxth	r3, r3
 8001e92:	80fb      	strh	r3, [r7, #6]
 8001e94:	89fb      	ldrh	r3, [r7, #14]
 8001e96:	3301      	adds	r3, #1
 8001e98:	81fb      	strh	r3, [r7, #14]
 8001e9a:	89fa      	ldrh	r2, [r7, #14]
 8001e9c:	88bb      	ldrh	r3, [r7, #4]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d3e1      	bcc.n	8001e66 <update_crc+0x16>
    return c;
 8001ea2:	88fb      	ldrh	r3, [r7, #6]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	0800d410 	.word	0x0800d410

08001eb4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08a      	sub	sp, #40	@ 0x28
 8001eb8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eba:	f107 0314 	add.w	r3, r7, #20
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	609a      	str	r2, [r3, #8]
 8001ec6:	60da      	str	r2, [r3, #12]
 8001ec8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	4b31      	ldr	r3, [pc, #196]	@ (8001f94 <MX_GPIO_Init+0xe0>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	4a30      	ldr	r2, [pc, #192]	@ (8001f94 <MX_GPIO_Init+0xe0>)
 8001ed4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eda:	4b2e      	ldr	r3, [pc, #184]	@ (8001f94 <MX_GPIO_Init+0xe0>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	4b2a      	ldr	r3, [pc, #168]	@ (8001f94 <MX_GPIO_Init+0xe0>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eee:	4a29      	ldr	r2, [pc, #164]	@ (8001f94 <MX_GPIO_Init+0xe0>)
 8001ef0:	f043 0304 	orr.w	r3, r3, #4
 8001ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ef6:	4b27      	ldr	r3, [pc, #156]	@ (8001f94 <MX_GPIO_Init+0xe0>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	4b23      	ldr	r3, [pc, #140]	@ (8001f94 <MX_GPIO_Init+0xe0>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	4a22      	ldr	r2, [pc, #136]	@ (8001f94 <MX_GPIO_Init+0xe0>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f12:	4b20      	ldr	r3, [pc, #128]	@ (8001f94 <MX_GPIO_Init+0xe0>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	60bb      	str	r3, [r7, #8]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	607b      	str	r3, [r7, #4]
 8001f22:	4b1c      	ldr	r3, [pc, #112]	@ (8001f94 <MX_GPIO_Init+0xe0>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	4a1b      	ldr	r2, [pc, #108]	@ (8001f94 <MX_GPIO_Init+0xe0>)
 8001f28:	f043 0308 	orr.w	r3, r3, #8
 8001f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2e:	4b19      	ldr	r3, [pc, #100]	@ (8001f94 <MX_GPIO_Init+0xe0>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2110      	movs	r1, #16
 8001f3e:	4816      	ldr	r0, [pc, #88]	@ (8001f98 <MX_GPIO_Init+0xe4>)
 8001f40:	f003 fc6a 	bl	8005818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f44:	2200      	movs	r2, #0
 8001f46:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f4a:	4814      	ldr	r0, [pc, #80]	@ (8001f9c <MX_GPIO_Init+0xe8>)
 8001f4c:	f003 fc64 	bl	8005818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f50:	2310      	movs	r3, #16
 8001f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f54:	2301      	movs	r3, #1
 8001f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	4619      	mov	r1, r3
 8001f66:	480c      	ldr	r0, [pc, #48]	@ (8001f98 <MX_GPIO_Init+0xe4>)
 8001f68:	f003 fac2 	bl	80054f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f6c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f72:	2301      	movs	r3, #1
 8001f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	4619      	mov	r1, r3
 8001f84:	4805      	ldr	r0, [pc, #20]	@ (8001f9c <MX_GPIO_Init+0xe8>)
 8001f86:	f003 fab3 	bl	80054f0 <HAL_GPIO_Init>

}
 8001f8a:	bf00      	nop
 8001f8c:	3728      	adds	r7, #40	@ 0x28
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40020000 	.word	0x40020000
 8001f9c:	40020800 	.word	0x40020800

08001fa0 <GripStop_Init>:
                   uint8_t debounce_cnt_req,
                   float max_speed_dps,
                   float ema_alpha,
                   float tol_deg,
                   uint32_t timeout_ms)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	@ 0x28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6278      	str	r0, [r7, #36]	@ 0x24
 8001fa8:	6239      	str	r1, [r7, #32]
 8001faa:	4611      	mov	r1, r2
 8001fac:	ed87 0a06 	vstr	s0, [r7, #24]
 8001fb0:	edc7 0a05 	vstr	s1, [r7, #20]
 8001fb4:	ed87 1a04 	vstr	s2, [r7, #16]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	edc7 1a03 	vstr	s3, [r7, #12]
 8001fbe:	ed87 2a02 	vstr	s4, [r7, #8]
 8001fc2:	edc7 2a01 	vstr	s5, [r7, #4]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	77fb      	strb	r3, [r7, #31]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	77bb      	strb	r3, [r7, #30]
  g->servo             = servo;
 8001fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd0:	6a3a      	ldr	r2, [r7, #32]
 8001fd2:	601a      	str	r2, [r3, #0]
  g->side              = side;
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd6:	7ffa      	ldrb	r2, [r7, #31]
 8001fd8:	711a      	strb	r2, [r3, #4]
  g->start_deg         = start_deg;
 8001fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	60da      	str	r2, [r3, #12]
  g->target_deg        = target_deg;
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	611a      	str	r2, [r3, #16]
  g->press_thresh_raw  = press_thresh_raw;
 8001fe6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fee:	ee17 3a90 	vmov	r3, s15
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff6:	80da      	strh	r2, [r3, #6]
  g->debounce_cnt_req  = (debounce_cnt_req == 0) ? 1 : debounce_cnt_req;
 8001ff8:	7fbb      	ldrb	r3, [r7, #30]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <GripStop_Init+0x62>
 8001ffe:	7fba      	ldrb	r2, [r7, #30]
 8002000:	e000      	b.n	8002004 <GripStop_Init+0x64>
 8002002:	2201      	movs	r2, #1
 8002004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002006:	721a      	strb	r2, [r3, #8]
  g->max_speed_dps     = (max_speed_dps < 1.0f) ? 1.0f : max_speed_dps;
 8002008:	edd7 7a03 	vldr	s15, [r7, #12]
 800200c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002010:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002018:	d502      	bpl.n	8002020 <GripStop_Init+0x80>
 800201a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800201e:	e000      	b.n	8002022 <GripStop_Init+0x82>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002024:	6153      	str	r3, [r2, #20]
  g->ema_alpha         = (ema_alpha < 0.f) ? 0.f : (ema_alpha > 1.f ? 1.f : ema_alpha);
 8002026:	edd7 7a02 	vldr	s15, [r7, #8]
 800202a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800202e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002032:	d502      	bpl.n	800203a <GripStop_Init+0x9a>
 8002034:	f04f 0300 	mov.w	r3, #0
 8002038:	e00c      	b.n	8002054 <GripStop_Init+0xb4>
 800203a:	edd7 7a02 	vldr	s15, [r7, #8]
 800203e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002042:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800204a:	dd02      	ble.n	8002052 <GripStop_Init+0xb2>
 800204c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002050:	e000      	b.n	8002054 <GripStop_Init+0xb4>
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002056:	6193      	str	r3, [r2, #24]
  g->tol_deg           = (tol_deg < 0.1f) ? 0.1f : tol_deg;
 8002058:	edd7 7a01 	vldr	s15, [r7, #4]
 800205c:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80020d0 <GripStop_Init+0x130>
 8002060:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002068:	d501      	bpl.n	800206e <GripStop_Init+0xce>
 800206a:	4b1a      	ldr	r3, [pc, #104]	@ (80020d4 <GripStop_Init+0x134>)
 800206c:	e000      	b.n	8002070 <GripStop_Init+0xd0>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002072:	61d3      	str	r3, [r2, #28]
  g->timeout_ms        = timeout_ms;
 8002074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002076:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002078:	621a      	str	r2, [r3, #32]

  g->hold_deg          = start_deg;
 800207a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	625a      	str	r2, [r3, #36]	@ 0x24
  g->last_pressure_pct = 0.f;
 8002080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	629a      	str	r2, [r3, #40]	@ 0x28

  g->stopped = 0;
 8002088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208a:	2200      	movs	r2, #0
 800208c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  g->deb_cnt = 0;
 8002090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002092:	2200      	movs	r2, #0
 8002094:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  g->state   = GRIP_RUNNING;
 8002098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209a:	2200      	movs	r2, #0
 800209c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

  Servo_SetMaxSpeedDps(g->servo, g->max_speed_dps);
 80020a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a6:	edd3 7a05 	vldr	s15, [r3, #20]
 80020aa:	eeb0 0a67 	vmov.f32	s0, s15
 80020ae:	4610      	mov	r0, r2
 80020b0:	f001 fb1a 	bl	80036e8 <Servo_SetMaxSpeedDps>
  Servo_SetEmaAlpha   (g->servo, g->ema_alpha);
 80020b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80020be:	eeb0 0a67 	vmov.f32	s0, s15
 80020c2:	4610      	mov	r0, r2
 80020c4:	f001 fb3e 	bl	8003744 <Servo_SetEmaAlpha>
}
 80020c8:	bf00      	nop
 80020ca:	3728      	adds	r7, #40	@ 0x28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	3dcccccd 	.word	0x3dcccccd
 80020d4:	3dcccccd 	.word	0x3dcccccd

080020d8 <GripStop_Start>:

void GripStop_Start(GripStop* g)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  if (!g || !g->servo) return;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d042      	beq.n	800216c <GripStop_Start+0x94>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d03e      	beq.n	800216c <GripStop_Start+0x94>

  (void)Servo_MoveToBlocking(g->servo, g->start_deg, g->tol_deg,
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	ed93 7a07 	vldr	s14, [r3, #28]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	edd3 6a05 	vldr	s13, [r3, #20]
                             g->max_speed_dps, g->timeout_ms ? g->timeout_ms : 5000);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1b      	ldr	r3, [r3, #32]
  (void)Servo_MoveToBlocking(g->servo, g->start_deg, g->tol_deg,
 8002108:	2b00      	cmp	r3, #0
 800210a:	d002      	beq.n	8002112 <GripStop_Start+0x3a>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	e001      	b.n	8002116 <GripStop_Start+0x3e>
 8002112:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002116:	4619      	mov	r1, r3
 8002118:	eeb0 1a66 	vmov.f32	s2, s13
 800211c:	eef0 0a47 	vmov.f32	s1, s14
 8002120:	eeb0 0a67 	vmov.f32	s0, s15
 8002124:	4610      	mov	r0, r2
 8002126:	f001 fbf5 	bl	8003914 <Servo_MoveToBlocking>

  Servo_SetMaxSpeedDps(g->servo, g->max_speed_dps);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	edd3 7a05 	vldr	s15, [r3, #20]
 8002134:	eeb0 0a67 	vmov.f32	s0, s15
 8002138:	4610      	mov	r0, r2
 800213a:	f001 fad5 	bl	80036e8 <Servo_SetMaxSpeedDps>
  Servo_SetTargetDegrees(g->servo, g->target_deg);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	edd3 7a04 	vldr	s15, [r3, #16]
 8002148:	eeb0 0a67 	vmov.f32	s0, s15
 800214c:	4610      	mov	r0, r2
 800214e:	f001 faab 	bl	80036a8 <Servo_SetTargetDegrees>

  g->stopped = 0;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  g->deb_cnt = 0;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  g->state   = GRIP_RUNNING;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 800216a:	e000      	b.n	800216e <GripStop_Start+0x96>
  if (!g || !g->servo) return;
 800216c:	bf00      	nop
}
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <LinkComm_Init>:
uint16_t last_rx_index = 0;
volatile bool data_ready = false;

volatile char link_mark = 0;

void LinkComm_Init(UART_HandleTypeDef* huart) {
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
    link_uart = huart;
 800217c:	4a0f      	ldr	r2, [pc, #60]	@ (80021bc <LinkComm_Init+0x48>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_DMA(link_uart, rx_buffer, RX_BUFFER_SIZE);
 8002182:	4b0e      	ldr	r3, [pc, #56]	@ (80021bc <LinkComm_Init+0x48>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800218a:	490d      	ldr	r1, [pc, #52]	@ (80021c0 <LinkComm_Init+0x4c>)
 800218c:	4618      	mov	r0, r3
 800218e:	f005 f921 	bl	80073d4 <HAL_UART_Receive_DMA>
    __HAL_UART_ENABLE_IT(link_uart, UART_IT_IDLE);
 8002192:	4b0a      	ldr	r3, [pc, #40]	@ (80021bc <LinkComm_Init+0x48>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	4b08      	ldr	r3, [pc, #32]	@ (80021bc <LinkComm_Init+0x48>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0210 	orr.w	r2, r2, #16
 80021a4:	60da      	str	r2, [r3, #12]
    HAL_UART_Receive_IT(link_uart, &rx_char, 1);
 80021a6:	4b05      	ldr	r3, [pc, #20]	@ (80021bc <LinkComm_Init+0x48>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2201      	movs	r2, #1
 80021ac:	4905      	ldr	r1, [pc, #20]	@ (80021c4 <LinkComm_Init+0x50>)
 80021ae:	4618      	mov	r0, r3
 80021b0:	f005 f8eb 	bl	800738a <HAL_UART_Receive_IT>
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	2000029c 	.word	0x2000029c
 80021c0:	200002a4 	.word	0x200002a4
 80021c4:	200002a0 	.word	0x200002a0

080021c8 <LinkComm_Task>:

void LinkComm_Task(void) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
    if (data_ready) {
 80021ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002248 <LinkComm_Task+0x80>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d032      	beq.n	800223e <LinkComm_Task+0x76>
        data_ready = false;
 80021d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002248 <LinkComm_Task+0x80>)
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
        link_mark = 0;
 80021de:	4b1b      	ldr	r3, [pc, #108]	@ (800224c <LinkComm_Task+0x84>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < RX_BUFFER_SIZE && rx_buffer[i] != '\0'; ++i) {
 80021e4:	2300      	movs	r3, #0
 80021e6:	607b      	str	r3, [r7, #4]
 80021e8:	e014      	b.n	8002214 <LinkComm_Task+0x4c>
             char c = (char)rx_buffer[i];
 80021ea:	4a19      	ldr	r2, [pc, #100]	@ (8002250 <LinkComm_Task+0x88>)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4413      	add	r3, r2
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	70fb      	strb	r3, [r7, #3]
             if (c == '!') break;
 80021f4:	78fb      	ldrb	r3, [r7, #3]
 80021f6:	2b21      	cmp	r3, #33	@ 0x21
 80021f8:	d017      	beq.n	800222a <LinkComm_Task+0x62>
             if (c == '#' || c == '$') {
 80021fa:	78fb      	ldrb	r3, [r7, #3]
 80021fc:	2b23      	cmp	r3, #35	@ 0x23
 80021fe:	d002      	beq.n	8002206 <LinkComm_Task+0x3e>
 8002200:	78fb      	ldrb	r3, [r7, #3]
 8002202:	2b24      	cmp	r3, #36	@ 0x24
 8002204:	d103      	bne.n	800220e <LinkComm_Task+0x46>
                 link_mark = c;
 8002206:	4a11      	ldr	r2, [pc, #68]	@ (800224c <LinkComm_Task+0x84>)
 8002208:	78fb      	ldrb	r3, [r7, #3]
 800220a:	7013      	strb	r3, [r2, #0]
                 break;
 800220c:	e00e      	b.n	800222c <LinkComm_Task+0x64>
        for (uint32_t i = 0; i < RX_BUFFER_SIZE && rx_buffer[i] != '\0'; ++i) {
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3301      	adds	r3, #1
 8002212:	607b      	str	r3, [r7, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800221a:	d207      	bcs.n	800222c <LinkComm_Task+0x64>
 800221c:	4a0c      	ldr	r2, [pc, #48]	@ (8002250 <LinkComm_Task+0x88>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1e0      	bne.n	80021ea <LinkComm_Task+0x22>
 8002228:	e000      	b.n	800222c <LinkComm_Task+0x64>
             if (c == '!') break;
 800222a:	bf00      	nop
             }
        }
//        printf("[USART6 RX] %s\r\n", rx_buffer);
        parse_and_control((char*)rx_buffer);
 800222c:	4808      	ldr	r0, [pc, #32]	@ (8002250 <LinkComm_Task+0x88>)
 800222e:	f000 fcc9 	bl	8002bc4 <parse_and_control>
        memset(rx_buffer, 0, sizeof(rx_buffer));
 8002232:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002236:	2100      	movs	r1, #0
 8002238:	4805      	ldr	r0, [pc, #20]	@ (8002250 <LinkComm_Task+0x88>)
 800223a:	f008 fab3 	bl	800a7a4 <memset>
    }
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000aa6 	.word	0x20000aa6
 800224c:	20000aa7 	.word	0x20000aa7
 8002250:	200002a4 	.word	0x200002a4

08002254 <print_to_link>:

void print_to_link(const char *fmt, ...) {
 8002254:	b40f      	push	{r0, r1, r2, r3}
 8002256:	b590      	push	{r4, r7, lr}
 8002258:	b0c3      	sub	sp, #268	@ 0x10c
 800225a:	af00      	add	r7, sp, #0
    char buff[256];
    va_list args;
    va_start(args, fmt);
 800225c:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 8002260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002264:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002268:	601a      	str	r2, [r3, #0]
    vsnprintf(buff, sizeof(buff), fmt, args);
 800226a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800226e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002272:	f107 0008 	add.w	r0, r7, #8
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800227c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002280:	f008 f9ee 	bl	800a660 <vsniprintf>
    HAL_UART_Transmit(link_uart, (uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
 8002284:	4b0b      	ldr	r3, [pc, #44]	@ (80022b4 <print_to_link+0x60>)
 8002286:	681c      	ldr	r4, [r3, #0]
 8002288:	f107 0308 	add.w	r3, r7, #8
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe f80f 	bl	80002b0 <strlen>
 8002292:	4603      	mov	r3, r0
 8002294:	b29a      	uxth	r2, r3
 8002296:	f107 0108 	add.w	r1, r7, #8
 800229a:	f04f 33ff 	mov.w	r3, #4294967295
 800229e:	4620      	mov	r0, r4
 80022a0:	f004 ffe8 	bl	8007274 <HAL_UART_Transmit>
    va_end(args);
}
 80022a4:	bf00      	nop
 80022a6:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 80022aa:	46bd      	mov	sp, r7
 80022ac:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80022b0:	b004      	add	sp, #16
 80022b2:	4770      	bx	lr
 80022b4:	2000029c 	.word	0x2000029c

080022b8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
    if (huart->Instance == link_uart->Instance) {
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b25      	ldr	r3, [pc, #148]	@ (800235c <HAL_UART_RxCpltCallback+0xa4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d134      	bne.n	8002338 <HAL_UART_RxCpltCallback+0x80>
        uint8_t rx_data = rx_char;
 80022ce:	4b24      	ldr	r3, [pc, #144]	@ (8002360 <HAL_UART_RxCpltCallback+0xa8>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	73fb      	strb	r3, [r7, #15]
        if (rx_data == '!' || last_rx_index >= RX_BUFFER_SIZE - 1) {
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	2b21      	cmp	r3, #33	@ 0x21
 80022d8:	d005      	beq.n	80022e6 <HAL_UART_RxCpltCallback+0x2e>
 80022da:	4b22      	ldr	r3, [pc, #136]	@ (8002364 <HAL_UART_RxCpltCallback+0xac>)
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d916      	bls.n	8002314 <HAL_UART_RxCpltCallback+0x5c>
        	rx_buffer[last_rx_index++] = rx_data;
 80022e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002364 <HAL_UART_RxCpltCallback+0xac>)
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	b291      	uxth	r1, r2
 80022ee:	4a1d      	ldr	r2, [pc, #116]	@ (8002364 <HAL_UART_RxCpltCallback+0xac>)
 80022f0:	8011      	strh	r1, [r2, #0]
 80022f2:	4619      	mov	r1, r3
 80022f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002368 <HAL_UART_RxCpltCallback+0xb0>)
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	5453      	strb	r3, [r2, r1]
        	rx_buffer[last_rx_index] = '\0';
 80022fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002364 <HAL_UART_RxCpltCallback+0xac>)
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	4b19      	ldr	r3, [pc, #100]	@ (8002368 <HAL_UART_RxCpltCallback+0xb0>)
 8002302:	2100      	movs	r1, #0
 8002304:	5499      	strb	r1, [r3, r2]
            last_rx_index = 0;
 8002306:	4b17      	ldr	r3, [pc, #92]	@ (8002364 <HAL_UART_RxCpltCallback+0xac>)
 8002308:	2200      	movs	r2, #0
 800230a:	801a      	strh	r2, [r3, #0]
            data_ready = true;
 800230c:	4b17      	ldr	r3, [pc, #92]	@ (800236c <HAL_UART_RxCpltCallback+0xb4>)
 800230e:	2201      	movs	r2, #1
 8002310:	701a      	strb	r2, [r3, #0]
 8002312:	e009      	b.n	8002328 <HAL_UART_RxCpltCallback+0x70>
        } else {
            rx_buffer[last_rx_index++] = rx_data;
 8002314:	4b13      	ldr	r3, [pc, #76]	@ (8002364 <HAL_UART_RxCpltCallback+0xac>)
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	1c5a      	adds	r2, r3, #1
 800231a:	b291      	uxth	r1, r2
 800231c:	4a11      	ldr	r2, [pc, #68]	@ (8002364 <HAL_UART_RxCpltCallback+0xac>)
 800231e:	8011      	strh	r1, [r2, #0]
 8002320:	4619      	mov	r1, r3
 8002322:	4a11      	ldr	r2, [pc, #68]	@ (8002368 <HAL_UART_RxCpltCallback+0xb0>)
 8002324:	7bfb      	ldrb	r3, [r7, #15]
 8002326:	5453      	strb	r3, [r2, r1]
        }
        HAL_UART_Receive_IT(link_uart, &rx_char, 1);
 8002328:	4b0c      	ldr	r3, [pc, #48]	@ (800235c <HAL_UART_RxCpltCallback+0xa4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2201      	movs	r2, #1
 800232e:	490c      	ldr	r1, [pc, #48]	@ (8002360 <HAL_UART_RxCpltCallback+0xa8>)
 8002330:	4618      	mov	r0, r3
 8002332:	f005 f82a 	bl	800738a <HAL_UART_Receive_IT>
    } else if (huart->Instance == UART4 || huart->Instance == UART5) {
        Dynamixel_onDmaRxComplete(huart);
    }
}
 8002336:	e00c      	b.n	8002352 <HAL_UART_RxCpltCallback+0x9a>
    } else if (huart->Instance == UART4 || huart->Instance == UART5) {
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a0c      	ldr	r2, [pc, #48]	@ (8002370 <HAL_UART_RxCpltCallback+0xb8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d004      	beq.n	800234c <HAL_UART_RxCpltCallback+0x94>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a0b      	ldr	r2, [pc, #44]	@ (8002374 <HAL_UART_RxCpltCallback+0xbc>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d102      	bne.n	8002352 <HAL_UART_RxCpltCallback+0x9a>
        Dynamixel_onDmaRxComplete(huart);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7ff f863 	bl	8001418 <Dynamixel_onDmaRxComplete>
}
 8002352:	bf00      	nop
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	2000029c 	.word	0x2000029c
 8002360:	200002a0 	.word	0x200002a0
 8002364:	20000aa4 	.word	0x20000aa4
 8002368:	200002a4 	.word	0x200002a4
 800236c:	20000aa6 	.word	0x20000aa6
 8002370:	40004c00 	.word	0x40004c00
 8002374:	40005000 	.word	0x40005000

08002378 <HAL_UART_IDLE_Callback>:

void HAL_UART_IDLE_Callback(UART_HandleTypeDef *huart) {
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == link_uart->Instance) {
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4b23      	ldr	r3, [pc, #140]	@ (8002414 <HAL_UART_IDLE_Callback+0x9c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d13d      	bne.n	800240a <HAL_UART_IDLE_Callback+0x92>
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800238e:	2300      	movs	r3, #0
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	68bb      	ldr	r3, [r7, #8]
        uint16_t current_pos = RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80023b2:	81fb      	strh	r3, [r7, #14]
        uint16_t data_len = (current_pos >= last_rx_index) ?
 80023b4:	4b18      	ldr	r3, [pc, #96]	@ (8002418 <HAL_UART_IDLE_Callback+0xa0>)
 80023b6:	881b      	ldrh	r3, [r3, #0]
 80023b8:	89fa      	ldrh	r2, [r7, #14]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d305      	bcc.n	80023ca <HAL_UART_IDLE_Callback+0x52>
                             (current_pos - last_rx_index) :
 80023be:	4b16      	ldr	r3, [pc, #88]	@ (8002418 <HAL_UART_IDLE_Callback+0xa0>)
 80023c0:	881b      	ldrh	r3, [r3, #0]
        uint16_t data_len = (current_pos >= last_rx_index) ?
 80023c2:	89fa      	ldrh	r2, [r7, #14]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	e007      	b.n	80023da <HAL_UART_IDLE_Callback+0x62>
                             (RX_BUFFER_SIZE - last_rx_index + current_pos);
 80023ca:	4b13      	ldr	r3, [pc, #76]	@ (8002418 <HAL_UART_IDLE_Callback+0xa0>)
 80023cc:	881b      	ldrh	r3, [r3, #0]
 80023ce:	89fa      	ldrh	r2, [r7, #14]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	b29b      	uxth	r3, r3
        uint16_t data_len = (current_pos >= last_rx_index) ?
 80023d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023d8:	b29b      	uxth	r3, r3
 80023da:	81bb      	strh	r3, [r7, #12]
        if (data_len > 0) {
 80023dc:	89bb      	ldrh	r3, [r7, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d010      	beq.n	8002404 <HAL_UART_IDLE_Callback+0x8c>
            memcpy(rx_buffer, &rx_buffer[last_rx_index], data_len);
 80023e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002418 <HAL_UART_IDLE_Callback+0xa0>)
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	4b0c      	ldr	r3, [pc, #48]	@ (800241c <HAL_UART_IDLE_Callback+0xa4>)
 80023ea:	4413      	add	r3, r2
 80023ec:	89ba      	ldrh	r2, [r7, #12]
 80023ee:	4619      	mov	r1, r3
 80023f0:	480a      	ldr	r0, [pc, #40]	@ (800241c <HAL_UART_IDLE_Callback+0xa4>)
 80023f2:	f008 faa0 	bl	800a936 <memcpy>
            rx_buffer[data_len] = '\0';
 80023f6:	89bb      	ldrh	r3, [r7, #12]
 80023f8:	4a08      	ldr	r2, [pc, #32]	@ (800241c <HAL_UART_IDLE_Callback+0xa4>)
 80023fa:	2100      	movs	r1, #0
 80023fc:	54d1      	strb	r1, [r2, r3]
            data_ready = true;
 80023fe:	4b08      	ldr	r3, [pc, #32]	@ (8002420 <HAL_UART_IDLE_Callback+0xa8>)
 8002400:	2201      	movs	r2, #1
 8002402:	701a      	strb	r2, [r3, #0]
        }
        last_rx_index = current_pos;
 8002404:	4a04      	ldr	r2, [pc, #16]	@ (8002418 <HAL_UART_IDLE_Callback+0xa0>)
 8002406:	89fb      	ldrh	r3, [r7, #14]
 8002408:	8013      	strh	r3, [r2, #0]
    }
}
 800240a:	bf00      	nop
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	2000029c 	.word	0x2000029c
 8002418:	20000aa4 	.word	0x20000aa4
 800241c:	200002a4 	.word	0x200002a4
 8002420:	20000aa6 	.word	0x20000aa6

08002424 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800242c:	1d39      	adds	r1, r7, #4
 800242e:	f04f 33ff 	mov.w	r3, #4294967295
 8002432:	2201      	movs	r2, #1
 8002434:	4803      	ldr	r0, [pc, #12]	@ (8002444 <__io_putchar+0x20>)
 8002436:	f004 ff1d 	bl	8007274 <HAL_UART_Transmit>
  return ch;
 800243a:	687b      	ldr	r3, [r7, #4]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20000c7c 	.word	0x20000c7c

08002448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800244c:	f002 f834 	bl	80044b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002450:	f000 f83c 	bl	80024cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002454:	f7ff fd2e 	bl	8001eb4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002458:	f7fe ff1a 	bl	8001290 <MX_DMA_Init>
  MX_UART4_Init();
 800245c:	f001 fd9e 	bl	8003f9c <MX_UART4_Init>
  MX_USART2_UART_Init();
 8002460:	f001 fdf0 	bl	8004044 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8002464:	f001 fe18 	bl	8004098 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8002468:	f7fe fdfa 	bl	8001060 <MX_ADC1_Init>
  MX_ADC2_Init();
 800246c:	f7fe fe4a 	bl	8001104 <MX_ADC2_Init>
  MX_TIM3_Init();
 8002470:	f001 fcb4 	bl	8003ddc <MX_TIM3_Init>
  MX_UART5_Init();
 8002474:	f001 fdbc 	bl	8003ff0 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  #if defined(USE_MY_DWT)
  DWT_Init();
 8002478:	f7fe ff48 	bl	800130c <DWT_Init>
  #endif

  Dynamixel_begin_right(&huart4, GPIOA, GPIO_PIN_4);
 800247c:	2210      	movs	r2, #16
 800247e:	490e      	ldr	r1, [pc, #56]	@ (80024b8 <main+0x70>)
 8002480:	480e      	ldr	r0, [pc, #56]	@ (80024bc <main+0x74>)
 8002482:	f7fe ffa1 	bl	80013c8 <Dynamixel_begin_right>
  Dynamixel_begin_left (&huart5, GPIOC, GPIO_PIN_11);
 8002486:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800248a:	490d      	ldr	r1, [pc, #52]	@ (80024c0 <main+0x78>)
 800248c:	480d      	ldr	r0, [pc, #52]	@ (80024c4 <main+0x7c>)
 800248e:	f7fe ffaf 	bl	80013f0 <Dynamixel_begin_left>
  LinkComm_Init(&huart6);
 8002492:	480d      	ldr	r0, [pc, #52]	@ (80024c8 <main+0x80>)
 8002494:	f7ff fe6e 	bl	8002174 <LinkComm_Init>
  init_dynamixels();
 8002498:	f000 f8a8 	bl	80025ec <init_dynamixels>

  #if DO_INIT_HOME
  init_move_all_to_180();
 800249c:	f000 fe06 	bl	80030ac <init_move_all_to_180>
  #endif

  ServoSystem_Init();
 80024a0:	f001 fa8e 	bl	80039c0 <ServoSystem_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	LinkComm_Task();
 80024a4:	f7ff fe90 	bl	80021c8 <LinkComm_Task>
    update_all_motors();
 80024a8:	f000 fe86 	bl	80031b8 <update_all_motors>

    HAL_Delay(2);
 80024ac:	2002      	movs	r0, #2
 80024ae:	f002 f875 	bl	800459c <HAL_Delay>
	LinkComm_Task();
 80024b2:	bf00      	nop
 80024b4:	e7f6      	b.n	80024a4 <main+0x5c>
 80024b6:	bf00      	nop
 80024b8:	40020000 	.word	0x40020000
 80024bc:	20000bec 	.word	0x20000bec
 80024c0:	40020800 	.word	0x40020800
 80024c4:	20000c34 	.word	0x20000c34
 80024c8:	20000cc4 	.word	0x20000cc4

080024cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b094      	sub	sp, #80	@ 0x50
 80024d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024d2:	f107 031c 	add.w	r3, r7, #28
 80024d6:	2234      	movs	r2, #52	@ 0x34
 80024d8:	2100      	movs	r1, #0
 80024da:	4618      	mov	r0, r3
 80024dc:	f008 f962 	bl	800a7a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024e0:	f107 0308 	add.w	r3, r7, #8
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024f0:	2300      	movs	r3, #0
 80024f2:	607b      	str	r3, [r7, #4]
 80024f4:	4b2c      	ldr	r3, [pc, #176]	@ (80025a8 <SystemClock_Config+0xdc>)
 80024f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f8:	4a2b      	ldr	r2, [pc, #172]	@ (80025a8 <SystemClock_Config+0xdc>)
 80024fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002500:	4b29      	ldr	r3, [pc, #164]	@ (80025a8 <SystemClock_Config+0xdc>)
 8002502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002508:	607b      	str	r3, [r7, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800250c:	2300      	movs	r3, #0
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	4b26      	ldr	r3, [pc, #152]	@ (80025ac <SystemClock_Config+0xe0>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a25      	ldr	r2, [pc, #148]	@ (80025ac <SystemClock_Config+0xe0>)
 8002516:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	4b23      	ldr	r3, [pc, #140]	@ (80025ac <SystemClock_Config+0xe0>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002524:	603b      	str	r3, [r7, #0]
 8002526:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002528:	2301      	movs	r3, #1
 800252a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800252c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002530:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002532:	2302      	movs	r3, #2
 8002534:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002536:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800253a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800253c:	2304      	movs	r3, #4
 800253e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002540:	23b4      	movs	r3, #180	@ 0xb4
 8002542:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002544:	2302      	movs	r3, #2
 8002546:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002548:	2302      	movs	r3, #2
 800254a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800254c:	2302      	movs	r3, #2
 800254e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002550:	f107 031c 	add.w	r3, r7, #28
 8002554:	4618      	mov	r0, r3
 8002556:	f003 fd13 	bl	8005f80 <HAL_RCC_OscConfig>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002560:	f000 f826 	bl	80025b0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002564:	f003 f972 	bl	800584c <HAL_PWREx_EnableOverDrive>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800256e:	f000 f81f 	bl	80025b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002572:	230f      	movs	r3, #15
 8002574:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002576:	2302      	movs	r3, #2
 8002578:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800257e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002582:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002584:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002588:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800258a:	f107 0308 	add.w	r3, r7, #8
 800258e:	2105      	movs	r1, #5
 8002590:	4618      	mov	r0, r3
 8002592:	f003 f9ab 	bl	80058ec <HAL_RCC_ClockConfig>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800259c:	f000 f808 	bl	80025b0 <Error_Handler>
  }
}
 80025a0:	bf00      	nop
 80025a2:	3750      	adds	r7, #80	@ 0x50
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40007000 	.word	0x40007000

080025b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025b4:	b672      	cpsid	i
}
 80025b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025b8:	bf00      	nop
 80025ba:	e7fd      	b.n	80025b8 <Error_Handler+0x8>

080025bc <dxl_write_u8>:
extern const float VEL_DPS[];
#define DXL_ID_CNT 14
static float g_target_deg[DXL_ID_CNT];
volatile bool done = false;

static bool dxl_write_u8(uint8_t id, uint16_t addr, uint8_t val, uint32_t tmo_ms){
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	4603      	mov	r3, r0
 80025c6:	71fb      	strb	r3, [r7, #7]
 80025c8:	460b      	mov	r3, r1
 80025ca:	80bb      	strh	r3, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	71bb      	strb	r3, [r7, #6]
    Dynamixel_write(id, addr, &val, 1);
 80025d0:	1dba      	adds	r2, r7, #6
 80025d2:	88b9      	ldrh	r1, [r7, #4]
 80025d4:	79f8      	ldrb	r0, [r7, #7]
 80025d6:	2301      	movs	r3, #1
 80025d8:	f7ff f8cc 	bl	8001774 <Dynamixel_write>
    HAL_Delay(3);
 80025dc:	2003      	movs	r0, #3
 80025de:	f001 ffdd 	bl	800459c <HAL_Delay>
    return true;
 80025e2:	2301      	movs	r3, #1
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <init_dynamixels>:

void init_dynamixels(void) {
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
	 for (uint8_t i = 0; i < DXL_ID_CNT; i++) {
 80025f2:	2300      	movs	r3, #0
 80025f4:	73fb      	strb	r3, [r7, #15]
 80025f6:	e00c      	b.n	8002612 <init_dynamixels+0x26>
	      uint8_t id = DXL_ID_LIST[i];
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
 80025fa:	4a3b      	ldr	r2, [pc, #236]	@ (80026e8 <init_dynamixels+0xfc>)
 80025fc:	5cd3      	ldrb	r3, [r2, r3]
 80025fe:	727b      	strb	r3, [r7, #9]
	      dxl_write_u8(id, 64, 0, 50);
 8002600:	7a78      	ldrb	r0, [r7, #9]
 8002602:	2332      	movs	r3, #50	@ 0x32
 8002604:	2200      	movs	r2, #0
 8002606:	2140      	movs	r1, #64	@ 0x40
 8002608:	f7ff ffd8 	bl	80025bc <dxl_write_u8>
	 for (uint8_t i = 0; i < DXL_ID_CNT; i++) {
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	3301      	adds	r3, #1
 8002610:	73fb      	strb	r3, [r7, #15]
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	2b0d      	cmp	r3, #13
 8002616:	d9ef      	bls.n	80025f8 <init_dynamixels+0xc>
	 }

	 for (uint8_t i = 0; i < DXL_ID_CNT; i++) {
 8002618:	2300      	movs	r3, #0
 800261a:	73bb      	strb	r3, [r7, #14]
 800261c:	e00c      	b.n	8002638 <init_dynamixels+0x4c>
          uint8_t id = DXL_ID_LIST[i];
 800261e:	7bbb      	ldrb	r3, [r7, #14]
 8002620:	4a31      	ldr	r2, [pc, #196]	@ (80026e8 <init_dynamixels+0xfc>)
 8002622:	5cd3      	ldrb	r3, [r2, r3]
 8002624:	72bb      	strb	r3, [r7, #10]
          dxl_write_u8(id, 11, 3, 50);
 8002626:	7ab8      	ldrb	r0, [r7, #10]
 8002628:	2332      	movs	r3, #50	@ 0x32
 800262a:	2203      	movs	r2, #3
 800262c:	210b      	movs	r1, #11
 800262e:	f7ff ffc5 	bl	80025bc <dxl_write_u8>
	 for (uint8_t i = 0; i < DXL_ID_CNT; i++) {
 8002632:	7bbb      	ldrb	r3, [r7, #14]
 8002634:	3301      	adds	r3, #1
 8002636:	73bb      	strb	r3, [r7, #14]
 8002638:	7bbb      	ldrb	r3, [r7, #14]
 800263a:	2b0d      	cmp	r3, #13
 800263c:	d9ef      	bls.n	800261e <init_dynamixels+0x32>
     }

	 for (uint8_t i = 0; i < DXL_ID_CNT; i++) {
 800263e:	2300      	movs	r3, #0
 8002640:	737b      	strb	r3, [r7, #13]
 8002642:	e00f      	b.n	8002664 <init_dynamixels+0x78>
	      uint8_t id = DXL_ID_LIST[i];
 8002644:	7b7b      	ldrb	r3, [r7, #13]
 8002646:	4a28      	ldr	r2, [pc, #160]	@ (80026e8 <init_dynamixels+0xfc>)
 8002648:	5cd3      	ldrb	r3, [r2, r3]
 800264a:	72fb      	strb	r3, [r7, #11]
	      dxl_write_u8(id, 64, 1, 50);
 800264c:	7af8      	ldrb	r0, [r7, #11]
 800264e:	2332      	movs	r3, #50	@ 0x32
 8002650:	2201      	movs	r2, #1
 8002652:	2140      	movs	r1, #64	@ 0x40
 8002654:	f7ff ffb2 	bl	80025bc <dxl_write_u8>
	      HAL_Delay(20);
 8002658:	2014      	movs	r0, #20
 800265a:	f001 ff9f 	bl	800459c <HAL_Delay>
	 for (uint8_t i = 0; i < DXL_ID_CNT; i++) {
 800265e:	7b7b      	ldrb	r3, [r7, #13]
 8002660:	3301      	adds	r3, #1
 8002662:	737b      	strb	r3, [r7, #13]
 8002664:	7b7b      	ldrb	r3, [r7, #13]
 8002666:	2b0d      	cmp	r3, #13
 8002668:	d9ec      	bls.n	8002644 <init_dynamixels+0x58>
	 }

	 uint16_t P = 1500, I = 60, D = 140;
 800266a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800266e:	80fb      	strh	r3, [r7, #6]
 8002670:	233c      	movs	r3, #60	@ 0x3c
 8002672:	80bb      	strh	r3, [r7, #4]
 8002674:	238c      	movs	r3, #140	@ 0x8c
 8002676:	807b      	strh	r3, [r7, #2]
	 Dynamixel_write(2, 84, (uint8_t*)&P, 2);
 8002678:	1dba      	adds	r2, r7, #6
 800267a:	2302      	movs	r3, #2
 800267c:	2154      	movs	r1, #84	@ 0x54
 800267e:	2002      	movs	r0, #2
 8002680:	f7ff f878 	bl	8001774 <Dynamixel_write>
	 Dynamixel_write(2, 82, (uint8_t*)&I, 2);
 8002684:	1d3a      	adds	r2, r7, #4
 8002686:	2302      	movs	r3, #2
 8002688:	2152      	movs	r1, #82	@ 0x52
 800268a:	2002      	movs	r0, #2
 800268c:	f7ff f872 	bl	8001774 <Dynamixel_write>
	 Dynamixel_write(2, 80, (uint8_t*)&D, 2);
 8002690:	1cba      	adds	r2, r7, #2
 8002692:	2302      	movs	r3, #2
 8002694:	2150      	movs	r1, #80	@ 0x50
 8002696:	2002      	movs	r0, #2
 8002698:	f7ff f86c 	bl	8001774 <Dynamixel_write>
	 Dynamixel_write(9, 84, (uint8_t*)&P, 2);
 800269c:	1dba      	adds	r2, r7, #6
 800269e:	2302      	movs	r3, #2
 80026a0:	2154      	movs	r1, #84	@ 0x54
 80026a2:	2009      	movs	r0, #9
 80026a4:	f7ff f866 	bl	8001774 <Dynamixel_write>
	 Dynamixel_write(9, 82, (uint8_t*)&I, 2);
 80026a8:	1d3a      	adds	r2, r7, #4
 80026aa:	2302      	movs	r3, #2
 80026ac:	2152      	movs	r1, #82	@ 0x52
 80026ae:	2009      	movs	r0, #9
 80026b0:	f7ff f860 	bl	8001774 <Dynamixel_write>
	 Dynamixel_write(9, 80, (uint8_t*)&D, 2);
 80026b4:	1cba      	adds	r2, r7, #2
 80026b6:	2302      	movs	r3, #2
 80026b8:	2150      	movs	r1, #80	@ 0x50
 80026ba:	2009      	movs	r0, #9
 80026bc:	f7ff f85a 	bl	8001774 <Dynamixel_write>
     for (uint8_t i = 0; i < DXL_ID_CNT; ++i) {
 80026c0:	2300      	movs	r3, #0
 80026c2:	733b      	strb	r3, [r7, #12]
 80026c4:	e008      	b.n	80026d8 <init_dynamixels+0xec>
          g_target_deg[i] = 180.0f;
 80026c6:	7b3b      	ldrb	r3, [r7, #12]
 80026c8:	4a08      	ldr	r2, [pc, #32]	@ (80026ec <init_dynamixels+0x100>)
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	4a08      	ldr	r2, [pc, #32]	@ (80026f0 <init_dynamixels+0x104>)
 80026d0:	601a      	str	r2, [r3, #0]
     for (uint8_t i = 0; i < DXL_ID_CNT; ++i) {
 80026d2:	7b3b      	ldrb	r3, [r7, #12]
 80026d4:	3301      	adds	r3, #1
 80026d6:	733b      	strb	r3, [r7, #12]
 80026d8:	7b3b      	ldrb	r3, [r7, #12]
 80026da:	2b0d      	cmp	r3, #13
 80026dc:	d9f3      	bls.n	80026c6 <init_dynamixels+0xda>
     }

}
 80026de:	bf00      	nop
 80026e0:	bf00      	nop
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	0800d610 	.word	0x0800d610
 80026ec:	20000aa8 	.word	0x20000aa8
 80026f0:	43340000 	.word	0x43340000

080026f4 <cnt_to_deg360>:

float cnt_to_deg360(int32_t pos_cnt) {
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
	return (float)pos_cnt / 4096.0f * 360.0f;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	ee07 3a90 	vmov	s15, r3
 8002702:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002706:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8002724 <cnt_to_deg360+0x30>
 800270a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800270e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002728 <cnt_to_deg360+0x34>
 8002712:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002716:	eeb0 0a67 	vmov.f32	s0, s15
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	45800000 	.word	0x45800000
 8002728:	43b40000 	.word	0x43b40000

0800272c <deg0to360_to_cnt>:

int32_t deg0to360_to_cnt(float deg) {
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	ed87 0a01 	vstr	s0, [r7, #4]
	return (int32_t)(deg / 360.0f * 4096.0f);
 8002736:	ed97 7a01 	vldr	s14, [r7, #4]
 800273a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8002760 <deg0to360_to_cnt+0x34>
 800273e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002742:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002764 <deg0to360_to_cnt+0x38>
 8002746:	ee67 7a87 	vmul.f32	s15, s15, s14
 800274a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800274e:	ee17 3a90 	vmov	r3, s15
}
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	43b40000 	.word	0x43b40000
 8002764:	45800000 	.word	0x45800000

08002768 <wrap360>:

static inline float wrap360(float deg) {
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	ed87 0a01 	vstr	s0, [r7, #4]
  while (deg < 0.0f)   deg += 360.0f;
 8002772:	e007      	b.n	8002784 <wrap360+0x1c>
 8002774:	edd7 7a01 	vldr	s15, [r7, #4]
 8002778:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80027cc <wrap360+0x64>
 800277c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002780:	edc7 7a01 	vstr	s15, [r7, #4]
 8002784:	edd7 7a01 	vldr	s15, [r7, #4]
 8002788:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800278c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002790:	d4f0      	bmi.n	8002774 <wrap360+0xc>
  while (deg >= 360.0f) deg -= 360.0f;
 8002792:	e007      	b.n	80027a4 <wrap360+0x3c>
 8002794:	edd7 7a01 	vldr	s15, [r7, #4]
 8002798:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80027cc <wrap360+0x64>
 800279c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027a0:	edc7 7a01 	vstr	s15, [r7, #4]
 80027a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80027a8:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80027cc <wrap360+0x64>
 80027ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b4:	daee      	bge.n	8002794 <wrap360+0x2c>
  return deg;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	ee07 3a90 	vmov	s15, r3
}
 80027bc:	eeb0 0a67 	vmov.f32	s0, s15
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	43b40000 	.word	0x43b40000

080027d0 <pv_raw_from_deg_s>:

uint32_t pv_raw_from_deg_s(float deg_per_sec) {
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	ed87 0a01 	vstr	s0, [r7, #4]
    return (uint32_t)(deg_per_sec / 0.229f / 360.0f * 60.0f);
 80027da:	edd7 7a01 	vldr	s15, [r7, #4]
 80027de:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800280c <pv_raw_from_deg_s+0x3c>
 80027e2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80027e6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8002810 <pv_raw_from_deg_s+0x40>
 80027ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027ee:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002814 <pv_raw_from_deg_s+0x44>
 80027f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027fa:	ee17 3a90 	vmov	r3, s15
}
 80027fe:	4618      	mov	r0, r3
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	3e6a7efa 	.word	0x3e6a7efa
 8002810:	43b40000 	.word	0x43b40000
 8002814:	42700000 	.word	0x42700000

08002818 <idx_of_id>:

int8_t idx_of_id(uint8_t id) {
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < DXL_ID_CNT; i++){
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	e00c      	b.n	8002842 <idx_of_id+0x2a>
		if(DXL_ID_LIST[i] == id) return i;
 8002828:	4a0b      	ldr	r2, [pc, #44]	@ (8002858 <idx_of_id+0x40>)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	4413      	add	r3, r2
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	79fa      	ldrb	r2, [r7, #7]
 8002832:	429a      	cmp	r2, r3
 8002834:	d102      	bne.n	800283c <idx_of_id+0x24>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	b25b      	sxtb	r3, r3
 800283a:	e007      	b.n	800284c <idx_of_id+0x34>
	for(int i = 0; i < DXL_ID_CNT; i++){
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	3301      	adds	r3, #1
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2b0d      	cmp	r3, #13
 8002846:	ddef      	ble.n	8002828 <idx_of_id+0x10>
	}
	return -1;
 8002848:	f04f 33ff 	mov.w	r3, #4294967295
}
 800284c:	4618      	mov	r0, r3
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	0800d610 	.word	0x0800d610

0800285c <live_slowdown_until_reached>:

bool live_slowdown_until_reached(uint8_t target_count,
                                 const uint8_t* target_ids,
                                 const float*   target_degs,
                                 uint32_t timeout)
{
 800285c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285e:	b0af      	sub	sp, #188	@ 0xbc
 8002860:	af02      	add	r7, sp, #8
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	4603      	mov	r3, r0
 800286a:	73fb      	strb	r3, [r7, #15]
    uint32_t start_time = HAL_GetTick();
 800286c:	f001 fe8a 	bl	8004584 <HAL_GetTick>
 8002870:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    const uint16_t ADDR_PRESENT_POSITION = 132;
 8002874:	2384      	movs	r3, #132	@ 0x84
 8002876:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
    const uint16_t POS_DATA_LEN = 4;
 800287a:	2304      	movs	r3, #4
 800287c:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0

    int32_t  current_positions[DXL_ID_CNT];
    for (uint8_t i = 0; i < DXL_ID_CNT; ++i) current_positions[i] = -1;
 8002880:	2300      	movs	r3, #0
 8002882:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 8002886:	e00d      	b.n	80028a4 <live_slowdown_until_reached+0x48>
 8002888:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	33b0      	adds	r3, #176	@ 0xb0
 8002890:	443b      	add	r3, r7
 8002892:	f04f 32ff 	mov.w	r2, #4294967295
 8002896:	f843 2c5c 	str.w	r2, [r3, #-92]
 800289a:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800289e:	3301      	adds	r3, #1
 80028a0:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 80028a4:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80028a8:	2b0d      	cmp	r3, #13
 80028aa:	d9ed      	bls.n	8002888 <live_slowdown_until_reached+0x2c>

    uint8_t idsR[14], idsL[14];
    uint8_t nR = 0,   nL = 0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 80028b2:	2300      	movs	r3, #0
 80028b4:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
    for (uint8_t i = 0; i < target_count; ++i) {
 80028b8:	2300      	movs	r3, #0
 80028ba:	f887 30ac 	strb.w	r3, [r7, #172]	@ 0xac
 80028be:	e032      	b.n	8002926 <live_slowdown_until_reached+0xca>
        uint8_t id = target_ids[i];
 80028c0:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	4413      	add	r3, r2
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
        if (id >= DXL_RIGHT_ID_MIN && id <= DXL_RIGHT_ID_MAX) idsR[nR++] = id;
 80028ce:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00f      	beq.n	80028f6 <live_slowdown_until_reached+0x9a>
 80028d6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80028da:	2b07      	cmp	r3, #7
 80028dc:	d80b      	bhi.n	80028f6 <live_slowdown_until_reached+0x9a>
 80028de:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	f887 20ae 	strb.w	r2, [r7, #174]	@ 0xae
 80028e8:	33b0      	adds	r3, #176	@ 0xb0
 80028ea:	443b      	add	r3, r7
 80028ec:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 80028f0:	f803 2c6c 	strb.w	r2, [r3, #-108]
 80028f4:	e012      	b.n	800291c <live_slowdown_until_reached+0xc0>
        else if (id >= DXL_LEFT_ID_MIN && id <= DXL_LEFT_ID_MAX) idsL[nL++] = id;
 80028f6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80028fa:	2b07      	cmp	r3, #7
 80028fc:	d90e      	bls.n	800291c <live_slowdown_until_reached+0xc0>
 80028fe:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002902:	2b0e      	cmp	r3, #14
 8002904:	d80a      	bhi.n	800291c <live_slowdown_until_reached+0xc0>
 8002906:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	f887 20ad 	strb.w	r2, [r7, #173]	@ 0xad
 8002910:	33b0      	adds	r3, #176	@ 0xb0
 8002912:	443b      	add	r3, r7
 8002914:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8002918:	f803 2c7c 	strb.w	r2, [r3, #-124]
    for (uint8_t i = 0; i < target_count; ++i) {
 800291c:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 8002920:	3301      	adds	r3, #1
 8002922:	f887 30ac 	strb.w	r3, [r7, #172]	@ 0xac
 8002926:	f897 20ac 	ldrb.w	r2, [r7, #172]	@ 0xac
 800292a:	7bfb      	ldrb	r3, [r7, #15]
 800292c:	429a      	cmp	r2, r3
 800292e:	d3c7      	bcc.n	80028c0 <live_slowdown_until_reached+0x64>
    }

    printf(".--------------------------\r\n");
 8002930:	489d      	ldr	r0, [pc, #628]	@ (8002ba8 <live_slowdown_until_reached+0x34c>)
 8002932:	f007 fdf9 	bl	800a528 <puts>
    while (HAL_GetTick() - start_time < timeout) {
 8002936:	e125      	b.n	8002b84 <live_slowdown_until_reached+0x328>
        if (nR) {
 8002938:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 800293c:	2b00      	cmp	r3, #0
 800293e:	d049      	beq.n	80029d4 <live_slowdown_until_reached+0x178>
            Dynamixel_SyncRead(ADDR_PRESENT_POSITION, POS_DATA_LEN, idsR, nR);
 8002940:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8002944:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8002948:	f8b7 10a0 	ldrh.w	r1, [r7, #160]	@ 0xa0
 800294c:	f8b7 00a2 	ldrh.w	r0, [r7, #162]	@ 0xa2
 8002950:	f7ff f990 	bl	8001c74 <Dynamixel_SyncRead>
            for (uint8_t k = 0; k < nR; ++k) {
 8002954:	2300      	movs	r3, #0
 8002956:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
 800295a:	e035      	b.n	80029c8 <live_slowdown_until_reached+0x16c>
                uint8_t pkt[15];
                if (Dynamixel_receiveStatusPacket(pkt, sizeof(pkt), 60)) {
 800295c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002960:	223c      	movs	r2, #60	@ 0x3c
 8002962:	210f      	movs	r1, #15
 8002964:	4618      	mov	r0, r3
 8002966:	f7fe fe93 	bl	8001690 <Dynamixel_receiveStatusPacket>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d026      	beq.n	80029be <live_slowdown_until_reached+0x162>
                    uint8_t rid = pkt[4];
 8002970:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002974:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
                    int8_t  rix = idx_of_id(rid);
 8002978:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ff4b 	bl	8002818 <idx_of_id>
 8002982:	4603      	mov	r3, r0
 8002984:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
                    if (rix >= 0) {
 8002988:	f997 309e 	ldrsb.w	r3, [r7, #158]	@ 0x9e
 800298c:	2b00      	cmp	r3, #0
 800298e:	db16      	blt.n	80029be <live_slowdown_until_reached+0x162>
                        current_positions[rix] = (int32_t)(pkt[9] |
 8002990:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002994:	461a      	mov	r2, r3
                                                (pkt[10] << 8) |
 8002996:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800299a:	021b      	lsls	r3, r3, #8
                        current_positions[rix] = (int32_t)(pkt[9] |
 800299c:	431a      	orrs	r2, r3
                                                (pkt[11] << 16) |
 800299e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80029a2:	041b      	lsls	r3, r3, #16
                                                (pkt[10] << 8) |
 80029a4:	ea42 0103 	orr.w	r1, r2, r3
                                                (pkt[12] << 24));
 80029a8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80029ac:	061a      	lsls	r2, r3, #24
                        current_positions[rix] = (int32_t)(pkt[9] |
 80029ae:	f997 309e 	ldrsb.w	r3, [r7, #158]	@ 0x9e
                                                (pkt[11] << 16) |
 80029b2:	430a      	orrs	r2, r1
                        current_positions[rix] = (int32_t)(pkt[9] |
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	33b0      	adds	r3, #176	@ 0xb0
 80029b8:	443b      	add	r3, r7
 80029ba:	f843 2c5c 	str.w	r2, [r3, #-92]
            for (uint8_t k = 0; k < nR; ++k) {
 80029be:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 80029c2:	3301      	adds	r3, #1
 80029c4:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
 80029c8:	f897 20ab 	ldrb.w	r2, [r7, #171]	@ 0xab
 80029cc:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d3c3      	bcc.n	800295c <live_slowdown_until_reached+0x100>
                    }
                }
            }
        }
        if (nL) {
 80029d4:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d045      	beq.n	8002a68 <live_slowdown_until_reached+0x20c>
            Dynamixel_SyncRead(ADDR_PRESENT_POSITION, POS_DATA_LEN, idsL, nL);
 80029dc:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 80029e0:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80029e4:	f8b7 10a0 	ldrh.w	r1, [r7, #160]	@ 0xa0
 80029e8:	f8b7 00a2 	ldrh.w	r0, [r7, #162]	@ 0xa2
 80029ec:	f7ff f942 	bl	8001c74 <Dynamixel_SyncRead>
            for (uint8_t k = 0; k < nL; ++k) {
 80029f0:	2300      	movs	r3, #0
 80029f2:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
 80029f6:	e031      	b.n	8002a5c <live_slowdown_until_reached+0x200>
                uint8_t pkt[15];
                if (Dynamixel_receiveStatusPacket(pkt, sizeof(pkt), 60)) {
 80029f8:	f107 0314 	add.w	r3, r7, #20
 80029fc:	223c      	movs	r2, #60	@ 0x3c
 80029fe:	210f      	movs	r1, #15
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fe fe45 	bl	8001690 <Dynamixel_receiveStatusPacket>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d022      	beq.n	8002a52 <live_slowdown_until_reached+0x1f6>
                    uint8_t lid = pkt[4];
 8002a0c:	7e3b      	ldrb	r3, [r7, #24]
 8002a0e:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
                    int8_t  lix = idx_of_id(lid);
 8002a12:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fefe 	bl	8002818 <idx_of_id>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c
                    if (lix >= 0) {
 8002a22:	f997 309c 	ldrsb.w	r3, [r7, #156]	@ 0x9c
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	db13      	blt.n	8002a52 <live_slowdown_until_reached+0x1f6>
                        current_positions[lix] = (int32_t)(pkt[9] |
 8002a2a:	7f7b      	ldrb	r3, [r7, #29]
 8002a2c:	461a      	mov	r2, r3
                                                (pkt[10] << 8) |
 8002a2e:	7fbb      	ldrb	r3, [r7, #30]
 8002a30:	021b      	lsls	r3, r3, #8
                        current_positions[lix] = (int32_t)(pkt[9] |
 8002a32:	431a      	orrs	r2, r3
                                                (pkt[11] << 16) |
 8002a34:	7ffb      	ldrb	r3, [r7, #31]
 8002a36:	041b      	lsls	r3, r3, #16
                                                (pkt[10] << 8) |
 8002a38:	ea42 0103 	orr.w	r1, r2, r3
                                                (pkt[12] << 24));
 8002a3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a40:	061a      	lsls	r2, r3, #24
                        current_positions[lix] = (int32_t)(pkt[9] |
 8002a42:	f997 309c 	ldrsb.w	r3, [r7, #156]	@ 0x9c
                                                (pkt[11] << 16) |
 8002a46:	430a      	orrs	r2, r1
                        current_positions[lix] = (int32_t)(pkt[9] |
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	33b0      	adds	r3, #176	@ 0xb0
 8002a4c:	443b      	add	r3, r7
 8002a4e:	f843 2c5c 	str.w	r2, [r3, #-92]
            for (uint8_t k = 0; k < nL; ++k) {
 8002a52:	f897 30aa 	ldrb.w	r3, [r7, #170]	@ 0xaa
 8002a56:	3301      	adds	r3, #1
 8002a58:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
 8002a5c:	f897 20aa 	ldrb.w	r2, [r7, #170]	@ 0xaa
 8002a60:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d3c7      	bcc.n	80029f8 <live_slowdown_until_reached+0x19c>
                    }
                }
            }
        }

        bool all_reached = true;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
        printf("Looping (t=%ld):", (long)(HAL_GetTick() - start_time));
 8002a6e:	f001 fd89 	bl	8004584 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	484b      	ldr	r0, [pc, #300]	@ (8002bac <live_slowdown_until_reached+0x350>)
 8002a7e:	f007 fceb 	bl	800a458 <iprintf>
        for (uint8_t i = 0; i < target_count; ++i) {
 8002a82:	2300      	movs	r3, #0
 8002a84:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
 8002a88:	e068      	b.n	8002b5c <live_slowdown_until_reached+0x300>
            uint8_t id = target_ids[i];
 8002a8a:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	4413      	add	r3, r2
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
            int8_t  ix = idx_of_id(id);
 8002a98:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff febb 	bl	8002818 <idx_of_id>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
            if (ix < 0 || current_positions[ix] == -1) {
 8002aa8:	f997 309a 	ldrsb.w	r3, [r7, #154]	@ 0x9a
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	db09      	blt.n	8002ac4 <live_slowdown_until_reached+0x268>
 8002ab0:	f997 309a 	ldrsb.w	r3, [r7, #154]	@ 0x9a
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	33b0      	adds	r3, #176	@ 0xb0
 8002ab8:	443b      	add	r3, r7
 8002aba:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8002abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac2:	d109      	bne.n	8002ad8 <live_slowdown_until_reached+0x27c>
                printf(" [ID %d Read FAILED!]", id);
 8002ac4:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4839      	ldr	r0, [pc, #228]	@ (8002bb0 <live_slowdown_until_reached+0x354>)
 8002acc:	f007 fcc4 	bl	800a458 <iprintf>
                all_reached = false;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8002ad6:	e03c      	b.n	8002b52 <live_slowdown_until_reached+0x2f6>
            } else {
                float cur_deg = cnt_to_deg360(current_positions[ix]);
 8002ad8:	f997 309a 	ldrsb.w	r3, [r7, #154]	@ 0x9a
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	33b0      	adds	r3, #176	@ 0xb0
 8002ae0:	443b      	add	r3, r7
 8002ae2:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fe04 	bl	80026f4 <cnt_to_deg360>
 8002aec:	ed87 0a25 	vstr	s0, [r7, #148]	@ 0x94
                float err_deg = target_degs[i] - cur_deg;
 8002af0:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	4413      	add	r3, r2
 8002afa:	ed93 7a00 	vldr	s14, [r3]
 8002afe:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8002b02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b06:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
                printf(" [ID %d: %.1f, E:%.1f]", id, cur_deg, err_deg);
 8002b0a:	f897 609b 	ldrb.w	r6, [r7, #155]	@ 0x9b
 8002b0e:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8002b12:	f7fd fd39 	bl	8000588 <__aeabi_f2d>
 8002b16:	4604      	mov	r4, r0
 8002b18:	460d      	mov	r5, r1
 8002b1a:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002b1e:	f7fd fd33 	bl	8000588 <__aeabi_f2d>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	e9cd 2300 	strd	r2, r3, [sp]
 8002b2a:	4622      	mov	r2, r4
 8002b2c:	462b      	mov	r3, r5
 8002b2e:	4631      	mov	r1, r6
 8002b30:	4820      	ldr	r0, [pc, #128]	@ (8002bb4 <live_slowdown_until_reached+0x358>)
 8002b32:	f007 fc91 	bl	800a458 <iprintf>
                if (fabsf(err_deg) > 1.5f) {
 8002b36:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8002b3a:	eef0 7ae7 	vabs.f32	s15, s15
 8002b3e:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8002b42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b4a:	dd02      	ble.n	8002b52 <live_slowdown_until_reached+0x2f6>
                    all_reached = false;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
        for (uint8_t i = 0; i < target_count; ++i) {
 8002b52:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 8002b56:	3301      	adds	r3, #1
 8002b58:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
 8002b5c:	f897 20a8 	ldrb.w	r2, [r7, #168]	@ 0xa8
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d391      	bcc.n	8002a8a <live_slowdown_until_reached+0x22e>
                }
            }
        }
        printf("\r\n");
 8002b66:	4814      	ldr	r0, [pc, #80]	@ (8002bb8 <live_slowdown_until_reached+0x35c>)
 8002b68:	f007 fcde 	bl	800a528 <puts>

        if (all_reached) {
 8002b6c:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d004      	beq.n	8002b7e <live_slowdown_until_reached+0x322>
            printf(".--- MOTORS REACHED ---\r\n");
 8002b74:	4811      	ldr	r0, [pc, #68]	@ (8002bbc <live_slowdown_until_reached+0x360>)
 8002b76:	f007 fcd7 	bl	800a528 <puts>
            return true;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e010      	b.n	8002ba0 <live_slowdown_until_reached+0x344>
        }
        HAL_Delay(80);
 8002b7e:	2050      	movs	r0, #80	@ 0x50
 8002b80:	f001 fd0c 	bl	800459c <HAL_Delay>
    while (HAL_GetTick() - start_time < timeout) {
 8002b84:	f001 fcfe 	bl	8004584 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	f63f aed0 	bhi.w	8002938 <live_slowdown_until_reached+0xdc>
    }

    printf(".--- WAIT TIMEOUT ---\r\n");
 8002b98:	4809      	ldr	r0, [pc, #36]	@ (8002bc0 <live_slowdown_until_reached+0x364>)
 8002b9a:	f007 fcc5 	bl	800a528 <puts>
    return false;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	37b4      	adds	r7, #180	@ 0xb4
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ba8:	0800d2b0 	.word	0x0800d2b0
 8002bac:	0800d2d0 	.word	0x0800d2d0
 8002bb0:	0800d2e4 	.word	0x0800d2e4
 8002bb4:	0800d2fc 	.word	0x0800d2fc
 8002bb8:	0800d314 	.word	0x0800d314
 8002bbc:	0800d318 	.word	0x0800d318
 8002bc0:	0800d334 	.word	0x0800d334

08002bc4 <parse_and_control>:

void parse_and_control(char* input) {
 8002bc4:	b590      	push	{r4, r7, lr}
 8002bc6:	b0cb      	sub	sp, #300	@ 0x12c
 8002bc8:	af02      	add	r7, sp, #8
 8002bca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002bce:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002bd2:	6018      	str	r0, [r3, #0]
    char *p = input;
 8002bd4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002bd8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    bool processed_any = false;
 8002be2:	2300      	movs	r3, #0
 8002be4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b

    while (1) {
        char *start = strchr(p, '[');
 8002be8:	215b      	movs	r1, #91	@ 0x5b
 8002bea:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8002bee:	f007 fde1 	bl	800a7b4 <strchr>
 8002bf2:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
        if (!start) break;
 8002bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 81fb 	beq.w	8002ff6 <parse_and_control+0x432>
        char *end   = strchr(start, ']');
 8002c00:	215d      	movs	r1, #93	@ 0x5d
 8002c02:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 8002c06:	f007 fdd5 	bl	800a7b4 <strchr>
 8002c0a:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0
        if (!end) break;
 8002c0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 81f1 	beq.w	8002ffa <parse_and_control+0x436>

        char seg[160];
        size_t len = (size_t)(end - start - 1);
 8002c18:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8002c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	3b01      	subs	r3, #1
 8002c24:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        if (len >= sizeof(seg)) len = sizeof(seg) - 1;
 8002c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c2c:	2b9f      	cmp	r3, #159	@ 0x9f
 8002c2e:	d902      	bls.n	8002c36 <parse_and_control+0x72>
 8002c30:	239f      	movs	r3, #159	@ 0x9f
 8002c32:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        memcpy(seg, start + 1, len);
 8002c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c3a:	1c59      	adds	r1, r3, #1
 8002c3c:	f107 030c 	add.w	r3, r7, #12
 8002c40:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002c44:	4618      	mov	r0, r3
 8002c46:	f007 fe76 	bl	800a936 <memcpy>
        seg[len] = '\0';
 8002c4a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002c4e:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8002c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c56:	4413      	add	r3, r2
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]

        char *saveptr = NULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        char *tok = strtok_r(seg, ",", &saveptr);
 8002c62:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 8002c66:	f107 030c 	add.w	r3, r7, #12
 8002c6a:	49a6      	ldr	r1, [pc, #664]	@ (8002f04 <parse_and_control+0x340>)
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f007 fde8 	bl	800a842 <strtok_r>
 8002c72:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
        if (!tok) { p = end + 1; continue; }
 8002c76:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10a      	bne.n	8002c94 <parse_and_control+0xd0>
 8002c7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002c82:	3301      	adds	r3, #1
 8002c84:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002c88:	e1bd      	b.n	8003006 <parse_and_control+0x442>
        while (*tok == ' ' || *tok == '\t' || *tok == '\r' || *tok == '\n')
            ++tok;
 8002c8a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002c8e:	3301      	adds	r3, #1
 8002c90:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        while (*tok == ' ' || *tok == '\t' || *tok == '\r' || *tok == '\n')
 8002c94:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b20      	cmp	r3, #32
 8002c9c:	d0f5      	beq.n	8002c8a <parse_and_control+0xc6>
 8002c9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b09      	cmp	r3, #9
 8002ca6:	d0f0      	beq.n	8002c8a <parse_and_control+0xc6>
 8002ca8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b0d      	cmp	r3, #13
 8002cb0:	d0eb      	beq.n	8002c8a <parse_and_control+0xc6>
 8002cb2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b0a      	cmp	r3, #10
 8002cba:	d0e6      	beq.n	8002c8a <parse_and_control+0xc6>
        char hand = (char)tolower((unsigned char)tok[0]);
 8002cbc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 8002cc6:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8002cca:	3301      	adds	r3, #1
 8002ccc:	4a8e      	ldr	r2, [pc, #568]	@ (8002f08 <parse_and_control+0x344>)
 8002cce:	4413      	add	r3, r2
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d103      	bne.n	8002ce2 <parse_and_control+0x11e>
 8002cda:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8002cde:	3320      	adds	r3, #32
 8002ce0:	e001      	b.n	8002ce6 <parse_and_control+0x122>
 8002ce2:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8002ce6:	f887 30ee 	strb.w	r3, [r7, #238]	@ 0xee
        bool is_right = (hand == 'r');
 8002cea:	f897 30ee 	ldrb.w	r3, [r7, #238]	@ 0xee
 8002cee:	2b72      	cmp	r3, #114	@ 0x72
 8002cf0:	bf0c      	ite	eq
 8002cf2:	2301      	moveq	r3, #1
 8002cf4:	2300      	movne	r3, #0
 8002cf6:	f887 30ed 	strb.w	r3, [r7, #237]	@ 0xed

        uint8_t ids[7];
        float   ang_rl[7];
        uint8_t n = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f

        for (uint8_t j = 0; j < 7; j++) {
 8002d00:	2300      	movs	r3, #0
 8002d02:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 8002d06:	e0e4      	b.n	8002ed2 <parse_and_control+0x30e>
            tok = strtok_r(NULL, ",", &saveptr);
 8002d08:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	497d      	ldr	r1, [pc, #500]	@ (8002f04 <parse_and_control+0x340>)
 8002d10:	2000      	movs	r0, #0
 8002d12:	f007 fd96 	bl	800a842 <strtok_r>
 8002d16:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
            if (!tok) break;
 8002d1a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 80dd 	beq.w	8002ede <parse_and_control+0x31a>
            while (*tok==' ' || *tok=='\t' || *tok=='\r' || *tok=='\n') ++tok;
 8002d24:	e004      	b.n	8002d30 <parse_and_control+0x16c>
 8002d26:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002d30:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b20      	cmp	r3, #32
 8002d38:	d0f5      	beq.n	8002d26 <parse_and_control+0x162>
 8002d3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b09      	cmp	r3, #9
 8002d42:	d0f0      	beq.n	8002d26 <parse_and_control+0x162>
 8002d44:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b0d      	cmp	r3, #13
 8002d4c:	d0eb      	beq.n	8002d26 <parse_and_control+0x162>
 8002d4e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b0a      	cmp	r3, #10
 8002d56:	d0e6      	beq.n	8002d26 <parse_and_control+0x162>
            char *endp = tok + strlen(tok);
 8002d58:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8002d5c:	f7fd faa8 	bl	80002b0 <strlen>
 8002d60:	4602      	mov	r2, r0
 8002d62:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002d66:	4413      	add	r3, r2
 8002d68:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            while (endp > tok && (endp[-1]==' ' || endp[-1]=='\t' || endp[-1]=='\r' || endp[-1]=='\n'))
 8002d6c:	e008      	b.n	8002d80 <parse_and_control+0x1bc>
                *--endp = '\0';
 8002d6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002d72:	3b01      	subs	r3, #1
 8002d74:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002d78:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
            while (endp > tok && (endp[-1]==' ' || endp[-1]=='\t' || endp[-1]=='\r' || endp[-1]=='\n'))
 8002d80:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8002d84:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d917      	bls.n	8002dbc <parse_and_control+0x1f8>
 8002d8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002d90:	3b01      	subs	r3, #1
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b20      	cmp	r3, #32
 8002d96:	d0ea      	beq.n	8002d6e <parse_and_control+0x1aa>
 8002d98:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b09      	cmp	r3, #9
 8002da2:	d0e4      	beq.n	8002d6e <parse_and_control+0x1aa>
 8002da4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002da8:	3b01      	subs	r3, #1
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b0d      	cmp	r3, #13
 8002dae:	d0de      	beq.n	8002d6e <parse_and_control+0x1aa>
 8002db0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002db4:	3b01      	subs	r3, #1
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b0a      	cmp	r3, #10
 8002dba:	d0d8      	beq.n	8002d6e <parse_and_control+0x1aa>
            if (tok[0]=='x' || tok[0]=='X') continue;
 8002dbc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b78      	cmp	r3, #120	@ 0x78
 8002dc4:	d07d      	beq.n	8002ec2 <parse_and_control+0x2fe>
 8002dc6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b58      	cmp	r3, #88	@ 0x58
 8002dce:	d078      	beq.n	8002ec2 <parse_and_control+0x2fe>
            bool has_digit = false;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            for (char *pchk = tok; *pchk; ++pchk) {
 8002dd6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002dda:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002dde:	e012      	b.n	8002e06 <parse_and_control+0x242>
                if (*pchk >= '0' && *pchk <= '9') { has_digit = true; break; }
 8002de0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b2f      	cmp	r3, #47	@ 0x2f
 8002de8:	d908      	bls.n	8002dfc <parse_and_control+0x238>
 8002dea:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b39      	cmp	r3, #57	@ 0x39
 8002df2:	d803      	bhi.n	8002dfc <parse_and_control+0x238>
 8002df4:	2301      	movs	r3, #1
 8002df6:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8002dfa:	e009      	b.n	8002e10 <parse_and_control+0x24c>
            for (char *pchk = tok; *pchk; ++pchk) {
 8002dfc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002e00:	3301      	adds	r3, #1
 8002e02:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002e06:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1e7      	bne.n	8002de0 <parse_and_control+0x21c>
            }
            if (!has_digit) continue;
 8002e10:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8002e14:	f083 0301 	eor.w	r3, r3, #1
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d153      	bne.n	8002ec6 <parse_and_control+0x302>

            float a = (float)atof(tok);
 8002e1e:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8002e22:	f005 fddb 	bl	80089dc <atof>
 8002e26:	ec53 2b10 	vmov	r2, r3, d0
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	f7fd fefb 	bl	8000c28 <__aeabi_d2f>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
            if (a < -180.0f) a = -180.0f;
 8002e38:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8002e3c:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8002f0c <parse_and_control+0x348>
 8002e40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e48:	d502      	bpl.n	8002e50 <parse_and_control+0x28c>
 8002e4a:	4b31      	ldr	r3, [pc, #196]	@ (8002f10 <parse_and_control+0x34c>)
 8002e4c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
            if (a >  180.0f) a =  180.0f;
 8002e50:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8002e54:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8002f18 <parse_and_control+0x354>
 8002e58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e60:	dd02      	ble.n	8002e68 <parse_and_control+0x2a4>
 8002e62:	4b2c      	ldr	r3, [pc, #176]	@ (8002f14 <parse_and_control+0x350>)
 8002e64:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
            uint8_t baseL = 1 + 7;
 8002e68:	2308      	movs	r3, #8
 8002e6a:	f887 30ec 	strb.w	r3, [r7, #236]	@ 0xec
            uint8_t id = is_right ? (j + 1) : (baseL + j);
 8002e6e:	f897 30ed 	ldrb.w	r3, [r7, #237]	@ 0xed
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d004      	beq.n	8002e80 <parse_and_control+0x2bc>
 8002e76:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	e005      	b.n	8002e8c <parse_and_control+0x2c8>
 8002e80:	f897 20ec 	ldrb.w	r2, [r7, #236]	@ 0xec
 8002e84:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8002e88:	4413      	add	r3, r2
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
            ids[n]    = id;
 8002e90:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002e94:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8002e98:	443b      	add	r3, r7
 8002e9a:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 8002e9e:	f803 2c54 	strb.w	r2, [r3, #-84]
            ang_rl[n] = a;
 8002ea2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8002eac:	443b      	add	r3, r7
 8002eae:	3b70      	subs	r3, #112	@ 0x70
 8002eb0:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8002eb4:	601a      	str	r2, [r3, #0]
            n++;
 8002eb6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002eba:	3301      	adds	r3, #1
 8002ebc:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002ec0:	e002      	b.n	8002ec8 <parse_and_control+0x304>
            if (tok[0]=='x' || tok[0]=='X') continue;
 8002ec2:	bf00      	nop
 8002ec4:	e000      	b.n	8002ec8 <parse_and_control+0x304>
            if (!has_digit) continue;
 8002ec6:	bf00      	nop
        for (uint8_t j = 0; j < 7; j++) {
 8002ec8:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8002ecc:	3301      	adds	r3, #1
 8002ece:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 8002ed2:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8002ed6:	2b06      	cmp	r3, #6
 8002ed8:	f67f af16 	bls.w	8002d08 <parse_and_control+0x144>
 8002edc:	e000      	b.n	8002ee0 <parse_and_control+0x31c>
            if (!tok) break;
 8002ede:	bf00      	nop
        }

        if (n == 0) { p = end + 1; continue; }
 8002ee0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d105      	bne.n	8002ef4 <parse_and_control+0x330>
 8002ee8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002eec:	3301      	adds	r3, #1
 8002eee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002ef2:	e088      	b.n	8003006 <parse_and_control+0x442>

        const uint16_t ADDR_GOAL_POSITION = 116;
 8002ef4:	2374      	movs	r3, #116	@ 0x74
 8002ef6:	f8a7 30e8 	strh.w	r3, [r7, #232]	@ 0xe8

        for (uint8_t k = 0; k < n; k++) {
 8002efa:	2300      	movs	r3, #0
 8002efc:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
 8002f00:	e06a      	b.n	8002fd8 <parse_and_control+0x414>
 8002f02:	bf00      	nop
 8002f04:	0800d34c 	.word	0x0800d34c
 8002f08:	0800d868 	.word	0x0800d868
 8002f0c:	c3340000 	.word	0xc3340000
 8002f10:	c3340000 	.word	0xc3340000
 8002f14:	43340000 	.word	0x43340000
 8002f18:	43340000 	.word	0x43340000
            float f0_360 = wrap360(ang_rl[k] + 180.0f);
 8002f1c:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8002f26:	443b      	add	r3, r7
 8002f28:	3b70      	subs	r3, #112	@ 0x70
 8002f2a:	edd3 7a00 	vldr	s15, [r3]
 8002f2e:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 8002f18 <parse_and_control+0x354>
 8002f32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f36:	eeb0 0a67 	vmov.f32	s0, s15
 8002f3a:	f7ff fc15 	bl	8002768 <wrap360>
 8002f3e:	ed87 0a39 	vstr	s0, [r7, #228]	@ 0xe4
            int32_t goal_cnt = deg0to360_to_cnt(f0_360);
 8002f42:	ed97 0a39 	vldr	s0, [r7, #228]	@ 0xe4
 8002f46:	f7ff fbf1 	bl	800272c <deg0to360_to_cnt>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

            printf("Moving ID %d to %.1f deg (cnt=%ld)\r\n", ids[k], f0_360, (long)goal_cnt);
 8002f50:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 8002f54:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8002f58:	443b      	add	r3, r7
 8002f5a:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8002f5e:	461c      	mov	r4, r3
 8002f60:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 8002f64:	f7fd fb10 	bl	8000588 <__aeabi_f2d>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8002f70:	9100      	str	r1, [sp, #0]
 8002f72:	4621      	mov	r1, r4
 8002f74:	4846      	ldr	r0, [pc, #280]	@ (8003090 <parse_and_control+0x4cc>)
 8002f76:	f007 fa6f 	bl	800a458 <iprintf>
            Dynamixel_write(ids[k], ADDR_GOAL_POSITION, (uint8_t*)&goal_cnt, 4);
 8002f7a:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 8002f7e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8002f82:	443b      	add	r3, r7
 8002f84:	f813 0c54 	ldrb.w	r0, [r3, #-84]
 8002f88:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8002f8c:	f8b7 10e8 	ldrh.w	r1, [r7, #232]	@ 0xe8
 8002f90:	2304      	movs	r3, #4
 8002f92:	f7fe fbef 	bl	8001774 <Dynamixel_write>
            HAL_Delay(5);
 8002f96:	2005      	movs	r0, #5
 8002f98:	f001 fb00 	bl	800459c <HAL_Delay>

            int8_t idx = idx_of_id(ids[k]);
 8002f9c:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 8002fa0:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8002fa4:	443b      	add	r3, r7
 8002fa6:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff fc34 	bl	8002818 <idx_of_id>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            if (idx >= 0) {
 8002fb6:	f997 30e3 	ldrsb.w	r3, [r7, #227]	@ 0xe3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	db07      	blt.n	8002fce <parse_and_control+0x40a>
                g_target_deg[idx] = f0_360;
 8002fbe:	f997 30e3 	ldrsb.w	r3, [r7, #227]	@ 0xe3
 8002fc2:	4a34      	ldr	r2, [pc, #208]	@ (8003094 <parse_and_control+0x4d0>)
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002fcc:	601a      	str	r2, [r3, #0]
        for (uint8_t k = 0; k < n; k++) {
 8002fce:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
 8002fd8:	f897 20fb 	ldrb.w	r2, [r7, #251]	@ 0xfb
 8002fdc:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d39b      	bcc.n	8002f1c <parse_and_control+0x358>
            }
        }

        processed_any = true;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        p = end + 1;
 8002fea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002fee:	3301      	adds	r3, #1
 8002ff0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002ff4:	e5f8      	b.n	8002be8 <parse_and_control+0x24>
        if (!start) break;
 8002ff6:	bf00      	nop
 8002ff8:	e000      	b.n	8002ffc <parse_and_control+0x438>
        if (!end) break;
 8002ffa:	bf00      	nop
    }

    if (processed_any) {
 8002ffc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <parse_and_control+0x444>
        }
        else     {
        	print_to_link("timeout\r\n");
        }
    }
}
 8003004:	e03e      	b.n	8003084 <parse_and_control+0x4c0>
    while (1) {
 8003006:	e5ef      	b.n	8002be8 <parse_and_control+0x24>
        for (uint8_t i = 0; i < DXL_ID_CNT; i++)
 8003008:	2300      	movs	r3, #0
 800300a:	f887 30fa 	strb.w	r3, [r7, #250]	@ 0xfa
 800300e:	e013      	b.n	8003038 <parse_and_control+0x474>
            goal_all[i] = g_target_deg[i];
 8003010:	f897 20fa 	ldrb.w	r2, [r7, #250]	@ 0xfa
 8003014:	f897 30fa 	ldrb.w	r3, [r7, #250]	@ 0xfa
 8003018:	491e      	ldr	r1, [pc, #120]	@ (8003094 <parse_and_control+0x4d0>)
 800301a:	0092      	lsls	r2, r2, #2
 800301c:	440a      	add	r2, r1
 800301e:	6812      	ldr	r2, [r2, #0]
 8003020:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8003024:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	601a      	str	r2, [r3, #0]
        for (uint8_t i = 0; i < DXL_ID_CNT; i++)
 800302e:	f897 30fa 	ldrb.w	r3, [r7, #250]	@ 0xfa
 8003032:	3301      	adds	r3, #1
 8003034:	f887 30fa 	strb.w	r3, [r7, #250]	@ 0xfa
 8003038:	f897 30fa 	ldrb.w	r3, [r7, #250]	@ 0xfa
 800303c:	2b0d      	cmp	r3, #13
 800303e:	d9e7      	bls.n	8003010 <parse_and_control+0x44c>
        const uint32_t TIMEOUT_MS = 8000;
 8003040:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8003044:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        bool ok = live_slowdown_until_reached(DXL_ID_CNT, DXL_ID_LIST, goal_all, TIMEOUT_MS);
 8003048:	f107 020c 	add.w	r2, r7, #12
 800304c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003050:	4911      	ldr	r1, [pc, #68]	@ (8003098 <parse_and_control+0x4d4>)
 8003052:	200e      	movs	r0, #14
 8003054:	f7ff fc02 	bl	800285c <live_slowdown_until_reached>
 8003058:	4603      	mov	r3, r0
 800305a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        if (ok)  {
 800305e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00b      	beq.n	800307e <parse_and_control+0x4ba>
        	print_to_link("Done\r\n");
 8003066:	480d      	ldr	r0, [pc, #52]	@ (800309c <parse_and_control+0x4d8>)
 8003068:	f7ff f8f4 	bl	8002254 <print_to_link>
        	if (link_mark == '$'){
 800306c:	4b0c      	ldr	r3, [pc, #48]	@ (80030a0 <parse_and_control+0x4dc>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b24      	cmp	r3, #36	@ 0x24
 8003074:	d106      	bne.n	8003084 <parse_and_control+0x4c0>
        	done = true;
 8003076:	4b0b      	ldr	r3, [pc, #44]	@ (80030a4 <parse_and_control+0x4e0>)
 8003078:	2201      	movs	r2, #1
 800307a:	701a      	strb	r2, [r3, #0]
}
 800307c:	e002      	b.n	8003084 <parse_and_control+0x4c0>
        	print_to_link("timeout\r\n");
 800307e:	480a      	ldr	r0, [pc, #40]	@ (80030a8 <parse_and_control+0x4e4>)
 8003080:	f7ff f8e8 	bl	8002254 <print_to_link>
}
 8003084:	bf00      	nop
 8003086:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 800308a:	46bd      	mov	sp, r7
 800308c:	bd90      	pop	{r4, r7, pc}
 800308e:	bf00      	nop
 8003090:	0800d350 	.word	0x0800d350
 8003094:	20000aa8 	.word	0x20000aa8
 8003098:	0800d610 	.word	0x0800d610
 800309c:	0800d378 	.word	0x0800d378
 80030a0:	20000aa7 	.word	0x20000aa7
 80030a4:	20000ae0 	.word	0x20000ae0
 80030a8:	0800d380 	.word	0x0800d380

080030ac <init_move_all_to_180>:

void init_move_all_to_180(void) {
 80030ac:	b590      	push	{r4, r7, lr}
 80030ae:	b0af      	sub	sp, #188	@ 0xbc
 80030b0:	af02      	add	r7, sp, #8
    const uint8_t ADDR_GOAL_POSITION = 116;
 80030b2:	2374      	movs	r3, #116	@ 0x74
 80030b4:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
    const uint8_t POS_DATA_LEN = 4;
 80030b8:	2304      	movs	r3, #4
 80030ba:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
    int32_t goal_pos_raw[DXL_ID_CNT];
    float target_degs[DXL_ID_CNT];

    const uint8_t ADDR_PROFILE_VELOCITY = 112;
 80030be:	2370      	movs	r3, #112	@ 0x70
 80030c0:	f887 30ac 	strb.w	r3, [r7, #172]	@ 0xac
    const uint8_t VEL_DATA_LEN = 4;
 80030c4:	2304      	movs	r3, #4
 80030c6:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
    uint32_t vel_raw[DXL_ID_CNT];

    for (uint8_t i = 0; i < DXL_ID_CNT; i++) {
 80030ca:	2300      	movs	r3, #0
 80030cc:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 80030d0:	e02c      	b.n	800312c <init_move_all_to_180+0x80>
        target_degs[i] = 180.0f;
 80030d2:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	33b0      	adds	r3, #176	@ 0xb0
 80030da:	443b      	add	r3, r7
 80030dc:	3b78      	subs	r3, #120	@ 0x78
 80030de:	4a31      	ldr	r2, [pc, #196]	@ (80031a4 <init_move_all_to_180+0xf8>)
 80030e0:	601a      	str	r2, [r3, #0]
        goal_pos_raw[i] = deg0to360_to_cnt(target_degs[i]);
 80030e2:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	33b0      	adds	r3, #176	@ 0xb0
 80030ea:	443b      	add	r3, r7
 80030ec:	3b78      	subs	r3, #120	@ 0x78
 80030ee:	edd3 7a00 	vldr	s15, [r3]
 80030f2:	f897 40af 	ldrb.w	r4, [r7, #175]	@ 0xaf
 80030f6:	eeb0 0a67 	vmov.f32	s0, s15
 80030fa:	f7ff fb17 	bl	800272c <deg0to360_to_cnt>
 80030fe:	4602      	mov	r2, r0
 8003100:	00a3      	lsls	r3, r4, #2
 8003102:	33b0      	adds	r3, #176	@ 0xb0
 8003104:	443b      	add	r3, r7
 8003106:	f843 2c40 	str.w	r2, [r3, #-64]
        vel_raw[i] = pv_raw_from_deg_s(20.0f);
 800310a:	f897 40af 	ldrb.w	r4, [r7, #175]	@ 0xaf
 800310e:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8003112:	f7ff fb5d 	bl	80027d0 <pv_raw_from_deg_s>
 8003116:	4602      	mov	r2, r0
 8003118:	00a3      	lsls	r3, r4, #2
 800311a:	33b0      	adds	r3, #176	@ 0xb0
 800311c:	443b      	add	r3, r7
 800311e:	f843 2cb0 	str.w	r2, [r3, #-176]
    for (uint8_t i = 0; i < DXL_ID_CNT; i++) {
 8003122:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8003126:	3301      	adds	r3, #1
 8003128:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 800312c:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8003130:	2b0d      	cmp	r3, #13
 8003132:	d9ce      	bls.n	80030d2 <init_move_all_to_180+0x26>
    }

    Dynamixel_SyncWrite(ADDR_PROFILE_VELOCITY, VEL_DATA_LEN, DXL_ID_LIST, DXL_ID_CNT, (uint8_t*)vel_raw);
 8003134:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 8003138:	b298      	uxth	r0, r3
 800313a:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800313e:	b299      	uxth	r1, r3
 8003140:	463b      	mov	r3, r7
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	230e      	movs	r3, #14
 8003146:	4a18      	ldr	r2, [pc, #96]	@ (80031a8 <init_move_all_to_180+0xfc>)
 8003148:	f7fe fb6a 	bl	8001820 <Dynamixel_SyncWrite>
    HAL_Delay(20);
 800314c:	2014      	movs	r0, #20
 800314e:	f001 fa25 	bl	800459c <HAL_Delay>
    Dynamixel_SyncWrite(ADDR_GOAL_POSITION, POS_DATA_LEN, DXL_ID_LIST, DXL_ID_CNT, (uint8_t*)goal_pos_raw);
 8003152:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8003156:	b298      	uxth	r0, r3
 8003158:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 800315c:	b299      	uxth	r1, r3
 800315e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	230e      	movs	r3, #14
 8003166:	4a10      	ldr	r2, [pc, #64]	@ (80031a8 <init_move_all_to_180+0xfc>)
 8003168:	f7fe fb5a 	bl	8001820 <Dynamixel_SyncWrite>

    printf("All homing commands sent.\r\n--- WAITING FOR MOTORS ---\r\n");
 800316c:	480f      	ldr	r0, [pc, #60]	@ (80031ac <init_move_all_to_180+0x100>)
 800316e:	f007 f9db 	bl	800a528 <puts>
    if(!live_slowdown_until_reached(DXL_ID_CNT, DXL_ID_LIST, target_degs, 15000)) {
 8003172:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003176:	f643 2398 	movw	r3, #15000	@ 0x3a98
 800317a:	490b      	ldr	r1, [pc, #44]	@ (80031a8 <init_move_all_to_180+0xfc>)
 800317c:	200e      	movs	r0, #14
 800317e:	f7ff fb6d 	bl	800285c <live_slowdown_until_reached>
 8003182:	4603      	mov	r3, r0
 8003184:	f083 0301 	eor.w	r3, r3, #1
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <init_move_all_to_180+0xea>
    	printf("Timeout waiting for homing completion!\r\n");
 800318e:	4808      	ldr	r0, [pc, #32]	@ (80031b0 <init_move_all_to_180+0x104>)
 8003190:	f007 f9ca 	bl	800a528 <puts>
    } else {
        printf("All motors reached home position.\r\n");
    }
}
 8003194:	e002      	b.n	800319c <init_move_all_to_180+0xf0>
        printf("All motors reached home position.\r\n");
 8003196:	4807      	ldr	r0, [pc, #28]	@ (80031b4 <init_move_all_to_180+0x108>)
 8003198:	f007 f9c6 	bl	800a528 <puts>
}
 800319c:	bf00      	nop
 800319e:	37b4      	adds	r7, #180	@ 0xb4
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd90      	pop	{r4, r7, pc}
 80031a4:	43340000 	.word	0x43340000
 80031a8:	0800d610 	.word	0x0800d610
 80031ac:	0800d38c 	.word	0x0800d38c
 80031b0:	0800d3c4 	.word	0x0800d3c4
 80031b4:	0800d3ec 	.word	0x0800d3ec

080031b8 <update_all_motors>:

void update_all_motors(void) {
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b0b2      	sub	sp, #200	@ 0xc8
 80031bc:	af02      	add	r7, sp, #8
    static uint32_t last_send_ms = 0;
    uint32_t now = HAL_GetTick();
 80031be:	f001 f9e1 	bl	8004584 <HAL_GetTick>
 80031c2:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
    if (now - last_send_ms < 30) return;
 80031c6:	4b49      	ldr	r3, [pc, #292]	@ (80032ec <update_all_motors+0x134>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b1d      	cmp	r3, #29
 80031d2:	f240 8087 	bls.w	80032e4 <update_all_motors+0x12c>
    last_send_ms = now;
 80031d6:	4a45      	ldr	r2, [pc, #276]	@ (80032ec <update_all_motors+0x134>)
 80031d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80031dc:	6013      	str	r3, [r2, #0]

    const uint16_t ADDR_PROFILE_ACCEL     = 108;
 80031de:	236c      	movs	r3, #108	@ 0x6c
 80031e0:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
    const uint16_t ADDR_PROFILE_VELOCITY  = 112;
 80031e4:	2370      	movs	r3, #112	@ 0x70
 80031e6:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
    const uint16_t ADDR_GOAL_POSITION     = 116;
 80031ea:	2374      	movs	r3, #116	@ 0x74
 80031ec:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2

    uint32_t profile_accel[DXL_ID_CNT];
    uint32_t profile_vel[DXL_ID_CNT];
    int32_t  goal_pos[DXL_ID_CNT];

    const float accel_dps2 = 400.0f;
 80031f0:	4b3f      	ldr	r3, [pc, #252]	@ (80032f0 <update_all_motors+0x138>)
 80031f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    const float vel_dps    = 60.0f;
 80031f6:	4b3f      	ldr	r3, [pc, #252]	@ (80032f4 <update_all_motors+0x13c>)
 80031f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

    for (int i = 0; i < DXL_ID_CNT; i++) {
 80031fc:	2300      	movs	r3, #0
 80031fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003202:	e047      	b.n	8003294 <update_all_motors+0xdc>
        profile_accel[i] = (uint32_t)(accel_dps2 / 214.577f);
 8003204:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8003208:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80032f8 <update_all_motors+0x140>
 800320c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003214:	ee17 2a90 	vmov	r2, s15
 8003218:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	33c0      	adds	r3, #192	@ 0xc0
 8003220:	443b      	add	r3, r7
 8003222:	f843 2c50 	str.w	r2, [r3, #-80]
        profile_vel[i]   = (uint32_t)(vel_dps / 0.229f / 360.0f * 60.0f);
 8003226:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800322a:	eddf 6a34 	vldr	s13, [pc, #208]	@ 80032fc <update_all_motors+0x144>
 800322e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003232:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8003300 <update_all_motors+0x148>
 8003236:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800323a:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8003304 <update_all_motors+0x14c>
 800323e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003246:	ee17 2a90 	vmov	r2, s15
 800324a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	33c0      	adds	r3, #192	@ 0xc0
 8003252:	443b      	add	r3, r7
 8003254:	f843 2c88 	str.w	r2, [r3, #-136]
        goal_pos[i]      = deg0to360_to_cnt(wrap360(g_target_deg[i])); // 固定例
 8003258:	4a2b      	ldr	r2, [pc, #172]	@ (8003308 <update_all_motors+0x150>)
 800325a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	edd3 7a00 	vldr	s15, [r3]
 8003266:	eeb0 0a67 	vmov.f32	s0, s15
 800326a:	f7ff fa7d 	bl	8002768 <wrap360>
 800326e:	eef0 7a40 	vmov.f32	s15, s0
 8003272:	eeb0 0a67 	vmov.f32	s0, s15
 8003276:	f7ff fa59 	bl	800272c <deg0to360_to_cnt>
 800327a:	4602      	mov	r2, r0
 800327c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	33c0      	adds	r3, #192	@ 0xc0
 8003284:	443b      	add	r3, r7
 8003286:	f843 2cc0 	str.w	r2, [r3, #-192]
    for (int i = 0; i < DXL_ID_CNT; i++) {
 800328a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800328e:	3301      	adds	r3, #1
 8003290:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003294:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003298:	2b0d      	cmp	r3, #13
 800329a:	ddb3      	ble.n	8003204 <update_all_motors+0x4c>
    }

    Dynamixel_SyncWrite(ADDR_PROFILE_ACCEL, 4, DXL_ID_LIST, DXL_ID_CNT, (uint8_t*)profile_accel);
 800329c:	f8b7 00b6 	ldrh.w	r0, [r7, #182]	@ 0xb6
 80032a0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	230e      	movs	r3, #14
 80032a8:	4a18      	ldr	r2, [pc, #96]	@ (800330c <update_all_motors+0x154>)
 80032aa:	2104      	movs	r1, #4
 80032ac:	f7fe fab8 	bl	8001820 <Dynamixel_SyncWrite>
    HAL_Delay(5);
 80032b0:	2005      	movs	r0, #5
 80032b2:	f001 f973 	bl	800459c <HAL_Delay>
    Dynamixel_SyncWrite(ADDR_PROFILE_VELOCITY, 4, DXL_ID_LIST, DXL_ID_CNT, (uint8_t*)profile_vel);
 80032b6:	f8b7 00b4 	ldrh.w	r0, [r7, #180]	@ 0xb4
 80032ba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	230e      	movs	r3, #14
 80032c2:	4a12      	ldr	r2, [pc, #72]	@ (800330c <update_all_motors+0x154>)
 80032c4:	2104      	movs	r1, #4
 80032c6:	f7fe faab 	bl	8001820 <Dynamixel_SyncWrite>
    HAL_Delay(5);
 80032ca:	2005      	movs	r0, #5
 80032cc:	f001 f966 	bl	800459c <HAL_Delay>
    Dynamixel_SyncWrite(ADDR_GOAL_POSITION, 4, DXL_ID_LIST, DXL_ID_CNT, (uint8_t*)goal_pos);
 80032d0:	f8b7 00b2 	ldrh.w	r0, [r7, #178]	@ 0xb2
 80032d4:	463b      	mov	r3, r7
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	230e      	movs	r3, #14
 80032da:	4a0c      	ldr	r2, [pc, #48]	@ (800330c <update_all_motors+0x154>)
 80032dc:	2104      	movs	r1, #4
 80032de:	f7fe fa9f 	bl	8001820 <Dynamixel_SyncWrite>
 80032e2:	e000      	b.n	80032e6 <update_all_motors+0x12e>
    if (now - last_send_ms < 30) return;
 80032e4:	bf00      	nop
}
 80032e6:	37c0      	adds	r7, #192	@ 0xc0
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	20000ae4 	.word	0x20000ae4
 80032f0:	43c80000 	.word	0x43c80000
 80032f4:	42700000 	.word	0x42700000
 80032f8:	435693b6 	.word	0x435693b6
 80032fc:	3e6a7efa 	.word	0x3e6a7efa
 8003300:	43b40000 	.word	0x43b40000
 8003304:	42700000 	.word	0x42700000
 8003308:	20000aa8 	.word	0x20000aa8
 800330c:	0800d610 	.word	0x0800d610

08003310 <clampf>:

ServoHandle_t s1, s2;
struct GripStop g1, g2;

// ---------- 小工具 ----------
static inline float clampf(float x, float lo, float hi) {
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	ed87 0a03 	vstr	s0, [r7, #12]
 800331a:	edc7 0a02 	vstr	s1, [r7, #8]
 800331e:	ed87 1a01 	vstr	s2, [r7, #4]
  if (x < lo) return lo;
 8003322:	ed97 7a03 	vldr	s14, [r7, #12]
 8003326:	edd7 7a02 	vldr	s15, [r7, #8]
 800332a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800332e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003332:	d501      	bpl.n	8003338 <clampf+0x28>
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	e00b      	b.n	8003350 <clampf+0x40>
  if (x > hi) return hi;
 8003338:	ed97 7a03 	vldr	s14, [r7, #12]
 800333c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003340:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003348:	dd01      	ble.n	800334e <clampf+0x3e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	e000      	b.n	8003350 <clampf+0x40>
  return x;
 800334e:	68fb      	ldr	r3, [r7, #12]
}
 8003350:	ee07 3a90 	vmov	s15, r3
 8003354:	eeb0 0a67 	vmov.f32	s0, s15
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <clamp_u16>:

static inline uint16_t clamp_u16(uint16_t v, uint16_t lo, uint16_t hi) {
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	4603      	mov	r3, r0
 800336a:	80fb      	strh	r3, [r7, #6]
 800336c:	460b      	mov	r3, r1
 800336e:	80bb      	strh	r3, [r7, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	807b      	strh	r3, [r7, #2]
  if (v < lo) { return lo; }
 8003374:	88fa      	ldrh	r2, [r7, #6]
 8003376:	88bb      	ldrh	r3, [r7, #4]
 8003378:	429a      	cmp	r2, r3
 800337a:	d201      	bcs.n	8003380 <clamp_u16+0x1e>
 800337c:	88bb      	ldrh	r3, [r7, #4]
 800337e:	e006      	b.n	800338e <clamp_u16+0x2c>
  if (v > hi) { return hi; }
 8003380:	88fa      	ldrh	r2, [r7, #6]
 8003382:	887b      	ldrh	r3, [r7, #2]
 8003384:	429a      	cmp	r2, r3
 8003386:	d901      	bls.n	800338c <clamp_u16+0x2a>
 8003388:	887b      	ldrh	r3, [r7, #2]
 800338a:	e000      	b.n	800338e <clamp_u16+0x2c>
  return v;
 800338c:	88fb      	ldrh	r3, [r7, #6]
}
 800338e:	4618      	mov	r0, r3
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
	...

0800339c <deg_to_us>:

static inline uint16_t deg_to_us(const ServoHandle_t *s, float deg) {
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	ed87 0a00 	vstr	s0, [r7]
  float d = clampf(deg, 0.0f, 180.0f);
 80033a8:	ed9f 1a1f 	vldr	s2, [pc, #124]	@ 8003428 <deg_to_us+0x8c>
 80033ac:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 800342c <deg_to_us+0x90>
 80033b0:	ed97 0a00 	vldr	s0, [r7]
 80033b4:	f7ff ffac 	bl	8003310 <clampf>
 80033b8:	ed87 0a02 	vstr	s0, [r7, #8]
  float usf = (float)s->us_min + (float)(s->us_max - s->us_min) * (d / 180.0f);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	891b      	ldrh	r3, [r3, #8]
 80033c0:	ee07 3a90 	vmov	s15, r3
 80033c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	895b      	ldrh	r3, [r3, #10]
 80033cc:	461a      	mov	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	891b      	ldrh	r3, [r3, #8]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	ee07 3a90 	vmov	s15, r3
 80033d8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80033dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80033e0:	eddf 5a11 	vldr	s11, [pc, #68]	@ 8003428 <deg_to_us+0x8c>
 80033e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033f0:	edc7 7a03 	vstr	s15, [r7, #12]
  if (usf < 0.0f) { usf = 0.0f; }
 80033f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80033f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003400:	d502      	bpl.n	8003408 <deg_to_us+0x6c>
 8003402:	f04f 0300 	mov.w	r3, #0
 8003406:	60fb      	str	r3, [r7, #12]
  return (uint16_t)(usf + 0.5f);
 8003408:	edd7 7a03 	vldr	s15, [r7, #12]
 800340c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003410:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003418:	ee17 3a90 	vmov	r3, s15
 800341c:	b29b      	uxth	r3, r3
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	43340000 	.word	0x43340000
 800342c:	00000000 	.word	0x00000000

08003430 <set_ccr_us>:

static inline void set_ccr_us(const ServoHandle_t *s, uint16_t us) {
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COMPARE(s->htim, s->channel, us);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d105      	bne.n	8003450 <set_ccr_us+0x20>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	887a      	ldrh	r2, [r7, #2]
 800344c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800344e:	e018      	b.n	8003482 <set_ccr_us+0x52>
  __HAL_TIM_SET_COMPARE(s->htim, s->channel, us);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b04      	cmp	r3, #4
 8003456:	d105      	bne.n	8003464 <set_ccr_us+0x34>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	887b      	ldrh	r3, [r7, #2]
 8003460:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003462:	e00e      	b.n	8003482 <set_ccr_us+0x52>
  __HAL_TIM_SET_COMPARE(s->htim, s->channel, us);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b08      	cmp	r3, #8
 800346a:	d105      	bne.n	8003478 <set_ccr_us+0x48>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	887b      	ldrh	r3, [r7, #2]
 8003474:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003476:	e004      	b.n	8003482 <set_ccr_us+0x52>
  __HAL_TIM_SET_COMPARE(s->htim, s->channel, us);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	887b      	ldrh	r3, [r7, #2]
 8003480:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
	...

08003490 <Servo_Attach>:

// ---------- 對外 API ----------
void Servo_Attach(ServoHandle_t *s, TIM_HandleTypeDef *htim, uint32_t channel,
                  uint16_t us_min, uint16_t us_max)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
 800349c:	807b      	strh	r3, [r7, #2]
  s->htim     = htim;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	601a      	str	r2, [r3, #0]
  s->channel  = channel;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	605a      	str	r2, [r3, #4]
  s->us_min   = (us_min < 200) ? 200 : us_min;
 80034aa:	887b      	ldrh	r3, [r7, #2]
 80034ac:	2bc8      	cmp	r3, #200	@ 0xc8
 80034ae:	bf38      	it	cc
 80034b0:	23c8      	movcc	r3, #200	@ 0xc8
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	811a      	strh	r2, [r3, #8]
  s->us_max   = (us_max > 30000) ? 30000 : us_max;
 80034b8:	8b3b      	ldrh	r3, [r7, #24]
 80034ba:	f247 5230 	movw	r2, #30000	@ 0x7530
 80034be:	4293      	cmp	r3, r2
 80034c0:	bf28      	it	cs
 80034c2:	4613      	movcs	r3, r2
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	815a      	strh	r2, [r3, #10]
  if (s->us_max <= s->us_min + 10) {
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	895b      	ldrh	r3, [r3, #10]
 80034ce:	461a      	mov	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	891b      	ldrh	r3, [r3, #8]
 80034d4:	330a      	adds	r3, #10
 80034d6:	429a      	cmp	r2, r3
 80034d8:	dc05      	bgt.n	80034e6 <Servo_Attach+0x56>
    s->us_max = s->us_min + 10;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	891b      	ldrh	r3, [r3, #8]
 80034de:	330a      	adds	r3, #10
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	815a      	strh	r2, [r3, #10]
  }

  s->cur_deg        = 90.0f;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	4a21      	ldr	r2, [pc, #132]	@ (8003570 <Servo_Attach+0xe0>)
 80034ea:	60da      	str	r2, [r3, #12]
  s->tgt_deg        = 90.0f;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4a20      	ldr	r2, [pc, #128]	@ (8003570 <Servo_Attach+0xe0>)
 80034f0:	611a      	str	r2, [r3, #16]
  s->max_speed_dps  = SERVO_DEFAULT_SPEED_DPS;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003574 <Servo_Attach+0xe4>)
 80034f6:	615a      	str	r2, [r3, #20]
  s->ema_alpha      = SERVO_DEFAULT_EMA_ALPHA;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003578 <Servo_Attach+0xe8>)
 80034fc:	619a      	str	r2, [r3, #24]
  s->ema_us_f       = (float)deg_to_us(s, s->cur_deg);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	edd3 7a03 	vldr	s15, [r3, #12]
 8003504:	eeb0 0a67 	vmov.f32	s0, s15
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f7ff ff47 	bl	800339c <deg_to_us>
 800350e:	4603      	mov	r3, r0
 8003510:	ee07 3a90 	vmov	s15, r3
 8003514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	edc3 7a07 	vstr	s15, [r3, #28]
  s->ema_us         = (uint16_t)(s->ema_us_f + 0.5f);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	edd3 7a07 	vldr	s15, [r3, #28]
 8003524:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003528:	ee77 7a87 	vadd.f32	s15, s15, s14
 800352c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003530:	ee17 3a90 	vmov	r3, s15
 8003534:	b29a      	uxth	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	841a      	strh	r2, [r3, #32]
  s->last_ms        = HAL_GetTick();
 800353a:	f001 f823 	bl	8004584 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	625a      	str	r2, [r3, #36]	@ 0x24
  s->attached       = 1U;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  HAL_TIM_PWM_Start(s->htim, s->channel);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	4619      	mov	r1, r3
 8003556:	4610      	mov	r0, r2
 8003558:	f003 f858 	bl	800660c <HAL_TIM_PWM_Start>
  set_ccr_us(s, s->ema_us);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8c1b      	ldrh	r3, [r3, #32]
 8003560:	4619      	mov	r1, r3
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f7ff ff64 	bl	8003430 <set_ccr_us>
}
 8003568:	bf00      	nop
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	42b40000 	.word	0x42b40000
 8003574:	42f00000 	.word	0x42f00000
 8003578:	3eb33333 	.word	0x3eb33333

0800357c <Servo_WriteMicroseconds>:

void Servo_WriteMicroseconds(ServoHandle_t *s, uint16_t us)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	807b      	strh	r3, [r7, #2]
  if (!s || !s->attached) return;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d055      	beq.n	800363a <Servo_WriteMicroseconds+0xbe>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003594:	2b00      	cmp	r3, #0
 8003596:	d050      	beq.n	800363a <Servo_WriteMicroseconds+0xbe>
  uint16_t clipped = clamp_u16(us, s->us_min, s->us_max);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	8919      	ldrh	r1, [r3, #8]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	895a      	ldrh	r2, [r3, #10]
 80035a0:	887b      	ldrh	r3, [r7, #2]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff fedd 	bl	8003362 <clamp_u16>
 80035a8:	4603      	mov	r3, r0
 80035aa:	81fb      	strh	r3, [r7, #14]

  float alpha = clampf(s->ema_alpha, 0.0f, 1.0f);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80035b2:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80035b6:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8003644 <Servo_WriteMicroseconds+0xc8>
 80035ba:	eeb0 0a67 	vmov.f32	s0, s15
 80035be:	f7ff fea7 	bl	8003310 <clampf>
 80035c2:	ed87 0a02 	vstr	s0, [r7, #8]
  s->ema_us_f = (1.0f - alpha) * s->ema_us_f + alpha * (float)clipped;
 80035c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80035ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80035ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	edd3 7a07 	vldr	s15, [r3, #28]
 80035d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035dc:	89fb      	ldrh	r3, [r7, #14]
 80035de:	ee07 3a90 	vmov	s15, r3
 80035e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80035ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	edc3 7a07 	vstr	s15, [r3, #28]
  if (s->ema_us_f < 0.0f) s->ema_us_f = 0.0f;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	edd3 7a07 	vldr	s15, [r3, #28]
 80035fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003606:	d503      	bpl.n	8003610 <Servo_WriteMicroseconds+0x94>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	61da      	str	r2, [r3, #28]

  s->ema_us = (uint16_t)(s->ema_us_f + 0.5f);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	edd3 7a07 	vldr	s15, [r3, #28]
 8003616:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800361a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800361e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003622:	ee17 3a90 	vmov	r3, s15
 8003626:	b29a      	uxth	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	841a      	strh	r2, [r3, #32]
  set_ccr_us(s, s->ema_us);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	8c1b      	ldrh	r3, [r3, #32]
 8003630:	4619      	mov	r1, r3
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7ff fefc 	bl	8003430 <set_ccr_us>
 8003638:	e000      	b.n	800363c <Servo_WriteMicroseconds+0xc0>
  if (!s || !s->attached) return;
 800363a:	bf00      	nop
}
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	00000000 	.word	0x00000000

08003648 <Servo_WriteDegrees>:

void Servo_WriteDegrees(ServoHandle_t *s, float deg)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	ed87 0a00 	vstr	s0, [r7]
  if (!s || !s->attached) { return; }
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d01e      	beq.n	8003698 <Servo_WriteDegrees+0x50>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003660:	2b00      	cmp	r3, #0
 8003662:	d019      	beq.n	8003698 <Servo_WriteDegrees+0x50>
  uint16_t us = deg_to_us(s, deg);
 8003664:	ed97 0a00 	vldr	s0, [r7]
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff fe97 	bl	800339c <deg_to_us>
 800366e:	4603      	mov	r3, r0
 8003670:	81fb      	strh	r3, [r7, #14]
  s->cur_deg  = clampf(deg, 0.0f, 360.0f); // 立即更新目前角（無限速）
 8003672:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 80036a0 <Servo_WriteDegrees+0x58>
 8003676:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 80036a4 <Servo_WriteDegrees+0x5c>
 800367a:	ed97 0a00 	vldr	s0, [r7]
 800367e:	f7ff fe47 	bl	8003310 <clampf>
 8003682:	eef0 7a40 	vmov.f32	s15, s0
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	edc3 7a03 	vstr	s15, [r3, #12]
  Servo_WriteMicroseconds(s, us);
 800368c:	89fb      	ldrh	r3, [r7, #14]
 800368e:	4619      	mov	r1, r3
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7ff ff73 	bl	800357c <Servo_WriteMicroseconds>
 8003696:	e000      	b.n	800369a <Servo_WriteDegrees+0x52>
  if (!s || !s->attached) { return; }
 8003698:	bf00      	nop
}
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	43b40000 	.word	0x43b40000
 80036a4:	00000000 	.word	0x00000000

080036a8 <Servo_SetTargetDegrees>:

void Servo_SetTargetDegrees(ServoHandle_t *s, float target_deg)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	ed87 0a00 	vstr	s0, [r7]
  if (!s) { return; }
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00d      	beq.n	80036d6 <Servo_SetTargetDegrees+0x2e>
  s->tgt_deg = clampf(target_deg, 0.0f, 180.0f);
 80036ba:	ed9f 1a09 	vldr	s2, [pc, #36]	@ 80036e0 <Servo_SetTargetDegrees+0x38>
 80036be:	eddf 0a09 	vldr	s1, [pc, #36]	@ 80036e4 <Servo_SetTargetDegrees+0x3c>
 80036c2:	ed97 0a00 	vldr	s0, [r7]
 80036c6:	f7ff fe23 	bl	8003310 <clampf>
 80036ca:	eef0 7a40 	vmov.f32	s15, s0
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	edc3 7a04 	vstr	s15, [r3, #16]
 80036d4:	e000      	b.n	80036d8 <Servo_SetTargetDegrees+0x30>
  if (!s) { return; }
 80036d6:	bf00      	nop
}
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	43340000 	.word	0x43340000
 80036e4:	00000000 	.word	0x00000000

080036e8 <Servo_SetMaxSpeedDps>:

void Servo_SetMaxSpeedDps(ServoHandle_t *s, float max_speed_dps)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	ed87 0a00 	vstr	s0, [r7]
  if (!s) { return; }
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d01a      	beq.n	8003730 <Servo_SetMaxSpeedDps+0x48>
  if (max_speed_dps < 1.0f)   { max_speed_dps = 1.0f;   }
 80036fa:	edd7 7a00 	vldr	s15, [r7]
 80036fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003702:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800370a:	d502      	bpl.n	8003712 <Servo_SetMaxSpeedDps+0x2a>
 800370c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003710:	603b      	str	r3, [r7, #0]
  if (max_speed_dps > 1000.f) { max_speed_dps = 1000.f; }
 8003712:	edd7 7a00 	vldr	s15, [r7]
 8003716:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800373c <Servo_SetMaxSpeedDps+0x54>
 800371a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800371e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003722:	dd01      	ble.n	8003728 <Servo_SetMaxSpeedDps+0x40>
 8003724:	4b06      	ldr	r3, [pc, #24]	@ (8003740 <Servo_SetMaxSpeedDps+0x58>)
 8003726:	603b      	str	r3, [r7, #0]
  s->max_speed_dps = max_speed_dps;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	615a      	str	r2, [r3, #20]
 800372e:	e000      	b.n	8003732 <Servo_SetMaxSpeedDps+0x4a>
  if (!s) { return; }
 8003730:	bf00      	nop
}
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	447a0000 	.word	0x447a0000
 8003740:	447a0000 	.word	0x447a0000

08003744 <Servo_SetEmaAlpha>:

void Servo_SetEmaAlpha(ServoHandle_t *s, float alpha)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	ed87 0a00 	vstr	s0, [r7]
  if (!s) { return; }
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00d      	beq.n	8003772 <Servo_SetEmaAlpha+0x2e>
  s->ema_alpha = clampf(alpha, 0.0f, 1.0f);
 8003756:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 800375a:	eddf 0a08 	vldr	s1, [pc, #32]	@ 800377c <Servo_SetEmaAlpha+0x38>
 800375e:	ed97 0a00 	vldr	s0, [r7]
 8003762:	f7ff fdd5 	bl	8003310 <clampf>
 8003766:	eef0 7a40 	vmov.f32	s15, s0
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	edc3 7a06 	vstr	s15, [r3, #24]
 8003770:	e000      	b.n	8003774 <Servo_SetEmaAlpha+0x30>
  if (!s) { return; }
 8003772:	bf00      	nop
}
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	00000000 	.word	0x00000000

08003780 <Servo_Update>:

void Servo_Update(ServoHandle_t *s)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08a      	sub	sp, #40	@ 0x28
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  if (!s || !s->attached) { return; }
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d073      	beq.n	8003876 <Servo_Update+0xf6>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003794:	2b00      	cmp	r3, #0
 8003796:	d06e      	beq.n	8003876 <Servo_Update+0xf6>

  uint32_t now = HAL_GetTick();
 8003798:	f000 fef4 	bl	8004584 <HAL_GetTick>
 800379c:	6238      	str	r0, [r7, #32]
  uint32_t dt_ms = now - s->last_ms;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a2:	6a3a      	ldr	r2, [r7, #32]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	61fb      	str	r3, [r7, #28]
  if (dt_ms == 0U) { return; } // 同一個tick內就先不更新
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d065      	beq.n	800387a <Servo_Update+0xfa>
  s->last_ms = now;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a3a      	ldr	r2, [r7, #32]
 80037b2:	625a      	str	r2, [r3, #36]	@ 0x24

  float dt = (float)dt_ms / 1000.0f;
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	ee07 3a90 	vmov	s15, r3
 80037ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037be:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8003884 <Servo_Update+0x104>
 80037c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037c6:	edc7 7a06 	vstr	s15, [r7, #24]
  float err = s->tgt_deg - s->cur_deg;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	ed93 7a04 	vldr	s14, [r3, #16]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80037d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037da:	edc7 7a05 	vstr	s15, [r7, #20]

  // 限速器：一步最多移動 (max_speed_dps * dt)
  float max_step = s->max_speed_dps * dt;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	edd3 7a05 	vldr	s15, [r3, #20]
 80037e4:	ed97 7a06 	vldr	s14, [r7, #24]
 80037e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ec:	edc7 7a04 	vstr	s15, [r7, #16]
  float step;
  if (err > 0.0f) {
 80037f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80037f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037fc:	dd0d      	ble.n	800381a <Servo_Update+0x9a>
    step = (err > max_step) ? max_step : err;
 80037fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8003802:	edd7 7a04 	vldr	s15, [r7, #16]
 8003806:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800380a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800380e:	dd01      	ble.n	8003814 <Servo_Update+0x94>
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	e000      	b.n	8003816 <Servo_Update+0x96>
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	627b      	str	r3, [r7, #36]	@ 0x24
 8003818:	e013      	b.n	8003842 <Servo_Update+0xc2>
  } else {
    step = (err < -max_step) ? -max_step : err;
 800381a:	edd7 7a04 	vldr	s15, [r7, #16]
 800381e:	eef1 7a67 	vneg.f32	s15, s15
 8003822:	ed97 7a05 	vldr	s14, [r7, #20]
 8003826:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800382a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800382e:	d504      	bpl.n	800383a <Servo_Update+0xba>
 8003830:	edd7 7a04 	vldr	s15, [r7, #16]
 8003834:	eef1 7a67 	vneg.f32	s15, s15
 8003838:	e001      	b.n	800383e <Servo_Update+0xbe>
 800383a:	edd7 7a05 	vldr	s15, [r7, #20]
 800383e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  }
  s->cur_deg += step;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	ed93 7a03 	vldr	s14, [r3, #12]
 8003848:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800384c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	edc3 7a03 	vstr	s15, [r3, #12]

  // 角度轉 μs，做 EMA 後輸出
  uint16_t us = deg_to_us(s, s->cur_deg);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	edd3 7a03 	vldr	s15, [r3, #12]
 800385c:	eeb0 0a67 	vmov.f32	s0, s15
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7ff fd9b 	bl	800339c <deg_to_us>
 8003866:	4603      	mov	r3, r0
 8003868:	81fb      	strh	r3, [r7, #14]
  Servo_WriteMicroseconds(s, us);
 800386a:	89fb      	ldrh	r3, [r7, #14]
 800386c:	4619      	mov	r1, r3
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7ff fe84 	bl	800357c <Servo_WriteMicroseconds>
 8003874:	e002      	b.n	800387c <Servo_Update+0xfc>
  if (!s || !s->attached) { return; }
 8003876:	bf00      	nop
 8003878:	e000      	b.n	800387c <Servo_Update+0xfc>
  if (dt_ms == 0U) { return; } // 同一個tick內就先不更新
 800387a:	bf00      	nop
}
 800387c:	3728      	adds	r7, #40	@ 0x28
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	447a0000 	.word	0x447a0000

08003888 <Servo_IsBusy>:

uint8_t Servo_IsBusy(ServoHandle_t *s, float tol_deg)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	ed87 0a00 	vstr	s0, [r7]
  if (!s) { return 0U; }
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <Servo_IsBusy+0x16>
 800389a:	2300      	movs	r3, #0
 800389c:	e02f      	b.n	80038fe <Servo_IsBusy+0x76>
  float tol = (tol_deg < 0.1f) ? 0.1f : tol_deg;
 800389e:	edd7 7a00 	vldr	s15, [r7]
 80038a2:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800390c <Servo_IsBusy+0x84>
 80038a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ae:	d501      	bpl.n	80038b4 <Servo_IsBusy+0x2c>
 80038b0:	4b17      	ldr	r3, [pc, #92]	@ (8003910 <Servo_IsBusy+0x88>)
 80038b2:	e000      	b.n	80038b6 <Servo_IsBusy+0x2e>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	60bb      	str	r3, [r7, #8]
  float err = s->tgt_deg - s->cur_deg;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	ed93 7a04 	vldr	s14, [r3, #16]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80038c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038c8:	edc7 7a03 	vstr	s15, [r7, #12]
  if (err < 0.0f) { err = -err; }
 80038cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80038d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d8:	d505      	bpl.n	80038e6 <Servo_IsBusy+0x5e>
 80038da:	edd7 7a03 	vldr	s15, [r7, #12]
 80038de:	eef1 7a67 	vneg.f32	s15, s15
 80038e2:	edc7 7a03 	vstr	s15, [r7, #12]
  return (err > tol) ? 1U : 0U;
 80038e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80038ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80038ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f6:	dd01      	ble.n	80038fc <Servo_IsBusy+0x74>
 80038f8:	2301      	movs	r3, #1
 80038fa:	e000      	b.n	80038fe <Servo_IsBusy+0x76>
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	3dcccccd 	.word	0x3dcccccd
 8003910:	3dcccccd 	.word	0x3dcccccd

08003914 <Servo_MoveToBlocking>:

bool Servo_MoveToBlocking(ServoHandle_t* s, float deg, float tol_deg, float dps, uint32_t timeout_ms)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b088      	sub	sp, #32
 8003918:	af00      	add	r7, sp, #0
 800391a:	6178      	str	r0, [r7, #20]
 800391c:	ed87 0a04 	vstr	s0, [r7, #16]
 8003920:	edc7 0a03 	vstr	s1, [r7, #12]
 8003924:	ed87 1a02 	vstr	s2, [r7, #8]
 8003928:	6079      	str	r1, [r7, #4]
  if (!s || !s->attached) return false;
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d004      	beq.n	800393a <Servo_MoveToBlocking+0x26>
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <Servo_MoveToBlocking+0x2a>
 800393a:	2300      	movs	r3, #0
 800393c:	e03b      	b.n	80039b6 <Servo_MoveToBlocking+0xa2>

  Servo_SetTargetDegrees(s, deg);
 800393e:	ed97 0a04 	vldr	s0, [r7, #16]
 8003942:	6978      	ldr	r0, [r7, #20]
 8003944:	f7ff feb0 	bl	80036a8 <Servo_SetTargetDegrees>
  Servo_SetMaxSpeedDps(s, dps);
 8003948:	ed97 0a02 	vldr	s0, [r7, #8]
 800394c:	6978      	ldr	r0, [r7, #20]
 800394e:	f7ff fecb 	bl	80036e8 <Servo_SetMaxSpeedDps>

  uint32_t start_ms = HAL_GetTick();
 8003952:	f000 fe17 	bl	8004584 <HAL_GetTick>
 8003956:	61f8      	str	r0, [r7, #28]
  while(Servo_IsBusy(s, tol_deg)){
 8003958:	e00f      	b.n	800397a <Servo_MoveToBlocking+0x66>
    Servo_Update(s);
 800395a:	6978      	ldr	r0, [r7, #20]
 800395c:	f7ff ff10 	bl	8003780 <Servo_Update>
    if (HAL_GetTick() - start_ms > timeout_ms) {
 8003960:	f000 fe10 	bl	8004584 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	429a      	cmp	r2, r3
 800396e:	d201      	bcs.n	8003974 <Servo_MoveToBlocking+0x60>
      return false;
 8003970:	2300      	movs	r3, #0
 8003972:	e020      	b.n	80039b6 <Servo_MoveToBlocking+0xa2>
    }
    HAL_Delay(5);
 8003974:	2005      	movs	r0, #5
 8003976:	f000 fe11 	bl	800459c <HAL_Delay>
  while(Servo_IsBusy(s, tol_deg)){
 800397a:	ed97 0a03 	vldr	s0, [r7, #12]
 800397e:	6978      	ldr	r0, [r7, #20]
 8003980:	f7ff ff82 	bl	8003888 <Servo_IsBusy>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1e7      	bne.n	800395a <Servo_MoveToBlocking+0x46>
  }
  float original_alpha = s->ema_alpha;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	61bb      	str	r3, [r7, #24]

  Servo_SetEmaAlpha(s, 1.0f);
 8003990:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003994:	6978      	ldr	r0, [r7, #20]
 8003996:	f7ff fed5 	bl	8003744 <Servo_SetEmaAlpha>

  Servo_WriteDegrees(s, deg);
 800399a:	ed97 0a04 	vldr	s0, [r7, #16]
 800399e:	6978      	ldr	r0, [r7, #20]
 80039a0:	f7ff fe52 	bl	8003648 <Servo_WriteDegrees>

  Servo_SetEmaAlpha(s, original_alpha);
 80039a4:	ed97 0a06 	vldr	s0, [r7, #24]
 80039a8:	6978      	ldr	r0, [r7, #20]
 80039aa:	f7ff fecb 	bl	8003744 <Servo_SetEmaAlpha>

  s->cur_deg = deg;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	60da      	str	r2, [r3, #12]

  return true;
 80039b4:	2301      	movs	r3, #1
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3720      	adds	r7, #32
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
	...

080039c0 <ServoSystem_Init>:

void ServoSystem_Init(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af02      	add	r7, sp, #8
  Servo_Attach(&s1, &htim3, TIM_CHANNEL_1, 500, 3000);
 80039c6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80039d0:	2200      	movs	r2, #0
 80039d2:	4933      	ldr	r1, [pc, #204]	@ (8003aa0 <ServoSystem_Init+0xe0>)
 80039d4:	4833      	ldr	r0, [pc, #204]	@ (8003aa4 <ServoSystem_Init+0xe4>)
 80039d6:	f7ff fd5b 	bl	8003490 <Servo_Attach>
  Servo_Attach(&s2, &htim3, TIM_CHANNEL_2, 800, 2200);
 80039da:	f640 0398 	movw	r3, #2200	@ 0x898
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80039e4:	2204      	movs	r2, #4
 80039e6:	492e      	ldr	r1, [pc, #184]	@ (8003aa0 <ServoSystem_Init+0xe0>)
 80039e8:	482f      	ldr	r0, [pc, #188]	@ (8003aa8 <ServoSystem_Init+0xe8>)
 80039ea:	f7ff fd51 	bl	8003490 <Servo_Attach>

  Servo_SetMaxSpeedDps(&s1, 80.0f);
 80039ee:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 8003aac <ServoSystem_Init+0xec>
 80039f2:	482c      	ldr	r0, [pc, #176]	@ (8003aa4 <ServoSystem_Init+0xe4>)
 80039f4:	f7ff fe78 	bl	80036e8 <Servo_SetMaxSpeedDps>
  Servo_SetMaxSpeedDps(&s2, 80.0f);
 80039f8:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8003aac <ServoSystem_Init+0xec>
 80039fc:	482a      	ldr	r0, [pc, #168]	@ (8003aa8 <ServoSystem_Init+0xe8>)
 80039fe:	f7ff fe73 	bl	80036e8 <Servo_SetMaxSpeedDps>
  Servo_SetEmaAlpha(&s1, 0.35f);
 8003a02:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8003ab0 <ServoSystem_Init+0xf0>
 8003a06:	4827      	ldr	r0, [pc, #156]	@ (8003aa4 <ServoSystem_Init+0xe4>)
 8003a08:	f7ff fe9c 	bl	8003744 <Servo_SetEmaAlpha>
  Servo_SetEmaAlpha(&s2, 0.35f);
 8003a0c:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8003ab0 <ServoSystem_Init+0xf0>
 8003a10:	4825      	ldr	r0, [pc, #148]	@ (8003aa8 <ServoSystem_Init+0xe8>)
 8003a12:	f7ff fe97 	bl	8003744 <Servo_SetEmaAlpha>

  Servo_WriteDegrees(&s1, 180.0f);
 8003a16:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8003ab4 <ServoSystem_Init+0xf4>
 8003a1a:	4822      	ldr	r0, [pc, #136]	@ (8003aa4 <ServoSystem_Init+0xe4>)
 8003a1c:	f7ff fe14 	bl	8003648 <Servo_WriteDegrees>
  HAL_Delay(300);
 8003a20:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003a24:	f000 fdba 	bl	800459c <HAL_Delay>
  Servo_WriteDegrees(&s2, 180.0f);
 8003a28:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8003ab4 <ServoSystem_Init+0xf4>
 8003a2c:	481e      	ldr	r0, [pc, #120]	@ (8003aa8 <ServoSystem_Init+0xe8>)
 8003a2e:	f7ff fe0b 	bl	8003648 <Servo_WriteDegrees>
  HAL_Delay(300);
 8003a32:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003a36:	f000 fdb1 	bl	800459c <HAL_Delay>

  GripStop_Init(&g1, &s1, PRESS_RIGHT, 180.0f, 30.0f, 2000.0f, 3, 80.0f, 0.35f, 1.0f, 5000);
 8003a3a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 8003a44:	ed9f 2a1a 	vldr	s4, [pc, #104]	@ 8003ab0 <ServoSystem_Init+0xf0>
 8003a48:	eddf 1a18 	vldr	s3, [pc, #96]	@ 8003aac <ServoSystem_Init+0xec>
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 8003ab8 <ServoSystem_Init+0xf8>
 8003a52:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8003a56:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8003ab4 <ServoSystem_Init+0xf4>
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	4911      	ldr	r1, [pc, #68]	@ (8003aa4 <ServoSystem_Init+0xe4>)
 8003a5e:	4817      	ldr	r0, [pc, #92]	@ (8003abc <ServoSystem_Init+0xfc>)
 8003a60:	f7fe fa9e 	bl	8001fa0 <GripStop_Init>
  GripStop_Init(&g2, &s2, PRESS_LEFT,  180.0f, 10.0f, 200.0f, 2, 80.0f, 0.35f, 1.0f, 5000);
 8003a64:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 8003a6e:	ed9f 2a10 	vldr	s4, [pc, #64]	@ 8003ab0 <ServoSystem_Init+0xf0>
 8003a72:	eddf 1a0e 	vldr	s3, [pc, #56]	@ 8003aac <ServoSystem_Init+0xec>
 8003a76:	2302      	movs	r3, #2
 8003a78:	ed9f 1a11 	vldr	s2, [pc, #68]	@ 8003ac0 <ServoSystem_Init+0x100>
 8003a7c:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8003a80:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8003ab4 <ServoSystem_Init+0xf4>
 8003a84:	2200      	movs	r2, #0
 8003a86:	4908      	ldr	r1, [pc, #32]	@ (8003aa8 <ServoSystem_Init+0xe8>)
 8003a88:	480e      	ldr	r0, [pc, #56]	@ (8003ac4 <ServoSystem_Init+0x104>)
 8003a8a:	f7fe fa89 	bl	8001fa0 <GripStop_Init>

  GripStop_Start(&g1);
 8003a8e:	480b      	ldr	r0, [pc, #44]	@ (8003abc <ServoSystem_Init+0xfc>)
 8003a90:	f7fe fb22 	bl	80020d8 <GripStop_Start>
  GripStop_Start(&g2);
 8003a94:	480b      	ldr	r0, [pc, #44]	@ (8003ac4 <ServoSystem_Init+0x104>)
 8003a96:	f7fe fb1f 	bl	80020d8 <GripStop_Start>
}
 8003a9a:	bf00      	nop
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	20000ba4 	.word	0x20000ba4
 8003aa4:	20000ae8 	.word	0x20000ae8
 8003aa8:	20000b14 	.word	0x20000b14
 8003aac:	42a00000 	.word	0x42a00000
 8003ab0:	3eb33333 	.word	0x3eb33333
 8003ab4:	43340000 	.word	0x43340000
 8003ab8:	44fa0000 	.word	0x44fa0000
 8003abc:	20000b40 	.word	0x20000b40
 8003ac0:	43480000 	.word	0x43480000
 8003ac4:	20000b70 	.word	0x20000b70

08003ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ace:	2300      	movs	r3, #0
 8003ad0:	607b      	str	r3, [r7, #4]
 8003ad2:	4b10      	ldr	r3, [pc, #64]	@ (8003b14 <HAL_MspInit+0x4c>)
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad6:	4a0f      	ldr	r2, [pc, #60]	@ (8003b14 <HAL_MspInit+0x4c>)
 8003ad8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003adc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ade:	4b0d      	ldr	r3, [pc, #52]	@ (8003b14 <HAL_MspInit+0x4c>)
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ae6:	607b      	str	r3, [r7, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003aea:	2300      	movs	r3, #0
 8003aec:	603b      	str	r3, [r7, #0]
 8003aee:	4b09      	ldr	r3, [pc, #36]	@ (8003b14 <HAL_MspInit+0x4c>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af2:	4a08      	ldr	r2, [pc, #32]	@ (8003b14 <HAL_MspInit+0x4c>)
 8003af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003af8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003afa:	4b06      	ldr	r3, [pc, #24]	@ (8003b14 <HAL_MspInit+0x4c>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b02:	603b      	str	r3, [r7, #0]
 8003b04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40023800 	.word	0x40023800

08003b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b1c:	bf00      	nop
 8003b1e:	e7fd      	b.n	8003b1c <NMI_Handler+0x4>

08003b20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b24:	bf00      	nop
 8003b26:	e7fd      	b.n	8003b24 <HardFault_Handler+0x4>

08003b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b2c:	bf00      	nop
 8003b2e:	e7fd      	b.n	8003b2c <MemManage_Handler+0x4>

08003b30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b34:	bf00      	nop
 8003b36:	e7fd      	b.n	8003b34 <BusFault_Handler+0x4>

08003b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b3c:	bf00      	nop
 8003b3e:	e7fd      	b.n	8003b3c <UsageFault_Handler+0x4>

08003b40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b44:	bf00      	nop
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b52:	bf00      	nop
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b60:	bf00      	nop
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b6e:	f000 fcf5 	bl	800455c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b72:	bf00      	nop
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8003b7c:	4802      	ldr	r0, [pc, #8]	@ (8003b88 <DMA1_Stream0_IRQHandler+0x10>)
 8003b7e:	f001 fa4d 	bl	800501c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003b82:	bf00      	nop
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20000d6c 	.word	0x20000d6c

08003b8c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003b90:	4802      	ldr	r0, [pc, #8]	@ (8003b9c <DMA1_Stream2_IRQHandler+0x10>)
 8003b92:	f001 fa43 	bl	800501c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003b96:	bf00      	nop
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20000d0c 	.word	0x20000d0c

08003ba0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003ba4:	4802      	ldr	r0, [pc, #8]	@ (8003bb0 <UART4_IRQHandler+0x10>)
 8003ba6:	f003 fd4f 	bl	8007648 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003baa:	bf00      	nop
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	20000bec 	.word	0x20000bec

08003bb4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003bb8:	4802      	ldr	r0, [pc, #8]	@ (8003bc4 <UART5_IRQHandler+0x10>)
 8003bba:	f003 fd45 	bl	8007648 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003bbe:	bf00      	nop
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20000c34 	.word	0x20000c34

08003bc8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003bcc:	4802      	ldr	r0, [pc, #8]	@ (8003bd8 <DMA2_Stream1_IRQHandler+0x10>)
 8003bce:	f001 fa25 	bl	800501c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003bd2:	bf00      	nop
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20000dcc 	.word	0x20000dcc

08003bdc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  if ((__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE) != RESET) &&
 8003be2:	4b11      	ldr	r3, [pc, #68]	@ (8003c28 <USART6_IRQHandler+0x4c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0310 	and.w	r3, r3, #16
 8003bec:	2b10      	cmp	r3, #16
 8003bee:	d114      	bne.n	8003c1a <USART6_IRQHandler+0x3e>
	  (__HAL_UART_GET_IT_SOURCE(&huart6, UART_IT_IDLE) != RESET))
 8003bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8003c28 <USART6_IRQHandler+0x4c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f003 0310 	and.w	r3, r3, #16
  if ((__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE) != RESET) &&
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00d      	beq.n	8003c1a <USART6_IRQHandler+0x3e>
  {
	  HAL_UART_IDLE_Callback(&huart6);
 8003bfe:	480a      	ldr	r0, [pc, #40]	@ (8003c28 <USART6_IRQHandler+0x4c>)
 8003c00:	f7fe fbba 	bl	8002378 <HAL_UART_IDLE_Callback>
	  __HAL_UART_CLEAR_IDLEFLAG(&huart6);
 8003c04:	2300      	movs	r3, #0
 8003c06:	607b      	str	r3, [r7, #4]
 8003c08:	4b07      	ldr	r3, [pc, #28]	@ (8003c28 <USART6_IRQHandler+0x4c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	607b      	str	r3, [r7, #4]
 8003c10:	4b05      	ldr	r3, [pc, #20]	@ (8003c28 <USART6_IRQHandler+0x4c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	607b      	str	r3, [r7, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
  }
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003c1a:	4803      	ldr	r0, [pc, #12]	@ (8003c28 <USART6_IRQHandler+0x4c>)
 8003c1c:	f003 fd14 	bl	8007648 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003c20:	bf00      	nop
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20000cc4 	.word	0x20000cc4

08003c2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  return 1;
 8003c30:	2301      	movs	r3, #1
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <_kill>:

int _kill(int pid, int sig)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c46:	f006 fe49 	bl	800a8dc <__errno>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2216      	movs	r2, #22
 8003c4e:	601a      	str	r2, [r3, #0]
  return -1;
 8003c50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <_exit>:

void _exit (int status)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c64:	f04f 31ff 	mov.w	r1, #4294967295
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff ffe7 	bl	8003c3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c6e:	bf00      	nop
 8003c70:	e7fd      	b.n	8003c6e <_exit+0x12>

08003c72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b086      	sub	sp, #24
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	e00a      	b.n	8003c9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c84:	f3af 8000 	nop.w
 8003c88:	4601      	mov	r1, r0
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	60ba      	str	r2, [r7, #8]
 8003c90:	b2ca      	uxtb	r2, r1
 8003c92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	3301      	adds	r3, #1
 8003c98:	617b      	str	r3, [r7, #20]
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	dbf0      	blt.n	8003c84 <_read+0x12>
  }

  return len;
 8003ca2:	687b      	ldr	r3, [r7, #4]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cb8:	2300      	movs	r3, #0
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	e009      	b.n	8003cd2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	60ba      	str	r2, [r7, #8]
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fe fbac 	bl	8002424 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	617b      	str	r3, [r7, #20]
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	dbf1      	blt.n	8003cbe <_write+0x12>
  }
  return len;
 8003cda:	687b      	ldr	r3, [r7, #4]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <_close>:

int _close(int file)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003cec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d0c:	605a      	str	r2, [r3, #4]
  return 0;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <_isatty>:

int _isatty(int file)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d24:	2301      	movs	r3, #1
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b085      	sub	sp, #20
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	60f8      	str	r0, [r7, #12]
 8003d3a:	60b9      	str	r1, [r7, #8]
 8003d3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3714      	adds	r7, #20
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d54:	4a14      	ldr	r2, [pc, #80]	@ (8003da8 <_sbrk+0x5c>)
 8003d56:	4b15      	ldr	r3, [pc, #84]	@ (8003dac <_sbrk+0x60>)
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d60:	4b13      	ldr	r3, [pc, #76]	@ (8003db0 <_sbrk+0x64>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d102      	bne.n	8003d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d68:	4b11      	ldr	r3, [pc, #68]	@ (8003db0 <_sbrk+0x64>)
 8003d6a:	4a12      	ldr	r2, [pc, #72]	@ (8003db4 <_sbrk+0x68>)
 8003d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d6e:	4b10      	ldr	r3, [pc, #64]	@ (8003db0 <_sbrk+0x64>)
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4413      	add	r3, r2
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d207      	bcs.n	8003d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d7c:	f006 fdae 	bl	800a8dc <__errno>
 8003d80:	4603      	mov	r3, r0
 8003d82:	220c      	movs	r2, #12
 8003d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d86:	f04f 33ff 	mov.w	r3, #4294967295
 8003d8a:	e009      	b.n	8003da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d8c:	4b08      	ldr	r3, [pc, #32]	@ (8003db0 <_sbrk+0x64>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d92:	4b07      	ldr	r3, [pc, #28]	@ (8003db0 <_sbrk+0x64>)
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4413      	add	r3, r2
 8003d9a:	4a05      	ldr	r2, [pc, #20]	@ (8003db0 <_sbrk+0x64>)
 8003d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20020000 	.word	0x20020000
 8003dac:	00000400 	.word	0x00000400
 8003db0:	20000ba0 	.word	0x20000ba0
 8003db4:	20000f80 	.word	0x20000f80

08003db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003dbc:	4b06      	ldr	r3, [pc, #24]	@ (8003dd8 <SystemInit+0x20>)
 8003dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc2:	4a05      	ldr	r2, [pc, #20]	@ (8003dd8 <SystemInit+0x20>)
 8003dc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003dc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003dcc:	bf00      	nop
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	e000ed00 	.word	0xe000ed00

08003ddc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08e      	sub	sp, #56	@ 0x38
 8003de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003de2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003de6:	2200      	movs	r2, #0
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	605a      	str	r2, [r3, #4]
 8003dec:	609a      	str	r2, [r3, #8]
 8003dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003df0:	f107 0320 	add.w	r3, r7, #32
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003dfa:	1d3b      	adds	r3, r7, #4
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	605a      	str	r2, [r3, #4]
 8003e02:	609a      	str	r2, [r3, #8]
 8003e04:	60da      	str	r2, [r3, #12]
 8003e06:	611a      	str	r2, [r3, #16]
 8003e08:	615a      	str	r2, [r3, #20]
 8003e0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003e0c:	4b33      	ldr	r3, [pc, #204]	@ (8003edc <MX_TIM3_Init+0x100>)
 8003e0e:	4a34      	ldr	r2, [pc, #208]	@ (8003ee0 <MX_TIM3_Init+0x104>)
 8003e10:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 89;
 8003e12:	4b32      	ldr	r3, [pc, #200]	@ (8003edc <MX_TIM3_Init+0x100>)
 8003e14:	2259      	movs	r2, #89	@ 0x59
 8003e16:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e18:	4b30      	ldr	r3, [pc, #192]	@ (8003edc <MX_TIM3_Init+0x100>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8003e1e:	4b2f      	ldr	r3, [pc, #188]	@ (8003edc <MX_TIM3_Init+0x100>)
 8003e20:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8003e24:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e26:	4b2d      	ldr	r3, [pc, #180]	@ (8003edc <MX_TIM3_Init+0x100>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8003edc <MX_TIM3_Init+0x100>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003e32:	482a      	ldr	r0, [pc, #168]	@ (8003edc <MX_TIM3_Init+0x100>)
 8003e34:	f002 fb42 	bl	80064bc <HAL_TIM_Base_Init>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003e3e:	f7fe fbb7 	bl	80025b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e46:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003e48:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4823      	ldr	r0, [pc, #140]	@ (8003edc <MX_TIM3_Init+0x100>)
 8003e50:	f002 fd66 	bl	8006920 <HAL_TIM_ConfigClockSource>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003e5a:	f7fe fba9 	bl	80025b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003e5e:	481f      	ldr	r0, [pc, #124]	@ (8003edc <MX_TIM3_Init+0x100>)
 8003e60:	f002 fb7b 	bl	800655a <HAL_TIM_PWM_Init>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003e6a:	f7fe fba1 	bl	80025b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e72:	2300      	movs	r3, #0
 8003e74:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003e76:	f107 0320 	add.w	r3, r7, #32
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4817      	ldr	r0, [pc, #92]	@ (8003edc <MX_TIM3_Init+0x100>)
 8003e7e:	f003 f92d 	bl	80070dc <HAL_TIMEx_MasterConfigSynchronization>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003e88:	f7fe fb92 	bl	80025b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e8c:	2360      	movs	r3, #96	@ 0x60
 8003e8e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8003e90:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8003e94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e96:	2300      	movs	r3, #0
 8003e98:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e9e:	1d3b      	adds	r3, r7, #4
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	480d      	ldr	r0, [pc, #52]	@ (8003edc <MX_TIM3_Init+0x100>)
 8003ea6:	f002 fc79 	bl	800679c <HAL_TIM_PWM_ConfigChannel>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003eb0:	f7fe fb7e 	bl	80025b0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003eb8:	1d3b      	adds	r3, r7, #4
 8003eba:	2204      	movs	r2, #4
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4807      	ldr	r0, [pc, #28]	@ (8003edc <MX_TIM3_Init+0x100>)
 8003ec0:	f002 fc6c 	bl	800679c <HAL_TIM_PWM_ConfigChannel>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 8003eca:	f7fe fb71 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003ece:	4803      	ldr	r0, [pc, #12]	@ (8003edc <MX_TIM3_Init+0x100>)
 8003ed0:	f000 f82a 	bl	8003f28 <HAL_TIM_MspPostInit>

}
 8003ed4:	bf00      	nop
 8003ed6:	3738      	adds	r7, #56	@ 0x38
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20000ba4 	.word	0x20000ba4
 8003ee0:	40000400 	.word	0x40000400

08003ee4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a0b      	ldr	r2, [pc, #44]	@ (8003f20 <HAL_TIM_Base_MspInit+0x3c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d10d      	bne.n	8003f12 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	4b0a      	ldr	r3, [pc, #40]	@ (8003f24 <HAL_TIM_Base_MspInit+0x40>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efe:	4a09      	ldr	r2, [pc, #36]	@ (8003f24 <HAL_TIM_Base_MspInit+0x40>)
 8003f00:	f043 0302 	orr.w	r3, r3, #2
 8003f04:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f06:	4b07      	ldr	r3, [pc, #28]	@ (8003f24 <HAL_TIM_Base_MspInit+0x40>)
 8003f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003f12:	bf00      	nop
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40000400 	.word	0x40000400
 8003f24:	40023800 	.word	0x40023800

08003f28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f30:	f107 030c 	add.w	r3, r7, #12
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	605a      	str	r2, [r3, #4]
 8003f3a:	609a      	str	r2, [r3, #8]
 8003f3c:	60da      	str	r2, [r3, #12]
 8003f3e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a12      	ldr	r2, [pc, #72]	@ (8003f90 <HAL_TIM_MspPostInit+0x68>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d11d      	bne.n	8003f86 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60bb      	str	r3, [r7, #8]
 8003f4e:	4b11      	ldr	r3, [pc, #68]	@ (8003f94 <HAL_TIM_MspPostInit+0x6c>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f52:	4a10      	ldr	r2, [pc, #64]	@ (8003f94 <HAL_TIM_MspPostInit+0x6c>)
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8003f94 <HAL_TIM_MspPostInit+0x6c>)
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	60bb      	str	r3, [r7, #8]
 8003f64:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f66:	23c0      	movs	r3, #192	@ 0xc0
 8003f68:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f72:	2302      	movs	r3, #2
 8003f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003f76:	2302      	movs	r3, #2
 8003f78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f7a:	f107 030c 	add.w	r3, r7, #12
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4805      	ldr	r0, [pc, #20]	@ (8003f98 <HAL_TIM_MspPostInit+0x70>)
 8003f82:	f001 fab5 	bl	80054f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003f86:	bf00      	nop
 8003f88:	3720      	adds	r7, #32
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	40000400 	.word	0x40000400
 8003f94:	40023800 	.word	0x40023800
 8003f98:	40020000 	.word	0x40020000

08003f9c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_usart6_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003fa0:	4b10      	ldr	r3, [pc, #64]	@ (8003fe4 <MX_UART4_Init+0x48>)
 8003fa2:	4a11      	ldr	r2, [pc, #68]	@ (8003fe8 <MX_UART4_Init+0x4c>)
 8003fa4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8003fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8003fe4 <MX_UART4_Init+0x48>)
 8003fa8:	4a10      	ldr	r2, [pc, #64]	@ (8003fec <MX_UART4_Init+0x50>)
 8003faa:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003fac:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe4 <MX_UART4_Init+0x48>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe4 <MX_UART4_Init+0x48>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8003fe4 <MX_UART4_Init+0x48>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003fbe:	4b09      	ldr	r3, [pc, #36]	@ (8003fe4 <MX_UART4_Init+0x48>)
 8003fc0:	220c      	movs	r2, #12
 8003fc2:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fc4:	4b07      	ldr	r3, [pc, #28]	@ (8003fe4 <MX_UART4_Init+0x48>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fca:	4b06      	ldr	r3, [pc, #24]	@ (8003fe4 <MX_UART4_Init+0x48>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003fd0:	4804      	ldr	r0, [pc, #16]	@ (8003fe4 <MX_UART4_Init+0x48>)
 8003fd2:	f003 f8ff 	bl	80071d4 <HAL_UART_Init>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <MX_UART4_Init+0x44>
  {
    Error_Handler();
 8003fdc:	f7fe fae8 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003fe0:	bf00      	nop
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	20000bec 	.word	0x20000bec
 8003fe8:	40004c00 	.word	0x40004c00
 8003fec:	001e8480 	.word	0x001e8480

08003ff0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003ff4:	4b10      	ldr	r3, [pc, #64]	@ (8004038 <MX_UART5_Init+0x48>)
 8003ff6:	4a11      	ldr	r2, [pc, #68]	@ (800403c <MX_UART5_Init+0x4c>)
 8003ff8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 2000000;
 8003ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8004038 <MX_UART5_Init+0x48>)
 8003ffc:	4a10      	ldr	r2, [pc, #64]	@ (8004040 <MX_UART5_Init+0x50>)
 8003ffe:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004000:	4b0d      	ldr	r3, [pc, #52]	@ (8004038 <MX_UART5_Init+0x48>)
 8004002:	2200      	movs	r2, #0
 8004004:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004006:	4b0c      	ldr	r3, [pc, #48]	@ (8004038 <MX_UART5_Init+0x48>)
 8004008:	2200      	movs	r2, #0
 800400a:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800400c:	4b0a      	ldr	r3, [pc, #40]	@ (8004038 <MX_UART5_Init+0x48>)
 800400e:	2200      	movs	r2, #0
 8004010:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004012:	4b09      	ldr	r3, [pc, #36]	@ (8004038 <MX_UART5_Init+0x48>)
 8004014:	220c      	movs	r2, #12
 8004016:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004018:	4b07      	ldr	r3, [pc, #28]	@ (8004038 <MX_UART5_Init+0x48>)
 800401a:	2200      	movs	r2, #0
 800401c:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800401e:	4b06      	ldr	r3, [pc, #24]	@ (8004038 <MX_UART5_Init+0x48>)
 8004020:	2200      	movs	r2, #0
 8004022:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004024:	4804      	ldr	r0, [pc, #16]	@ (8004038 <MX_UART5_Init+0x48>)
 8004026:	f003 f8d5 	bl	80071d4 <HAL_UART_Init>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <MX_UART5_Init+0x44>
  {
    Error_Handler();
 8004030:	f7fe fabe 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004034:	bf00      	nop
 8004036:	bd80      	pop	{r7, pc}
 8004038:	20000c34 	.word	0x20000c34
 800403c:	40005000 	.word	0x40005000
 8004040:	001e8480 	.word	0x001e8480

08004044 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004048:	4b11      	ldr	r3, [pc, #68]	@ (8004090 <MX_USART2_UART_Init+0x4c>)
 800404a:	4a12      	ldr	r2, [pc, #72]	@ (8004094 <MX_USART2_UART_Init+0x50>)
 800404c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800404e:	4b10      	ldr	r3, [pc, #64]	@ (8004090 <MX_USART2_UART_Init+0x4c>)
 8004050:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004054:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004056:	4b0e      	ldr	r3, [pc, #56]	@ (8004090 <MX_USART2_UART_Init+0x4c>)
 8004058:	2200      	movs	r2, #0
 800405a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800405c:	4b0c      	ldr	r3, [pc, #48]	@ (8004090 <MX_USART2_UART_Init+0x4c>)
 800405e:	2200      	movs	r2, #0
 8004060:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004062:	4b0b      	ldr	r3, [pc, #44]	@ (8004090 <MX_USART2_UART_Init+0x4c>)
 8004064:	2200      	movs	r2, #0
 8004066:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004068:	4b09      	ldr	r3, [pc, #36]	@ (8004090 <MX_USART2_UART_Init+0x4c>)
 800406a:	220c      	movs	r2, #12
 800406c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800406e:	4b08      	ldr	r3, [pc, #32]	@ (8004090 <MX_USART2_UART_Init+0x4c>)
 8004070:	2200      	movs	r2, #0
 8004072:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004074:	4b06      	ldr	r3, [pc, #24]	@ (8004090 <MX_USART2_UART_Init+0x4c>)
 8004076:	2200      	movs	r2, #0
 8004078:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800407a:	4805      	ldr	r0, [pc, #20]	@ (8004090 <MX_USART2_UART_Init+0x4c>)
 800407c:	f003 f8aa 	bl	80071d4 <HAL_UART_Init>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004086:	f7fe fa93 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800408a:	bf00      	nop
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	20000c7c 	.word	0x20000c7c
 8004094:	40004400 	.word	0x40004400

08004098 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800409c:	4b11      	ldr	r3, [pc, #68]	@ (80040e4 <MX_USART6_UART_Init+0x4c>)
 800409e:	4a12      	ldr	r2, [pc, #72]	@ (80040e8 <MX_USART6_UART_Init+0x50>)
 80040a0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80040a2:	4b10      	ldr	r3, [pc, #64]	@ (80040e4 <MX_USART6_UART_Init+0x4c>)
 80040a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80040a8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80040aa:	4b0e      	ldr	r3, [pc, #56]	@ (80040e4 <MX_USART6_UART_Init+0x4c>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80040b0:	4b0c      	ldr	r3, [pc, #48]	@ (80040e4 <MX_USART6_UART_Init+0x4c>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80040b6:	4b0b      	ldr	r3, [pc, #44]	@ (80040e4 <MX_USART6_UART_Init+0x4c>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80040bc:	4b09      	ldr	r3, [pc, #36]	@ (80040e4 <MX_USART6_UART_Init+0x4c>)
 80040be:	220c      	movs	r2, #12
 80040c0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040c2:	4b08      	ldr	r3, [pc, #32]	@ (80040e4 <MX_USART6_UART_Init+0x4c>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80040c8:	4b06      	ldr	r3, [pc, #24]	@ (80040e4 <MX_USART6_UART_Init+0x4c>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80040ce:	4805      	ldr	r0, [pc, #20]	@ (80040e4 <MX_USART6_UART_Init+0x4c>)
 80040d0:	f003 f880 	bl	80071d4 <HAL_UART_Init>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80040da:	f7fe fa69 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80040de:	bf00      	nop
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20000cc4 	.word	0x20000cc4
 80040e8:	40011400 	.word	0x40011400

080040ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b090      	sub	sp, #64	@ 0x40
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	605a      	str	r2, [r3, #4]
 80040fe:	609a      	str	r2, [r3, #8]
 8004100:	60da      	str	r2, [r3, #12]
 8004102:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a8f      	ldr	r2, [pc, #572]	@ (8004348 <HAL_UART_MspInit+0x25c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d162      	bne.n	80041d4 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800410e:	2300      	movs	r3, #0
 8004110:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004112:	4b8e      	ldr	r3, [pc, #568]	@ (800434c <HAL_UART_MspInit+0x260>)
 8004114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004116:	4a8d      	ldr	r2, [pc, #564]	@ (800434c <HAL_UART_MspInit+0x260>)
 8004118:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800411c:	6413      	str	r3, [r2, #64]	@ 0x40
 800411e:	4b8b      	ldr	r3, [pc, #556]	@ (800434c <HAL_UART_MspInit+0x260>)
 8004120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004122:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004126:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004128:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800412a:	2300      	movs	r3, #0
 800412c:	627b      	str	r3, [r7, #36]	@ 0x24
 800412e:	4b87      	ldr	r3, [pc, #540]	@ (800434c <HAL_UART_MspInit+0x260>)
 8004130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004132:	4a86      	ldr	r2, [pc, #536]	@ (800434c <HAL_UART_MspInit+0x260>)
 8004134:	f043 0301 	orr.w	r3, r3, #1
 8004138:	6313      	str	r3, [r2, #48]	@ 0x30
 800413a:	4b84      	ldr	r3, [pc, #528]	@ (800434c <HAL_UART_MspInit+0x260>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	627b      	str	r3, [r7, #36]	@ 0x24
 8004144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004146:	2303      	movs	r3, #3
 8004148:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800414a:	2302      	movs	r3, #2
 800414c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800414e:	2301      	movs	r3, #1
 8004150:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004152:	2303      	movs	r3, #3
 8004154:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004156:	2308      	movs	r3, #8
 8004158:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800415a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800415e:	4619      	mov	r1, r3
 8004160:	487b      	ldr	r0, [pc, #492]	@ (8004350 <HAL_UART_MspInit+0x264>)
 8004162:	f001 f9c5 	bl	80054f0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8004166:	4b7b      	ldr	r3, [pc, #492]	@ (8004354 <HAL_UART_MspInit+0x268>)
 8004168:	4a7b      	ldr	r2, [pc, #492]	@ (8004358 <HAL_UART_MspInit+0x26c>)
 800416a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800416c:	4b79      	ldr	r3, [pc, #484]	@ (8004354 <HAL_UART_MspInit+0x268>)
 800416e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004172:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004174:	4b77      	ldr	r3, [pc, #476]	@ (8004354 <HAL_UART_MspInit+0x268>)
 8004176:	2200      	movs	r2, #0
 8004178:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800417a:	4b76      	ldr	r3, [pc, #472]	@ (8004354 <HAL_UART_MspInit+0x268>)
 800417c:	2200      	movs	r2, #0
 800417e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004180:	4b74      	ldr	r3, [pc, #464]	@ (8004354 <HAL_UART_MspInit+0x268>)
 8004182:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004186:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004188:	4b72      	ldr	r3, [pc, #456]	@ (8004354 <HAL_UART_MspInit+0x268>)
 800418a:	2200      	movs	r2, #0
 800418c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800418e:	4b71      	ldr	r3, [pc, #452]	@ (8004354 <HAL_UART_MspInit+0x268>)
 8004190:	2200      	movs	r2, #0
 8004192:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8004194:	4b6f      	ldr	r3, [pc, #444]	@ (8004354 <HAL_UART_MspInit+0x268>)
 8004196:	2200      	movs	r2, #0
 8004198:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800419a:	4b6e      	ldr	r3, [pc, #440]	@ (8004354 <HAL_UART_MspInit+0x268>)
 800419c:	2200      	movs	r2, #0
 800419e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041a0:	4b6c      	ldr	r3, [pc, #432]	@ (8004354 <HAL_UART_MspInit+0x268>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80041a6:	486b      	ldr	r0, [pc, #428]	@ (8004354 <HAL_UART_MspInit+0x268>)
 80041a8:	f000 fda0 	bl	8004cec <HAL_DMA_Init>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80041b2:	f7fe f9fd 	bl	80025b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a66      	ldr	r2, [pc, #408]	@ (8004354 <HAL_UART_MspInit+0x268>)
 80041ba:	63da      	str	r2, [r3, #60]	@ 0x3c
 80041bc:	4a65      	ldr	r2, [pc, #404]	@ (8004354 <HAL_UART_MspInit+0x268>)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80041c2:	2200      	movs	r2, #0
 80041c4:	2100      	movs	r1, #0
 80041c6:	2034      	movs	r0, #52	@ 0x34
 80041c8:	f000 fd59 	bl	8004c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80041cc:	2034      	movs	r0, #52	@ 0x34
 80041ce:	f000 fd72 	bl	8004cb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80041d2:	e138      	b.n	8004446 <HAL_UART_MspInit+0x35a>
  else if(uartHandle->Instance==UART5)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a60      	ldr	r2, [pc, #384]	@ (800435c <HAL_UART_MspInit+0x270>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	f040 8082 	bne.w	80042e4 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_UART5_CLK_ENABLE();
 80041e0:	2300      	movs	r3, #0
 80041e2:	623b      	str	r3, [r7, #32]
 80041e4:	4b59      	ldr	r3, [pc, #356]	@ (800434c <HAL_UART_MspInit+0x260>)
 80041e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e8:	4a58      	ldr	r2, [pc, #352]	@ (800434c <HAL_UART_MspInit+0x260>)
 80041ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80041f0:	4b56      	ldr	r3, [pc, #344]	@ (800434c <HAL_UART_MspInit+0x260>)
 80041f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041f8:	623b      	str	r3, [r7, #32]
 80041fa:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041fc:	2300      	movs	r3, #0
 80041fe:	61fb      	str	r3, [r7, #28]
 8004200:	4b52      	ldr	r3, [pc, #328]	@ (800434c <HAL_UART_MspInit+0x260>)
 8004202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004204:	4a51      	ldr	r2, [pc, #324]	@ (800434c <HAL_UART_MspInit+0x260>)
 8004206:	f043 0304 	orr.w	r3, r3, #4
 800420a:	6313      	str	r3, [r2, #48]	@ 0x30
 800420c:	4b4f      	ldr	r3, [pc, #316]	@ (800434c <HAL_UART_MspInit+0x260>)
 800420e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	61fb      	str	r3, [r7, #28]
 8004216:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004218:	2300      	movs	r3, #0
 800421a:	61bb      	str	r3, [r7, #24]
 800421c:	4b4b      	ldr	r3, [pc, #300]	@ (800434c <HAL_UART_MspInit+0x260>)
 800421e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004220:	4a4a      	ldr	r2, [pc, #296]	@ (800434c <HAL_UART_MspInit+0x260>)
 8004222:	f043 0308 	orr.w	r3, r3, #8
 8004226:	6313      	str	r3, [r2, #48]	@ 0x30
 8004228:	4b48      	ldr	r3, [pc, #288]	@ (800434c <HAL_UART_MspInit+0x260>)
 800422a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422c:	f003 0308 	and.w	r3, r3, #8
 8004230:	61bb      	str	r3, [r7, #24]
 8004232:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004234:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004238:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800423a:	2302      	movs	r3, #2
 800423c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800423e:	2301      	movs	r3, #1
 8004240:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004242:	2303      	movs	r3, #3
 8004244:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004246:	2308      	movs	r3, #8
 8004248:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800424a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800424e:	4619      	mov	r1, r3
 8004250:	4843      	ldr	r0, [pc, #268]	@ (8004360 <HAL_UART_MspInit+0x274>)
 8004252:	f001 f94d 	bl	80054f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004256:	2304      	movs	r3, #4
 8004258:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800425a:	2302      	movs	r3, #2
 800425c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800425e:	2301      	movs	r3, #1
 8004260:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004262:	2303      	movs	r3, #3
 8004264:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004266:	2308      	movs	r3, #8
 8004268:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800426a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800426e:	4619      	mov	r1, r3
 8004270:	483c      	ldr	r0, [pc, #240]	@ (8004364 <HAL_UART_MspInit+0x278>)
 8004272:	f001 f93d 	bl	80054f0 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8004276:	4b3c      	ldr	r3, [pc, #240]	@ (8004368 <HAL_UART_MspInit+0x27c>)
 8004278:	4a3c      	ldr	r2, [pc, #240]	@ (800436c <HAL_UART_MspInit+0x280>)
 800427a:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800427c:	4b3a      	ldr	r3, [pc, #232]	@ (8004368 <HAL_UART_MspInit+0x27c>)
 800427e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004282:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004284:	4b38      	ldr	r3, [pc, #224]	@ (8004368 <HAL_UART_MspInit+0x27c>)
 8004286:	2200      	movs	r2, #0
 8004288:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800428a:	4b37      	ldr	r3, [pc, #220]	@ (8004368 <HAL_UART_MspInit+0x27c>)
 800428c:	2200      	movs	r2, #0
 800428e:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004290:	4b35      	ldr	r3, [pc, #212]	@ (8004368 <HAL_UART_MspInit+0x27c>)
 8004292:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004296:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004298:	4b33      	ldr	r3, [pc, #204]	@ (8004368 <HAL_UART_MspInit+0x27c>)
 800429a:	2200      	movs	r2, #0
 800429c:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800429e:	4b32      	ldr	r3, [pc, #200]	@ (8004368 <HAL_UART_MspInit+0x27c>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80042a4:	4b30      	ldr	r3, [pc, #192]	@ (8004368 <HAL_UART_MspInit+0x27c>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80042aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004368 <HAL_UART_MspInit+0x27c>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042b0:	4b2d      	ldr	r3, [pc, #180]	@ (8004368 <HAL_UART_MspInit+0x27c>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80042b6:	482c      	ldr	r0, [pc, #176]	@ (8004368 <HAL_UART_MspInit+0x27c>)
 80042b8:	f000 fd18 	bl	8004cec <HAL_DMA_Init>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <HAL_UART_MspInit+0x1da>
      Error_Handler();
 80042c2:	f7fe f975 	bl	80025b0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a27      	ldr	r2, [pc, #156]	@ (8004368 <HAL_UART_MspInit+0x27c>)
 80042ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80042cc:	4a26      	ldr	r2, [pc, #152]	@ (8004368 <HAL_UART_MspInit+0x27c>)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80042d2:	2200      	movs	r2, #0
 80042d4:	2100      	movs	r1, #0
 80042d6:	2035      	movs	r0, #53	@ 0x35
 80042d8:	f000 fcd1 	bl	8004c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80042dc:	2035      	movs	r0, #53	@ 0x35
 80042de:	f000 fcea 	bl	8004cb6 <HAL_NVIC_EnableIRQ>
}
 80042e2:	e0b0      	b.n	8004446 <HAL_UART_MspInit+0x35a>
  else if(uartHandle->Instance==USART2)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a21      	ldr	r2, [pc, #132]	@ (8004370 <HAL_UART_MspInit+0x284>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d142      	bne.n	8004374 <HAL_UART_MspInit+0x288>
    __HAL_RCC_USART2_CLK_ENABLE();
 80042ee:	2300      	movs	r3, #0
 80042f0:	617b      	str	r3, [r7, #20]
 80042f2:	4b16      	ldr	r3, [pc, #88]	@ (800434c <HAL_UART_MspInit+0x260>)
 80042f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f6:	4a15      	ldr	r2, [pc, #84]	@ (800434c <HAL_UART_MspInit+0x260>)
 80042f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80042fe:	4b13      	ldr	r3, [pc, #76]	@ (800434c <HAL_UART_MspInit+0x260>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800430a:	2300      	movs	r3, #0
 800430c:	613b      	str	r3, [r7, #16]
 800430e:	4b0f      	ldr	r3, [pc, #60]	@ (800434c <HAL_UART_MspInit+0x260>)
 8004310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004312:	4a0e      	ldr	r2, [pc, #56]	@ (800434c <HAL_UART_MspInit+0x260>)
 8004314:	f043 0301 	orr.w	r3, r3, #1
 8004318:	6313      	str	r3, [r2, #48]	@ 0x30
 800431a:	4b0c      	ldr	r3, [pc, #48]	@ (800434c <HAL_UART_MspInit+0x260>)
 800431c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	613b      	str	r3, [r7, #16]
 8004324:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004326:	230c      	movs	r3, #12
 8004328:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800432a:	2302      	movs	r3, #2
 800432c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800432e:	2300      	movs	r3, #0
 8004330:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004332:	2303      	movs	r3, #3
 8004334:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004336:	2307      	movs	r3, #7
 8004338:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800433a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800433e:	4619      	mov	r1, r3
 8004340:	4803      	ldr	r0, [pc, #12]	@ (8004350 <HAL_UART_MspInit+0x264>)
 8004342:	f001 f8d5 	bl	80054f0 <HAL_GPIO_Init>
}
 8004346:	e07e      	b.n	8004446 <HAL_UART_MspInit+0x35a>
 8004348:	40004c00 	.word	0x40004c00
 800434c:	40023800 	.word	0x40023800
 8004350:	40020000 	.word	0x40020000
 8004354:	20000d0c 	.word	0x20000d0c
 8004358:	40026040 	.word	0x40026040
 800435c:	40005000 	.word	0x40005000
 8004360:	40020800 	.word	0x40020800
 8004364:	40020c00 	.word	0x40020c00
 8004368:	20000d6c 	.word	0x20000d6c
 800436c:	40026010 	.word	0x40026010
 8004370:	40004400 	.word	0x40004400
  else if(uartHandle->Instance==USART6)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a35      	ldr	r2, [pc, #212]	@ (8004450 <HAL_UART_MspInit+0x364>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d163      	bne.n	8004446 <HAL_UART_MspInit+0x35a>
    __HAL_RCC_USART6_CLK_ENABLE();
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	4b34      	ldr	r3, [pc, #208]	@ (8004454 <HAL_UART_MspInit+0x368>)
 8004384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004386:	4a33      	ldr	r2, [pc, #204]	@ (8004454 <HAL_UART_MspInit+0x368>)
 8004388:	f043 0320 	orr.w	r3, r3, #32
 800438c:	6453      	str	r3, [r2, #68]	@ 0x44
 800438e:	4b31      	ldr	r3, [pc, #196]	@ (8004454 <HAL_UART_MspInit+0x368>)
 8004390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004392:	f003 0320 	and.w	r3, r3, #32
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800439a:	2300      	movs	r3, #0
 800439c:	60bb      	str	r3, [r7, #8]
 800439e:	4b2d      	ldr	r3, [pc, #180]	@ (8004454 <HAL_UART_MspInit+0x368>)
 80043a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a2:	4a2c      	ldr	r2, [pc, #176]	@ (8004454 <HAL_UART_MspInit+0x368>)
 80043a4:	f043 0304 	orr.w	r3, r3, #4
 80043a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80043aa:	4b2a      	ldr	r3, [pc, #168]	@ (8004454 <HAL_UART_MspInit+0x368>)
 80043ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ae:	f003 0304 	and.w	r3, r3, #4
 80043b2:	60bb      	str	r3, [r7, #8]
 80043b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80043b6:	23c0      	movs	r3, #192	@ 0xc0
 80043b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ba:	2302      	movs	r3, #2
 80043bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043be:	2300      	movs	r3, #0
 80043c0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043c2:	2303      	movs	r3, #3
 80043c4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80043c6:	2308      	movs	r3, #8
 80043c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80043ce:	4619      	mov	r1, r3
 80043d0:	4821      	ldr	r0, [pc, #132]	@ (8004458 <HAL_UART_MspInit+0x36c>)
 80043d2:	f001 f88d 	bl	80054f0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80043d6:	4b21      	ldr	r3, [pc, #132]	@ (800445c <HAL_UART_MspInit+0x370>)
 80043d8:	4a21      	ldr	r2, [pc, #132]	@ (8004460 <HAL_UART_MspInit+0x374>)
 80043da:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80043dc:	4b1f      	ldr	r3, [pc, #124]	@ (800445c <HAL_UART_MspInit+0x370>)
 80043de:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80043e2:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043e4:	4b1d      	ldr	r3, [pc, #116]	@ (800445c <HAL_UART_MspInit+0x370>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043ea:	4b1c      	ldr	r3, [pc, #112]	@ (800445c <HAL_UART_MspInit+0x370>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043f0:	4b1a      	ldr	r3, [pc, #104]	@ (800445c <HAL_UART_MspInit+0x370>)
 80043f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80043f6:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043f8:	4b18      	ldr	r3, [pc, #96]	@ (800445c <HAL_UART_MspInit+0x370>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043fe:	4b17      	ldr	r3, [pc, #92]	@ (800445c <HAL_UART_MspInit+0x370>)
 8004400:	2200      	movs	r2, #0
 8004402:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8004404:	4b15      	ldr	r3, [pc, #84]	@ (800445c <HAL_UART_MspInit+0x370>)
 8004406:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800440a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800440c:	4b13      	ldr	r3, [pc, #76]	@ (800445c <HAL_UART_MspInit+0x370>)
 800440e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004412:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004414:	4b11      	ldr	r3, [pc, #68]	@ (800445c <HAL_UART_MspInit+0x370>)
 8004416:	2200      	movs	r2, #0
 8004418:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800441a:	4810      	ldr	r0, [pc, #64]	@ (800445c <HAL_UART_MspInit+0x370>)
 800441c:	f000 fc66 	bl	8004cec <HAL_DMA_Init>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_UART_MspInit+0x33e>
      Error_Handler();
 8004426:	f7fe f8c3 	bl	80025b0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a0b      	ldr	r2, [pc, #44]	@ (800445c <HAL_UART_MspInit+0x370>)
 800442e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004430:	4a0a      	ldr	r2, [pc, #40]	@ (800445c <HAL_UART_MspInit+0x370>)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004436:	2200      	movs	r2, #0
 8004438:	2100      	movs	r1, #0
 800443a:	2047      	movs	r0, #71	@ 0x47
 800443c:	f000 fc1f 	bl	8004c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004440:	2047      	movs	r0, #71	@ 0x47
 8004442:	f000 fc38 	bl	8004cb6 <HAL_NVIC_EnableIRQ>
}
 8004446:	bf00      	nop
 8004448:	3740      	adds	r7, #64	@ 0x40
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40011400 	.word	0x40011400
 8004454:	40023800 	.word	0x40023800
 8004458:	40020800 	.word	0x40020800
 800445c:	20000dcc 	.word	0x20000dcc
 8004460:	40026428 	.word	0x40026428

08004464 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004464:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800449c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004468:	f7ff fca6 	bl	8003db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800446c:	480c      	ldr	r0, [pc, #48]	@ (80044a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800446e:	490d      	ldr	r1, [pc, #52]	@ (80044a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004470:	4a0d      	ldr	r2, [pc, #52]	@ (80044a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004474:	e002      	b.n	800447c <LoopCopyDataInit>

08004476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800447a:	3304      	adds	r3, #4

0800447c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800447c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800447e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004480:	d3f9      	bcc.n	8004476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004482:	4a0a      	ldr	r2, [pc, #40]	@ (80044ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004484:	4c0a      	ldr	r4, [pc, #40]	@ (80044b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004488:	e001      	b.n	800448e <LoopFillZerobss>

0800448a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800448a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800448c:	3204      	adds	r2, #4

0800448e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800448e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004490:	d3fb      	bcc.n	800448a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004492:	f006 fa29 	bl	800a8e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004496:	f7fd ffd7 	bl	8002448 <main>
  bx  lr    
 800449a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800449c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80044a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044a4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80044a8:	0800da78 	.word	0x0800da78
  ldr r2, =_sbss
 80044ac:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80044b0:	20000f7c 	.word	0x20000f7c

080044b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044b4:	e7fe      	b.n	80044b4 <ADC_IRQHandler>
	...

080044b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80044bc:	4b0e      	ldr	r3, [pc, #56]	@ (80044f8 <HAL_Init+0x40>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a0d      	ldr	r2, [pc, #52]	@ (80044f8 <HAL_Init+0x40>)
 80044c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80044c8:	4b0b      	ldr	r3, [pc, #44]	@ (80044f8 <HAL_Init+0x40>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a0a      	ldr	r2, [pc, #40]	@ (80044f8 <HAL_Init+0x40>)
 80044ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044d4:	4b08      	ldr	r3, [pc, #32]	@ (80044f8 <HAL_Init+0x40>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a07      	ldr	r2, [pc, #28]	@ (80044f8 <HAL_Init+0x40>)
 80044da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044e0:	2003      	movs	r0, #3
 80044e2:	f000 fbc1 	bl	8004c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044e6:	200f      	movs	r0, #15
 80044e8:	f000 f808 	bl	80044fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044ec:	f7ff faec 	bl	8003ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40023c00 	.word	0x40023c00

080044fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004504:	4b12      	ldr	r3, [pc, #72]	@ (8004550 <HAL_InitTick+0x54>)
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	4b12      	ldr	r3, [pc, #72]	@ (8004554 <HAL_InitTick+0x58>)
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	4619      	mov	r1, r3
 800450e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004512:	fbb3 f3f1 	udiv	r3, r3, r1
 8004516:	fbb2 f3f3 	udiv	r3, r2, r3
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fbd9 	bl	8004cd2 <HAL_SYSTICK_Config>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e00e      	b.n	8004548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b0f      	cmp	r3, #15
 800452e:	d80a      	bhi.n	8004546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004530:	2200      	movs	r2, #0
 8004532:	6879      	ldr	r1, [r7, #4]
 8004534:	f04f 30ff 	mov.w	r0, #4294967295
 8004538:	f000 fba1 	bl	8004c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800453c:	4a06      	ldr	r2, [pc, #24]	@ (8004558 <HAL_InitTick+0x5c>)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	e000      	b.n	8004548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
}
 8004548:	4618      	mov	r0, r3
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	20000000 	.word	0x20000000
 8004554:	20000008 	.word	0x20000008
 8004558:	20000004 	.word	0x20000004

0800455c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004560:	4b06      	ldr	r3, [pc, #24]	@ (800457c <HAL_IncTick+0x20>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	461a      	mov	r2, r3
 8004566:	4b06      	ldr	r3, [pc, #24]	@ (8004580 <HAL_IncTick+0x24>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4413      	add	r3, r2
 800456c:	4a04      	ldr	r2, [pc, #16]	@ (8004580 <HAL_IncTick+0x24>)
 800456e:	6013      	str	r3, [r2, #0]
}
 8004570:	bf00      	nop
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	20000008 	.word	0x20000008
 8004580:	20000e2c 	.word	0x20000e2c

08004584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  return uwTick;
 8004588:	4b03      	ldr	r3, [pc, #12]	@ (8004598 <HAL_GetTick+0x14>)
 800458a:	681b      	ldr	r3, [r3, #0]
}
 800458c:	4618      	mov	r0, r3
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	20000e2c 	.word	0x20000e2c

0800459c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045a4:	f7ff ffee 	bl	8004584 <HAL_GetTick>
 80045a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b4:	d005      	beq.n	80045c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045b6:	4b0a      	ldr	r3, [pc, #40]	@ (80045e0 <HAL_Delay+0x44>)
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	461a      	mov	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4413      	add	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80045c2:	bf00      	nop
 80045c4:	f7ff ffde 	bl	8004584 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d8f7      	bhi.n	80045c4 <HAL_Delay+0x28>
  {
  }
}
 80045d4:	bf00      	nop
 80045d6:	bf00      	nop
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	20000008 	.word	0x20000008

080045e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e033      	b.n	8004662 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d109      	bne.n	8004616 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7fc fdd0 	bl	80011a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461a:	f003 0310 	and.w	r3, r3, #16
 800461e:	2b00      	cmp	r3, #0
 8004620:	d118      	bne.n	8004654 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004626:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800462a:	f023 0302 	bic.w	r3, r3, #2
 800462e:	f043 0202 	orr.w	r2, r3, #2
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f94a 	bl	80048d0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004646:	f023 0303 	bic.w	r3, r3, #3
 800464a:	f043 0201 	orr.w	r2, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	641a      	str	r2, [r3, #64]	@ 0x40
 8004652:	e001      	b.n	8004658 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004660:	7bfb      	ldrb	r3, [r7, #15]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
	...

0800466c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004676:	2300      	movs	r3, #0
 8004678:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004680:	2b01      	cmp	r3, #1
 8004682:	d101      	bne.n	8004688 <HAL_ADC_ConfigChannel+0x1c>
 8004684:	2302      	movs	r3, #2
 8004686:	e113      	b.n	80048b0 <HAL_ADC_ConfigChannel+0x244>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b09      	cmp	r3, #9
 8004696:	d925      	bls.n	80046e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68d9      	ldr	r1, [r3, #12]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	461a      	mov	r2, r3
 80046a6:	4613      	mov	r3, r2
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	4413      	add	r3, r2
 80046ac:	3b1e      	subs	r3, #30
 80046ae:	2207      	movs	r2, #7
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	43da      	mvns	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	400a      	ands	r2, r1
 80046bc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68d9      	ldr	r1, [r3, #12]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	4618      	mov	r0, r3
 80046d0:	4603      	mov	r3, r0
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	4403      	add	r3, r0
 80046d6:	3b1e      	subs	r3, #30
 80046d8:	409a      	lsls	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	60da      	str	r2, [r3, #12]
 80046e2:	e022      	b.n	800472a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6919      	ldr	r1, [r3, #16]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	461a      	mov	r2, r3
 80046f2:	4613      	mov	r3, r2
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	4413      	add	r3, r2
 80046f8:	2207      	movs	r2, #7
 80046fa:	fa02 f303 	lsl.w	r3, r2, r3
 80046fe:	43da      	mvns	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	400a      	ands	r2, r1
 8004706:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6919      	ldr	r1, [r3, #16]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	b29b      	uxth	r3, r3
 8004718:	4618      	mov	r0, r3
 800471a:	4603      	mov	r3, r0
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	4403      	add	r3, r0
 8004720:	409a      	lsls	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2b06      	cmp	r3, #6
 8004730:	d824      	bhi.n	800477c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	4613      	mov	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	3b05      	subs	r3, #5
 8004744:	221f      	movs	r2, #31
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	43da      	mvns	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	400a      	ands	r2, r1
 8004752:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	b29b      	uxth	r3, r3
 8004760:	4618      	mov	r0, r3
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	4613      	mov	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	3b05      	subs	r3, #5
 800476e:	fa00 f203 	lsl.w	r2, r0, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	635a      	str	r2, [r3, #52]	@ 0x34
 800477a:	e04c      	b.n	8004816 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	2b0c      	cmp	r3, #12
 8004782:	d824      	bhi.n	80047ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	4613      	mov	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	3b23      	subs	r3, #35	@ 0x23
 8004796:	221f      	movs	r2, #31
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	43da      	mvns	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	400a      	ands	r2, r1
 80047a4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	4618      	mov	r0, r3
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	4613      	mov	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	3b23      	subs	r3, #35	@ 0x23
 80047c0:	fa00 f203 	lsl.w	r2, r0, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80047cc:	e023      	b.n	8004816 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	4613      	mov	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	3b41      	subs	r3, #65	@ 0x41
 80047e0:	221f      	movs	r2, #31
 80047e2:	fa02 f303 	lsl.w	r3, r2, r3
 80047e6:	43da      	mvns	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	400a      	ands	r2, r1
 80047ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	4618      	mov	r0, r3
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	4613      	mov	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	3b41      	subs	r3, #65	@ 0x41
 800480a:	fa00 f203 	lsl.w	r2, r0, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004816:	4b29      	ldr	r3, [pc, #164]	@ (80048bc <HAL_ADC_ConfigChannel+0x250>)
 8004818:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a28      	ldr	r2, [pc, #160]	@ (80048c0 <HAL_ADC_ConfigChannel+0x254>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d10f      	bne.n	8004844 <HAL_ADC_ConfigChannel+0x1d8>
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b12      	cmp	r3, #18
 800482a:	d10b      	bne.n	8004844 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a1d      	ldr	r2, [pc, #116]	@ (80048c0 <HAL_ADC_ConfigChannel+0x254>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d12b      	bne.n	80048a6 <HAL_ADC_ConfigChannel+0x23a>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a1c      	ldr	r2, [pc, #112]	@ (80048c4 <HAL_ADC_ConfigChannel+0x258>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d003      	beq.n	8004860 <HAL_ADC_ConfigChannel+0x1f4>
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b11      	cmp	r3, #17
 800485e:	d122      	bne.n	80048a6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a11      	ldr	r2, [pc, #68]	@ (80048c4 <HAL_ADC_ConfigChannel+0x258>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d111      	bne.n	80048a6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004882:	4b11      	ldr	r3, [pc, #68]	@ (80048c8 <HAL_ADC_ConfigChannel+0x25c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a11      	ldr	r2, [pc, #68]	@ (80048cc <HAL_ADC_ConfigChannel+0x260>)
 8004888:	fba2 2303 	umull	r2, r3, r2, r3
 800488c:	0c9a      	lsrs	r2, r3, #18
 800488e:	4613      	mov	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004898:	e002      	b.n	80048a0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	3b01      	subs	r3, #1
 800489e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1f9      	bne.n	800489a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	40012300 	.word	0x40012300
 80048c0:	40012000 	.word	0x40012000
 80048c4:	10000012 	.word	0x10000012
 80048c8:	20000000 	.word	0x20000000
 80048cc:	431bde83 	.word	0x431bde83

080048d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048d8:	4b79      	ldr	r3, [pc, #484]	@ (8004ac0 <ADC_Init+0x1f0>)
 80048da:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	431a      	orrs	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004904:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6859      	ldr	r1, [r3, #4]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	021a      	lsls	r2, r3, #8
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004928:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6859      	ldr	r1, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	430a      	orrs	r2, r1
 800493a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689a      	ldr	r2, [r3, #8]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800494a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6899      	ldr	r1, [r3, #8]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004962:	4a58      	ldr	r2, [pc, #352]	@ (8004ac4 <ADC_Init+0x1f4>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d022      	beq.n	80049ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004976:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6899      	ldr	r1, [r3, #8]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004998:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6899      	ldr	r1, [r3, #8]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	609a      	str	r2, [r3, #8]
 80049ac:	e00f      	b.n	80049ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80049bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80049cc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0202 	bic.w	r2, r2, #2
 80049dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	6899      	ldr	r1, [r3, #8]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	7e1b      	ldrb	r3, [r3, #24]
 80049e8:	005a      	lsls	r2, r3, #1
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d01b      	beq.n	8004a34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a0a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004a1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6859      	ldr	r1, [r3, #4]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a26:	3b01      	subs	r3, #1
 8004a28:	035a      	lsls	r2, r3, #13
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	605a      	str	r2, [r3, #4]
 8004a32:	e007      	b.n	8004a44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a42:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004a52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	051a      	lsls	r2, r3, #20
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004a78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6899      	ldr	r1, [r3, #8]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004a86:	025a      	lsls	r2, r3, #9
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6899      	ldr	r1, [r3, #8]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	029a      	lsls	r2, r3, #10
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	609a      	str	r2, [r3, #8]
}
 8004ab4:	bf00      	nop
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	40012300 	.word	0x40012300
 8004ac4:	0f000001 	.word	0x0f000001

08004ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8004b0c <__NVIC_SetPriorityGrouping+0x44>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004af0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004af4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004afa:	4a04      	ldr	r2, [pc, #16]	@ (8004b0c <__NVIC_SetPriorityGrouping+0x44>)
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	60d3      	str	r3, [r2, #12]
}
 8004b00:	bf00      	nop
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	e000ed00 	.word	0xe000ed00

08004b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b10:	b480      	push	{r7}
 8004b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b14:	4b04      	ldr	r3, [pc, #16]	@ (8004b28 <__NVIC_GetPriorityGrouping+0x18>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	0a1b      	lsrs	r3, r3, #8
 8004b1a:	f003 0307 	and.w	r3, r3, #7
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	e000ed00 	.word	0xe000ed00

08004b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	4603      	mov	r3, r0
 8004b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	db0b      	blt.n	8004b56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b3e:	79fb      	ldrb	r3, [r7, #7]
 8004b40:	f003 021f 	and.w	r2, r3, #31
 8004b44:	4907      	ldr	r1, [pc, #28]	@ (8004b64 <__NVIC_EnableIRQ+0x38>)
 8004b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	2001      	movs	r0, #1
 8004b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8004b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b56:	bf00      	nop
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	e000e100 	.word	0xe000e100

08004b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	4603      	mov	r3, r0
 8004b70:	6039      	str	r1, [r7, #0]
 8004b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	db0a      	blt.n	8004b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	490c      	ldr	r1, [pc, #48]	@ (8004bb4 <__NVIC_SetPriority+0x4c>)
 8004b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b86:	0112      	lsls	r2, r2, #4
 8004b88:	b2d2      	uxtb	r2, r2
 8004b8a:	440b      	add	r3, r1
 8004b8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b90:	e00a      	b.n	8004ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	4908      	ldr	r1, [pc, #32]	@ (8004bb8 <__NVIC_SetPriority+0x50>)
 8004b98:	79fb      	ldrb	r3, [r7, #7]
 8004b9a:	f003 030f 	and.w	r3, r3, #15
 8004b9e:	3b04      	subs	r3, #4
 8004ba0:	0112      	lsls	r2, r2, #4
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	761a      	strb	r2, [r3, #24]
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	e000e100 	.word	0xe000e100
 8004bb8:	e000ed00 	.word	0xe000ed00

08004bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b089      	sub	sp, #36	@ 0x24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f003 0307 	and.w	r3, r3, #7
 8004bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	f1c3 0307 	rsb	r3, r3, #7
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	bf28      	it	cs
 8004bda:	2304      	movcs	r3, #4
 8004bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	3304      	adds	r3, #4
 8004be2:	2b06      	cmp	r3, #6
 8004be4:	d902      	bls.n	8004bec <NVIC_EncodePriority+0x30>
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	3b03      	subs	r3, #3
 8004bea:	e000      	b.n	8004bee <NVIC_EncodePriority+0x32>
 8004bec:	2300      	movs	r3, #0
 8004bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfa:	43da      	mvns	r2, r3
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	401a      	ands	r2, r3
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c04:	f04f 31ff 	mov.w	r1, #4294967295
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c0e:	43d9      	mvns	r1, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c14:	4313      	orrs	r3, r2
         );
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3724      	adds	r7, #36	@ 0x24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
	...

08004c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c34:	d301      	bcc.n	8004c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c36:	2301      	movs	r3, #1
 8004c38:	e00f      	b.n	8004c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8004c64 <SysTick_Config+0x40>)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c42:	210f      	movs	r1, #15
 8004c44:	f04f 30ff 	mov.w	r0, #4294967295
 8004c48:	f7ff ff8e 	bl	8004b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c4c:	4b05      	ldr	r3, [pc, #20]	@ (8004c64 <SysTick_Config+0x40>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c52:	4b04      	ldr	r3, [pc, #16]	@ (8004c64 <SysTick_Config+0x40>)
 8004c54:	2207      	movs	r2, #7
 8004c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	e000e010 	.word	0xe000e010

08004c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f7ff ff29 	bl	8004ac8 <__NVIC_SetPriorityGrouping>
}
 8004c76:	bf00      	nop
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b086      	sub	sp, #24
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	4603      	mov	r3, r0
 8004c86:	60b9      	str	r1, [r7, #8]
 8004c88:	607a      	str	r2, [r7, #4]
 8004c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c90:	f7ff ff3e 	bl	8004b10 <__NVIC_GetPriorityGrouping>
 8004c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	68b9      	ldr	r1, [r7, #8]
 8004c9a:	6978      	ldr	r0, [r7, #20]
 8004c9c:	f7ff ff8e 	bl	8004bbc <NVIC_EncodePriority>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ca6:	4611      	mov	r1, r2
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7ff ff5d 	bl	8004b68 <__NVIC_SetPriority>
}
 8004cae:	bf00      	nop
 8004cb0:	3718      	adds	r7, #24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b082      	sub	sp, #8
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7ff ff31 	bl	8004b2c <__NVIC_EnableIRQ>
}
 8004cca:	bf00      	nop
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b082      	sub	sp, #8
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7ff ffa2 	bl	8004c24 <SysTick_Config>
 8004ce0:	4603      	mov	r3, r0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
	...

08004cec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004cf8:	f7ff fc44 	bl	8004584 <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e099      	b.n	8004e3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0201 	bic.w	r2, r2, #1
 8004d26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d28:	e00f      	b.n	8004d4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d2a:	f7ff fc2b 	bl	8004584 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b05      	cmp	r3, #5
 8004d36:	d908      	bls.n	8004d4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2203      	movs	r2, #3
 8004d42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e078      	b.n	8004e3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1e8      	bne.n	8004d2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	4b38      	ldr	r3, [pc, #224]	@ (8004e44 <HAL_DMA_Init+0x158>)
 8004d64:	4013      	ands	r3, r2
 8004d66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da0:	2b04      	cmp	r3, #4
 8004da2:	d107      	bne.n	8004db4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dac:	4313      	orrs	r3, r2
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f023 0307 	bic.w	r3, r3, #7
 8004dca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d117      	bne.n	8004e0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00e      	beq.n	8004e0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 fb01 	bl	80053f8 <DMA_CheckFifoParam>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d008      	beq.n	8004e0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2240      	movs	r2, #64	@ 0x40
 8004e00:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e016      	b.n	8004e3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 fab8 	bl	800538c <DMA_CalcBaseAndBitshift>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e24:	223f      	movs	r2, #63	@ 0x3f
 8004e26:	409a      	lsls	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	f010803f 	.word	0xf010803f

08004e48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
 8004e54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d101      	bne.n	8004e6e <HAL_DMA_Start_IT+0x26>
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	e040      	b.n	8004ef0 <HAL_DMA_Start_IT+0xa8>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d12f      	bne.n	8004ee2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2202      	movs	r2, #2
 8004e86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	68b9      	ldr	r1, [r7, #8]
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f000 fa4a 	bl	8005330 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ea0:	223f      	movs	r2, #63	@ 0x3f
 8004ea2:	409a      	lsls	r2, r3
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0216 	orr.w	r2, r2, #22
 8004eb6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d007      	beq.n	8004ed0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0208 	orr.w	r2, r2, #8
 8004ece:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0201 	orr.w	r2, r2, #1
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	e005      	b.n	8004eee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004eea:	2302      	movs	r3, #2
 8004eec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3718      	adds	r7, #24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f04:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004f06:	f7ff fb3d 	bl	8004584 <HAL_GetTick>
 8004f0a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d008      	beq.n	8004f2a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2280      	movs	r2, #128	@ 0x80
 8004f1c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e052      	b.n	8004fd0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 0216 	bic.w	r2, r2, #22
 8004f38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695a      	ldr	r2, [r3, #20]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d103      	bne.n	8004f5a <HAL_DMA_Abort+0x62>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d007      	beq.n	8004f6a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 0208 	bic.w	r2, r2, #8
 8004f68:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 0201 	bic.w	r2, r2, #1
 8004f78:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f7a:	e013      	b.n	8004fa4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f7c:	f7ff fb02 	bl	8004584 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b05      	cmp	r3, #5
 8004f88:	d90c      	bls.n	8004fa4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2203      	movs	r2, #3
 8004f94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e015      	b.n	8004fd0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1e4      	bne.n	8004f7c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fb6:	223f      	movs	r2, #63	@ 0x3f
 8004fb8:	409a      	lsls	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d004      	beq.n	8004ff6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2280      	movs	r2, #128	@ 0x80
 8004ff0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e00c      	b.n	8005010 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2205      	movs	r2, #5
 8004ffa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0201 	bic.w	r2, r2, #1
 800500c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005024:	2300      	movs	r3, #0
 8005026:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005028:	4b8e      	ldr	r3, [pc, #568]	@ (8005264 <HAL_DMA_IRQHandler+0x248>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a8e      	ldr	r2, [pc, #568]	@ (8005268 <HAL_DMA_IRQHandler+0x24c>)
 800502e:	fba2 2303 	umull	r2, r3, r2, r3
 8005032:	0a9b      	lsrs	r3, r3, #10
 8005034:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800503a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005046:	2208      	movs	r2, #8
 8005048:	409a      	lsls	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	4013      	ands	r3, r2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d01a      	beq.n	8005088 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d013      	beq.n	8005088 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0204 	bic.w	r2, r2, #4
 800506e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005074:	2208      	movs	r2, #8
 8005076:	409a      	lsls	r2, r3
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005080:	f043 0201 	orr.w	r2, r3, #1
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800508c:	2201      	movs	r2, #1
 800508e:	409a      	lsls	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4013      	ands	r3, r2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d012      	beq.n	80050be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00b      	beq.n	80050be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050aa:	2201      	movs	r2, #1
 80050ac:	409a      	lsls	r2, r3
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b6:	f043 0202 	orr.w	r2, r3, #2
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050c2:	2204      	movs	r2, #4
 80050c4:	409a      	lsls	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4013      	ands	r3, r2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d012      	beq.n	80050f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00b      	beq.n	80050f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050e0:	2204      	movs	r2, #4
 80050e2:	409a      	lsls	r2, r3
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ec:	f043 0204 	orr.w	r2, r3, #4
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050f8:	2210      	movs	r2, #16
 80050fa:	409a      	lsls	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4013      	ands	r3, r2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d043      	beq.n	800518c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0308 	and.w	r3, r3, #8
 800510e:	2b00      	cmp	r3, #0
 8005110:	d03c      	beq.n	800518c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005116:	2210      	movs	r2, #16
 8005118:	409a      	lsls	r2, r3
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d018      	beq.n	800515e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d108      	bne.n	800514c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513e:	2b00      	cmp	r3, #0
 8005140:	d024      	beq.n	800518c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	4798      	blx	r3
 800514a:	e01f      	b.n	800518c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005150:	2b00      	cmp	r3, #0
 8005152:	d01b      	beq.n	800518c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	4798      	blx	r3
 800515c:	e016      	b.n	800518c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005168:	2b00      	cmp	r3, #0
 800516a:	d107      	bne.n	800517c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0208 	bic.w	r2, r2, #8
 800517a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005180:	2b00      	cmp	r3, #0
 8005182:	d003      	beq.n	800518c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005190:	2220      	movs	r2, #32
 8005192:	409a      	lsls	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4013      	ands	r3, r2
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 808f 	beq.w	80052bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0310 	and.w	r3, r3, #16
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 8087 	beq.w	80052bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051b2:	2220      	movs	r2, #32
 80051b4:	409a      	lsls	r2, r3
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b05      	cmp	r3, #5
 80051c4:	d136      	bne.n	8005234 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f022 0216 	bic.w	r2, r2, #22
 80051d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	695a      	ldr	r2, [r3, #20]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80051e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d103      	bne.n	80051f6 <HAL_DMA_IRQHandler+0x1da>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d007      	beq.n	8005206 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 0208 	bic.w	r2, r2, #8
 8005204:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800520a:	223f      	movs	r2, #63	@ 0x3f
 800520c:	409a      	lsls	r2, r3
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005226:	2b00      	cmp	r3, #0
 8005228:	d07e      	beq.n	8005328 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	4798      	blx	r3
        }
        return;
 8005232:	e079      	b.n	8005328 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d01d      	beq.n	800527e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10d      	bne.n	800526c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005254:	2b00      	cmp	r3, #0
 8005256:	d031      	beq.n	80052bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	4798      	blx	r3
 8005260:	e02c      	b.n	80052bc <HAL_DMA_IRQHandler+0x2a0>
 8005262:	bf00      	nop
 8005264:	20000000 	.word	0x20000000
 8005268:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005270:	2b00      	cmp	r3, #0
 8005272:	d023      	beq.n	80052bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	4798      	blx	r3
 800527c:	e01e      	b.n	80052bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10f      	bne.n	80052ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 0210 	bic.w	r2, r2, #16
 800529a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d032      	beq.n	800532a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d022      	beq.n	8005316 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2205      	movs	r2, #5
 80052d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0201 	bic.w	r2, r2, #1
 80052e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	3301      	adds	r3, #1
 80052ec:	60bb      	str	r3, [r7, #8]
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d307      	bcc.n	8005304 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1f2      	bne.n	80052e8 <HAL_DMA_IRQHandler+0x2cc>
 8005302:	e000      	b.n	8005306 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005304:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800531a:	2b00      	cmp	r3, #0
 800531c:	d005      	beq.n	800532a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	4798      	blx	r3
 8005326:	e000      	b.n	800532a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005328:	bf00      	nop
    }
  }
}
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
 800533c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800534c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	2b40      	cmp	r3, #64	@ 0x40
 800535c:	d108      	bne.n	8005370 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800536e:	e007      	b.n	8005380 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	60da      	str	r2, [r3, #12]
}
 8005380:	bf00      	nop
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	b2db      	uxtb	r3, r3
 800539a:	3b10      	subs	r3, #16
 800539c:	4a14      	ldr	r2, [pc, #80]	@ (80053f0 <DMA_CalcBaseAndBitshift+0x64>)
 800539e:	fba2 2303 	umull	r2, r3, r2, r3
 80053a2:	091b      	lsrs	r3, r3, #4
 80053a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80053a6:	4a13      	ldr	r2, [pc, #76]	@ (80053f4 <DMA_CalcBaseAndBitshift+0x68>)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4413      	add	r3, r2
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b03      	cmp	r3, #3
 80053b8:	d909      	bls.n	80053ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80053c2:	f023 0303 	bic.w	r3, r3, #3
 80053c6:	1d1a      	adds	r2, r3, #4
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80053cc:	e007      	b.n	80053de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80053d6:	f023 0303 	bic.w	r3, r3, #3
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	aaaaaaab 	.word	0xaaaaaaab
 80053f4:	0800d638 	.word	0x0800d638

080053f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005400:	2300      	movs	r3, #0
 8005402:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005408:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d11f      	bne.n	8005452 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	2b03      	cmp	r3, #3
 8005416:	d856      	bhi.n	80054c6 <DMA_CheckFifoParam+0xce>
 8005418:	a201      	add	r2, pc, #4	@ (adr r2, 8005420 <DMA_CheckFifoParam+0x28>)
 800541a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541e:	bf00      	nop
 8005420:	08005431 	.word	0x08005431
 8005424:	08005443 	.word	0x08005443
 8005428:	08005431 	.word	0x08005431
 800542c:	080054c7 	.word	0x080054c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005434:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d046      	beq.n	80054ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005440:	e043      	b.n	80054ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005446:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800544a:	d140      	bne.n	80054ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005450:	e03d      	b.n	80054ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800545a:	d121      	bne.n	80054a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2b03      	cmp	r3, #3
 8005460:	d837      	bhi.n	80054d2 <DMA_CheckFifoParam+0xda>
 8005462:	a201      	add	r2, pc, #4	@ (adr r2, 8005468 <DMA_CheckFifoParam+0x70>)
 8005464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005468:	08005479 	.word	0x08005479
 800546c:	0800547f 	.word	0x0800547f
 8005470:	08005479 	.word	0x08005479
 8005474:	08005491 	.word	0x08005491
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	73fb      	strb	r3, [r7, #15]
      break;
 800547c:	e030      	b.n	80054e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005482:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d025      	beq.n	80054d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800548e:	e022      	b.n	80054d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005494:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005498:	d11f      	bne.n	80054da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800549e:	e01c      	b.n	80054da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d903      	bls.n	80054ae <DMA_CheckFifoParam+0xb6>
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	2b03      	cmp	r3, #3
 80054aa:	d003      	beq.n	80054b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80054ac:	e018      	b.n	80054e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	73fb      	strb	r3, [r7, #15]
      break;
 80054b2:	e015      	b.n	80054e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00e      	beq.n	80054de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	73fb      	strb	r3, [r7, #15]
      break;
 80054c4:	e00b      	b.n	80054de <DMA_CheckFifoParam+0xe6>
      break;
 80054c6:	bf00      	nop
 80054c8:	e00a      	b.n	80054e0 <DMA_CheckFifoParam+0xe8>
      break;
 80054ca:	bf00      	nop
 80054cc:	e008      	b.n	80054e0 <DMA_CheckFifoParam+0xe8>
      break;
 80054ce:	bf00      	nop
 80054d0:	e006      	b.n	80054e0 <DMA_CheckFifoParam+0xe8>
      break;
 80054d2:	bf00      	nop
 80054d4:	e004      	b.n	80054e0 <DMA_CheckFifoParam+0xe8>
      break;
 80054d6:	bf00      	nop
 80054d8:	e002      	b.n	80054e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80054da:	bf00      	nop
 80054dc:	e000      	b.n	80054e0 <DMA_CheckFifoParam+0xe8>
      break;
 80054de:	bf00      	nop
    }
  } 
  
  return status; 
 80054e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop

080054f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b089      	sub	sp, #36	@ 0x24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80054fe:	2300      	movs	r3, #0
 8005500:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005502:	2300      	movs	r3, #0
 8005504:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005506:	2300      	movs	r3, #0
 8005508:	61fb      	str	r3, [r7, #28]
 800550a:	e165      	b.n	80057d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800550c:	2201      	movs	r2, #1
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	fa02 f303 	lsl.w	r3, r2, r3
 8005514:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	4013      	ands	r3, r2
 800551e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	429a      	cmp	r2, r3
 8005526:	f040 8154 	bne.w	80057d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f003 0303 	and.w	r3, r3, #3
 8005532:	2b01      	cmp	r3, #1
 8005534:	d005      	beq.n	8005542 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800553e:	2b02      	cmp	r3, #2
 8005540:	d130      	bne.n	80055a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	005b      	lsls	r3, r3, #1
 800554c:	2203      	movs	r2, #3
 800554e:	fa02 f303 	lsl.w	r3, r2, r3
 8005552:	43db      	mvns	r3, r3
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	4013      	ands	r3, r2
 8005558:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	fa02 f303 	lsl.w	r3, r2, r3
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	4313      	orrs	r3, r2
 800556a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005578:	2201      	movs	r2, #1
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	fa02 f303 	lsl.w	r3, r2, r3
 8005580:	43db      	mvns	r3, r3
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	4013      	ands	r3, r2
 8005586:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	091b      	lsrs	r3, r3, #4
 800558e:	f003 0201 	and.w	r2, r3, #1
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	fa02 f303 	lsl.w	r3, r2, r3
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	4313      	orrs	r3, r2
 800559c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f003 0303 	and.w	r3, r3, #3
 80055ac:	2b03      	cmp	r3, #3
 80055ae:	d017      	beq.n	80055e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	2203      	movs	r2, #3
 80055bc:	fa02 f303 	lsl.w	r3, r2, r3
 80055c0:	43db      	mvns	r3, r3
 80055c2:	69ba      	ldr	r2, [r7, #24]
 80055c4:	4013      	ands	r3, r2
 80055c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	689a      	ldr	r2, [r3, #8]
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	005b      	lsls	r3, r3, #1
 80055d0:	fa02 f303 	lsl.w	r3, r2, r3
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f003 0303 	and.w	r3, r3, #3
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d123      	bne.n	8005634 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	08da      	lsrs	r2, r3, #3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3208      	adds	r2, #8
 80055f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	f003 0307 	and.w	r3, r3, #7
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	220f      	movs	r2, #15
 8005604:	fa02 f303 	lsl.w	r3, r2, r3
 8005608:	43db      	mvns	r3, r3
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	4013      	ands	r3, r2
 800560e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	691a      	ldr	r2, [r3, #16]
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	fa02 f303 	lsl.w	r3, r2, r3
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	4313      	orrs	r3, r2
 8005624:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	08da      	lsrs	r2, r3, #3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	3208      	adds	r2, #8
 800562e:	69b9      	ldr	r1, [r7, #24]
 8005630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	2203      	movs	r2, #3
 8005640:	fa02 f303 	lsl.w	r3, r2, r3
 8005644:	43db      	mvns	r3, r3
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	4013      	ands	r3, r2
 800564a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f003 0203 	and.w	r2, r3, #3
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	fa02 f303 	lsl.w	r3, r2, r3
 800565c:	69ba      	ldr	r2, [r7, #24]
 800565e:	4313      	orrs	r3, r2
 8005660:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 80ae 	beq.w	80057d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005676:	2300      	movs	r3, #0
 8005678:	60fb      	str	r3, [r7, #12]
 800567a:	4b5d      	ldr	r3, [pc, #372]	@ (80057f0 <HAL_GPIO_Init+0x300>)
 800567c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567e:	4a5c      	ldr	r2, [pc, #368]	@ (80057f0 <HAL_GPIO_Init+0x300>)
 8005680:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005684:	6453      	str	r3, [r2, #68]	@ 0x44
 8005686:	4b5a      	ldr	r3, [pc, #360]	@ (80057f0 <HAL_GPIO_Init+0x300>)
 8005688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800568a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800568e:	60fb      	str	r3, [r7, #12]
 8005690:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005692:	4a58      	ldr	r2, [pc, #352]	@ (80057f4 <HAL_GPIO_Init+0x304>)
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	089b      	lsrs	r3, r3, #2
 8005698:	3302      	adds	r3, #2
 800569a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800569e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	f003 0303 	and.w	r3, r3, #3
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	220f      	movs	r2, #15
 80056aa:	fa02 f303 	lsl.w	r3, r2, r3
 80056ae:	43db      	mvns	r3, r3
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	4013      	ands	r3, r2
 80056b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a4f      	ldr	r2, [pc, #316]	@ (80057f8 <HAL_GPIO_Init+0x308>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d025      	beq.n	800570a <HAL_GPIO_Init+0x21a>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a4e      	ldr	r2, [pc, #312]	@ (80057fc <HAL_GPIO_Init+0x30c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d01f      	beq.n	8005706 <HAL_GPIO_Init+0x216>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a4d      	ldr	r2, [pc, #308]	@ (8005800 <HAL_GPIO_Init+0x310>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d019      	beq.n	8005702 <HAL_GPIO_Init+0x212>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a4c      	ldr	r2, [pc, #304]	@ (8005804 <HAL_GPIO_Init+0x314>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d013      	beq.n	80056fe <HAL_GPIO_Init+0x20e>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a4b      	ldr	r2, [pc, #300]	@ (8005808 <HAL_GPIO_Init+0x318>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d00d      	beq.n	80056fa <HAL_GPIO_Init+0x20a>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a4a      	ldr	r2, [pc, #296]	@ (800580c <HAL_GPIO_Init+0x31c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d007      	beq.n	80056f6 <HAL_GPIO_Init+0x206>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a49      	ldr	r2, [pc, #292]	@ (8005810 <HAL_GPIO_Init+0x320>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d101      	bne.n	80056f2 <HAL_GPIO_Init+0x202>
 80056ee:	2306      	movs	r3, #6
 80056f0:	e00c      	b.n	800570c <HAL_GPIO_Init+0x21c>
 80056f2:	2307      	movs	r3, #7
 80056f4:	e00a      	b.n	800570c <HAL_GPIO_Init+0x21c>
 80056f6:	2305      	movs	r3, #5
 80056f8:	e008      	b.n	800570c <HAL_GPIO_Init+0x21c>
 80056fa:	2304      	movs	r3, #4
 80056fc:	e006      	b.n	800570c <HAL_GPIO_Init+0x21c>
 80056fe:	2303      	movs	r3, #3
 8005700:	e004      	b.n	800570c <HAL_GPIO_Init+0x21c>
 8005702:	2302      	movs	r3, #2
 8005704:	e002      	b.n	800570c <HAL_GPIO_Init+0x21c>
 8005706:	2301      	movs	r3, #1
 8005708:	e000      	b.n	800570c <HAL_GPIO_Init+0x21c>
 800570a:	2300      	movs	r3, #0
 800570c:	69fa      	ldr	r2, [r7, #28]
 800570e:	f002 0203 	and.w	r2, r2, #3
 8005712:	0092      	lsls	r2, r2, #2
 8005714:	4093      	lsls	r3, r2
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	4313      	orrs	r3, r2
 800571a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800571c:	4935      	ldr	r1, [pc, #212]	@ (80057f4 <HAL_GPIO_Init+0x304>)
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	089b      	lsrs	r3, r3, #2
 8005722:	3302      	adds	r3, #2
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800572a:	4b3a      	ldr	r3, [pc, #232]	@ (8005814 <HAL_GPIO_Init+0x324>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	43db      	mvns	r3, r3
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	4013      	ands	r3, r2
 8005738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005746:	69ba      	ldr	r2, [r7, #24]
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	4313      	orrs	r3, r2
 800574c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800574e:	4a31      	ldr	r2, [pc, #196]	@ (8005814 <HAL_GPIO_Init+0x324>)
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005754:	4b2f      	ldr	r3, [pc, #188]	@ (8005814 <HAL_GPIO_Init+0x324>)
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	43db      	mvns	r3, r3
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	4013      	ands	r3, r2
 8005762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005778:	4a26      	ldr	r2, [pc, #152]	@ (8005814 <HAL_GPIO_Init+0x324>)
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800577e:	4b25      	ldr	r3, [pc, #148]	@ (8005814 <HAL_GPIO_Init+0x324>)
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	43db      	mvns	r3, r3
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	4013      	ands	r3, r2
 800578c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	4313      	orrs	r3, r2
 80057a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80057a2:	4a1c      	ldr	r2, [pc, #112]	@ (8005814 <HAL_GPIO_Init+0x324>)
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057a8:	4b1a      	ldr	r3, [pc, #104]	@ (8005814 <HAL_GPIO_Init+0x324>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	43db      	mvns	r3, r3
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	4013      	ands	r3, r2
 80057b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80057cc:	4a11      	ldr	r2, [pc, #68]	@ (8005814 <HAL_GPIO_Init+0x324>)
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	3301      	adds	r3, #1
 80057d6:	61fb      	str	r3, [r7, #28]
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	2b0f      	cmp	r3, #15
 80057dc:	f67f ae96 	bls.w	800550c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80057e0:	bf00      	nop
 80057e2:	bf00      	nop
 80057e4:	3724      	adds	r7, #36	@ 0x24
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	40023800 	.word	0x40023800
 80057f4:	40013800 	.word	0x40013800
 80057f8:	40020000 	.word	0x40020000
 80057fc:	40020400 	.word	0x40020400
 8005800:	40020800 	.word	0x40020800
 8005804:	40020c00 	.word	0x40020c00
 8005808:	40021000 	.word	0x40021000
 800580c:	40021400 	.word	0x40021400
 8005810:	40021800 	.word	0x40021800
 8005814:	40013c00 	.word	0x40013c00

08005818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	460b      	mov	r3, r1
 8005822:	807b      	strh	r3, [r7, #2]
 8005824:	4613      	mov	r3, r2
 8005826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005828:	787b      	ldrb	r3, [r7, #1]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800582e:	887a      	ldrh	r2, [r7, #2]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005834:	e003      	b.n	800583e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005836:	887b      	ldrh	r3, [r7, #2]
 8005838:	041a      	lsls	r2, r3, #16
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	619a      	str	r2, [r3, #24]
}
 800583e:	bf00      	nop
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
	...

0800584c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005856:	2300      	movs	r3, #0
 8005858:	603b      	str	r3, [r7, #0]
 800585a:	4b20      	ldr	r3, [pc, #128]	@ (80058dc <HAL_PWREx_EnableOverDrive+0x90>)
 800585c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585e:	4a1f      	ldr	r2, [pc, #124]	@ (80058dc <HAL_PWREx_EnableOverDrive+0x90>)
 8005860:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005864:	6413      	str	r3, [r2, #64]	@ 0x40
 8005866:	4b1d      	ldr	r3, [pc, #116]	@ (80058dc <HAL_PWREx_EnableOverDrive+0x90>)
 8005868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800586e:	603b      	str	r3, [r7, #0]
 8005870:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005872:	4b1b      	ldr	r3, [pc, #108]	@ (80058e0 <HAL_PWREx_EnableOverDrive+0x94>)
 8005874:	2201      	movs	r2, #1
 8005876:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005878:	f7fe fe84 	bl	8004584 <HAL_GetTick>
 800587c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800587e:	e009      	b.n	8005894 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005880:	f7fe fe80 	bl	8004584 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800588e:	d901      	bls.n	8005894 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e01f      	b.n	80058d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005894:	4b13      	ldr	r3, [pc, #76]	@ (80058e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800589c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058a0:	d1ee      	bne.n	8005880 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80058a2:	4b11      	ldr	r3, [pc, #68]	@ (80058e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80058a4:	2201      	movs	r2, #1
 80058a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80058a8:	f7fe fe6c 	bl	8004584 <HAL_GetTick>
 80058ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80058ae:	e009      	b.n	80058c4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80058b0:	f7fe fe68 	bl	8004584 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80058be:	d901      	bls.n	80058c4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e007      	b.n	80058d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80058c4:	4b07      	ldr	r3, [pc, #28]	@ (80058e4 <HAL_PWREx_EnableOverDrive+0x98>)
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058d0:	d1ee      	bne.n	80058b0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	40023800 	.word	0x40023800
 80058e0:	420e0040 	.word	0x420e0040
 80058e4:	40007000 	.word	0x40007000
 80058e8:	420e0044 	.word	0x420e0044

080058ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e0cc      	b.n	8005a9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005900:	4b68      	ldr	r3, [pc, #416]	@ (8005aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 030f 	and.w	r3, r3, #15
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	429a      	cmp	r2, r3
 800590c:	d90c      	bls.n	8005928 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800590e:	4b65      	ldr	r3, [pc, #404]	@ (8005aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	b2d2      	uxtb	r2, r2
 8005914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005916:	4b63      	ldr	r3, [pc, #396]	@ (8005aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 030f 	and.w	r3, r3, #15
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	429a      	cmp	r2, r3
 8005922:	d001      	beq.n	8005928 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e0b8      	b.n	8005a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b00      	cmp	r3, #0
 8005932:	d020      	beq.n	8005976 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	2b00      	cmp	r3, #0
 800593e:	d005      	beq.n	800594c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005940:	4b59      	ldr	r3, [pc, #356]	@ (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	4a58      	ldr	r2, [pc, #352]	@ (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005946:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800594a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0308 	and.w	r3, r3, #8
 8005954:	2b00      	cmp	r3, #0
 8005956:	d005      	beq.n	8005964 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005958:	4b53      	ldr	r3, [pc, #332]	@ (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	4a52      	ldr	r2, [pc, #328]	@ (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800595e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005962:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005964:	4b50      	ldr	r3, [pc, #320]	@ (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	494d      	ldr	r1, [pc, #308]	@ (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005972:	4313      	orrs	r3, r2
 8005974:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b00      	cmp	r3, #0
 8005980:	d044      	beq.n	8005a0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d107      	bne.n	800599a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800598a:	4b47      	ldr	r3, [pc, #284]	@ (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d119      	bne.n	80059ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e07f      	b.n	8005a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d003      	beq.n	80059aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059a6:	2b03      	cmp	r3, #3
 80059a8:	d107      	bne.n	80059ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059aa:	4b3f      	ldr	r3, [pc, #252]	@ (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d109      	bne.n	80059ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e06f      	b.n	8005a9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ba:	4b3b      	ldr	r3, [pc, #236]	@ (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e067      	b.n	8005a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059ca:	4b37      	ldr	r3, [pc, #220]	@ (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f023 0203 	bic.w	r2, r3, #3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	4934      	ldr	r1, [pc, #208]	@ (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059dc:	f7fe fdd2 	bl	8004584 <HAL_GetTick>
 80059e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059e2:	e00a      	b.n	80059fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059e4:	f7fe fdce 	bl	8004584 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e04f      	b.n	8005a9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059fa:	4b2b      	ldr	r3, [pc, #172]	@ (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f003 020c 	and.w	r2, r3, #12
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d1eb      	bne.n	80059e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a0c:	4b25      	ldr	r3, [pc, #148]	@ (8005aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 030f 	and.w	r3, r3, #15
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d20c      	bcs.n	8005a34 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a1a:	4b22      	ldr	r3, [pc, #136]	@ (8005aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	b2d2      	uxtb	r2, r2
 8005a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a22:	4b20      	ldr	r3, [pc, #128]	@ (8005aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 030f 	and.w	r3, r3, #15
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d001      	beq.n	8005a34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e032      	b.n	8005a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0304 	and.w	r3, r3, #4
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d008      	beq.n	8005a52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a40:	4b19      	ldr	r3, [pc, #100]	@ (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	4916      	ldr	r1, [pc, #88]	@ (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0308 	and.w	r3, r3, #8
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d009      	beq.n	8005a72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a5e:	4b12      	ldr	r3, [pc, #72]	@ (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	490e      	ldr	r1, [pc, #56]	@ (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a72:	f000 f855 	bl	8005b20 <HAL_RCC_GetSysClockFreq>
 8005a76:	4602      	mov	r2, r0
 8005a78:	4b0b      	ldr	r3, [pc, #44]	@ (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	091b      	lsrs	r3, r3, #4
 8005a7e:	f003 030f 	and.w	r3, r3, #15
 8005a82:	490a      	ldr	r1, [pc, #40]	@ (8005aac <HAL_RCC_ClockConfig+0x1c0>)
 8005a84:	5ccb      	ldrb	r3, [r1, r3]
 8005a86:	fa22 f303 	lsr.w	r3, r2, r3
 8005a8a:	4a09      	ldr	r2, [pc, #36]	@ (8005ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005a8e:	4b09      	ldr	r3, [pc, #36]	@ (8005ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fe fd32 	bl	80044fc <HAL_InitTick>

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	40023c00 	.word	0x40023c00
 8005aa8:	40023800 	.word	0x40023800
 8005aac:	0800d620 	.word	0x0800d620
 8005ab0:	20000000 	.word	0x20000000
 8005ab4:	20000004 	.word	0x20000004

08005ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005abc:	4b03      	ldr	r3, [pc, #12]	@ (8005acc <HAL_RCC_GetHCLKFreq+0x14>)
 8005abe:	681b      	ldr	r3, [r3, #0]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	20000000 	.word	0x20000000

08005ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ad4:	f7ff fff0 	bl	8005ab8 <HAL_RCC_GetHCLKFreq>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	4b05      	ldr	r3, [pc, #20]	@ (8005af0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	0a9b      	lsrs	r3, r3, #10
 8005ae0:	f003 0307 	and.w	r3, r3, #7
 8005ae4:	4903      	ldr	r1, [pc, #12]	@ (8005af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ae6:	5ccb      	ldrb	r3, [r1, r3]
 8005ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	40023800 	.word	0x40023800
 8005af4:	0800d630 	.word	0x0800d630

08005af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005afc:	f7ff ffdc 	bl	8005ab8 <HAL_RCC_GetHCLKFreq>
 8005b00:	4602      	mov	r2, r0
 8005b02:	4b05      	ldr	r3, [pc, #20]	@ (8005b18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	0b5b      	lsrs	r3, r3, #13
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	4903      	ldr	r1, [pc, #12]	@ (8005b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b0e:	5ccb      	ldrb	r3, [r1, r3]
 8005b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	40023800 	.word	0x40023800
 8005b1c:	0800d630 	.word	0x0800d630

08005b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b24:	b0ae      	sub	sp, #184	@ 0xb8
 8005b26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b46:	4bcb      	ldr	r3, [pc, #812]	@ (8005e74 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f003 030c 	and.w	r3, r3, #12
 8005b4e:	2b0c      	cmp	r3, #12
 8005b50:	f200 8206 	bhi.w	8005f60 <HAL_RCC_GetSysClockFreq+0x440>
 8005b54:	a201      	add	r2, pc, #4	@ (adr r2, 8005b5c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5a:	bf00      	nop
 8005b5c:	08005b91 	.word	0x08005b91
 8005b60:	08005f61 	.word	0x08005f61
 8005b64:	08005f61 	.word	0x08005f61
 8005b68:	08005f61 	.word	0x08005f61
 8005b6c:	08005b99 	.word	0x08005b99
 8005b70:	08005f61 	.word	0x08005f61
 8005b74:	08005f61 	.word	0x08005f61
 8005b78:	08005f61 	.word	0x08005f61
 8005b7c:	08005ba1 	.word	0x08005ba1
 8005b80:	08005f61 	.word	0x08005f61
 8005b84:	08005f61 	.word	0x08005f61
 8005b88:	08005f61 	.word	0x08005f61
 8005b8c:	08005d91 	.word	0x08005d91
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b90:	4bb9      	ldr	r3, [pc, #740]	@ (8005e78 <HAL_RCC_GetSysClockFreq+0x358>)
 8005b92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005b96:	e1e7      	b.n	8005f68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b98:	4bb8      	ldr	r3, [pc, #736]	@ (8005e7c <HAL_RCC_GetSysClockFreq+0x35c>)
 8005b9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005b9e:	e1e3      	b.n	8005f68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ba0:	4bb4      	ldr	r3, [pc, #720]	@ (8005e74 <HAL_RCC_GetSysClockFreq+0x354>)
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ba8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bac:	4bb1      	ldr	r3, [pc, #708]	@ (8005e74 <HAL_RCC_GetSysClockFreq+0x354>)
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d071      	beq.n	8005c9c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bb8:	4bae      	ldr	r3, [pc, #696]	@ (8005e74 <HAL_RCC_GetSysClockFreq+0x354>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	099b      	lsrs	r3, r3, #6
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005bc4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005bc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bd0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005bda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005bde:	4622      	mov	r2, r4
 8005be0:	462b      	mov	r3, r5
 8005be2:	f04f 0000 	mov.w	r0, #0
 8005be6:	f04f 0100 	mov.w	r1, #0
 8005bea:	0159      	lsls	r1, r3, #5
 8005bec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bf0:	0150      	lsls	r0, r2, #5
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	4621      	mov	r1, r4
 8005bf8:	1a51      	subs	r1, r2, r1
 8005bfa:	6439      	str	r1, [r7, #64]	@ 0x40
 8005bfc:	4629      	mov	r1, r5
 8005bfe:	eb63 0301 	sbc.w	r3, r3, r1
 8005c02:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c04:	f04f 0200 	mov.w	r2, #0
 8005c08:	f04f 0300 	mov.w	r3, #0
 8005c0c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005c10:	4649      	mov	r1, r9
 8005c12:	018b      	lsls	r3, r1, #6
 8005c14:	4641      	mov	r1, r8
 8005c16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c1a:	4641      	mov	r1, r8
 8005c1c:	018a      	lsls	r2, r1, #6
 8005c1e:	4641      	mov	r1, r8
 8005c20:	1a51      	subs	r1, r2, r1
 8005c22:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005c24:	4649      	mov	r1, r9
 8005c26:	eb63 0301 	sbc.w	r3, r3, r1
 8005c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c2c:	f04f 0200 	mov.w	r2, #0
 8005c30:	f04f 0300 	mov.w	r3, #0
 8005c34:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005c38:	4649      	mov	r1, r9
 8005c3a:	00cb      	lsls	r3, r1, #3
 8005c3c:	4641      	mov	r1, r8
 8005c3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c42:	4641      	mov	r1, r8
 8005c44:	00ca      	lsls	r2, r1, #3
 8005c46:	4610      	mov	r0, r2
 8005c48:	4619      	mov	r1, r3
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	4622      	mov	r2, r4
 8005c4e:	189b      	adds	r3, r3, r2
 8005c50:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c52:	462b      	mov	r3, r5
 8005c54:	460a      	mov	r2, r1
 8005c56:	eb42 0303 	adc.w	r3, r2, r3
 8005c5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c5c:	f04f 0200 	mov.w	r2, #0
 8005c60:	f04f 0300 	mov.w	r3, #0
 8005c64:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005c68:	4629      	mov	r1, r5
 8005c6a:	024b      	lsls	r3, r1, #9
 8005c6c:	4621      	mov	r1, r4
 8005c6e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c72:	4621      	mov	r1, r4
 8005c74:	024a      	lsls	r2, r1, #9
 8005c76:	4610      	mov	r0, r2
 8005c78:	4619      	mov	r1, r3
 8005c7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c88:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005c8c:	f7fb f81c 	bl	8000cc8 <__aeabi_uldivmod>
 8005c90:	4602      	mov	r2, r0
 8005c92:	460b      	mov	r3, r1
 8005c94:	4613      	mov	r3, r2
 8005c96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c9a:	e067      	b.n	8005d6c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c9c:	4b75      	ldr	r3, [pc, #468]	@ (8005e74 <HAL_RCC_GetSysClockFreq+0x354>)
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	099b      	lsrs	r3, r3, #6
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ca8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005cac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005cba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005cbe:	4622      	mov	r2, r4
 8005cc0:	462b      	mov	r3, r5
 8005cc2:	f04f 0000 	mov.w	r0, #0
 8005cc6:	f04f 0100 	mov.w	r1, #0
 8005cca:	0159      	lsls	r1, r3, #5
 8005ccc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cd0:	0150      	lsls	r0, r2, #5
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4621      	mov	r1, r4
 8005cd8:	1a51      	subs	r1, r2, r1
 8005cda:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005cdc:	4629      	mov	r1, r5
 8005cde:	eb63 0301 	sbc.w	r3, r3, r1
 8005ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ce4:	f04f 0200 	mov.w	r2, #0
 8005ce8:	f04f 0300 	mov.w	r3, #0
 8005cec:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005cf0:	4649      	mov	r1, r9
 8005cf2:	018b      	lsls	r3, r1, #6
 8005cf4:	4641      	mov	r1, r8
 8005cf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005cfa:	4641      	mov	r1, r8
 8005cfc:	018a      	lsls	r2, r1, #6
 8005cfe:	4641      	mov	r1, r8
 8005d00:	ebb2 0a01 	subs.w	sl, r2, r1
 8005d04:	4649      	mov	r1, r9
 8005d06:	eb63 0b01 	sbc.w	fp, r3, r1
 8005d0a:	f04f 0200 	mov.w	r2, #0
 8005d0e:	f04f 0300 	mov.w	r3, #0
 8005d12:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d16:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d1e:	4692      	mov	sl, r2
 8005d20:	469b      	mov	fp, r3
 8005d22:	4623      	mov	r3, r4
 8005d24:	eb1a 0303 	adds.w	r3, sl, r3
 8005d28:	623b      	str	r3, [r7, #32]
 8005d2a:	462b      	mov	r3, r5
 8005d2c:	eb4b 0303 	adc.w	r3, fp, r3
 8005d30:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d32:	f04f 0200 	mov.w	r2, #0
 8005d36:	f04f 0300 	mov.w	r3, #0
 8005d3a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005d3e:	4629      	mov	r1, r5
 8005d40:	028b      	lsls	r3, r1, #10
 8005d42:	4621      	mov	r1, r4
 8005d44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d48:	4621      	mov	r1, r4
 8005d4a:	028a      	lsls	r2, r1, #10
 8005d4c:	4610      	mov	r0, r2
 8005d4e:	4619      	mov	r1, r3
 8005d50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d54:	2200      	movs	r2, #0
 8005d56:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d58:	677a      	str	r2, [r7, #116]	@ 0x74
 8005d5a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005d5e:	f7fa ffb3 	bl	8000cc8 <__aeabi_uldivmod>
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	4613      	mov	r3, r2
 8005d68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005d6c:	4b41      	ldr	r3, [pc, #260]	@ (8005e74 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	0c1b      	lsrs	r3, r3, #16
 8005d72:	f003 0303 	and.w	r3, r3, #3
 8005d76:	3301      	adds	r3, #1
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8005d7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005d8e:	e0eb      	b.n	8005f68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d90:	4b38      	ldr	r3, [pc, #224]	@ (8005e74 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d9c:	4b35      	ldr	r3, [pc, #212]	@ (8005e74 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d06b      	beq.n	8005e80 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005da8:	4b32      	ldr	r3, [pc, #200]	@ (8005e74 <HAL_RCC_GetSysClockFreq+0x354>)
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	099b      	lsrs	r3, r3, #6
 8005dae:	2200      	movs	r2, #0
 8005db0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005db2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005db4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dba:	663b      	str	r3, [r7, #96]	@ 0x60
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	667b      	str	r3, [r7, #100]	@ 0x64
 8005dc0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005dc4:	4622      	mov	r2, r4
 8005dc6:	462b      	mov	r3, r5
 8005dc8:	f04f 0000 	mov.w	r0, #0
 8005dcc:	f04f 0100 	mov.w	r1, #0
 8005dd0:	0159      	lsls	r1, r3, #5
 8005dd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005dd6:	0150      	lsls	r0, r2, #5
 8005dd8:	4602      	mov	r2, r0
 8005dda:	460b      	mov	r3, r1
 8005ddc:	4621      	mov	r1, r4
 8005dde:	1a51      	subs	r1, r2, r1
 8005de0:	61b9      	str	r1, [r7, #24]
 8005de2:	4629      	mov	r1, r5
 8005de4:	eb63 0301 	sbc.w	r3, r3, r1
 8005de8:	61fb      	str	r3, [r7, #28]
 8005dea:	f04f 0200 	mov.w	r2, #0
 8005dee:	f04f 0300 	mov.w	r3, #0
 8005df2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005df6:	4659      	mov	r1, fp
 8005df8:	018b      	lsls	r3, r1, #6
 8005dfa:	4651      	mov	r1, sl
 8005dfc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e00:	4651      	mov	r1, sl
 8005e02:	018a      	lsls	r2, r1, #6
 8005e04:	4651      	mov	r1, sl
 8005e06:	ebb2 0801 	subs.w	r8, r2, r1
 8005e0a:	4659      	mov	r1, fp
 8005e0c:	eb63 0901 	sbc.w	r9, r3, r1
 8005e10:	f04f 0200 	mov.w	r2, #0
 8005e14:	f04f 0300 	mov.w	r3, #0
 8005e18:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e1c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e20:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e24:	4690      	mov	r8, r2
 8005e26:	4699      	mov	r9, r3
 8005e28:	4623      	mov	r3, r4
 8005e2a:	eb18 0303 	adds.w	r3, r8, r3
 8005e2e:	613b      	str	r3, [r7, #16]
 8005e30:	462b      	mov	r3, r5
 8005e32:	eb49 0303 	adc.w	r3, r9, r3
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	f04f 0200 	mov.w	r2, #0
 8005e3c:	f04f 0300 	mov.w	r3, #0
 8005e40:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005e44:	4629      	mov	r1, r5
 8005e46:	024b      	lsls	r3, r1, #9
 8005e48:	4621      	mov	r1, r4
 8005e4a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e4e:	4621      	mov	r1, r4
 8005e50:	024a      	lsls	r2, r1, #9
 8005e52:	4610      	mov	r0, r2
 8005e54:	4619      	mov	r1, r3
 8005e56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e5e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005e60:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e64:	f7fa ff30 	bl	8000cc8 <__aeabi_uldivmod>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e72:	e065      	b.n	8005f40 <HAL_RCC_GetSysClockFreq+0x420>
 8005e74:	40023800 	.word	0x40023800
 8005e78:	00f42400 	.word	0x00f42400
 8005e7c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e80:	4b3d      	ldr	r3, [pc, #244]	@ (8005f78 <HAL_RCC_GetSysClockFreq+0x458>)
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	099b      	lsrs	r3, r3, #6
 8005e86:	2200      	movs	r2, #0
 8005e88:	4618      	mov	r0, r3
 8005e8a:	4611      	mov	r1, r2
 8005e8c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e90:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e92:	2300      	movs	r3, #0
 8005e94:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e96:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005e9a:	4642      	mov	r2, r8
 8005e9c:	464b      	mov	r3, r9
 8005e9e:	f04f 0000 	mov.w	r0, #0
 8005ea2:	f04f 0100 	mov.w	r1, #0
 8005ea6:	0159      	lsls	r1, r3, #5
 8005ea8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005eac:	0150      	lsls	r0, r2, #5
 8005eae:	4602      	mov	r2, r0
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	4641      	mov	r1, r8
 8005eb4:	1a51      	subs	r1, r2, r1
 8005eb6:	60b9      	str	r1, [r7, #8]
 8005eb8:	4649      	mov	r1, r9
 8005eba:	eb63 0301 	sbc.w	r3, r3, r1
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	f04f 0200 	mov.w	r2, #0
 8005ec4:	f04f 0300 	mov.w	r3, #0
 8005ec8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005ecc:	4659      	mov	r1, fp
 8005ece:	018b      	lsls	r3, r1, #6
 8005ed0:	4651      	mov	r1, sl
 8005ed2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ed6:	4651      	mov	r1, sl
 8005ed8:	018a      	lsls	r2, r1, #6
 8005eda:	4651      	mov	r1, sl
 8005edc:	1a54      	subs	r4, r2, r1
 8005ede:	4659      	mov	r1, fp
 8005ee0:	eb63 0501 	sbc.w	r5, r3, r1
 8005ee4:	f04f 0200 	mov.w	r2, #0
 8005ee8:	f04f 0300 	mov.w	r3, #0
 8005eec:	00eb      	lsls	r3, r5, #3
 8005eee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ef2:	00e2      	lsls	r2, r4, #3
 8005ef4:	4614      	mov	r4, r2
 8005ef6:	461d      	mov	r5, r3
 8005ef8:	4643      	mov	r3, r8
 8005efa:	18e3      	adds	r3, r4, r3
 8005efc:	603b      	str	r3, [r7, #0]
 8005efe:	464b      	mov	r3, r9
 8005f00:	eb45 0303 	adc.w	r3, r5, r3
 8005f04:	607b      	str	r3, [r7, #4]
 8005f06:	f04f 0200 	mov.w	r2, #0
 8005f0a:	f04f 0300 	mov.w	r3, #0
 8005f0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f12:	4629      	mov	r1, r5
 8005f14:	028b      	lsls	r3, r1, #10
 8005f16:	4621      	mov	r1, r4
 8005f18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	028a      	lsls	r2, r1, #10
 8005f20:	4610      	mov	r0, r2
 8005f22:	4619      	mov	r1, r3
 8005f24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f28:	2200      	movs	r2, #0
 8005f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f2c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005f2e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005f32:	f7fa fec9 	bl	8000cc8 <__aeabi_uldivmod>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005f40:	4b0d      	ldr	r3, [pc, #52]	@ (8005f78 <HAL_RCC_GetSysClockFreq+0x458>)
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	0f1b      	lsrs	r3, r3, #28
 8005f46:	f003 0307 	and.w	r3, r3, #7
 8005f4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005f4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005f52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005f5e:	e003      	b.n	8005f68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f60:	4b06      	ldr	r3, [pc, #24]	@ (8005f7c <HAL_RCC_GetSysClockFreq+0x45c>)
 8005f62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005f66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	37b8      	adds	r7, #184	@ 0xb8
 8005f70:	46bd      	mov	sp, r7
 8005f72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f76:	bf00      	nop
 8005f78:	40023800 	.word	0x40023800
 8005f7c:	00f42400 	.word	0x00f42400

08005f80 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e28d      	b.n	80064ae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f000 8083 	beq.w	80060a6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005fa0:	4b94      	ldr	r3, [pc, #592]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f003 030c 	and.w	r3, r3, #12
 8005fa8:	2b04      	cmp	r3, #4
 8005faa:	d019      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005fac:	4b91      	ldr	r3, [pc, #580]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f003 030c 	and.w	r3, r3, #12
        || \
 8005fb4:	2b08      	cmp	r3, #8
 8005fb6:	d106      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005fb8:	4b8e      	ldr	r3, [pc, #568]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fc4:	d00c      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fc6:	4b8b      	ldr	r3, [pc, #556]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005fce:	2b0c      	cmp	r3, #12
 8005fd0:	d112      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fd2:	4b88      	ldr	r3, [pc, #544]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fde:	d10b      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fe0:	4b84      	ldr	r3, [pc, #528]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d05b      	beq.n	80060a4 <HAL_RCC_OscConfig+0x124>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d157      	bne.n	80060a4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e25a      	b.n	80064ae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006000:	d106      	bne.n	8006010 <HAL_RCC_OscConfig+0x90>
 8006002:	4b7c      	ldr	r3, [pc, #496]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a7b      	ldr	r2, [pc, #492]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 8006008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800600c:	6013      	str	r3, [r2, #0]
 800600e:	e01d      	b.n	800604c <HAL_RCC_OscConfig+0xcc>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006018:	d10c      	bne.n	8006034 <HAL_RCC_OscConfig+0xb4>
 800601a:	4b76      	ldr	r3, [pc, #472]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a75      	ldr	r2, [pc, #468]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 8006020:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006024:	6013      	str	r3, [r2, #0]
 8006026:	4b73      	ldr	r3, [pc, #460]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a72      	ldr	r2, [pc, #456]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 800602c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006030:	6013      	str	r3, [r2, #0]
 8006032:	e00b      	b.n	800604c <HAL_RCC_OscConfig+0xcc>
 8006034:	4b6f      	ldr	r3, [pc, #444]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a6e      	ldr	r2, [pc, #440]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 800603a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800603e:	6013      	str	r3, [r2, #0]
 8006040:	4b6c      	ldr	r3, [pc, #432]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a6b      	ldr	r2, [pc, #428]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 8006046:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800604a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d013      	beq.n	800607c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006054:	f7fe fa96 	bl	8004584 <HAL_GetTick>
 8006058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800605a:	e008      	b.n	800606e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800605c:	f7fe fa92 	bl	8004584 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b64      	cmp	r3, #100	@ 0x64
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e21f      	b.n	80064ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800606e:	4b61      	ldr	r3, [pc, #388]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0f0      	beq.n	800605c <HAL_RCC_OscConfig+0xdc>
 800607a:	e014      	b.n	80060a6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800607c:	f7fe fa82 	bl	8004584 <HAL_GetTick>
 8006080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006082:	e008      	b.n	8006096 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006084:	f7fe fa7e 	bl	8004584 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	2b64      	cmp	r3, #100	@ 0x64
 8006090:	d901      	bls.n	8006096 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e20b      	b.n	80064ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006096:	4b57      	ldr	r3, [pc, #348]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1f0      	bne.n	8006084 <HAL_RCC_OscConfig+0x104>
 80060a2:	e000      	b.n	80060a6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d06f      	beq.n	8006192 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80060b2:	4b50      	ldr	r3, [pc, #320]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f003 030c 	and.w	r3, r3, #12
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d017      	beq.n	80060ee <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80060be:	4b4d      	ldr	r3, [pc, #308]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f003 030c 	and.w	r3, r3, #12
        || \
 80060c6:	2b08      	cmp	r3, #8
 80060c8:	d105      	bne.n	80060d6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80060ca:	4b4a      	ldr	r3, [pc, #296]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00b      	beq.n	80060ee <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060d6:	4b47      	ldr	r3, [pc, #284]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80060de:	2b0c      	cmp	r3, #12
 80060e0:	d11c      	bne.n	800611c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060e2:	4b44      	ldr	r3, [pc, #272]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d116      	bne.n	800611c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060ee:	4b41      	ldr	r3, [pc, #260]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d005      	beq.n	8006106 <HAL_RCC_OscConfig+0x186>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d001      	beq.n	8006106 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e1d3      	b.n	80064ae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006106:	4b3b      	ldr	r3, [pc, #236]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	00db      	lsls	r3, r3, #3
 8006114:	4937      	ldr	r1, [pc, #220]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 8006116:	4313      	orrs	r3, r2
 8006118:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800611a:	e03a      	b.n	8006192 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d020      	beq.n	8006166 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006124:	4b34      	ldr	r3, [pc, #208]	@ (80061f8 <HAL_RCC_OscConfig+0x278>)
 8006126:	2201      	movs	r2, #1
 8006128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800612a:	f7fe fa2b 	bl	8004584 <HAL_GetTick>
 800612e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006130:	e008      	b.n	8006144 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006132:	f7fe fa27 	bl	8004584 <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	2b02      	cmp	r3, #2
 800613e:	d901      	bls.n	8006144 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e1b4      	b.n	80064ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006144:	4b2b      	ldr	r3, [pc, #172]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d0f0      	beq.n	8006132 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006150:	4b28      	ldr	r3, [pc, #160]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	4925      	ldr	r1, [pc, #148]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 8006160:	4313      	orrs	r3, r2
 8006162:	600b      	str	r3, [r1, #0]
 8006164:	e015      	b.n	8006192 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006166:	4b24      	ldr	r3, [pc, #144]	@ (80061f8 <HAL_RCC_OscConfig+0x278>)
 8006168:	2200      	movs	r2, #0
 800616a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800616c:	f7fe fa0a 	bl	8004584 <HAL_GetTick>
 8006170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006172:	e008      	b.n	8006186 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006174:	f7fe fa06 	bl	8004584 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	2b02      	cmp	r3, #2
 8006180:	d901      	bls.n	8006186 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e193      	b.n	80064ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006186:	4b1b      	ldr	r3, [pc, #108]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1f0      	bne.n	8006174 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0308 	and.w	r3, r3, #8
 800619a:	2b00      	cmp	r3, #0
 800619c:	d036      	beq.n	800620c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d016      	beq.n	80061d4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061a6:	4b15      	ldr	r3, [pc, #84]	@ (80061fc <HAL_RCC_OscConfig+0x27c>)
 80061a8:	2201      	movs	r2, #1
 80061aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ac:	f7fe f9ea 	bl	8004584 <HAL_GetTick>
 80061b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061b2:	e008      	b.n	80061c6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061b4:	f7fe f9e6 	bl	8004584 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e173      	b.n	80064ae <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061c6:	4b0b      	ldr	r3, [pc, #44]	@ (80061f4 <HAL_RCC_OscConfig+0x274>)
 80061c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d0f0      	beq.n	80061b4 <HAL_RCC_OscConfig+0x234>
 80061d2:	e01b      	b.n	800620c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061d4:	4b09      	ldr	r3, [pc, #36]	@ (80061fc <HAL_RCC_OscConfig+0x27c>)
 80061d6:	2200      	movs	r2, #0
 80061d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061da:	f7fe f9d3 	bl	8004584 <HAL_GetTick>
 80061de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061e0:	e00e      	b.n	8006200 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061e2:	f7fe f9cf 	bl	8004584 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d907      	bls.n	8006200 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e15c      	b.n	80064ae <HAL_RCC_OscConfig+0x52e>
 80061f4:	40023800 	.word	0x40023800
 80061f8:	42470000 	.word	0x42470000
 80061fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006200:	4b8a      	ldr	r3, [pc, #552]	@ (800642c <HAL_RCC_OscConfig+0x4ac>)
 8006202:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006204:	f003 0302 	and.w	r3, r3, #2
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1ea      	bne.n	80061e2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0304 	and.w	r3, r3, #4
 8006214:	2b00      	cmp	r3, #0
 8006216:	f000 8097 	beq.w	8006348 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800621a:	2300      	movs	r3, #0
 800621c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800621e:	4b83      	ldr	r3, [pc, #524]	@ (800642c <HAL_RCC_OscConfig+0x4ac>)
 8006220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10f      	bne.n	800624a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800622a:	2300      	movs	r3, #0
 800622c:	60bb      	str	r3, [r7, #8]
 800622e:	4b7f      	ldr	r3, [pc, #508]	@ (800642c <HAL_RCC_OscConfig+0x4ac>)
 8006230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006232:	4a7e      	ldr	r2, [pc, #504]	@ (800642c <HAL_RCC_OscConfig+0x4ac>)
 8006234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006238:	6413      	str	r3, [r2, #64]	@ 0x40
 800623a:	4b7c      	ldr	r3, [pc, #496]	@ (800642c <HAL_RCC_OscConfig+0x4ac>)
 800623c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006242:	60bb      	str	r3, [r7, #8]
 8006244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006246:	2301      	movs	r3, #1
 8006248:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800624a:	4b79      	ldr	r3, [pc, #484]	@ (8006430 <HAL_RCC_OscConfig+0x4b0>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006252:	2b00      	cmp	r3, #0
 8006254:	d118      	bne.n	8006288 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006256:	4b76      	ldr	r3, [pc, #472]	@ (8006430 <HAL_RCC_OscConfig+0x4b0>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a75      	ldr	r2, [pc, #468]	@ (8006430 <HAL_RCC_OscConfig+0x4b0>)
 800625c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006262:	f7fe f98f 	bl	8004584 <HAL_GetTick>
 8006266:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006268:	e008      	b.n	800627c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800626a:	f7fe f98b 	bl	8004584 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	2b02      	cmp	r3, #2
 8006276:	d901      	bls.n	800627c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e118      	b.n	80064ae <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800627c:	4b6c      	ldr	r3, [pc, #432]	@ (8006430 <HAL_RCC_OscConfig+0x4b0>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006284:	2b00      	cmp	r3, #0
 8006286:	d0f0      	beq.n	800626a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d106      	bne.n	800629e <HAL_RCC_OscConfig+0x31e>
 8006290:	4b66      	ldr	r3, [pc, #408]	@ (800642c <HAL_RCC_OscConfig+0x4ac>)
 8006292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006294:	4a65      	ldr	r2, [pc, #404]	@ (800642c <HAL_RCC_OscConfig+0x4ac>)
 8006296:	f043 0301 	orr.w	r3, r3, #1
 800629a:	6713      	str	r3, [r2, #112]	@ 0x70
 800629c:	e01c      	b.n	80062d8 <HAL_RCC_OscConfig+0x358>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	2b05      	cmp	r3, #5
 80062a4:	d10c      	bne.n	80062c0 <HAL_RCC_OscConfig+0x340>
 80062a6:	4b61      	ldr	r3, [pc, #388]	@ (800642c <HAL_RCC_OscConfig+0x4ac>)
 80062a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062aa:	4a60      	ldr	r2, [pc, #384]	@ (800642c <HAL_RCC_OscConfig+0x4ac>)
 80062ac:	f043 0304 	orr.w	r3, r3, #4
 80062b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80062b2:	4b5e      	ldr	r3, [pc, #376]	@ (800642c <HAL_RCC_OscConfig+0x4ac>)
 80062b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062b6:	4a5d      	ldr	r2, [pc, #372]	@ (800642c <HAL_RCC_OscConfig+0x4ac>)
 80062b8:	f043 0301 	orr.w	r3, r3, #1
 80062bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80062be:	e00b      	b.n	80062d8 <HAL_RCC_OscConfig+0x358>
 80062c0:	4b5a      	ldr	r3, [pc, #360]	@ (800642c <HAL_RCC_OscConfig+0x4ac>)
 80062c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062c4:	4a59      	ldr	r2, [pc, #356]	@ (800642c <HAL_RCC_OscConfig+0x4ac>)
 80062c6:	f023 0301 	bic.w	r3, r3, #1
 80062ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80062cc:	4b57      	ldr	r3, [pc, #348]	@ (800642c <HAL_RCC_OscConfig+0x4ac>)
 80062ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062d0:	4a56      	ldr	r2, [pc, #344]	@ (800642c <HAL_RCC_OscConfig+0x4ac>)
 80062d2:	f023 0304 	bic.w	r3, r3, #4
 80062d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d015      	beq.n	800630c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062e0:	f7fe f950 	bl	8004584 <HAL_GetTick>
 80062e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062e6:	e00a      	b.n	80062fe <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062e8:	f7fe f94c 	bl	8004584 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d901      	bls.n	80062fe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e0d7      	b.n	80064ae <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062fe:	4b4b      	ldr	r3, [pc, #300]	@ (800642c <HAL_RCC_OscConfig+0x4ac>)
 8006300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b00      	cmp	r3, #0
 8006308:	d0ee      	beq.n	80062e8 <HAL_RCC_OscConfig+0x368>
 800630a:	e014      	b.n	8006336 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800630c:	f7fe f93a 	bl	8004584 <HAL_GetTick>
 8006310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006312:	e00a      	b.n	800632a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006314:	f7fe f936 	bl	8004584 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006322:	4293      	cmp	r3, r2
 8006324:	d901      	bls.n	800632a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e0c1      	b.n	80064ae <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800632a:	4b40      	ldr	r3, [pc, #256]	@ (800642c <HAL_RCC_OscConfig+0x4ac>)
 800632c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800632e:	f003 0302 	and.w	r3, r3, #2
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1ee      	bne.n	8006314 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006336:	7dfb      	ldrb	r3, [r7, #23]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d105      	bne.n	8006348 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800633c:	4b3b      	ldr	r3, [pc, #236]	@ (800642c <HAL_RCC_OscConfig+0x4ac>)
 800633e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006340:	4a3a      	ldr	r2, [pc, #232]	@ (800642c <HAL_RCC_OscConfig+0x4ac>)
 8006342:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006346:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	2b00      	cmp	r3, #0
 800634e:	f000 80ad 	beq.w	80064ac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006352:	4b36      	ldr	r3, [pc, #216]	@ (800642c <HAL_RCC_OscConfig+0x4ac>)
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f003 030c 	and.w	r3, r3, #12
 800635a:	2b08      	cmp	r3, #8
 800635c:	d060      	beq.n	8006420 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	2b02      	cmp	r3, #2
 8006364:	d145      	bne.n	80063f2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006366:	4b33      	ldr	r3, [pc, #204]	@ (8006434 <HAL_RCC_OscConfig+0x4b4>)
 8006368:	2200      	movs	r2, #0
 800636a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800636c:	f7fe f90a 	bl	8004584 <HAL_GetTick>
 8006370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006372:	e008      	b.n	8006386 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006374:	f7fe f906 	bl	8004584 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b02      	cmp	r3, #2
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e093      	b.n	80064ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006386:	4b29      	ldr	r3, [pc, #164]	@ (800642c <HAL_RCC_OscConfig+0x4ac>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1f0      	bne.n	8006374 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	69da      	ldr	r2, [r3, #28]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	431a      	orrs	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a0:	019b      	lsls	r3, r3, #6
 80063a2:	431a      	orrs	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a8:	085b      	lsrs	r3, r3, #1
 80063aa:	3b01      	subs	r3, #1
 80063ac:	041b      	lsls	r3, r3, #16
 80063ae:	431a      	orrs	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b4:	061b      	lsls	r3, r3, #24
 80063b6:	431a      	orrs	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063bc:	071b      	lsls	r3, r3, #28
 80063be:	491b      	ldr	r1, [pc, #108]	@ (800642c <HAL_RCC_OscConfig+0x4ac>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063c4:	4b1b      	ldr	r3, [pc, #108]	@ (8006434 <HAL_RCC_OscConfig+0x4b4>)
 80063c6:	2201      	movs	r2, #1
 80063c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ca:	f7fe f8db 	bl	8004584 <HAL_GetTick>
 80063ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063d0:	e008      	b.n	80063e4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063d2:	f7fe f8d7 	bl	8004584 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d901      	bls.n	80063e4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e064      	b.n	80064ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063e4:	4b11      	ldr	r3, [pc, #68]	@ (800642c <HAL_RCC_OscConfig+0x4ac>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d0f0      	beq.n	80063d2 <HAL_RCC_OscConfig+0x452>
 80063f0:	e05c      	b.n	80064ac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063f2:	4b10      	ldr	r3, [pc, #64]	@ (8006434 <HAL_RCC_OscConfig+0x4b4>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f8:	f7fe f8c4 	bl	8004584 <HAL_GetTick>
 80063fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063fe:	e008      	b.n	8006412 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006400:	f7fe f8c0 	bl	8004584 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b02      	cmp	r3, #2
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e04d      	b.n	80064ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006412:	4b06      	ldr	r3, [pc, #24]	@ (800642c <HAL_RCC_OscConfig+0x4ac>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1f0      	bne.n	8006400 <HAL_RCC_OscConfig+0x480>
 800641e:	e045      	b.n	80064ac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d107      	bne.n	8006438 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e040      	b.n	80064ae <HAL_RCC_OscConfig+0x52e>
 800642c:	40023800 	.word	0x40023800
 8006430:	40007000 	.word	0x40007000
 8006434:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006438:	4b1f      	ldr	r3, [pc, #124]	@ (80064b8 <HAL_RCC_OscConfig+0x538>)
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	2b01      	cmp	r3, #1
 8006444:	d030      	beq.n	80064a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006450:	429a      	cmp	r2, r3
 8006452:	d129      	bne.n	80064a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800645e:	429a      	cmp	r2, r3
 8006460:	d122      	bne.n	80064a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006468:	4013      	ands	r3, r2
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800646e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006470:	4293      	cmp	r3, r2
 8006472:	d119      	bne.n	80064a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800647e:	085b      	lsrs	r3, r3, #1
 8006480:	3b01      	subs	r3, #1
 8006482:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006484:	429a      	cmp	r2, r3
 8006486:	d10f      	bne.n	80064a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006492:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006494:	429a      	cmp	r2, r3
 8006496:	d107      	bne.n	80064a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064a2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d001      	beq.n	80064ac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e000      	b.n	80064ae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	40023800 	.word	0x40023800

080064bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e041      	b.n	8006552 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d106      	bne.n	80064e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7fd fcfe 	bl	8003ee4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2202      	movs	r2, #2
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	3304      	adds	r3, #4
 80064f8:	4619      	mov	r1, r3
 80064fa:	4610      	mov	r0, r2
 80064fc:	f000 fad8 	bl	8006ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b082      	sub	sp, #8
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e041      	b.n	80065f0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b00      	cmp	r3, #0
 8006576:	d106      	bne.n	8006586 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 f839 	bl	80065f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2202      	movs	r2, #2
 800658a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	3304      	adds	r3, #4
 8006596:	4619      	mov	r1, r3
 8006598:	4610      	mov	r0, r2
 800659a:	f000 fa89 	bl	8006ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d109      	bne.n	8006630 <HAL_TIM_PWM_Start+0x24>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b01      	cmp	r3, #1
 8006626:	bf14      	ite	ne
 8006628:	2301      	movne	r3, #1
 800662a:	2300      	moveq	r3, #0
 800662c:	b2db      	uxtb	r3, r3
 800662e:	e022      	b.n	8006676 <HAL_TIM_PWM_Start+0x6a>
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	2b04      	cmp	r3, #4
 8006634:	d109      	bne.n	800664a <HAL_TIM_PWM_Start+0x3e>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b01      	cmp	r3, #1
 8006640:	bf14      	ite	ne
 8006642:	2301      	movne	r3, #1
 8006644:	2300      	moveq	r3, #0
 8006646:	b2db      	uxtb	r3, r3
 8006648:	e015      	b.n	8006676 <HAL_TIM_PWM_Start+0x6a>
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b08      	cmp	r3, #8
 800664e:	d109      	bne.n	8006664 <HAL_TIM_PWM_Start+0x58>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b01      	cmp	r3, #1
 800665a:	bf14      	ite	ne
 800665c:	2301      	movne	r3, #1
 800665e:	2300      	moveq	r3, #0
 8006660:	b2db      	uxtb	r3, r3
 8006662:	e008      	b.n	8006676 <HAL_TIM_PWM_Start+0x6a>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b01      	cmp	r3, #1
 800666e:	bf14      	ite	ne
 8006670:	2301      	movne	r3, #1
 8006672:	2300      	moveq	r3, #0
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e07c      	b.n	8006778 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d104      	bne.n	800668e <HAL_TIM_PWM_Start+0x82>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2202      	movs	r2, #2
 8006688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800668c:	e013      	b.n	80066b6 <HAL_TIM_PWM_Start+0xaa>
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	2b04      	cmp	r3, #4
 8006692:	d104      	bne.n	800669e <HAL_TIM_PWM_Start+0x92>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2202      	movs	r2, #2
 8006698:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800669c:	e00b      	b.n	80066b6 <HAL_TIM_PWM_Start+0xaa>
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	2b08      	cmp	r3, #8
 80066a2:	d104      	bne.n	80066ae <HAL_TIM_PWM_Start+0xa2>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2202      	movs	r2, #2
 80066a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066ac:	e003      	b.n	80066b6 <HAL_TIM_PWM_Start+0xaa>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2202      	movs	r2, #2
 80066b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2201      	movs	r2, #1
 80066bc:	6839      	ldr	r1, [r7, #0]
 80066be:	4618      	mov	r0, r3
 80066c0:	f000 fce6 	bl	8007090 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a2d      	ldr	r2, [pc, #180]	@ (8006780 <HAL_TIM_PWM_Start+0x174>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d004      	beq.n	80066d8 <HAL_TIM_PWM_Start+0xcc>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a2c      	ldr	r2, [pc, #176]	@ (8006784 <HAL_TIM_PWM_Start+0x178>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d101      	bne.n	80066dc <HAL_TIM_PWM_Start+0xd0>
 80066d8:	2301      	movs	r3, #1
 80066da:	e000      	b.n	80066de <HAL_TIM_PWM_Start+0xd2>
 80066dc:	2300      	movs	r3, #0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d007      	beq.n	80066f2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a22      	ldr	r2, [pc, #136]	@ (8006780 <HAL_TIM_PWM_Start+0x174>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d022      	beq.n	8006742 <HAL_TIM_PWM_Start+0x136>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006704:	d01d      	beq.n	8006742 <HAL_TIM_PWM_Start+0x136>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a1f      	ldr	r2, [pc, #124]	@ (8006788 <HAL_TIM_PWM_Start+0x17c>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d018      	beq.n	8006742 <HAL_TIM_PWM_Start+0x136>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a1d      	ldr	r2, [pc, #116]	@ (800678c <HAL_TIM_PWM_Start+0x180>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d013      	beq.n	8006742 <HAL_TIM_PWM_Start+0x136>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a1c      	ldr	r2, [pc, #112]	@ (8006790 <HAL_TIM_PWM_Start+0x184>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d00e      	beq.n	8006742 <HAL_TIM_PWM_Start+0x136>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a16      	ldr	r2, [pc, #88]	@ (8006784 <HAL_TIM_PWM_Start+0x178>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d009      	beq.n	8006742 <HAL_TIM_PWM_Start+0x136>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a18      	ldr	r2, [pc, #96]	@ (8006794 <HAL_TIM_PWM_Start+0x188>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d004      	beq.n	8006742 <HAL_TIM_PWM_Start+0x136>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a16      	ldr	r2, [pc, #88]	@ (8006798 <HAL_TIM_PWM_Start+0x18c>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d111      	bne.n	8006766 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f003 0307 	and.w	r3, r3, #7
 800674c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2b06      	cmp	r3, #6
 8006752:	d010      	beq.n	8006776 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f042 0201 	orr.w	r2, r2, #1
 8006762:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006764:	e007      	b.n	8006776 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f042 0201 	orr.w	r2, r2, #1
 8006774:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	40010000 	.word	0x40010000
 8006784:	40010400 	.word	0x40010400
 8006788:	40000400 	.word	0x40000400
 800678c:	40000800 	.word	0x40000800
 8006790:	40000c00 	.word	0x40000c00
 8006794:	40014000 	.word	0x40014000
 8006798:	40001800 	.word	0x40001800

0800679c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067a8:	2300      	movs	r3, #0
 80067aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d101      	bne.n	80067ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80067b6:	2302      	movs	r3, #2
 80067b8:	e0ae      	b.n	8006918 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2b0c      	cmp	r3, #12
 80067c6:	f200 809f 	bhi.w	8006908 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80067ca:	a201      	add	r2, pc, #4	@ (adr r2, 80067d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80067cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d0:	08006805 	.word	0x08006805
 80067d4:	08006909 	.word	0x08006909
 80067d8:	08006909 	.word	0x08006909
 80067dc:	08006909 	.word	0x08006909
 80067e0:	08006845 	.word	0x08006845
 80067e4:	08006909 	.word	0x08006909
 80067e8:	08006909 	.word	0x08006909
 80067ec:	08006909 	.word	0x08006909
 80067f0:	08006887 	.word	0x08006887
 80067f4:	08006909 	.word	0x08006909
 80067f8:	08006909 	.word	0x08006909
 80067fc:	08006909 	.word	0x08006909
 8006800:	080068c7 	.word	0x080068c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68b9      	ldr	r1, [r7, #8]
 800680a:	4618      	mov	r0, r3
 800680c:	f000 f9f6 	bl	8006bfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	699a      	ldr	r2, [r3, #24]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f042 0208 	orr.w	r2, r2, #8
 800681e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	699a      	ldr	r2, [r3, #24]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f022 0204 	bic.w	r2, r2, #4
 800682e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6999      	ldr	r1, [r3, #24]
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	691a      	ldr	r2, [r3, #16]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	430a      	orrs	r2, r1
 8006840:	619a      	str	r2, [r3, #24]
      break;
 8006842:	e064      	b.n	800690e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68b9      	ldr	r1, [r7, #8]
 800684a:	4618      	mov	r0, r3
 800684c:	f000 fa46 	bl	8006cdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	699a      	ldr	r2, [r3, #24]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800685e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	699a      	ldr	r2, [r3, #24]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800686e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6999      	ldr	r1, [r3, #24]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	021a      	lsls	r2, r3, #8
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	430a      	orrs	r2, r1
 8006882:	619a      	str	r2, [r3, #24]
      break;
 8006884:	e043      	b.n	800690e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68b9      	ldr	r1, [r7, #8]
 800688c:	4618      	mov	r0, r3
 800688e:	f000 fa9b 	bl	8006dc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	69da      	ldr	r2, [r3, #28]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f042 0208 	orr.w	r2, r2, #8
 80068a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	69da      	ldr	r2, [r3, #28]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 0204 	bic.w	r2, r2, #4
 80068b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	69d9      	ldr	r1, [r3, #28]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	691a      	ldr	r2, [r3, #16]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	430a      	orrs	r2, r1
 80068c2:	61da      	str	r2, [r3, #28]
      break;
 80068c4:	e023      	b.n	800690e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68b9      	ldr	r1, [r7, #8]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f000 faef 	bl	8006eb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69da      	ldr	r2, [r3, #28]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	69da      	ldr	r2, [r3, #28]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69d9      	ldr	r1, [r3, #28]
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	021a      	lsls	r2, r3, #8
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	430a      	orrs	r2, r1
 8006904:	61da      	str	r2, [r3, #28]
      break;
 8006906:	e002      	b.n	800690e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	75fb      	strb	r3, [r7, #23]
      break;
 800690c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006916:	7dfb      	ldrb	r3, [r7, #23]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3718      	adds	r7, #24
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800692a:	2300      	movs	r3, #0
 800692c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006934:	2b01      	cmp	r3, #1
 8006936:	d101      	bne.n	800693c <HAL_TIM_ConfigClockSource+0x1c>
 8006938:	2302      	movs	r3, #2
 800693a:	e0b4      	b.n	8006aa6 <HAL_TIM_ConfigClockSource+0x186>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2202      	movs	r2, #2
 8006948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800695a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006962:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006974:	d03e      	beq.n	80069f4 <HAL_TIM_ConfigClockSource+0xd4>
 8006976:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800697a:	f200 8087 	bhi.w	8006a8c <HAL_TIM_ConfigClockSource+0x16c>
 800697e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006982:	f000 8086 	beq.w	8006a92 <HAL_TIM_ConfigClockSource+0x172>
 8006986:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800698a:	d87f      	bhi.n	8006a8c <HAL_TIM_ConfigClockSource+0x16c>
 800698c:	2b70      	cmp	r3, #112	@ 0x70
 800698e:	d01a      	beq.n	80069c6 <HAL_TIM_ConfigClockSource+0xa6>
 8006990:	2b70      	cmp	r3, #112	@ 0x70
 8006992:	d87b      	bhi.n	8006a8c <HAL_TIM_ConfigClockSource+0x16c>
 8006994:	2b60      	cmp	r3, #96	@ 0x60
 8006996:	d050      	beq.n	8006a3a <HAL_TIM_ConfigClockSource+0x11a>
 8006998:	2b60      	cmp	r3, #96	@ 0x60
 800699a:	d877      	bhi.n	8006a8c <HAL_TIM_ConfigClockSource+0x16c>
 800699c:	2b50      	cmp	r3, #80	@ 0x50
 800699e:	d03c      	beq.n	8006a1a <HAL_TIM_ConfigClockSource+0xfa>
 80069a0:	2b50      	cmp	r3, #80	@ 0x50
 80069a2:	d873      	bhi.n	8006a8c <HAL_TIM_ConfigClockSource+0x16c>
 80069a4:	2b40      	cmp	r3, #64	@ 0x40
 80069a6:	d058      	beq.n	8006a5a <HAL_TIM_ConfigClockSource+0x13a>
 80069a8:	2b40      	cmp	r3, #64	@ 0x40
 80069aa:	d86f      	bhi.n	8006a8c <HAL_TIM_ConfigClockSource+0x16c>
 80069ac:	2b30      	cmp	r3, #48	@ 0x30
 80069ae:	d064      	beq.n	8006a7a <HAL_TIM_ConfigClockSource+0x15a>
 80069b0:	2b30      	cmp	r3, #48	@ 0x30
 80069b2:	d86b      	bhi.n	8006a8c <HAL_TIM_ConfigClockSource+0x16c>
 80069b4:	2b20      	cmp	r3, #32
 80069b6:	d060      	beq.n	8006a7a <HAL_TIM_ConfigClockSource+0x15a>
 80069b8:	2b20      	cmp	r3, #32
 80069ba:	d867      	bhi.n	8006a8c <HAL_TIM_ConfigClockSource+0x16c>
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d05c      	beq.n	8006a7a <HAL_TIM_ConfigClockSource+0x15a>
 80069c0:	2b10      	cmp	r3, #16
 80069c2:	d05a      	beq.n	8006a7a <HAL_TIM_ConfigClockSource+0x15a>
 80069c4:	e062      	b.n	8006a8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069d6:	f000 fb3b 	bl	8007050 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80069e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	609a      	str	r2, [r3, #8]
      break;
 80069f2:	e04f      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a04:	f000 fb24 	bl	8007050 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689a      	ldr	r2, [r3, #8]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a16:	609a      	str	r2, [r3, #8]
      break;
 8006a18:	e03c      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a26:	461a      	mov	r2, r3
 8006a28:	f000 fa98 	bl	8006f5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2150      	movs	r1, #80	@ 0x50
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 faf1 	bl	800701a <TIM_ITRx_SetConfig>
      break;
 8006a38:	e02c      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a46:	461a      	mov	r2, r3
 8006a48:	f000 fab7 	bl	8006fba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2160      	movs	r1, #96	@ 0x60
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 fae1 	bl	800701a <TIM_ITRx_SetConfig>
      break;
 8006a58:	e01c      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a66:	461a      	mov	r2, r3
 8006a68:	f000 fa78 	bl	8006f5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2140      	movs	r1, #64	@ 0x40
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 fad1 	bl	800701a <TIM_ITRx_SetConfig>
      break;
 8006a78:	e00c      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4619      	mov	r1, r3
 8006a84:	4610      	mov	r0, r2
 8006a86:	f000 fac8 	bl	800701a <TIM_ITRx_SetConfig>
      break;
 8006a8a:	e003      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a90:	e000      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
	...

08006ab0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a43      	ldr	r2, [pc, #268]	@ (8006bd0 <TIM_Base_SetConfig+0x120>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d013      	beq.n	8006af0 <TIM_Base_SetConfig+0x40>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ace:	d00f      	beq.n	8006af0 <TIM_Base_SetConfig+0x40>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a40      	ldr	r2, [pc, #256]	@ (8006bd4 <TIM_Base_SetConfig+0x124>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d00b      	beq.n	8006af0 <TIM_Base_SetConfig+0x40>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a3f      	ldr	r2, [pc, #252]	@ (8006bd8 <TIM_Base_SetConfig+0x128>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d007      	beq.n	8006af0 <TIM_Base_SetConfig+0x40>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a3e      	ldr	r2, [pc, #248]	@ (8006bdc <TIM_Base_SetConfig+0x12c>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d003      	beq.n	8006af0 <TIM_Base_SetConfig+0x40>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a3d      	ldr	r2, [pc, #244]	@ (8006be0 <TIM_Base_SetConfig+0x130>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d108      	bne.n	8006b02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006af6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a32      	ldr	r2, [pc, #200]	@ (8006bd0 <TIM_Base_SetConfig+0x120>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d02b      	beq.n	8006b62 <TIM_Base_SetConfig+0xb2>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b10:	d027      	beq.n	8006b62 <TIM_Base_SetConfig+0xb2>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a2f      	ldr	r2, [pc, #188]	@ (8006bd4 <TIM_Base_SetConfig+0x124>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d023      	beq.n	8006b62 <TIM_Base_SetConfig+0xb2>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a2e      	ldr	r2, [pc, #184]	@ (8006bd8 <TIM_Base_SetConfig+0x128>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d01f      	beq.n	8006b62 <TIM_Base_SetConfig+0xb2>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a2d      	ldr	r2, [pc, #180]	@ (8006bdc <TIM_Base_SetConfig+0x12c>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d01b      	beq.n	8006b62 <TIM_Base_SetConfig+0xb2>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a2c      	ldr	r2, [pc, #176]	@ (8006be0 <TIM_Base_SetConfig+0x130>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d017      	beq.n	8006b62 <TIM_Base_SetConfig+0xb2>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a2b      	ldr	r2, [pc, #172]	@ (8006be4 <TIM_Base_SetConfig+0x134>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d013      	beq.n	8006b62 <TIM_Base_SetConfig+0xb2>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a2a      	ldr	r2, [pc, #168]	@ (8006be8 <TIM_Base_SetConfig+0x138>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d00f      	beq.n	8006b62 <TIM_Base_SetConfig+0xb2>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a29      	ldr	r2, [pc, #164]	@ (8006bec <TIM_Base_SetConfig+0x13c>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d00b      	beq.n	8006b62 <TIM_Base_SetConfig+0xb2>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a28      	ldr	r2, [pc, #160]	@ (8006bf0 <TIM_Base_SetConfig+0x140>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d007      	beq.n	8006b62 <TIM_Base_SetConfig+0xb2>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a27      	ldr	r2, [pc, #156]	@ (8006bf4 <TIM_Base_SetConfig+0x144>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d003      	beq.n	8006b62 <TIM_Base_SetConfig+0xb2>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a26      	ldr	r2, [pc, #152]	@ (8006bf8 <TIM_Base_SetConfig+0x148>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d108      	bne.n	8006b74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	689a      	ldr	r2, [r3, #8]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a0e      	ldr	r2, [pc, #56]	@ (8006bd0 <TIM_Base_SetConfig+0x120>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d003      	beq.n	8006ba2 <TIM_Base_SetConfig+0xf2>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a10      	ldr	r2, [pc, #64]	@ (8006be0 <TIM_Base_SetConfig+0x130>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d103      	bne.n	8006baa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	691a      	ldr	r2, [r3, #16]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f043 0204 	orr.w	r2, r3, #4
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	601a      	str	r2, [r3, #0]
}
 8006bc2:	bf00      	nop
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	40010000 	.word	0x40010000
 8006bd4:	40000400 	.word	0x40000400
 8006bd8:	40000800 	.word	0x40000800
 8006bdc:	40000c00 	.word	0x40000c00
 8006be0:	40010400 	.word	0x40010400
 8006be4:	40014000 	.word	0x40014000
 8006be8:	40014400 	.word	0x40014400
 8006bec:	40014800 	.word	0x40014800
 8006bf0:	40001800 	.word	0x40001800
 8006bf4:	40001c00 	.word	0x40001c00
 8006bf8:	40002000 	.word	0x40002000

08006bfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a1b      	ldr	r3, [r3, #32]
 8006c10:	f023 0201 	bic.w	r2, r3, #1
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f023 0303 	bic.w	r3, r3, #3
 8006c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f023 0302 	bic.w	r3, r3, #2
 8006c44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a20      	ldr	r2, [pc, #128]	@ (8006cd4 <TIM_OC1_SetConfig+0xd8>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d003      	beq.n	8006c60 <TIM_OC1_SetConfig+0x64>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a1f      	ldr	r2, [pc, #124]	@ (8006cd8 <TIM_OC1_SetConfig+0xdc>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d10c      	bne.n	8006c7a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	f023 0308 	bic.w	r3, r3, #8
 8006c66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f023 0304 	bic.w	r3, r3, #4
 8006c78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a15      	ldr	r2, [pc, #84]	@ (8006cd4 <TIM_OC1_SetConfig+0xd8>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d003      	beq.n	8006c8a <TIM_OC1_SetConfig+0x8e>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a14      	ldr	r2, [pc, #80]	@ (8006cd8 <TIM_OC1_SetConfig+0xdc>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d111      	bne.n	8006cae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	685a      	ldr	r2, [r3, #4]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	621a      	str	r2, [r3, #32]
}
 8006cc8:	bf00      	nop
 8006cca:	371c      	adds	r7, #28
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	40010000 	.word	0x40010000
 8006cd8:	40010400 	.word	0x40010400

08006cdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a1b      	ldr	r3, [r3, #32]
 8006cf0:	f023 0210 	bic.w	r2, r3, #16
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	021b      	lsls	r3, r3, #8
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f023 0320 	bic.w	r3, r3, #32
 8006d26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	011b      	lsls	r3, r3, #4
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a22      	ldr	r2, [pc, #136]	@ (8006dc0 <TIM_OC2_SetConfig+0xe4>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d003      	beq.n	8006d44 <TIM_OC2_SetConfig+0x68>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a21      	ldr	r2, [pc, #132]	@ (8006dc4 <TIM_OC2_SetConfig+0xe8>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d10d      	bne.n	8006d60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	011b      	lsls	r3, r3, #4
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a17      	ldr	r2, [pc, #92]	@ (8006dc0 <TIM_OC2_SetConfig+0xe4>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d003      	beq.n	8006d70 <TIM_OC2_SetConfig+0x94>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a16      	ldr	r2, [pc, #88]	@ (8006dc4 <TIM_OC2_SetConfig+0xe8>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d113      	bne.n	8006d98 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	695b      	ldr	r3, [r3, #20]
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	693a      	ldr	r2, [r7, #16]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	621a      	str	r2, [r3, #32]
}
 8006db2:	bf00      	nop
 8006db4:	371c      	adds	r7, #28
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	40010000 	.word	0x40010000
 8006dc4:	40010400 	.word	0x40010400

08006dc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b087      	sub	sp, #28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f023 0303 	bic.w	r3, r3, #3
 8006dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	021b      	lsls	r3, r3, #8
 8006e18:	697a      	ldr	r2, [r7, #20]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a21      	ldr	r2, [pc, #132]	@ (8006ea8 <TIM_OC3_SetConfig+0xe0>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d003      	beq.n	8006e2e <TIM_OC3_SetConfig+0x66>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a20      	ldr	r2, [pc, #128]	@ (8006eac <TIM_OC3_SetConfig+0xe4>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d10d      	bne.n	8006e4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	021b      	lsls	r3, r3, #8
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a16      	ldr	r2, [pc, #88]	@ (8006ea8 <TIM_OC3_SetConfig+0xe0>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d003      	beq.n	8006e5a <TIM_OC3_SetConfig+0x92>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a15      	ldr	r2, [pc, #84]	@ (8006eac <TIM_OC3_SetConfig+0xe4>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d113      	bne.n	8006e82 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	011b      	lsls	r3, r3, #4
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	699b      	ldr	r3, [r3, #24]
 8006e7a:	011b      	lsls	r3, r3, #4
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	621a      	str	r2, [r3, #32]
}
 8006e9c:	bf00      	nop
 8006e9e:	371c      	adds	r7, #28
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	40010000 	.word	0x40010000
 8006eac:	40010400 	.word	0x40010400

08006eb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a1b      	ldr	r3, [r3, #32]
 8006ec4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	021b      	lsls	r3, r3, #8
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006efa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	031b      	lsls	r3, r3, #12
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a12      	ldr	r2, [pc, #72]	@ (8006f54 <TIM_OC4_SetConfig+0xa4>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d003      	beq.n	8006f18 <TIM_OC4_SetConfig+0x68>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a11      	ldr	r2, [pc, #68]	@ (8006f58 <TIM_OC4_SetConfig+0xa8>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d109      	bne.n	8006f2c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	019b      	lsls	r3, r3, #6
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	621a      	str	r2, [r3, #32]
}
 8006f46:	bf00      	nop
 8006f48:	371c      	adds	r7, #28
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	40010000 	.word	0x40010000
 8006f58:	40010400 	.word	0x40010400

08006f5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	f023 0201 	bic.w	r2, r3, #1
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	011b      	lsls	r3, r3, #4
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f023 030a 	bic.w	r3, r3, #10
 8006f98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	621a      	str	r2, [r3, #32]
}
 8006fae:	bf00      	nop
 8006fb0:	371c      	adds	r7, #28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b087      	sub	sp, #28
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	60f8      	str	r0, [r7, #12]
 8006fc2:	60b9      	str	r1, [r7, #8]
 8006fc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6a1b      	ldr	r3, [r3, #32]
 8006fd0:	f023 0210 	bic.w	r2, r3, #16
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006fe4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	031b      	lsls	r3, r3, #12
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ff6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	011b      	lsls	r3, r3, #4
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	621a      	str	r2, [r3, #32]
}
 800700e:	bf00      	nop
 8007010:	371c      	adds	r7, #28
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr

0800701a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800701a:	b480      	push	{r7}
 800701c:	b085      	sub	sp, #20
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
 8007022:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007030:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	4313      	orrs	r3, r2
 8007038:	f043 0307 	orr.w	r3, r3, #7
 800703c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	609a      	str	r2, [r3, #8]
}
 8007044:	bf00      	nop
 8007046:	3714      	adds	r7, #20
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]
 800705c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800706a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	021a      	lsls	r2, r3, #8
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	431a      	orrs	r2, r3
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	4313      	orrs	r3, r2
 8007078:	697a      	ldr	r2, [r7, #20]
 800707a:	4313      	orrs	r3, r2
 800707c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	697a      	ldr	r2, [r7, #20]
 8007082:	609a      	str	r2, [r3, #8]
}
 8007084:	bf00      	nop
 8007086:	371c      	adds	r7, #28
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007090:	b480      	push	{r7}
 8007092:	b087      	sub	sp, #28
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	f003 031f 	and.w	r3, r3, #31
 80070a2:	2201      	movs	r2, #1
 80070a4:	fa02 f303 	lsl.w	r3, r2, r3
 80070a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6a1a      	ldr	r2, [r3, #32]
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	43db      	mvns	r3, r3
 80070b2:	401a      	ands	r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6a1a      	ldr	r2, [r3, #32]
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	f003 031f 	and.w	r3, r3, #31
 80070c2:	6879      	ldr	r1, [r7, #4]
 80070c4:	fa01 f303 	lsl.w	r3, r1, r3
 80070c8:	431a      	orrs	r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	621a      	str	r2, [r3, #32]
}
 80070ce:	bf00      	nop
 80070d0:	371c      	adds	r7, #28
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
	...

080070dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d101      	bne.n	80070f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070f0:	2302      	movs	r3, #2
 80070f2:	e05a      	b.n	80071aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2202      	movs	r2, #2
 8007100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800711a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	4313      	orrs	r3, r2
 8007124:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a21      	ldr	r2, [pc, #132]	@ (80071b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d022      	beq.n	800717e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007140:	d01d      	beq.n	800717e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a1d      	ldr	r2, [pc, #116]	@ (80071bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d018      	beq.n	800717e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a1b      	ldr	r2, [pc, #108]	@ (80071c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d013      	beq.n	800717e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a1a      	ldr	r2, [pc, #104]	@ (80071c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d00e      	beq.n	800717e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a18      	ldr	r2, [pc, #96]	@ (80071c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d009      	beq.n	800717e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a17      	ldr	r2, [pc, #92]	@ (80071cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d004      	beq.n	800717e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a15      	ldr	r2, [pc, #84]	@ (80071d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d10c      	bne.n	8007198 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007184:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	4313      	orrs	r3, r2
 800718e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68ba      	ldr	r2, [r7, #8]
 8007196:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3714      	adds	r7, #20
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	40010000 	.word	0x40010000
 80071bc:	40000400 	.word	0x40000400
 80071c0:	40000800 	.word	0x40000800
 80071c4:	40000c00 	.word	0x40000c00
 80071c8:	40010400 	.word	0x40010400
 80071cc:	40014000 	.word	0x40014000
 80071d0:	40001800 	.word	0x40001800

080071d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e042      	b.n	800726c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d106      	bne.n	8007200 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f7fc ff76 	bl	80040ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2224      	movs	r2, #36	@ 0x24
 8007204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68da      	ldr	r2, [r3, #12]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007216:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f001 f96b 	bl	80084f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	691a      	ldr	r2, [r3, #16]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800722c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	695a      	ldr	r2, [r3, #20]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800723c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68da      	ldr	r2, [r3, #12]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800724c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2220      	movs	r2, #32
 8007258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2220      	movs	r2, #32
 8007260:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b08a      	sub	sp, #40	@ 0x28
 8007278:	af02      	add	r7, sp, #8
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	603b      	str	r3, [r7, #0]
 8007280:	4613      	mov	r3, r2
 8007282:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007284:	2300      	movs	r3, #0
 8007286:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b20      	cmp	r3, #32
 8007292:	d175      	bne.n	8007380 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d002      	beq.n	80072a0 <HAL_UART_Transmit+0x2c>
 800729a:	88fb      	ldrh	r3, [r7, #6]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d101      	bne.n	80072a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e06e      	b.n	8007382 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2221      	movs	r2, #33	@ 0x21
 80072ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072b2:	f7fd f967 	bl	8004584 <HAL_GetTick>
 80072b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	88fa      	ldrh	r2, [r7, #6]
 80072bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	88fa      	ldrh	r2, [r7, #6]
 80072c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072cc:	d108      	bne.n	80072e0 <HAL_UART_Transmit+0x6c>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d104      	bne.n	80072e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80072d6:	2300      	movs	r3, #0
 80072d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	61bb      	str	r3, [r7, #24]
 80072de:	e003      	b.n	80072e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072e4:	2300      	movs	r3, #0
 80072e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80072e8:	e02e      	b.n	8007348 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	2200      	movs	r2, #0
 80072f2:	2180      	movs	r1, #128	@ 0x80
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 fda1 	bl	8007e3c <UART_WaitOnFlagUntilTimeout>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d005      	beq.n	800730c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2220      	movs	r2, #32
 8007304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e03a      	b.n	8007382 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d10b      	bne.n	800732a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	881b      	ldrh	r3, [r3, #0]
 8007316:	461a      	mov	r2, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007320:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	3302      	adds	r3, #2
 8007326:	61bb      	str	r3, [r7, #24]
 8007328:	e007      	b.n	800733a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	781a      	ldrb	r2, [r3, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	3301      	adds	r3, #1
 8007338:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800733e:	b29b      	uxth	r3, r3
 8007340:	3b01      	subs	r3, #1
 8007342:	b29a      	uxth	r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800734c:	b29b      	uxth	r3, r3
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1cb      	bne.n	80072ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	2200      	movs	r2, #0
 800735a:	2140      	movs	r1, #64	@ 0x40
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f000 fd6d 	bl	8007e3c <UART_WaitOnFlagUntilTimeout>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d005      	beq.n	8007374 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2220      	movs	r2, #32
 800736c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e006      	b.n	8007382 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2220      	movs	r2, #32
 8007378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800737c:	2300      	movs	r3, #0
 800737e:	e000      	b.n	8007382 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007380:	2302      	movs	r3, #2
  }
}
 8007382:	4618      	mov	r0, r3
 8007384:	3720      	adds	r7, #32
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b084      	sub	sp, #16
 800738e:	af00      	add	r7, sp, #0
 8007390:	60f8      	str	r0, [r7, #12]
 8007392:	60b9      	str	r1, [r7, #8]
 8007394:	4613      	mov	r3, r2
 8007396:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b20      	cmp	r3, #32
 80073a2:	d112      	bne.n	80073ca <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d002      	beq.n	80073b0 <HAL_UART_Receive_IT+0x26>
 80073aa:	88fb      	ldrh	r3, [r7, #6]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d101      	bne.n	80073b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e00b      	b.n	80073cc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80073ba:	88fb      	ldrh	r3, [r7, #6]
 80073bc:	461a      	mov	r2, r3
 80073be:	68b9      	ldr	r1, [r7, #8]
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	f000 fd94 	bl	8007eee <UART_Start_Receive_IT>
 80073c6:	4603      	mov	r3, r0
 80073c8:	e000      	b.n	80073cc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80073ca:	2302      	movs	r3, #2
  }
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	4613      	mov	r3, r2
 80073e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b20      	cmp	r3, #32
 80073ec:	d112      	bne.n	8007414 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d002      	beq.n	80073fa <HAL_UART_Receive_DMA+0x26>
 80073f4:	88fb      	ldrh	r3, [r7, #6]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e00b      	b.n	8007416 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007404:	88fb      	ldrh	r3, [r7, #6]
 8007406:	461a      	mov	r2, r3
 8007408:	68b9      	ldr	r1, [r7, #8]
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f000 fdaa 	bl	8007f64 <UART_Start_Receive_DMA>
 8007410:	4603      	mov	r3, r0
 8007412:	e000      	b.n	8007416 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007414:	2302      	movs	r3, #2
  }
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
	...

08007420 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b0a2      	sub	sp, #136	@ 0x88
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8007428:	2301      	movs	r3, #1
 800742a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	330c      	adds	r3, #12
 8007434:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007436:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007438:	e853 3f00 	ldrex	r3, [r3]
 800743c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800743e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007440:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8007444:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	330c      	adds	r3, #12
 800744e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007452:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007454:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007456:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007458:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800745a:	e841 2300 	strex	r3, r2, [r1]
 800745e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007460:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1e3      	bne.n	800742e <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	3314      	adds	r3, #20
 800746c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007470:	e853 3f00 	ldrex	r3, [r3]
 8007474:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007478:	f023 0301 	bic.w	r3, r3, #1
 800747c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3314      	adds	r3, #20
 8007484:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007486:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007488:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800748c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800748e:	e841 2300 	strex	r3, r2, [r1]
 8007492:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007494:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1e5      	bne.n	8007466 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d119      	bne.n	80074d6 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	330c      	adds	r3, #12
 80074a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ac:	e853 3f00 	ldrex	r3, [r3]
 80074b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074b4:	f023 0310 	bic.w	r3, r3, #16
 80074b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	330c      	adds	r3, #12
 80074c0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80074c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80074c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074ca:	e841 2300 	strex	r3, r2, [r1]
 80074ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1e5      	bne.n	80074a2 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00f      	beq.n	80074fe <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	695b      	ldr	r3, [r3, #20]
 80074e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074e8:	2b80      	cmp	r3, #128	@ 0x80
 80074ea:	d104      	bne.n	80074f6 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074f0:	4a53      	ldr	r2, [pc, #332]	@ (8007640 <HAL_UART_Abort_IT+0x220>)
 80074f2:	651a      	str	r2, [r3, #80]	@ 0x50
 80074f4:	e003      	b.n	80074fe <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074fa:	2200      	movs	r2, #0
 80074fc:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00f      	beq.n	8007526 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007510:	2b40      	cmp	r3, #64	@ 0x40
 8007512:	d104      	bne.n	800751e <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007518:	4a4a      	ldr	r2, [pc, #296]	@ (8007644 <HAL_UART_Abort_IT+0x224>)
 800751a:	651a      	str	r2, [r3, #80]	@ 0x50
 800751c:	e003      	b.n	8007526 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007522:	2200      	movs	r2, #0
 8007524:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007530:	2b80      	cmp	r3, #128	@ 0x80
 8007532:	d12d      	bne.n	8007590 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	3314      	adds	r3, #20
 800753a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753e:	e853 3f00 	ldrex	r3, [r3]
 8007542:	623b      	str	r3, [r7, #32]
   return(result);
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800754a:	677b      	str	r3, [r7, #116]	@ 0x74
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	3314      	adds	r3, #20
 8007552:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007554:	633a      	str	r2, [r7, #48]	@ 0x30
 8007556:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007558:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800755a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800755c:	e841 2300 	strex	r3, r2, [r1]
 8007560:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1e5      	bne.n	8007534 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00f      	beq.n	8007590 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007574:	4618      	mov	r0, r3
 8007576:	f7fd fd2f 	bl	8004fd8 <HAL_DMA_Abort_IT>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d004      	beq.n	800758a <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007584:	2200      	movs	r2, #0
 8007586:	651a      	str	r2, [r3, #80]	@ 0x50
 8007588:	e002      	b.n	8007590 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 800758a:	2300      	movs	r3, #0
 800758c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800759a:	2b40      	cmp	r3, #64	@ 0x40
 800759c:	d130      	bne.n	8007600 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3314      	adds	r3, #20
 80075a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	e853 3f00 	ldrex	r3, [r3]
 80075ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3314      	adds	r3, #20
 80075bc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80075be:	61fa      	str	r2, [r7, #28]
 80075c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	69b9      	ldr	r1, [r7, #24]
 80075c4:	69fa      	ldr	r2, [r7, #28]
 80075c6:	e841 2300 	strex	r3, r2, [r1]
 80075ca:	617b      	str	r3, [r7, #20]
   return(result);
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1e5      	bne.n	800759e <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d012      	beq.n	8007600 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075de:	4618      	mov	r0, r3
 80075e0:	f7fd fcfa 	bl	8004fd8 <HAL_DMA_Abort_IT>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d007      	beq.n	80075fa <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ee:	2200      	movs	r2, #0
 80075f0:	651a      	str	r2, [r3, #80]	@ 0x50
        AbortCplt = 0x01U;
 80075f2:	2301      	movs	r3, #1
 80075f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80075f8:	e002      	b.n	8007600 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 80075fa:	2300      	movs	r3, #0
 80075fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8007600:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007604:	2b01      	cmp	r3, #1
 8007606:	d116      	bne.n	8007636 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	84da      	strh	r2, [r3, #38]	@ 0x26
    huart->RxXferCount = 0x00U;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2220      	movs	r2, #32
 800761e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    huart->RxState = HAL_UART_STATE_READY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2220      	movs	r2, #32
 8007626:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 fad1 	bl	8007bd8 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3788      	adds	r7, #136	@ 0x88
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	080081e9 	.word	0x080081e9
 8007644:	08008249 	.word	0x08008249

08007648 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b0ba      	sub	sp, #232	@ 0xe8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800766e:	2300      	movs	r3, #0
 8007670:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007674:	2300      	movs	r3, #0
 8007676:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800767a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800767e:	f003 030f 	and.w	r3, r3, #15
 8007682:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007686:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10f      	bne.n	80076ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800768e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007692:	f003 0320 	and.w	r3, r3, #32
 8007696:	2b00      	cmp	r3, #0
 8007698:	d009      	beq.n	80076ae <HAL_UART_IRQHandler+0x66>
 800769a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800769e:	f003 0320 	and.w	r3, r3, #32
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d003      	beq.n	80076ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 fe66 	bl	8008378 <UART_Receive_IT>
      return;
 80076ac:	e273      	b.n	8007b96 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80076ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f000 80de 	beq.w	8007874 <HAL_UART_IRQHandler+0x22c>
 80076b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076bc:	f003 0301 	and.w	r3, r3, #1
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d106      	bne.n	80076d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80076c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f000 80d1 	beq.w	8007874 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80076d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076d6:	f003 0301 	and.w	r3, r3, #1
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00b      	beq.n	80076f6 <HAL_UART_IRQHandler+0xae>
 80076de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d005      	beq.n	80076f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076ee:	f043 0201 	orr.w	r2, r3, #1
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076fa:	f003 0304 	and.w	r3, r3, #4
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00b      	beq.n	800771a <HAL_UART_IRQHandler+0xd2>
 8007702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b00      	cmp	r3, #0
 800770c:	d005      	beq.n	800771a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007712:	f043 0202 	orr.w	r2, r3, #2
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800771a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800771e:	f003 0302 	and.w	r3, r3, #2
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00b      	beq.n	800773e <HAL_UART_IRQHandler+0xf6>
 8007726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	2b00      	cmp	r3, #0
 8007730:	d005      	beq.n	800773e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007736:	f043 0204 	orr.w	r2, r3, #4
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800773e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007742:	f003 0308 	and.w	r3, r3, #8
 8007746:	2b00      	cmp	r3, #0
 8007748:	d011      	beq.n	800776e <HAL_UART_IRQHandler+0x126>
 800774a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800774e:	f003 0320 	and.w	r3, r3, #32
 8007752:	2b00      	cmp	r3, #0
 8007754:	d105      	bne.n	8007762 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	2b00      	cmp	r3, #0
 8007760:	d005      	beq.n	800776e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007766:	f043 0208 	orr.w	r2, r3, #8
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007772:	2b00      	cmp	r3, #0
 8007774:	f000 820a 	beq.w	8007b8c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800777c:	f003 0320 	and.w	r3, r3, #32
 8007780:	2b00      	cmp	r3, #0
 8007782:	d008      	beq.n	8007796 <HAL_UART_IRQHandler+0x14e>
 8007784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007788:	f003 0320 	and.w	r3, r3, #32
 800778c:	2b00      	cmp	r3, #0
 800778e:	d002      	beq.n	8007796 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 fdf1 	bl	8008378 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077a0:	2b40      	cmp	r3, #64	@ 0x40
 80077a2:	bf0c      	ite	eq
 80077a4:	2301      	moveq	r3, #1
 80077a6:	2300      	movne	r3, #0
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077b2:	f003 0308 	and.w	r3, r3, #8
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d103      	bne.n	80077c2 <HAL_UART_IRQHandler+0x17a>
 80077ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d04f      	beq.n	8007862 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fc9c 	bl	8008100 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077d2:	2b40      	cmp	r3, #64	@ 0x40
 80077d4:	d141      	bne.n	800785a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	3314      	adds	r3, #20
 80077dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80077e4:	e853 3f00 	ldrex	r3, [r3]
 80077e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80077ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80077f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	3314      	adds	r3, #20
 80077fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007802:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007806:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800780e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007812:	e841 2300 	strex	r3, r2, [r1]
 8007816:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800781a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1d9      	bne.n	80077d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007826:	2b00      	cmp	r3, #0
 8007828:	d013      	beq.n	8007852 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800782e:	4a8a      	ldr	r2, [pc, #552]	@ (8007a58 <HAL_UART_IRQHandler+0x410>)
 8007830:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007836:	4618      	mov	r0, r3
 8007838:	f7fd fbce 	bl	8004fd8 <HAL_DMA_Abort_IT>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d016      	beq.n	8007870 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800784c:	4610      	mov	r0, r2
 800784e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007850:	e00e      	b.n	8007870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f9b6 	bl	8007bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007858:	e00a      	b.n	8007870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f9b2 	bl	8007bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007860:	e006      	b.n	8007870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f9ae 	bl	8007bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800786e:	e18d      	b.n	8007b8c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007870:	bf00      	nop
    return;
 8007872:	e18b      	b.n	8007b8c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007878:	2b01      	cmp	r3, #1
 800787a:	f040 8167 	bne.w	8007b4c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800787e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007882:	f003 0310 	and.w	r3, r3, #16
 8007886:	2b00      	cmp	r3, #0
 8007888:	f000 8160 	beq.w	8007b4c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800788c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007890:	f003 0310 	and.w	r3, r3, #16
 8007894:	2b00      	cmp	r3, #0
 8007896:	f000 8159 	beq.w	8007b4c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800789a:	2300      	movs	r3, #0
 800789c:	60bb      	str	r3, [r7, #8]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	60bb      	str	r3, [r7, #8]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	60bb      	str	r3, [r7, #8]
 80078ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078ba:	2b40      	cmp	r3, #64	@ 0x40
 80078bc:	f040 80ce 	bne.w	8007a5c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80078cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 80a9 	beq.w	8007a28 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80078da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80078de:	429a      	cmp	r2, r3
 80078e0:	f080 80a2 	bcs.w	8007a28 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80078ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078f6:	f000 8088 	beq.w	8007a0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	330c      	adds	r3, #12
 8007900:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007904:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007908:	e853 3f00 	ldrex	r3, [r3]
 800790c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007910:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007914:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007918:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	330c      	adds	r3, #12
 8007922:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007926:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800792a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007932:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007936:	e841 2300 	strex	r3, r2, [r1]
 800793a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800793e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1d9      	bne.n	80078fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	3314      	adds	r3, #20
 800794c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007950:	e853 3f00 	ldrex	r3, [r3]
 8007954:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007956:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007958:	f023 0301 	bic.w	r3, r3, #1
 800795c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	3314      	adds	r3, #20
 8007966:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800796a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800796e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007970:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007972:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007976:	e841 2300 	strex	r3, r2, [r1]
 800797a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800797c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1e1      	bne.n	8007946 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	3314      	adds	r3, #20
 8007988:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800798c:	e853 3f00 	ldrex	r3, [r3]
 8007990:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007992:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007994:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007998:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	3314      	adds	r3, #20
 80079a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80079a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80079a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80079ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80079ae:	e841 2300 	strex	r3, r2, [r1]
 80079b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80079b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1e3      	bne.n	8007982 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2220      	movs	r2, #32
 80079be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	330c      	adds	r3, #12
 80079ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079d2:	e853 3f00 	ldrex	r3, [r3]
 80079d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80079d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079da:	f023 0310 	bic.w	r3, r3, #16
 80079de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	330c      	adds	r3, #12
 80079e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80079ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 80079ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80079f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80079f4:	e841 2300 	strex	r3, r2, [r1]
 80079f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80079fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1e3      	bne.n	80079c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7fd fa77 	bl	8004ef8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2202      	movs	r2, #2
 8007a0e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f8e3 	bl	8007bec <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007a26:	e0b3      	b.n	8007b90 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007a2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a30:	429a      	cmp	r2, r3
 8007a32:	f040 80ad 	bne.w	8007b90 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a3a:	69db      	ldr	r3, [r3, #28]
 8007a3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a40:	f040 80a6 	bne.w	8007b90 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2202      	movs	r2, #2
 8007a48:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007a4e:	4619      	mov	r1, r3
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 f8cb 	bl	8007bec <HAL_UARTEx_RxEventCallback>
      return;
 8007a56:	e09b      	b.n	8007b90 <HAL_UART_IRQHandler+0x548>
 8007a58:	080081c7 	.word	0x080081c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	f000 808e 	beq.w	8007b94 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007a78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 8089 	beq.w	8007b94 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	330c      	adds	r3, #12
 8007a88:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a8c:	e853 3f00 	ldrex	r3, [r3]
 8007a90:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	330c      	adds	r3, #12
 8007aa2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007aa6:	647a      	str	r2, [r7, #68]	@ 0x44
 8007aa8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aaa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007aac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007aae:	e841 2300 	strex	r3, r2, [r1]
 8007ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1e3      	bne.n	8007a82 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	3314      	adds	r3, #20
 8007ac0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac4:	e853 3f00 	ldrex	r3, [r3]
 8007ac8:	623b      	str	r3, [r7, #32]
   return(result);
 8007aca:	6a3b      	ldr	r3, [r7, #32]
 8007acc:	f023 0301 	bic.w	r3, r3, #1
 8007ad0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	3314      	adds	r3, #20
 8007ada:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007ade:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ae6:	e841 2300 	strex	r3, r2, [r1]
 8007aea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1e3      	bne.n	8007aba <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2220      	movs	r2, #32
 8007af6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	330c      	adds	r3, #12
 8007b06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	e853 3f00 	ldrex	r3, [r3]
 8007b0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f023 0310 	bic.w	r3, r3, #16
 8007b16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	330c      	adds	r3, #12
 8007b20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007b24:	61fa      	str	r2, [r7, #28]
 8007b26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b28:	69b9      	ldr	r1, [r7, #24]
 8007b2a:	69fa      	ldr	r2, [r7, #28]
 8007b2c:	e841 2300 	strex	r3, r2, [r1]
 8007b30:	617b      	str	r3, [r7, #20]
   return(result);
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d1e3      	bne.n	8007b00 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007b42:	4619      	mov	r1, r3
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f851 	bl	8007bec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b4a:	e023      	b.n	8007b94 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d009      	beq.n	8007b6c <HAL_UART_IRQHandler+0x524>
 8007b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d003      	beq.n	8007b6c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fb9f 	bl	80082a8 <UART_Transmit_IT>
    return;
 8007b6a:	e014      	b.n	8007b96 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00e      	beq.n	8007b96 <HAL_UART_IRQHandler+0x54e>
 8007b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d008      	beq.n	8007b96 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 fbdf 	bl	8008348 <UART_EndTransmit_IT>
    return;
 8007b8a:	e004      	b.n	8007b96 <HAL_UART_IRQHandler+0x54e>
    return;
 8007b8c:	bf00      	nop
 8007b8e:	e002      	b.n	8007b96 <HAL_UART_IRQHandler+0x54e>
      return;
 8007b90:	bf00      	nop
 8007b92:	e000      	b.n	8007b96 <HAL_UART_IRQHandler+0x54e>
      return;
 8007b94:	bf00      	nop
  }
}
 8007b96:	37e8      	adds	r7, #232	@ 0xe8
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	60fb      	str	r3, [r7, #12]
 8007c10:	2300      	movs	r3, #0
 8007c12:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	b2da      	uxtb	r2, r3
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	4313      	orrs	r3, r2
 8007c32:	b2db      	uxtb	r3, r3
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3714      	adds	r7, #20
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b09c      	sub	sp, #112	@ 0x70
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c4c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d172      	bne.n	8007d42 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007c5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c5e:	2200      	movs	r2, #0
 8007c60:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	330c      	adds	r3, #12
 8007c68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c6c:	e853 3f00 	ldrex	r3, [r3]
 8007c70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007c72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	330c      	adds	r3, #12
 8007c80:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007c82:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007c84:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c8a:	e841 2300 	strex	r3, r2, [r1]
 8007c8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1e5      	bne.n	8007c62 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	3314      	adds	r3, #20
 8007c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca0:	e853 3f00 	ldrex	r3, [r3]
 8007ca4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ca8:	f023 0301 	bic.w	r3, r3, #1
 8007cac:	667b      	str	r3, [r7, #100]	@ 0x64
 8007cae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	3314      	adds	r3, #20
 8007cb4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007cb6:	647a      	str	r2, [r7, #68]	@ 0x44
 8007cb8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007cbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cbe:	e841 2300 	strex	r3, r2, [r1]
 8007cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007cc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1e5      	bne.n	8007c96 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	3314      	adds	r3, #20
 8007cd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd4:	e853 3f00 	ldrex	r3, [r3]
 8007cd8:	623b      	str	r3, [r7, #32]
   return(result);
 8007cda:	6a3b      	ldr	r3, [r7, #32]
 8007cdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ce0:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ce2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3314      	adds	r3, #20
 8007ce8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007cea:	633a      	str	r2, [r7, #48]	@ 0x30
 8007cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cf2:	e841 2300 	strex	r3, r2, [r1]
 8007cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1e5      	bne.n	8007cca <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007cfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d00:	2220      	movs	r2, #32
 8007d02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d119      	bne.n	8007d42 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	330c      	adds	r3, #12
 8007d14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	e853 3f00 	ldrex	r3, [r3]
 8007d1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f023 0310 	bic.w	r3, r3, #16
 8007d24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	330c      	adds	r3, #12
 8007d2c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007d2e:	61fa      	str	r2, [r7, #28]
 8007d30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d32:	69b9      	ldr	r1, [r7, #24]
 8007d34:	69fa      	ldr	r2, [r7, #28]
 8007d36:	e841 2300 	strex	r3, r2, [r1]
 8007d3a:	617b      	str	r3, [r7, #20]
   return(result);
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1e5      	bne.n	8007d0e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d44:	2200      	movs	r2, #0
 8007d46:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d106      	bne.n	8007d5e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d52:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007d54:	4619      	mov	r1, r3
 8007d56:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007d58:	f7ff ff48 	bl	8007bec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d5c:	e002      	b.n	8007d64 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007d5e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007d60:	f7fa faaa 	bl	80022b8 <HAL_UART_RxCpltCallback>
}
 8007d64:	bf00      	nop
 8007d66:	3770      	adds	r7, #112	@ 0x70
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d78:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d108      	bne.n	8007d9a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007d8c:	085b      	lsrs	r3, r3, #1
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	4619      	mov	r1, r3
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f7ff ff2a 	bl	8007bec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d98:	e002      	b.n	8007da0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f7ff ff08 	bl	8007bb0 <HAL_UART_RxHalfCpltCallback>
}
 8007da0:	bf00      	nop
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007db0:	2300      	movs	r3, #0
 8007db2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	695b      	ldr	r3, [r3, #20]
 8007dc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dc4:	2b80      	cmp	r3, #128	@ 0x80
 8007dc6:	bf0c      	ite	eq
 8007dc8:	2301      	moveq	r3, #1
 8007dca:	2300      	movne	r3, #0
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b21      	cmp	r3, #33	@ 0x21
 8007dda:	d108      	bne.n	8007dee <UART_DMAError+0x46>
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d005      	beq.n	8007dee <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	2200      	movs	r2, #0
 8007de6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007de8:	68b8      	ldr	r0, [r7, #8]
 8007dea:	f000 f961 	bl	80080b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	695b      	ldr	r3, [r3, #20]
 8007df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007df8:	2b40      	cmp	r3, #64	@ 0x40
 8007dfa:	bf0c      	ite	eq
 8007dfc:	2301      	moveq	r3, #1
 8007dfe:	2300      	movne	r3, #0
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b22      	cmp	r3, #34	@ 0x22
 8007e0e:	d108      	bne.n	8007e22 <UART_DMAError+0x7a>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d005      	beq.n	8007e22 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007e1c:	68b8      	ldr	r0, [r7, #8]
 8007e1e:	f000 f96f 	bl	8008100 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e26:	f043 0210 	orr.w	r2, r3, #16
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e2e:	68b8      	ldr	r0, [r7, #8]
 8007e30:	f7ff fec8 	bl	8007bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e34:	bf00      	nop
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	603b      	str	r3, [r7, #0]
 8007e48:	4613      	mov	r3, r2
 8007e4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e4c:	e03b      	b.n	8007ec6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e4e:	6a3b      	ldr	r3, [r7, #32]
 8007e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e54:	d037      	beq.n	8007ec6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e56:	f7fc fb95 	bl	8004584 <HAL_GetTick>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	1ad3      	subs	r3, r2, r3
 8007e60:	6a3a      	ldr	r2, [r7, #32]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d302      	bcc.n	8007e6c <UART_WaitOnFlagUntilTimeout+0x30>
 8007e66:	6a3b      	ldr	r3, [r7, #32]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d101      	bne.n	8007e70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e03a      	b.n	8007ee6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	f003 0304 	and.w	r3, r3, #4
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d023      	beq.n	8007ec6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	2b80      	cmp	r3, #128	@ 0x80
 8007e82:	d020      	beq.n	8007ec6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	2b40      	cmp	r3, #64	@ 0x40
 8007e88:	d01d      	beq.n	8007ec6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 0308 	and.w	r3, r3, #8
 8007e94:	2b08      	cmp	r3, #8
 8007e96:	d116      	bne.n	8007ec6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007e98:	2300      	movs	r3, #0
 8007e9a:	617b      	str	r3, [r7, #20]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	617b      	str	r3, [r7, #20]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	617b      	str	r3, [r7, #20]
 8007eac:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f000 f926 	bl	8008100 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2208      	movs	r2, #8
 8007eb8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e00f      	b.n	8007ee6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	4013      	ands	r3, r2
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	bf0c      	ite	eq
 8007ed6:	2301      	moveq	r3, #1
 8007ed8:	2300      	movne	r3, #0
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	461a      	mov	r2, r3
 8007ede:	79fb      	ldrb	r3, [r7, #7]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d0b4      	beq.n	8007e4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3718      	adds	r7, #24
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b085      	sub	sp, #20
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	60f8      	str	r0, [r7, #12]
 8007ef6:	60b9      	str	r1, [r7, #8]
 8007ef8:	4613      	mov	r3, r2
 8007efa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	88fa      	ldrh	r2, [r7, #6]
 8007f06:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	88fa      	ldrh	r2, [r7, #6]
 8007f0c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2222      	movs	r2, #34	@ 0x22
 8007f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d007      	beq.n	8007f34 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68da      	ldr	r2, [r3, #12]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f32:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	695a      	ldr	r2, [r3, #20]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f042 0201 	orr.w	r2, r2, #1
 8007f42:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68da      	ldr	r2, [r3, #12]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f042 0220 	orr.w	r2, r2, #32
 8007f52:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3714      	adds	r7, #20
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
	...

08007f64 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b098      	sub	sp, #96	@ 0x60
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007f72:	68ba      	ldr	r2, [r7, #8]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	88fa      	ldrh	r2, [r7, #6]
 8007f7c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2222      	movs	r2, #34	@ 0x22
 8007f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f90:	4a44      	ldr	r2, [pc, #272]	@ (80080a4 <UART_Start_Receive_DMA+0x140>)
 8007f92:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f98:	4a43      	ldr	r2, [pc, #268]	@ (80080a8 <UART_Start_Receive_DMA+0x144>)
 8007f9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fa0:	4a42      	ldr	r2, [pc, #264]	@ (80080ac <UART_Start_Receive_DMA+0x148>)
 8007fa2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fa8:	2200      	movs	r2, #0
 8007faa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007fac:	f107 0308 	add.w	r3, r7, #8
 8007fb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	3304      	adds	r3, #4
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	88fb      	ldrh	r3, [r7, #6]
 8007fc4:	f7fc ff40 	bl	8004e48 <HAL_DMA_Start_IT>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d008      	beq.n	8007fe0 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2210      	movs	r2, #16
 8007fd2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2220      	movs	r2, #32
 8007fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e05d      	b.n	800809c <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	613b      	str	r3, [r7, #16]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	613b      	str	r3, [r7, #16]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	613b      	str	r3, [r7, #16]
 8007ff4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d019      	beq.n	8008032 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	330c      	adds	r3, #12
 8008004:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008008:	e853 3f00 	ldrex	r3, [r3]
 800800c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800800e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008010:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008014:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	330c      	adds	r3, #12
 800801c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800801e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008020:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008022:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008024:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008026:	e841 2300 	strex	r3, r2, [r1]
 800802a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800802c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1e5      	bne.n	8007ffe <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3314      	adds	r3, #20
 8008038:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800803c:	e853 3f00 	ldrex	r3, [r3]
 8008040:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008044:	f043 0301 	orr.w	r3, r3, #1
 8008048:	657b      	str	r3, [r7, #84]	@ 0x54
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	3314      	adds	r3, #20
 8008050:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008052:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008054:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008056:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008058:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800805a:	e841 2300 	strex	r3, r2, [r1]
 800805e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1e5      	bne.n	8008032 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	3314      	adds	r3, #20
 800806c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	e853 3f00 	ldrex	r3, [r3]
 8008074:	617b      	str	r3, [r7, #20]
   return(result);
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800807c:	653b      	str	r3, [r7, #80]	@ 0x50
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	3314      	adds	r3, #20
 8008084:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008086:	627a      	str	r2, [r7, #36]	@ 0x24
 8008088:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808a:	6a39      	ldr	r1, [r7, #32]
 800808c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800808e:	e841 2300 	strex	r3, r2, [r1]
 8008092:	61fb      	str	r3, [r7, #28]
   return(result);
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1e5      	bne.n	8008066 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3760      	adds	r7, #96	@ 0x60
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	08007c41 	.word	0x08007c41
 80080a8:	08007d6d 	.word	0x08007d6d
 80080ac:	08007da9 	.word	0x08007da9

080080b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b089      	sub	sp, #36	@ 0x24
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	330c      	adds	r3, #12
 80080be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	e853 3f00 	ldrex	r3, [r3]
 80080c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80080ce:	61fb      	str	r3, [r7, #28]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	330c      	adds	r3, #12
 80080d6:	69fa      	ldr	r2, [r7, #28]
 80080d8:	61ba      	str	r2, [r7, #24]
 80080da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080dc:	6979      	ldr	r1, [r7, #20]
 80080de:	69ba      	ldr	r2, [r7, #24]
 80080e0:	e841 2300 	strex	r3, r2, [r1]
 80080e4:	613b      	str	r3, [r7, #16]
   return(result);
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d1e5      	bne.n	80080b8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2220      	movs	r2, #32
 80080f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80080f4:	bf00      	nop
 80080f6:	3724      	adds	r7, #36	@ 0x24
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008100:	b480      	push	{r7}
 8008102:	b095      	sub	sp, #84	@ 0x54
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	330c      	adds	r3, #12
 800810e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008112:	e853 3f00 	ldrex	r3, [r3]
 8008116:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800811e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	330c      	adds	r3, #12
 8008126:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008128:	643a      	str	r2, [r7, #64]	@ 0x40
 800812a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800812e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008130:	e841 2300 	strex	r3, r2, [r1]
 8008134:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1e5      	bne.n	8008108 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	3314      	adds	r3, #20
 8008142:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008144:	6a3b      	ldr	r3, [r7, #32]
 8008146:	e853 3f00 	ldrex	r3, [r3]
 800814a:	61fb      	str	r3, [r7, #28]
   return(result);
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	f023 0301 	bic.w	r3, r3, #1
 8008152:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	3314      	adds	r3, #20
 800815a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800815c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800815e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008160:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008162:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008164:	e841 2300 	strex	r3, r2, [r1]
 8008168:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800816a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1e5      	bne.n	800813c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008174:	2b01      	cmp	r3, #1
 8008176:	d119      	bne.n	80081ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	330c      	adds	r3, #12
 800817e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	e853 3f00 	ldrex	r3, [r3]
 8008186:	60bb      	str	r3, [r7, #8]
   return(result);
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	f023 0310 	bic.w	r3, r3, #16
 800818e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	330c      	adds	r3, #12
 8008196:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008198:	61ba      	str	r2, [r7, #24]
 800819a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819c:	6979      	ldr	r1, [r7, #20]
 800819e:	69ba      	ldr	r2, [r7, #24]
 80081a0:	e841 2300 	strex	r3, r2, [r1]
 80081a4:	613b      	str	r3, [r7, #16]
   return(result);
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1e5      	bne.n	8008178 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2220      	movs	r2, #32
 80081b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80081ba:	bf00      	nop
 80081bc:	3754      	adds	r7, #84	@ 0x54
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b084      	sub	sp, #16
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f7ff fcf2 	bl	8007bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081e0:	bf00      	nop
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081f4:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081fa:	2200      	movs	r2, #0
 80081fc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008202:	2b00      	cmp	r3, #0
 8008204:	d004      	beq.n	8008210 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800820a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800820c:	2b00      	cmp	r3, #0
 800820e:	d117      	bne.n	8008240 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2200      	movs	r2, #0
 8008214:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2200      	movs	r2, #0
 8008220:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2220      	movs	r2, #32
 8008226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2220      	movs	r2, #32
 800822e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2200      	movs	r2, #0
 8008236:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f7ff fccd 	bl	8007bd8 <HAL_UART_AbortCpltCallback>
 800823e:	e000      	b.n	8008242 <UART_DMATxAbortCallback+0x5a>
      return;
 8008240:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008254:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800825a:	2200      	movs	r2, #0
 800825c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008262:	2b00      	cmp	r3, #0
 8008264:	d004      	beq.n	8008270 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800826a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800826c:	2b00      	cmp	r3, #0
 800826e:	d117      	bne.n	80082a0 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2200      	movs	r2, #0
 8008274:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2200      	movs	r2, #0
 800827a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2200      	movs	r2, #0
 8008280:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2220      	movs	r2, #32
 8008286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2220      	movs	r2, #32
 800828e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f7ff fc9d 	bl	8007bd8 <HAL_UART_AbortCpltCallback>
 800829e:	e000      	b.n	80082a2 <UART_DMARxAbortCallback+0x5a>
      return;
 80082a0:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082a2:	3710      	adds	r7, #16
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	2b21      	cmp	r3, #33	@ 0x21
 80082ba:	d13e      	bne.n	800833a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082c4:	d114      	bne.n	80082f0 <UART_Transmit_IT+0x48>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d110      	bne.n	80082f0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a1b      	ldr	r3, [r3, #32]
 80082d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	881b      	ldrh	r3, [r3, #0]
 80082d8:	461a      	mov	r2, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6a1b      	ldr	r3, [r3, #32]
 80082e8:	1c9a      	adds	r2, r3, #2
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	621a      	str	r2, [r3, #32]
 80082ee:	e008      	b.n	8008302 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a1b      	ldr	r3, [r3, #32]
 80082f4:	1c59      	adds	r1, r3, #1
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	6211      	str	r1, [r2, #32]
 80082fa:	781a      	ldrb	r2, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008306:	b29b      	uxth	r3, r3
 8008308:	3b01      	subs	r3, #1
 800830a:	b29b      	uxth	r3, r3
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	4619      	mov	r1, r3
 8008310:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008312:	2b00      	cmp	r3, #0
 8008314:	d10f      	bne.n	8008336 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68da      	ldr	r2, [r3, #12]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008324:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68da      	ldr	r2, [r3, #12]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008334:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008336:	2300      	movs	r3, #0
 8008338:	e000      	b.n	800833c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800833a:	2302      	movs	r3, #2
  }
}
 800833c:	4618      	mov	r0, r3
 800833e:	3714      	adds	r7, #20
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68da      	ldr	r2, [r3, #12]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800835e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2220      	movs	r2, #32
 8008364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f7ff fc17 	bl	8007b9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b08c      	sub	sp, #48	@ 0x30
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8008380:	2300      	movs	r3, #0
 8008382:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8008384:	2300      	movs	r3, #0
 8008386:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800838e:	b2db      	uxtb	r3, r3
 8008390:	2b22      	cmp	r3, #34	@ 0x22
 8008392:	f040 80aa 	bne.w	80084ea <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800839e:	d115      	bne.n	80083cc <UART_Receive_IT+0x54>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d111      	bne.n	80083cc <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ba:	b29a      	uxth	r2, r3
 80083bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c4:	1c9a      	adds	r2, r3, #2
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80083ca:	e024      	b.n	8008416 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083da:	d007      	beq.n	80083ec <UART_Receive_IT+0x74>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d10a      	bne.n	80083fa <UART_Receive_IT+0x82>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d106      	bne.n	80083fa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	b2da      	uxtb	r2, r3
 80083f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083f6:	701a      	strb	r2, [r3, #0]
 80083f8:	e008      	b.n	800840c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	b2db      	uxtb	r3, r3
 8008402:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008406:	b2da      	uxtb	r2, r3
 8008408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800840a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008410:	1c5a      	adds	r2, r3, #1
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800841a:	b29b      	uxth	r3, r3
 800841c:	3b01      	subs	r3, #1
 800841e:	b29b      	uxth	r3, r3
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	4619      	mov	r1, r3
 8008424:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008426:	2b00      	cmp	r3, #0
 8008428:	d15d      	bne.n	80084e6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68da      	ldr	r2, [r3, #12]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f022 0220 	bic.w	r2, r2, #32
 8008438:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68da      	ldr	r2, [r3, #12]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008448:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	695a      	ldr	r2, [r3, #20]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f022 0201 	bic.w	r2, r2, #1
 8008458:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2220      	movs	r2, #32
 800845e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800846c:	2b01      	cmp	r3, #1
 800846e:	d135      	bne.n	80084dc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	330c      	adds	r3, #12
 800847c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	e853 3f00 	ldrex	r3, [r3]
 8008484:	613b      	str	r3, [r7, #16]
   return(result);
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	f023 0310 	bic.w	r3, r3, #16
 800848c:	627b      	str	r3, [r7, #36]	@ 0x24
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	330c      	adds	r3, #12
 8008494:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008496:	623a      	str	r2, [r7, #32]
 8008498:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849a:	69f9      	ldr	r1, [r7, #28]
 800849c:	6a3a      	ldr	r2, [r7, #32]
 800849e:	e841 2300 	strex	r3, r2, [r1]
 80084a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1e5      	bne.n	8008476 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 0310 	and.w	r3, r3, #16
 80084b4:	2b10      	cmp	r3, #16
 80084b6:	d10a      	bne.n	80084ce <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80084b8:	2300      	movs	r3, #0
 80084ba:	60fb      	str	r3, [r7, #12]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	60fb      	str	r3, [r7, #12]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	60fb      	str	r3, [r7, #12]
 80084cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80084d2:	4619      	mov	r1, r3
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f7ff fb89 	bl	8007bec <HAL_UARTEx_RxEventCallback>
 80084da:	e002      	b.n	80084e2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f7f9 feeb 	bl	80022b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	e002      	b.n	80084ec <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80084e6:	2300      	movs	r3, #0
 80084e8:	e000      	b.n	80084ec <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80084ea:	2302      	movs	r3, #2
  }
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3730      	adds	r7, #48	@ 0x30
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084f8:	b0c0      	sub	sp, #256	@ 0x100
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800850c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008510:	68d9      	ldr	r1, [r3, #12]
 8008512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	ea40 0301 	orr.w	r3, r0, r1
 800851c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800851e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008522:	689a      	ldr	r2, [r3, #8]
 8008524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008528:	691b      	ldr	r3, [r3, #16]
 800852a:	431a      	orrs	r2, r3
 800852c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008530:	695b      	ldr	r3, [r3, #20]
 8008532:	431a      	orrs	r2, r3
 8008534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008538:	69db      	ldr	r3, [r3, #28]
 800853a:	4313      	orrs	r3, r2
 800853c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800854c:	f021 010c 	bic.w	r1, r1, #12
 8008550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800855a:	430b      	orrs	r3, r1
 800855c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800855e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	695b      	ldr	r3, [r3, #20]
 8008566:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800856a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800856e:	6999      	ldr	r1, [r3, #24]
 8008570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	ea40 0301 	orr.w	r3, r0, r1
 800857a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800857c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	4b8f      	ldr	r3, [pc, #572]	@ (80087c0 <UART_SetConfig+0x2cc>)
 8008584:	429a      	cmp	r2, r3
 8008586:	d005      	beq.n	8008594 <UART_SetConfig+0xa0>
 8008588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	4b8d      	ldr	r3, [pc, #564]	@ (80087c4 <UART_SetConfig+0x2d0>)
 8008590:	429a      	cmp	r2, r3
 8008592:	d104      	bne.n	800859e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008594:	f7fd fab0 	bl	8005af8 <HAL_RCC_GetPCLK2Freq>
 8008598:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800859c:	e003      	b.n	80085a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800859e:	f7fd fa97 	bl	8005ad0 <HAL_RCC_GetPCLK1Freq>
 80085a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085aa:	69db      	ldr	r3, [r3, #28]
 80085ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085b0:	f040 810c 	bne.w	80087cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80085b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085b8:	2200      	movs	r2, #0
 80085ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80085be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80085c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80085c6:	4622      	mov	r2, r4
 80085c8:	462b      	mov	r3, r5
 80085ca:	1891      	adds	r1, r2, r2
 80085cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80085ce:	415b      	adcs	r3, r3
 80085d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80085d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80085d6:	4621      	mov	r1, r4
 80085d8:	eb12 0801 	adds.w	r8, r2, r1
 80085dc:	4629      	mov	r1, r5
 80085de:	eb43 0901 	adc.w	r9, r3, r1
 80085e2:	f04f 0200 	mov.w	r2, #0
 80085e6:	f04f 0300 	mov.w	r3, #0
 80085ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80085ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80085f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80085f6:	4690      	mov	r8, r2
 80085f8:	4699      	mov	r9, r3
 80085fa:	4623      	mov	r3, r4
 80085fc:	eb18 0303 	adds.w	r3, r8, r3
 8008600:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008604:	462b      	mov	r3, r5
 8008606:	eb49 0303 	adc.w	r3, r9, r3
 800860a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800860e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800861a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800861e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008622:	460b      	mov	r3, r1
 8008624:	18db      	adds	r3, r3, r3
 8008626:	653b      	str	r3, [r7, #80]	@ 0x50
 8008628:	4613      	mov	r3, r2
 800862a:	eb42 0303 	adc.w	r3, r2, r3
 800862e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008630:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008634:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008638:	f7f8 fb46 	bl	8000cc8 <__aeabi_uldivmod>
 800863c:	4602      	mov	r2, r0
 800863e:	460b      	mov	r3, r1
 8008640:	4b61      	ldr	r3, [pc, #388]	@ (80087c8 <UART_SetConfig+0x2d4>)
 8008642:	fba3 2302 	umull	r2, r3, r3, r2
 8008646:	095b      	lsrs	r3, r3, #5
 8008648:	011c      	lsls	r4, r3, #4
 800864a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800864e:	2200      	movs	r2, #0
 8008650:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008654:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008658:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800865c:	4642      	mov	r2, r8
 800865e:	464b      	mov	r3, r9
 8008660:	1891      	adds	r1, r2, r2
 8008662:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008664:	415b      	adcs	r3, r3
 8008666:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008668:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800866c:	4641      	mov	r1, r8
 800866e:	eb12 0a01 	adds.w	sl, r2, r1
 8008672:	4649      	mov	r1, r9
 8008674:	eb43 0b01 	adc.w	fp, r3, r1
 8008678:	f04f 0200 	mov.w	r2, #0
 800867c:	f04f 0300 	mov.w	r3, #0
 8008680:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008684:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008688:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800868c:	4692      	mov	sl, r2
 800868e:	469b      	mov	fp, r3
 8008690:	4643      	mov	r3, r8
 8008692:	eb1a 0303 	adds.w	r3, sl, r3
 8008696:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800869a:	464b      	mov	r3, r9
 800869c:	eb4b 0303 	adc.w	r3, fp, r3
 80086a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80086a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80086b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80086b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80086b8:	460b      	mov	r3, r1
 80086ba:	18db      	adds	r3, r3, r3
 80086bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80086be:	4613      	mov	r3, r2
 80086c0:	eb42 0303 	adc.w	r3, r2, r3
 80086c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80086c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80086ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80086ce:	f7f8 fafb 	bl	8000cc8 <__aeabi_uldivmod>
 80086d2:	4602      	mov	r2, r0
 80086d4:	460b      	mov	r3, r1
 80086d6:	4611      	mov	r1, r2
 80086d8:	4b3b      	ldr	r3, [pc, #236]	@ (80087c8 <UART_SetConfig+0x2d4>)
 80086da:	fba3 2301 	umull	r2, r3, r3, r1
 80086de:	095b      	lsrs	r3, r3, #5
 80086e0:	2264      	movs	r2, #100	@ 0x64
 80086e2:	fb02 f303 	mul.w	r3, r2, r3
 80086e6:	1acb      	subs	r3, r1, r3
 80086e8:	00db      	lsls	r3, r3, #3
 80086ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80086ee:	4b36      	ldr	r3, [pc, #216]	@ (80087c8 <UART_SetConfig+0x2d4>)
 80086f0:	fba3 2302 	umull	r2, r3, r3, r2
 80086f4:	095b      	lsrs	r3, r3, #5
 80086f6:	005b      	lsls	r3, r3, #1
 80086f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80086fc:	441c      	add	r4, r3
 80086fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008702:	2200      	movs	r2, #0
 8008704:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008708:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800870c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008710:	4642      	mov	r2, r8
 8008712:	464b      	mov	r3, r9
 8008714:	1891      	adds	r1, r2, r2
 8008716:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008718:	415b      	adcs	r3, r3
 800871a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800871c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008720:	4641      	mov	r1, r8
 8008722:	1851      	adds	r1, r2, r1
 8008724:	6339      	str	r1, [r7, #48]	@ 0x30
 8008726:	4649      	mov	r1, r9
 8008728:	414b      	adcs	r3, r1
 800872a:	637b      	str	r3, [r7, #52]	@ 0x34
 800872c:	f04f 0200 	mov.w	r2, #0
 8008730:	f04f 0300 	mov.w	r3, #0
 8008734:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008738:	4659      	mov	r1, fp
 800873a:	00cb      	lsls	r3, r1, #3
 800873c:	4651      	mov	r1, sl
 800873e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008742:	4651      	mov	r1, sl
 8008744:	00ca      	lsls	r2, r1, #3
 8008746:	4610      	mov	r0, r2
 8008748:	4619      	mov	r1, r3
 800874a:	4603      	mov	r3, r0
 800874c:	4642      	mov	r2, r8
 800874e:	189b      	adds	r3, r3, r2
 8008750:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008754:	464b      	mov	r3, r9
 8008756:	460a      	mov	r2, r1
 8008758:	eb42 0303 	adc.w	r3, r2, r3
 800875c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800876c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008770:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008774:	460b      	mov	r3, r1
 8008776:	18db      	adds	r3, r3, r3
 8008778:	62bb      	str	r3, [r7, #40]	@ 0x28
 800877a:	4613      	mov	r3, r2
 800877c:	eb42 0303 	adc.w	r3, r2, r3
 8008780:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008782:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008786:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800878a:	f7f8 fa9d 	bl	8000cc8 <__aeabi_uldivmod>
 800878e:	4602      	mov	r2, r0
 8008790:	460b      	mov	r3, r1
 8008792:	4b0d      	ldr	r3, [pc, #52]	@ (80087c8 <UART_SetConfig+0x2d4>)
 8008794:	fba3 1302 	umull	r1, r3, r3, r2
 8008798:	095b      	lsrs	r3, r3, #5
 800879a:	2164      	movs	r1, #100	@ 0x64
 800879c:	fb01 f303 	mul.w	r3, r1, r3
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	00db      	lsls	r3, r3, #3
 80087a4:	3332      	adds	r3, #50	@ 0x32
 80087a6:	4a08      	ldr	r2, [pc, #32]	@ (80087c8 <UART_SetConfig+0x2d4>)
 80087a8:	fba2 2303 	umull	r2, r3, r2, r3
 80087ac:	095b      	lsrs	r3, r3, #5
 80087ae:	f003 0207 	and.w	r2, r3, #7
 80087b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4422      	add	r2, r4
 80087ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80087bc:	e106      	b.n	80089cc <UART_SetConfig+0x4d8>
 80087be:	bf00      	nop
 80087c0:	40011000 	.word	0x40011000
 80087c4:	40011400 	.word	0x40011400
 80087c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087d0:	2200      	movs	r2, #0
 80087d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80087d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80087da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80087de:	4642      	mov	r2, r8
 80087e0:	464b      	mov	r3, r9
 80087e2:	1891      	adds	r1, r2, r2
 80087e4:	6239      	str	r1, [r7, #32]
 80087e6:	415b      	adcs	r3, r3
 80087e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80087ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80087ee:	4641      	mov	r1, r8
 80087f0:	1854      	adds	r4, r2, r1
 80087f2:	4649      	mov	r1, r9
 80087f4:	eb43 0501 	adc.w	r5, r3, r1
 80087f8:	f04f 0200 	mov.w	r2, #0
 80087fc:	f04f 0300 	mov.w	r3, #0
 8008800:	00eb      	lsls	r3, r5, #3
 8008802:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008806:	00e2      	lsls	r2, r4, #3
 8008808:	4614      	mov	r4, r2
 800880a:	461d      	mov	r5, r3
 800880c:	4643      	mov	r3, r8
 800880e:	18e3      	adds	r3, r4, r3
 8008810:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008814:	464b      	mov	r3, r9
 8008816:	eb45 0303 	adc.w	r3, r5, r3
 800881a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800881e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800882a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800882e:	f04f 0200 	mov.w	r2, #0
 8008832:	f04f 0300 	mov.w	r3, #0
 8008836:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800883a:	4629      	mov	r1, r5
 800883c:	008b      	lsls	r3, r1, #2
 800883e:	4621      	mov	r1, r4
 8008840:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008844:	4621      	mov	r1, r4
 8008846:	008a      	lsls	r2, r1, #2
 8008848:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800884c:	f7f8 fa3c 	bl	8000cc8 <__aeabi_uldivmod>
 8008850:	4602      	mov	r2, r0
 8008852:	460b      	mov	r3, r1
 8008854:	4b60      	ldr	r3, [pc, #384]	@ (80089d8 <UART_SetConfig+0x4e4>)
 8008856:	fba3 2302 	umull	r2, r3, r3, r2
 800885a:	095b      	lsrs	r3, r3, #5
 800885c:	011c      	lsls	r4, r3, #4
 800885e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008862:	2200      	movs	r2, #0
 8008864:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008868:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800886c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008870:	4642      	mov	r2, r8
 8008872:	464b      	mov	r3, r9
 8008874:	1891      	adds	r1, r2, r2
 8008876:	61b9      	str	r1, [r7, #24]
 8008878:	415b      	adcs	r3, r3
 800887a:	61fb      	str	r3, [r7, #28]
 800887c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008880:	4641      	mov	r1, r8
 8008882:	1851      	adds	r1, r2, r1
 8008884:	6139      	str	r1, [r7, #16]
 8008886:	4649      	mov	r1, r9
 8008888:	414b      	adcs	r3, r1
 800888a:	617b      	str	r3, [r7, #20]
 800888c:	f04f 0200 	mov.w	r2, #0
 8008890:	f04f 0300 	mov.w	r3, #0
 8008894:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008898:	4659      	mov	r1, fp
 800889a:	00cb      	lsls	r3, r1, #3
 800889c:	4651      	mov	r1, sl
 800889e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088a2:	4651      	mov	r1, sl
 80088a4:	00ca      	lsls	r2, r1, #3
 80088a6:	4610      	mov	r0, r2
 80088a8:	4619      	mov	r1, r3
 80088aa:	4603      	mov	r3, r0
 80088ac:	4642      	mov	r2, r8
 80088ae:	189b      	adds	r3, r3, r2
 80088b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80088b4:	464b      	mov	r3, r9
 80088b6:	460a      	mov	r2, r1
 80088b8:	eb42 0303 	adc.w	r3, r2, r3
 80088bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80088c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80088ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80088cc:	f04f 0200 	mov.w	r2, #0
 80088d0:	f04f 0300 	mov.w	r3, #0
 80088d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80088d8:	4649      	mov	r1, r9
 80088da:	008b      	lsls	r3, r1, #2
 80088dc:	4641      	mov	r1, r8
 80088de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80088e2:	4641      	mov	r1, r8
 80088e4:	008a      	lsls	r2, r1, #2
 80088e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80088ea:	f7f8 f9ed 	bl	8000cc8 <__aeabi_uldivmod>
 80088ee:	4602      	mov	r2, r0
 80088f0:	460b      	mov	r3, r1
 80088f2:	4611      	mov	r1, r2
 80088f4:	4b38      	ldr	r3, [pc, #224]	@ (80089d8 <UART_SetConfig+0x4e4>)
 80088f6:	fba3 2301 	umull	r2, r3, r3, r1
 80088fa:	095b      	lsrs	r3, r3, #5
 80088fc:	2264      	movs	r2, #100	@ 0x64
 80088fe:	fb02 f303 	mul.w	r3, r2, r3
 8008902:	1acb      	subs	r3, r1, r3
 8008904:	011b      	lsls	r3, r3, #4
 8008906:	3332      	adds	r3, #50	@ 0x32
 8008908:	4a33      	ldr	r2, [pc, #204]	@ (80089d8 <UART_SetConfig+0x4e4>)
 800890a:	fba2 2303 	umull	r2, r3, r2, r3
 800890e:	095b      	lsrs	r3, r3, #5
 8008910:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008914:	441c      	add	r4, r3
 8008916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800891a:	2200      	movs	r2, #0
 800891c:	673b      	str	r3, [r7, #112]	@ 0x70
 800891e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008920:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008924:	4642      	mov	r2, r8
 8008926:	464b      	mov	r3, r9
 8008928:	1891      	adds	r1, r2, r2
 800892a:	60b9      	str	r1, [r7, #8]
 800892c:	415b      	adcs	r3, r3
 800892e:	60fb      	str	r3, [r7, #12]
 8008930:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008934:	4641      	mov	r1, r8
 8008936:	1851      	adds	r1, r2, r1
 8008938:	6039      	str	r1, [r7, #0]
 800893a:	4649      	mov	r1, r9
 800893c:	414b      	adcs	r3, r1
 800893e:	607b      	str	r3, [r7, #4]
 8008940:	f04f 0200 	mov.w	r2, #0
 8008944:	f04f 0300 	mov.w	r3, #0
 8008948:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800894c:	4659      	mov	r1, fp
 800894e:	00cb      	lsls	r3, r1, #3
 8008950:	4651      	mov	r1, sl
 8008952:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008956:	4651      	mov	r1, sl
 8008958:	00ca      	lsls	r2, r1, #3
 800895a:	4610      	mov	r0, r2
 800895c:	4619      	mov	r1, r3
 800895e:	4603      	mov	r3, r0
 8008960:	4642      	mov	r2, r8
 8008962:	189b      	adds	r3, r3, r2
 8008964:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008966:	464b      	mov	r3, r9
 8008968:	460a      	mov	r2, r1
 800896a:	eb42 0303 	adc.w	r3, r2, r3
 800896e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	663b      	str	r3, [r7, #96]	@ 0x60
 800897a:	667a      	str	r2, [r7, #100]	@ 0x64
 800897c:	f04f 0200 	mov.w	r2, #0
 8008980:	f04f 0300 	mov.w	r3, #0
 8008984:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008988:	4649      	mov	r1, r9
 800898a:	008b      	lsls	r3, r1, #2
 800898c:	4641      	mov	r1, r8
 800898e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008992:	4641      	mov	r1, r8
 8008994:	008a      	lsls	r2, r1, #2
 8008996:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800899a:	f7f8 f995 	bl	8000cc8 <__aeabi_uldivmod>
 800899e:	4602      	mov	r2, r0
 80089a0:	460b      	mov	r3, r1
 80089a2:	4b0d      	ldr	r3, [pc, #52]	@ (80089d8 <UART_SetConfig+0x4e4>)
 80089a4:	fba3 1302 	umull	r1, r3, r3, r2
 80089a8:	095b      	lsrs	r3, r3, #5
 80089aa:	2164      	movs	r1, #100	@ 0x64
 80089ac:	fb01 f303 	mul.w	r3, r1, r3
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	011b      	lsls	r3, r3, #4
 80089b4:	3332      	adds	r3, #50	@ 0x32
 80089b6:	4a08      	ldr	r2, [pc, #32]	@ (80089d8 <UART_SetConfig+0x4e4>)
 80089b8:	fba2 2303 	umull	r2, r3, r2, r3
 80089bc:	095b      	lsrs	r3, r3, #5
 80089be:	f003 020f 	and.w	r2, r3, #15
 80089c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4422      	add	r2, r4
 80089ca:	609a      	str	r2, [r3, #8]
}
 80089cc:	bf00      	nop
 80089ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80089d2:	46bd      	mov	sp, r7
 80089d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089d8:	51eb851f 	.word	0x51eb851f

080089dc <atof>:
 80089dc:	2100      	movs	r1, #0
 80089de:	f000 be09 	b.w	80095f4 <strtod>

080089e2 <sulp>:
 80089e2:	b570      	push	{r4, r5, r6, lr}
 80089e4:	4604      	mov	r4, r0
 80089e6:	460d      	mov	r5, r1
 80089e8:	ec45 4b10 	vmov	d0, r4, r5
 80089ec:	4616      	mov	r6, r2
 80089ee:	f003 fdd3 	bl	800c598 <__ulp>
 80089f2:	ec51 0b10 	vmov	r0, r1, d0
 80089f6:	b17e      	cbz	r6, 8008a18 <sulp+0x36>
 80089f8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80089fc:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	dd09      	ble.n	8008a18 <sulp+0x36>
 8008a04:	051b      	lsls	r3, r3, #20
 8008a06:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008a0a:	2400      	movs	r4, #0
 8008a0c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008a10:	4622      	mov	r2, r4
 8008a12:	462b      	mov	r3, r5
 8008a14:	f7f7 fe10 	bl	8000638 <__aeabi_dmul>
 8008a18:	ec41 0b10 	vmov	d0, r0, r1
 8008a1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008a20 <_strtod_l>:
 8008a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a24:	b09f      	sub	sp, #124	@ 0x7c
 8008a26:	460c      	mov	r4, r1
 8008a28:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	921a      	str	r2, [sp, #104]	@ 0x68
 8008a2e:	9005      	str	r0, [sp, #20]
 8008a30:	f04f 0a00 	mov.w	sl, #0
 8008a34:	f04f 0b00 	mov.w	fp, #0
 8008a38:	460a      	mov	r2, r1
 8008a3a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a3c:	7811      	ldrb	r1, [r2, #0]
 8008a3e:	292b      	cmp	r1, #43	@ 0x2b
 8008a40:	d04a      	beq.n	8008ad8 <_strtod_l+0xb8>
 8008a42:	d838      	bhi.n	8008ab6 <_strtod_l+0x96>
 8008a44:	290d      	cmp	r1, #13
 8008a46:	d832      	bhi.n	8008aae <_strtod_l+0x8e>
 8008a48:	2908      	cmp	r1, #8
 8008a4a:	d832      	bhi.n	8008ab2 <_strtod_l+0x92>
 8008a4c:	2900      	cmp	r1, #0
 8008a4e:	d03b      	beq.n	8008ac8 <_strtod_l+0xa8>
 8008a50:	2200      	movs	r2, #0
 8008a52:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a54:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008a56:	782a      	ldrb	r2, [r5, #0]
 8008a58:	2a30      	cmp	r2, #48	@ 0x30
 8008a5a:	f040 80b2 	bne.w	8008bc2 <_strtod_l+0x1a2>
 8008a5e:	786a      	ldrb	r2, [r5, #1]
 8008a60:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008a64:	2a58      	cmp	r2, #88	@ 0x58
 8008a66:	d16e      	bne.n	8008b46 <_strtod_l+0x126>
 8008a68:	9302      	str	r3, [sp, #8]
 8008a6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a6c:	9301      	str	r3, [sp, #4]
 8008a6e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	4a8f      	ldr	r2, [pc, #572]	@ (8008cb0 <_strtod_l+0x290>)
 8008a74:	9805      	ldr	r0, [sp, #20]
 8008a76:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008a78:	a919      	add	r1, sp, #100	@ 0x64
 8008a7a:	f002 fe87 	bl	800b78c <__gethex>
 8008a7e:	f010 060f 	ands.w	r6, r0, #15
 8008a82:	4604      	mov	r4, r0
 8008a84:	d005      	beq.n	8008a92 <_strtod_l+0x72>
 8008a86:	2e06      	cmp	r6, #6
 8008a88:	d128      	bne.n	8008adc <_strtod_l+0xbc>
 8008a8a:	3501      	adds	r5, #1
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008a90:	930e      	str	r3, [sp, #56]	@ 0x38
 8008a92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	f040 858e 	bne.w	80095b6 <_strtod_l+0xb96>
 8008a9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a9c:	b1cb      	cbz	r3, 8008ad2 <_strtod_l+0xb2>
 8008a9e:	4652      	mov	r2, sl
 8008aa0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008aa4:	ec43 2b10 	vmov	d0, r2, r3
 8008aa8:	b01f      	add	sp, #124	@ 0x7c
 8008aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aae:	2920      	cmp	r1, #32
 8008ab0:	d1ce      	bne.n	8008a50 <_strtod_l+0x30>
 8008ab2:	3201      	adds	r2, #1
 8008ab4:	e7c1      	b.n	8008a3a <_strtod_l+0x1a>
 8008ab6:	292d      	cmp	r1, #45	@ 0x2d
 8008ab8:	d1ca      	bne.n	8008a50 <_strtod_l+0x30>
 8008aba:	2101      	movs	r1, #1
 8008abc:	910e      	str	r1, [sp, #56]	@ 0x38
 8008abe:	1c51      	adds	r1, r2, #1
 8008ac0:	9119      	str	r1, [sp, #100]	@ 0x64
 8008ac2:	7852      	ldrb	r2, [r2, #1]
 8008ac4:	2a00      	cmp	r2, #0
 8008ac6:	d1c5      	bne.n	8008a54 <_strtod_l+0x34>
 8008ac8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008aca:	9419      	str	r4, [sp, #100]	@ 0x64
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f040 8570 	bne.w	80095b2 <_strtod_l+0xb92>
 8008ad2:	4652      	mov	r2, sl
 8008ad4:	465b      	mov	r3, fp
 8008ad6:	e7e5      	b.n	8008aa4 <_strtod_l+0x84>
 8008ad8:	2100      	movs	r1, #0
 8008ada:	e7ef      	b.n	8008abc <_strtod_l+0x9c>
 8008adc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008ade:	b13a      	cbz	r2, 8008af0 <_strtod_l+0xd0>
 8008ae0:	2135      	movs	r1, #53	@ 0x35
 8008ae2:	a81c      	add	r0, sp, #112	@ 0x70
 8008ae4:	f003 fe52 	bl	800c78c <__copybits>
 8008ae8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008aea:	9805      	ldr	r0, [sp, #20]
 8008aec:	f003 fa28 	bl	800bf40 <_Bfree>
 8008af0:	3e01      	subs	r6, #1
 8008af2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008af4:	2e04      	cmp	r6, #4
 8008af6:	d806      	bhi.n	8008b06 <_strtod_l+0xe6>
 8008af8:	e8df f006 	tbb	[pc, r6]
 8008afc:	201d0314 	.word	0x201d0314
 8008b00:	14          	.byte	0x14
 8008b01:	00          	.byte	0x00
 8008b02:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008b06:	05e1      	lsls	r1, r4, #23
 8008b08:	bf48      	it	mi
 8008b0a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008b0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008b12:	0d1b      	lsrs	r3, r3, #20
 8008b14:	051b      	lsls	r3, r3, #20
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d1bb      	bne.n	8008a92 <_strtod_l+0x72>
 8008b1a:	f001 fedf 	bl	800a8dc <__errno>
 8008b1e:	2322      	movs	r3, #34	@ 0x22
 8008b20:	6003      	str	r3, [r0, #0]
 8008b22:	e7b6      	b.n	8008a92 <_strtod_l+0x72>
 8008b24:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008b28:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008b2c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008b30:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008b34:	e7e7      	b.n	8008b06 <_strtod_l+0xe6>
 8008b36:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8008cb8 <_strtod_l+0x298>
 8008b3a:	e7e4      	b.n	8008b06 <_strtod_l+0xe6>
 8008b3c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008b40:	f04f 3aff 	mov.w	sl, #4294967295
 8008b44:	e7df      	b.n	8008b06 <_strtod_l+0xe6>
 8008b46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b48:	1c5a      	adds	r2, r3, #1
 8008b4a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b4c:	785b      	ldrb	r3, [r3, #1]
 8008b4e:	2b30      	cmp	r3, #48	@ 0x30
 8008b50:	d0f9      	beq.n	8008b46 <_strtod_l+0x126>
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d09d      	beq.n	8008a92 <_strtod_l+0x72>
 8008b56:	2301      	movs	r3, #1
 8008b58:	2700      	movs	r7, #0
 8008b5a:	9308      	str	r3, [sp, #32]
 8008b5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b5e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b60:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008b62:	46b9      	mov	r9, r7
 8008b64:	220a      	movs	r2, #10
 8008b66:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008b68:	7805      	ldrb	r5, [r0, #0]
 8008b6a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008b6e:	b2d9      	uxtb	r1, r3
 8008b70:	2909      	cmp	r1, #9
 8008b72:	d928      	bls.n	8008bc6 <_strtod_l+0x1a6>
 8008b74:	494f      	ldr	r1, [pc, #316]	@ (8008cb4 <_strtod_l+0x294>)
 8008b76:	2201      	movs	r2, #1
 8008b78:	f001 fe29 	bl	800a7ce <strncmp>
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	d032      	beq.n	8008be6 <_strtod_l+0x1c6>
 8008b80:	2000      	movs	r0, #0
 8008b82:	462a      	mov	r2, r5
 8008b84:	900a      	str	r0, [sp, #40]	@ 0x28
 8008b86:	464d      	mov	r5, r9
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2a65      	cmp	r2, #101	@ 0x65
 8008b8c:	d001      	beq.n	8008b92 <_strtod_l+0x172>
 8008b8e:	2a45      	cmp	r2, #69	@ 0x45
 8008b90:	d114      	bne.n	8008bbc <_strtod_l+0x19c>
 8008b92:	b91d      	cbnz	r5, 8008b9c <_strtod_l+0x17c>
 8008b94:	9a08      	ldr	r2, [sp, #32]
 8008b96:	4302      	orrs	r2, r0
 8008b98:	d096      	beq.n	8008ac8 <_strtod_l+0xa8>
 8008b9a:	2500      	movs	r5, #0
 8008b9c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008b9e:	1c62      	adds	r2, r4, #1
 8008ba0:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ba2:	7862      	ldrb	r2, [r4, #1]
 8008ba4:	2a2b      	cmp	r2, #43	@ 0x2b
 8008ba6:	d07a      	beq.n	8008c9e <_strtod_l+0x27e>
 8008ba8:	2a2d      	cmp	r2, #45	@ 0x2d
 8008baa:	d07e      	beq.n	8008caa <_strtod_l+0x28a>
 8008bac:	f04f 0c00 	mov.w	ip, #0
 8008bb0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008bb4:	2909      	cmp	r1, #9
 8008bb6:	f240 8085 	bls.w	8008cc4 <_strtod_l+0x2a4>
 8008bba:	9419      	str	r4, [sp, #100]	@ 0x64
 8008bbc:	f04f 0800 	mov.w	r8, #0
 8008bc0:	e0a5      	b.n	8008d0e <_strtod_l+0x2ee>
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e7c8      	b.n	8008b58 <_strtod_l+0x138>
 8008bc6:	f1b9 0f08 	cmp.w	r9, #8
 8008bca:	bfd8      	it	le
 8008bcc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008bce:	f100 0001 	add.w	r0, r0, #1
 8008bd2:	bfda      	itte	le
 8008bd4:	fb02 3301 	mlale	r3, r2, r1, r3
 8008bd8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008bda:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008bde:	f109 0901 	add.w	r9, r9, #1
 8008be2:	9019      	str	r0, [sp, #100]	@ 0x64
 8008be4:	e7bf      	b.n	8008b66 <_strtod_l+0x146>
 8008be6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008be8:	1c5a      	adds	r2, r3, #1
 8008bea:	9219      	str	r2, [sp, #100]	@ 0x64
 8008bec:	785a      	ldrb	r2, [r3, #1]
 8008bee:	f1b9 0f00 	cmp.w	r9, #0
 8008bf2:	d03b      	beq.n	8008c6c <_strtod_l+0x24c>
 8008bf4:	900a      	str	r0, [sp, #40]	@ 0x28
 8008bf6:	464d      	mov	r5, r9
 8008bf8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008bfc:	2b09      	cmp	r3, #9
 8008bfe:	d912      	bls.n	8008c26 <_strtod_l+0x206>
 8008c00:	2301      	movs	r3, #1
 8008c02:	e7c2      	b.n	8008b8a <_strtod_l+0x16a>
 8008c04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c06:	1c5a      	adds	r2, r3, #1
 8008c08:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c0a:	785a      	ldrb	r2, [r3, #1]
 8008c0c:	3001      	adds	r0, #1
 8008c0e:	2a30      	cmp	r2, #48	@ 0x30
 8008c10:	d0f8      	beq.n	8008c04 <_strtod_l+0x1e4>
 8008c12:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008c16:	2b08      	cmp	r3, #8
 8008c18:	f200 84d2 	bhi.w	80095c0 <_strtod_l+0xba0>
 8008c1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c1e:	900a      	str	r0, [sp, #40]	@ 0x28
 8008c20:	2000      	movs	r0, #0
 8008c22:	930c      	str	r3, [sp, #48]	@ 0x30
 8008c24:	4605      	mov	r5, r0
 8008c26:	3a30      	subs	r2, #48	@ 0x30
 8008c28:	f100 0301 	add.w	r3, r0, #1
 8008c2c:	d018      	beq.n	8008c60 <_strtod_l+0x240>
 8008c2e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c30:	4419      	add	r1, r3
 8008c32:	910a      	str	r1, [sp, #40]	@ 0x28
 8008c34:	462e      	mov	r6, r5
 8008c36:	f04f 0e0a 	mov.w	lr, #10
 8008c3a:	1c71      	adds	r1, r6, #1
 8008c3c:	eba1 0c05 	sub.w	ip, r1, r5
 8008c40:	4563      	cmp	r3, ip
 8008c42:	dc15      	bgt.n	8008c70 <_strtod_l+0x250>
 8008c44:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008c48:	182b      	adds	r3, r5, r0
 8008c4a:	2b08      	cmp	r3, #8
 8008c4c:	f105 0501 	add.w	r5, r5, #1
 8008c50:	4405      	add	r5, r0
 8008c52:	dc1a      	bgt.n	8008c8a <_strtod_l+0x26a>
 8008c54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008c56:	230a      	movs	r3, #10
 8008c58:	fb03 2301 	mla	r3, r3, r1, r2
 8008c5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c5e:	2300      	movs	r3, #0
 8008c60:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c62:	1c51      	adds	r1, r2, #1
 8008c64:	9119      	str	r1, [sp, #100]	@ 0x64
 8008c66:	7852      	ldrb	r2, [r2, #1]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	e7c5      	b.n	8008bf8 <_strtod_l+0x1d8>
 8008c6c:	4648      	mov	r0, r9
 8008c6e:	e7ce      	b.n	8008c0e <_strtod_l+0x1ee>
 8008c70:	2e08      	cmp	r6, #8
 8008c72:	dc05      	bgt.n	8008c80 <_strtod_l+0x260>
 8008c74:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008c76:	fb0e f606 	mul.w	r6, lr, r6
 8008c7a:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008c7c:	460e      	mov	r6, r1
 8008c7e:	e7dc      	b.n	8008c3a <_strtod_l+0x21a>
 8008c80:	2910      	cmp	r1, #16
 8008c82:	bfd8      	it	le
 8008c84:	fb0e f707 	mulle.w	r7, lr, r7
 8008c88:	e7f8      	b.n	8008c7c <_strtod_l+0x25c>
 8008c8a:	2b0f      	cmp	r3, #15
 8008c8c:	bfdc      	itt	le
 8008c8e:	230a      	movle	r3, #10
 8008c90:	fb03 2707 	mlale	r7, r3, r7, r2
 8008c94:	e7e3      	b.n	8008c5e <_strtod_l+0x23e>
 8008c96:	2300      	movs	r3, #0
 8008c98:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e77a      	b.n	8008b94 <_strtod_l+0x174>
 8008c9e:	f04f 0c00 	mov.w	ip, #0
 8008ca2:	1ca2      	adds	r2, r4, #2
 8008ca4:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ca6:	78a2      	ldrb	r2, [r4, #2]
 8008ca8:	e782      	b.n	8008bb0 <_strtod_l+0x190>
 8008caa:	f04f 0c01 	mov.w	ip, #1
 8008cae:	e7f8      	b.n	8008ca2 <_strtod_l+0x282>
 8008cb0:	0800d82c 	.word	0x0800d82c
 8008cb4:	0800d640 	.word	0x0800d640
 8008cb8:	7ff00000 	.word	0x7ff00000
 8008cbc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008cbe:	1c51      	adds	r1, r2, #1
 8008cc0:	9119      	str	r1, [sp, #100]	@ 0x64
 8008cc2:	7852      	ldrb	r2, [r2, #1]
 8008cc4:	2a30      	cmp	r2, #48	@ 0x30
 8008cc6:	d0f9      	beq.n	8008cbc <_strtod_l+0x29c>
 8008cc8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008ccc:	2908      	cmp	r1, #8
 8008cce:	f63f af75 	bhi.w	8008bbc <_strtod_l+0x19c>
 8008cd2:	3a30      	subs	r2, #48	@ 0x30
 8008cd4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008cd6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008cd8:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008cda:	f04f 080a 	mov.w	r8, #10
 8008cde:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ce0:	1c56      	adds	r6, r2, #1
 8008ce2:	9619      	str	r6, [sp, #100]	@ 0x64
 8008ce4:	7852      	ldrb	r2, [r2, #1]
 8008ce6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008cea:	f1be 0f09 	cmp.w	lr, #9
 8008cee:	d939      	bls.n	8008d64 <_strtod_l+0x344>
 8008cf0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008cf2:	1a76      	subs	r6, r6, r1
 8008cf4:	2e08      	cmp	r6, #8
 8008cf6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008cfa:	dc03      	bgt.n	8008d04 <_strtod_l+0x2e4>
 8008cfc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008cfe:	4588      	cmp	r8, r1
 8008d00:	bfa8      	it	ge
 8008d02:	4688      	movge	r8, r1
 8008d04:	f1bc 0f00 	cmp.w	ip, #0
 8008d08:	d001      	beq.n	8008d0e <_strtod_l+0x2ee>
 8008d0a:	f1c8 0800 	rsb	r8, r8, #0
 8008d0e:	2d00      	cmp	r5, #0
 8008d10:	d14e      	bne.n	8008db0 <_strtod_l+0x390>
 8008d12:	9908      	ldr	r1, [sp, #32]
 8008d14:	4308      	orrs	r0, r1
 8008d16:	f47f aebc 	bne.w	8008a92 <_strtod_l+0x72>
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f47f aed4 	bne.w	8008ac8 <_strtod_l+0xa8>
 8008d20:	2a69      	cmp	r2, #105	@ 0x69
 8008d22:	d028      	beq.n	8008d76 <_strtod_l+0x356>
 8008d24:	dc25      	bgt.n	8008d72 <_strtod_l+0x352>
 8008d26:	2a49      	cmp	r2, #73	@ 0x49
 8008d28:	d025      	beq.n	8008d76 <_strtod_l+0x356>
 8008d2a:	2a4e      	cmp	r2, #78	@ 0x4e
 8008d2c:	f47f aecc 	bne.w	8008ac8 <_strtod_l+0xa8>
 8008d30:	499a      	ldr	r1, [pc, #616]	@ (8008f9c <_strtod_l+0x57c>)
 8008d32:	a819      	add	r0, sp, #100	@ 0x64
 8008d34:	f002 ff4c 	bl	800bbd0 <__match>
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	f43f aec5 	beq.w	8008ac8 <_strtod_l+0xa8>
 8008d3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	2b28      	cmp	r3, #40	@ 0x28
 8008d44:	d12e      	bne.n	8008da4 <_strtod_l+0x384>
 8008d46:	4996      	ldr	r1, [pc, #600]	@ (8008fa0 <_strtod_l+0x580>)
 8008d48:	aa1c      	add	r2, sp, #112	@ 0x70
 8008d4a:	a819      	add	r0, sp, #100	@ 0x64
 8008d4c:	f002 ff54 	bl	800bbf8 <__hexnan>
 8008d50:	2805      	cmp	r0, #5
 8008d52:	d127      	bne.n	8008da4 <_strtod_l+0x384>
 8008d54:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008d56:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008d5a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008d5e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008d62:	e696      	b.n	8008a92 <_strtod_l+0x72>
 8008d64:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d66:	fb08 2101 	mla	r1, r8, r1, r2
 8008d6a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008d6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d70:	e7b5      	b.n	8008cde <_strtod_l+0x2be>
 8008d72:	2a6e      	cmp	r2, #110	@ 0x6e
 8008d74:	e7da      	b.n	8008d2c <_strtod_l+0x30c>
 8008d76:	498b      	ldr	r1, [pc, #556]	@ (8008fa4 <_strtod_l+0x584>)
 8008d78:	a819      	add	r0, sp, #100	@ 0x64
 8008d7a:	f002 ff29 	bl	800bbd0 <__match>
 8008d7e:	2800      	cmp	r0, #0
 8008d80:	f43f aea2 	beq.w	8008ac8 <_strtod_l+0xa8>
 8008d84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d86:	4988      	ldr	r1, [pc, #544]	@ (8008fa8 <_strtod_l+0x588>)
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	a819      	add	r0, sp, #100	@ 0x64
 8008d8c:	9319      	str	r3, [sp, #100]	@ 0x64
 8008d8e:	f002 ff1f 	bl	800bbd0 <__match>
 8008d92:	b910      	cbnz	r0, 8008d9a <_strtod_l+0x37a>
 8008d94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d96:	3301      	adds	r3, #1
 8008d98:	9319      	str	r3, [sp, #100]	@ 0x64
 8008d9a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8008fb8 <_strtod_l+0x598>
 8008d9e:	f04f 0a00 	mov.w	sl, #0
 8008da2:	e676      	b.n	8008a92 <_strtod_l+0x72>
 8008da4:	4881      	ldr	r0, [pc, #516]	@ (8008fac <_strtod_l+0x58c>)
 8008da6:	f001 fdd7 	bl	800a958 <nan>
 8008daa:	ec5b ab10 	vmov	sl, fp, d0
 8008dae:	e670      	b.n	8008a92 <_strtod_l+0x72>
 8008db0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008db2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008db4:	eba8 0303 	sub.w	r3, r8, r3
 8008db8:	f1b9 0f00 	cmp.w	r9, #0
 8008dbc:	bf08      	it	eq
 8008dbe:	46a9      	moveq	r9, r5
 8008dc0:	2d10      	cmp	r5, #16
 8008dc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dc4:	462c      	mov	r4, r5
 8008dc6:	bfa8      	it	ge
 8008dc8:	2410      	movge	r4, #16
 8008dca:	f7f7 fbbb 	bl	8000544 <__aeabi_ui2d>
 8008dce:	2d09      	cmp	r5, #9
 8008dd0:	4682      	mov	sl, r0
 8008dd2:	468b      	mov	fp, r1
 8008dd4:	dc13      	bgt.n	8008dfe <_strtod_l+0x3de>
 8008dd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f43f ae5a 	beq.w	8008a92 <_strtod_l+0x72>
 8008dde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008de0:	dd78      	ble.n	8008ed4 <_strtod_l+0x4b4>
 8008de2:	2b16      	cmp	r3, #22
 8008de4:	dc5f      	bgt.n	8008ea6 <_strtod_l+0x486>
 8008de6:	4972      	ldr	r1, [pc, #456]	@ (8008fb0 <_strtod_l+0x590>)
 8008de8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008dec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008df0:	4652      	mov	r2, sl
 8008df2:	465b      	mov	r3, fp
 8008df4:	f7f7 fc20 	bl	8000638 <__aeabi_dmul>
 8008df8:	4682      	mov	sl, r0
 8008dfa:	468b      	mov	fp, r1
 8008dfc:	e649      	b.n	8008a92 <_strtod_l+0x72>
 8008dfe:	4b6c      	ldr	r3, [pc, #432]	@ (8008fb0 <_strtod_l+0x590>)
 8008e00:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e04:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008e08:	f7f7 fc16 	bl	8000638 <__aeabi_dmul>
 8008e0c:	4682      	mov	sl, r0
 8008e0e:	4638      	mov	r0, r7
 8008e10:	468b      	mov	fp, r1
 8008e12:	f7f7 fb97 	bl	8000544 <__aeabi_ui2d>
 8008e16:	4602      	mov	r2, r0
 8008e18:	460b      	mov	r3, r1
 8008e1a:	4650      	mov	r0, sl
 8008e1c:	4659      	mov	r1, fp
 8008e1e:	f7f7 fa55 	bl	80002cc <__adddf3>
 8008e22:	2d0f      	cmp	r5, #15
 8008e24:	4682      	mov	sl, r0
 8008e26:	468b      	mov	fp, r1
 8008e28:	ddd5      	ble.n	8008dd6 <_strtod_l+0x3b6>
 8008e2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e2c:	1b2c      	subs	r4, r5, r4
 8008e2e:	441c      	add	r4, r3
 8008e30:	2c00      	cmp	r4, #0
 8008e32:	f340 8093 	ble.w	8008f5c <_strtod_l+0x53c>
 8008e36:	f014 030f 	ands.w	r3, r4, #15
 8008e3a:	d00a      	beq.n	8008e52 <_strtod_l+0x432>
 8008e3c:	495c      	ldr	r1, [pc, #368]	@ (8008fb0 <_strtod_l+0x590>)
 8008e3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e42:	4652      	mov	r2, sl
 8008e44:	465b      	mov	r3, fp
 8008e46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e4a:	f7f7 fbf5 	bl	8000638 <__aeabi_dmul>
 8008e4e:	4682      	mov	sl, r0
 8008e50:	468b      	mov	fp, r1
 8008e52:	f034 040f 	bics.w	r4, r4, #15
 8008e56:	d073      	beq.n	8008f40 <_strtod_l+0x520>
 8008e58:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008e5c:	dd49      	ble.n	8008ef2 <_strtod_l+0x4d2>
 8008e5e:	2400      	movs	r4, #0
 8008e60:	46a0      	mov	r8, r4
 8008e62:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008e64:	46a1      	mov	r9, r4
 8008e66:	9a05      	ldr	r2, [sp, #20]
 8008e68:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8008fb8 <_strtod_l+0x598>
 8008e6c:	2322      	movs	r3, #34	@ 0x22
 8008e6e:	6013      	str	r3, [r2, #0]
 8008e70:	f04f 0a00 	mov.w	sl, #0
 8008e74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	f43f ae0b 	beq.w	8008a92 <_strtod_l+0x72>
 8008e7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008e7e:	9805      	ldr	r0, [sp, #20]
 8008e80:	f003 f85e 	bl	800bf40 <_Bfree>
 8008e84:	9805      	ldr	r0, [sp, #20]
 8008e86:	4649      	mov	r1, r9
 8008e88:	f003 f85a 	bl	800bf40 <_Bfree>
 8008e8c:	9805      	ldr	r0, [sp, #20]
 8008e8e:	4641      	mov	r1, r8
 8008e90:	f003 f856 	bl	800bf40 <_Bfree>
 8008e94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008e96:	9805      	ldr	r0, [sp, #20]
 8008e98:	f003 f852 	bl	800bf40 <_Bfree>
 8008e9c:	9805      	ldr	r0, [sp, #20]
 8008e9e:	4621      	mov	r1, r4
 8008ea0:	f003 f84e 	bl	800bf40 <_Bfree>
 8008ea4:	e5f5      	b.n	8008a92 <_strtod_l+0x72>
 8008ea6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ea8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008eac:	4293      	cmp	r3, r2
 8008eae:	dbbc      	blt.n	8008e2a <_strtod_l+0x40a>
 8008eb0:	4c3f      	ldr	r4, [pc, #252]	@ (8008fb0 <_strtod_l+0x590>)
 8008eb2:	f1c5 050f 	rsb	r5, r5, #15
 8008eb6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008eba:	4652      	mov	r2, sl
 8008ebc:	465b      	mov	r3, fp
 8008ebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ec2:	f7f7 fbb9 	bl	8000638 <__aeabi_dmul>
 8008ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ec8:	1b5d      	subs	r5, r3, r5
 8008eca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008ece:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008ed2:	e78f      	b.n	8008df4 <_strtod_l+0x3d4>
 8008ed4:	3316      	adds	r3, #22
 8008ed6:	dba8      	blt.n	8008e2a <_strtod_l+0x40a>
 8008ed8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008eda:	eba3 0808 	sub.w	r8, r3, r8
 8008ede:	4b34      	ldr	r3, [pc, #208]	@ (8008fb0 <_strtod_l+0x590>)
 8008ee0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008ee4:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008ee8:	4650      	mov	r0, sl
 8008eea:	4659      	mov	r1, fp
 8008eec:	f7f7 fcce 	bl	800088c <__aeabi_ddiv>
 8008ef0:	e782      	b.n	8008df8 <_strtod_l+0x3d8>
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	4f2f      	ldr	r7, [pc, #188]	@ (8008fb4 <_strtod_l+0x594>)
 8008ef6:	1124      	asrs	r4, r4, #4
 8008ef8:	4650      	mov	r0, sl
 8008efa:	4659      	mov	r1, fp
 8008efc:	461e      	mov	r6, r3
 8008efe:	2c01      	cmp	r4, #1
 8008f00:	dc21      	bgt.n	8008f46 <_strtod_l+0x526>
 8008f02:	b10b      	cbz	r3, 8008f08 <_strtod_l+0x4e8>
 8008f04:	4682      	mov	sl, r0
 8008f06:	468b      	mov	fp, r1
 8008f08:	492a      	ldr	r1, [pc, #168]	@ (8008fb4 <_strtod_l+0x594>)
 8008f0a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008f0e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008f12:	4652      	mov	r2, sl
 8008f14:	465b      	mov	r3, fp
 8008f16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f1a:	f7f7 fb8d 	bl	8000638 <__aeabi_dmul>
 8008f1e:	4b26      	ldr	r3, [pc, #152]	@ (8008fb8 <_strtod_l+0x598>)
 8008f20:	460a      	mov	r2, r1
 8008f22:	400b      	ands	r3, r1
 8008f24:	4925      	ldr	r1, [pc, #148]	@ (8008fbc <_strtod_l+0x59c>)
 8008f26:	428b      	cmp	r3, r1
 8008f28:	4682      	mov	sl, r0
 8008f2a:	d898      	bhi.n	8008e5e <_strtod_l+0x43e>
 8008f2c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008f30:	428b      	cmp	r3, r1
 8008f32:	bf86      	itte	hi
 8008f34:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008fc0 <_strtod_l+0x5a0>
 8008f38:	f04f 3aff 	movhi.w	sl, #4294967295
 8008f3c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008f40:	2300      	movs	r3, #0
 8008f42:	9308      	str	r3, [sp, #32]
 8008f44:	e076      	b.n	8009034 <_strtod_l+0x614>
 8008f46:	07e2      	lsls	r2, r4, #31
 8008f48:	d504      	bpl.n	8008f54 <_strtod_l+0x534>
 8008f4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f4e:	f7f7 fb73 	bl	8000638 <__aeabi_dmul>
 8008f52:	2301      	movs	r3, #1
 8008f54:	3601      	adds	r6, #1
 8008f56:	1064      	asrs	r4, r4, #1
 8008f58:	3708      	adds	r7, #8
 8008f5a:	e7d0      	b.n	8008efe <_strtod_l+0x4de>
 8008f5c:	d0f0      	beq.n	8008f40 <_strtod_l+0x520>
 8008f5e:	4264      	negs	r4, r4
 8008f60:	f014 020f 	ands.w	r2, r4, #15
 8008f64:	d00a      	beq.n	8008f7c <_strtod_l+0x55c>
 8008f66:	4b12      	ldr	r3, [pc, #72]	@ (8008fb0 <_strtod_l+0x590>)
 8008f68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f6c:	4650      	mov	r0, sl
 8008f6e:	4659      	mov	r1, fp
 8008f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f74:	f7f7 fc8a 	bl	800088c <__aeabi_ddiv>
 8008f78:	4682      	mov	sl, r0
 8008f7a:	468b      	mov	fp, r1
 8008f7c:	1124      	asrs	r4, r4, #4
 8008f7e:	d0df      	beq.n	8008f40 <_strtod_l+0x520>
 8008f80:	2c1f      	cmp	r4, #31
 8008f82:	dd1f      	ble.n	8008fc4 <_strtod_l+0x5a4>
 8008f84:	2400      	movs	r4, #0
 8008f86:	46a0      	mov	r8, r4
 8008f88:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008f8a:	46a1      	mov	r9, r4
 8008f8c:	9a05      	ldr	r2, [sp, #20]
 8008f8e:	2322      	movs	r3, #34	@ 0x22
 8008f90:	f04f 0a00 	mov.w	sl, #0
 8008f94:	f04f 0b00 	mov.w	fp, #0
 8008f98:	6013      	str	r3, [r2, #0]
 8008f9a:	e76b      	b.n	8008e74 <_strtod_l+0x454>
 8008f9c:	0800d64f 	.word	0x0800d64f
 8008fa0:	0800d818 	.word	0x0800d818
 8008fa4:	0800d647 	.word	0x0800d647
 8008fa8:	0800d686 	.word	0x0800d686
 8008fac:	0800d815 	.word	0x0800d815
 8008fb0:	0800d9a0 	.word	0x0800d9a0
 8008fb4:	0800d978 	.word	0x0800d978
 8008fb8:	7ff00000 	.word	0x7ff00000
 8008fbc:	7ca00000 	.word	0x7ca00000
 8008fc0:	7fefffff 	.word	0x7fefffff
 8008fc4:	f014 0310 	ands.w	r3, r4, #16
 8008fc8:	bf18      	it	ne
 8008fca:	236a      	movne	r3, #106	@ 0x6a
 8008fcc:	4ea9      	ldr	r6, [pc, #676]	@ (8009274 <_strtod_l+0x854>)
 8008fce:	9308      	str	r3, [sp, #32]
 8008fd0:	4650      	mov	r0, sl
 8008fd2:	4659      	mov	r1, fp
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	07e7      	lsls	r7, r4, #31
 8008fd8:	d504      	bpl.n	8008fe4 <_strtod_l+0x5c4>
 8008fda:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008fde:	f7f7 fb2b 	bl	8000638 <__aeabi_dmul>
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	1064      	asrs	r4, r4, #1
 8008fe6:	f106 0608 	add.w	r6, r6, #8
 8008fea:	d1f4      	bne.n	8008fd6 <_strtod_l+0x5b6>
 8008fec:	b10b      	cbz	r3, 8008ff2 <_strtod_l+0x5d2>
 8008fee:	4682      	mov	sl, r0
 8008ff0:	468b      	mov	fp, r1
 8008ff2:	9b08      	ldr	r3, [sp, #32]
 8008ff4:	b1b3      	cbz	r3, 8009024 <_strtod_l+0x604>
 8008ff6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008ffa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	4659      	mov	r1, fp
 8009002:	dd0f      	ble.n	8009024 <_strtod_l+0x604>
 8009004:	2b1f      	cmp	r3, #31
 8009006:	dd56      	ble.n	80090b6 <_strtod_l+0x696>
 8009008:	2b34      	cmp	r3, #52	@ 0x34
 800900a:	bfde      	ittt	le
 800900c:	f04f 33ff 	movle.w	r3, #4294967295
 8009010:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009014:	4093      	lslle	r3, r2
 8009016:	f04f 0a00 	mov.w	sl, #0
 800901a:	bfcc      	ite	gt
 800901c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009020:	ea03 0b01 	andle.w	fp, r3, r1
 8009024:	2200      	movs	r2, #0
 8009026:	2300      	movs	r3, #0
 8009028:	4650      	mov	r0, sl
 800902a:	4659      	mov	r1, fp
 800902c:	f7f7 fd6c 	bl	8000b08 <__aeabi_dcmpeq>
 8009030:	2800      	cmp	r0, #0
 8009032:	d1a7      	bne.n	8008f84 <_strtod_l+0x564>
 8009034:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009036:	9300      	str	r3, [sp, #0]
 8009038:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800903a:	9805      	ldr	r0, [sp, #20]
 800903c:	462b      	mov	r3, r5
 800903e:	464a      	mov	r2, r9
 8009040:	f002 ffe6 	bl	800c010 <__s2b>
 8009044:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009046:	2800      	cmp	r0, #0
 8009048:	f43f af09 	beq.w	8008e5e <_strtod_l+0x43e>
 800904c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800904e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009050:	2a00      	cmp	r2, #0
 8009052:	eba3 0308 	sub.w	r3, r3, r8
 8009056:	bfa8      	it	ge
 8009058:	2300      	movge	r3, #0
 800905a:	9312      	str	r3, [sp, #72]	@ 0x48
 800905c:	2400      	movs	r4, #0
 800905e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009062:	9316      	str	r3, [sp, #88]	@ 0x58
 8009064:	46a0      	mov	r8, r4
 8009066:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009068:	9805      	ldr	r0, [sp, #20]
 800906a:	6859      	ldr	r1, [r3, #4]
 800906c:	f002 ff28 	bl	800bec0 <_Balloc>
 8009070:	4681      	mov	r9, r0
 8009072:	2800      	cmp	r0, #0
 8009074:	f43f aef7 	beq.w	8008e66 <_strtod_l+0x446>
 8009078:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800907a:	691a      	ldr	r2, [r3, #16]
 800907c:	3202      	adds	r2, #2
 800907e:	f103 010c 	add.w	r1, r3, #12
 8009082:	0092      	lsls	r2, r2, #2
 8009084:	300c      	adds	r0, #12
 8009086:	f001 fc56 	bl	800a936 <memcpy>
 800908a:	ec4b ab10 	vmov	d0, sl, fp
 800908e:	9805      	ldr	r0, [sp, #20]
 8009090:	aa1c      	add	r2, sp, #112	@ 0x70
 8009092:	a91b      	add	r1, sp, #108	@ 0x6c
 8009094:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009098:	f003 faee 	bl	800c678 <__d2b>
 800909c:	901a      	str	r0, [sp, #104]	@ 0x68
 800909e:	2800      	cmp	r0, #0
 80090a0:	f43f aee1 	beq.w	8008e66 <_strtod_l+0x446>
 80090a4:	9805      	ldr	r0, [sp, #20]
 80090a6:	2101      	movs	r1, #1
 80090a8:	f003 f848 	bl	800c13c <__i2b>
 80090ac:	4680      	mov	r8, r0
 80090ae:	b948      	cbnz	r0, 80090c4 <_strtod_l+0x6a4>
 80090b0:	f04f 0800 	mov.w	r8, #0
 80090b4:	e6d7      	b.n	8008e66 <_strtod_l+0x446>
 80090b6:	f04f 32ff 	mov.w	r2, #4294967295
 80090ba:	fa02 f303 	lsl.w	r3, r2, r3
 80090be:	ea03 0a0a 	and.w	sl, r3, sl
 80090c2:	e7af      	b.n	8009024 <_strtod_l+0x604>
 80090c4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80090c6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80090c8:	2d00      	cmp	r5, #0
 80090ca:	bfab      	itete	ge
 80090cc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80090ce:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80090d0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80090d2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80090d4:	bfac      	ite	ge
 80090d6:	18ef      	addge	r7, r5, r3
 80090d8:	1b5e      	sublt	r6, r3, r5
 80090da:	9b08      	ldr	r3, [sp, #32]
 80090dc:	1aed      	subs	r5, r5, r3
 80090de:	4415      	add	r5, r2
 80090e0:	4b65      	ldr	r3, [pc, #404]	@ (8009278 <_strtod_l+0x858>)
 80090e2:	3d01      	subs	r5, #1
 80090e4:	429d      	cmp	r5, r3
 80090e6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80090ea:	da50      	bge.n	800918e <_strtod_l+0x76e>
 80090ec:	1b5b      	subs	r3, r3, r5
 80090ee:	2b1f      	cmp	r3, #31
 80090f0:	eba2 0203 	sub.w	r2, r2, r3
 80090f4:	f04f 0101 	mov.w	r1, #1
 80090f8:	dc3d      	bgt.n	8009176 <_strtod_l+0x756>
 80090fa:	fa01 f303 	lsl.w	r3, r1, r3
 80090fe:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009100:	2300      	movs	r3, #0
 8009102:	9310      	str	r3, [sp, #64]	@ 0x40
 8009104:	18bd      	adds	r5, r7, r2
 8009106:	9b08      	ldr	r3, [sp, #32]
 8009108:	42af      	cmp	r7, r5
 800910a:	4416      	add	r6, r2
 800910c:	441e      	add	r6, r3
 800910e:	463b      	mov	r3, r7
 8009110:	bfa8      	it	ge
 8009112:	462b      	movge	r3, r5
 8009114:	42b3      	cmp	r3, r6
 8009116:	bfa8      	it	ge
 8009118:	4633      	movge	r3, r6
 800911a:	2b00      	cmp	r3, #0
 800911c:	bfc2      	ittt	gt
 800911e:	1aed      	subgt	r5, r5, r3
 8009120:	1af6      	subgt	r6, r6, r3
 8009122:	1aff      	subgt	r7, r7, r3
 8009124:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009126:	2b00      	cmp	r3, #0
 8009128:	dd16      	ble.n	8009158 <_strtod_l+0x738>
 800912a:	4641      	mov	r1, r8
 800912c:	9805      	ldr	r0, [sp, #20]
 800912e:	461a      	mov	r2, r3
 8009130:	f003 f8bc 	bl	800c2ac <__pow5mult>
 8009134:	4680      	mov	r8, r0
 8009136:	2800      	cmp	r0, #0
 8009138:	d0ba      	beq.n	80090b0 <_strtod_l+0x690>
 800913a:	4601      	mov	r1, r0
 800913c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800913e:	9805      	ldr	r0, [sp, #20]
 8009140:	f003 f812 	bl	800c168 <__multiply>
 8009144:	900a      	str	r0, [sp, #40]	@ 0x28
 8009146:	2800      	cmp	r0, #0
 8009148:	f43f ae8d 	beq.w	8008e66 <_strtod_l+0x446>
 800914c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800914e:	9805      	ldr	r0, [sp, #20]
 8009150:	f002 fef6 	bl	800bf40 <_Bfree>
 8009154:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009156:	931a      	str	r3, [sp, #104]	@ 0x68
 8009158:	2d00      	cmp	r5, #0
 800915a:	dc1d      	bgt.n	8009198 <_strtod_l+0x778>
 800915c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800915e:	2b00      	cmp	r3, #0
 8009160:	dd23      	ble.n	80091aa <_strtod_l+0x78a>
 8009162:	4649      	mov	r1, r9
 8009164:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009166:	9805      	ldr	r0, [sp, #20]
 8009168:	f003 f8a0 	bl	800c2ac <__pow5mult>
 800916c:	4681      	mov	r9, r0
 800916e:	b9e0      	cbnz	r0, 80091aa <_strtod_l+0x78a>
 8009170:	f04f 0900 	mov.w	r9, #0
 8009174:	e677      	b.n	8008e66 <_strtod_l+0x446>
 8009176:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800917a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800917e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009182:	35e2      	adds	r5, #226	@ 0xe2
 8009184:	fa01 f305 	lsl.w	r3, r1, r5
 8009188:	9310      	str	r3, [sp, #64]	@ 0x40
 800918a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800918c:	e7ba      	b.n	8009104 <_strtod_l+0x6e4>
 800918e:	2300      	movs	r3, #0
 8009190:	9310      	str	r3, [sp, #64]	@ 0x40
 8009192:	2301      	movs	r3, #1
 8009194:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009196:	e7b5      	b.n	8009104 <_strtod_l+0x6e4>
 8009198:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800919a:	9805      	ldr	r0, [sp, #20]
 800919c:	462a      	mov	r2, r5
 800919e:	f003 f8df 	bl	800c360 <__lshift>
 80091a2:	901a      	str	r0, [sp, #104]	@ 0x68
 80091a4:	2800      	cmp	r0, #0
 80091a6:	d1d9      	bne.n	800915c <_strtod_l+0x73c>
 80091a8:	e65d      	b.n	8008e66 <_strtod_l+0x446>
 80091aa:	2e00      	cmp	r6, #0
 80091ac:	dd07      	ble.n	80091be <_strtod_l+0x79e>
 80091ae:	4649      	mov	r1, r9
 80091b0:	9805      	ldr	r0, [sp, #20]
 80091b2:	4632      	mov	r2, r6
 80091b4:	f003 f8d4 	bl	800c360 <__lshift>
 80091b8:	4681      	mov	r9, r0
 80091ba:	2800      	cmp	r0, #0
 80091bc:	d0d8      	beq.n	8009170 <_strtod_l+0x750>
 80091be:	2f00      	cmp	r7, #0
 80091c0:	dd08      	ble.n	80091d4 <_strtod_l+0x7b4>
 80091c2:	4641      	mov	r1, r8
 80091c4:	9805      	ldr	r0, [sp, #20]
 80091c6:	463a      	mov	r2, r7
 80091c8:	f003 f8ca 	bl	800c360 <__lshift>
 80091cc:	4680      	mov	r8, r0
 80091ce:	2800      	cmp	r0, #0
 80091d0:	f43f ae49 	beq.w	8008e66 <_strtod_l+0x446>
 80091d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80091d6:	9805      	ldr	r0, [sp, #20]
 80091d8:	464a      	mov	r2, r9
 80091da:	f003 f949 	bl	800c470 <__mdiff>
 80091de:	4604      	mov	r4, r0
 80091e0:	2800      	cmp	r0, #0
 80091e2:	f43f ae40 	beq.w	8008e66 <_strtod_l+0x446>
 80091e6:	68c3      	ldr	r3, [r0, #12]
 80091e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80091ea:	2300      	movs	r3, #0
 80091ec:	60c3      	str	r3, [r0, #12]
 80091ee:	4641      	mov	r1, r8
 80091f0:	f003 f922 	bl	800c438 <__mcmp>
 80091f4:	2800      	cmp	r0, #0
 80091f6:	da45      	bge.n	8009284 <_strtod_l+0x864>
 80091f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091fa:	ea53 030a 	orrs.w	r3, r3, sl
 80091fe:	d16b      	bne.n	80092d8 <_strtod_l+0x8b8>
 8009200:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009204:	2b00      	cmp	r3, #0
 8009206:	d167      	bne.n	80092d8 <_strtod_l+0x8b8>
 8009208:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800920c:	0d1b      	lsrs	r3, r3, #20
 800920e:	051b      	lsls	r3, r3, #20
 8009210:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009214:	d960      	bls.n	80092d8 <_strtod_l+0x8b8>
 8009216:	6963      	ldr	r3, [r4, #20]
 8009218:	b913      	cbnz	r3, 8009220 <_strtod_l+0x800>
 800921a:	6923      	ldr	r3, [r4, #16]
 800921c:	2b01      	cmp	r3, #1
 800921e:	dd5b      	ble.n	80092d8 <_strtod_l+0x8b8>
 8009220:	4621      	mov	r1, r4
 8009222:	2201      	movs	r2, #1
 8009224:	9805      	ldr	r0, [sp, #20]
 8009226:	f003 f89b 	bl	800c360 <__lshift>
 800922a:	4641      	mov	r1, r8
 800922c:	4604      	mov	r4, r0
 800922e:	f003 f903 	bl	800c438 <__mcmp>
 8009232:	2800      	cmp	r0, #0
 8009234:	dd50      	ble.n	80092d8 <_strtod_l+0x8b8>
 8009236:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800923a:	9a08      	ldr	r2, [sp, #32]
 800923c:	0d1b      	lsrs	r3, r3, #20
 800923e:	051b      	lsls	r3, r3, #20
 8009240:	2a00      	cmp	r2, #0
 8009242:	d06a      	beq.n	800931a <_strtod_l+0x8fa>
 8009244:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009248:	d867      	bhi.n	800931a <_strtod_l+0x8fa>
 800924a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800924e:	f67f ae9d 	bls.w	8008f8c <_strtod_l+0x56c>
 8009252:	4b0a      	ldr	r3, [pc, #40]	@ (800927c <_strtod_l+0x85c>)
 8009254:	4650      	mov	r0, sl
 8009256:	4659      	mov	r1, fp
 8009258:	2200      	movs	r2, #0
 800925a:	f7f7 f9ed 	bl	8000638 <__aeabi_dmul>
 800925e:	4b08      	ldr	r3, [pc, #32]	@ (8009280 <_strtod_l+0x860>)
 8009260:	400b      	ands	r3, r1
 8009262:	4682      	mov	sl, r0
 8009264:	468b      	mov	fp, r1
 8009266:	2b00      	cmp	r3, #0
 8009268:	f47f ae08 	bne.w	8008e7c <_strtod_l+0x45c>
 800926c:	9a05      	ldr	r2, [sp, #20]
 800926e:	2322      	movs	r3, #34	@ 0x22
 8009270:	6013      	str	r3, [r2, #0]
 8009272:	e603      	b.n	8008e7c <_strtod_l+0x45c>
 8009274:	0800d840 	.word	0x0800d840
 8009278:	fffffc02 	.word	0xfffffc02
 800927c:	39500000 	.word	0x39500000
 8009280:	7ff00000 	.word	0x7ff00000
 8009284:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009288:	d165      	bne.n	8009356 <_strtod_l+0x936>
 800928a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800928c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009290:	b35a      	cbz	r2, 80092ea <_strtod_l+0x8ca>
 8009292:	4a9f      	ldr	r2, [pc, #636]	@ (8009510 <_strtod_l+0xaf0>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d12b      	bne.n	80092f0 <_strtod_l+0x8d0>
 8009298:	9b08      	ldr	r3, [sp, #32]
 800929a:	4651      	mov	r1, sl
 800929c:	b303      	cbz	r3, 80092e0 <_strtod_l+0x8c0>
 800929e:	4b9d      	ldr	r3, [pc, #628]	@ (8009514 <_strtod_l+0xaf4>)
 80092a0:	465a      	mov	r2, fp
 80092a2:	4013      	ands	r3, r2
 80092a4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80092a8:	f04f 32ff 	mov.w	r2, #4294967295
 80092ac:	d81b      	bhi.n	80092e6 <_strtod_l+0x8c6>
 80092ae:	0d1b      	lsrs	r3, r3, #20
 80092b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80092b4:	fa02 f303 	lsl.w	r3, r2, r3
 80092b8:	4299      	cmp	r1, r3
 80092ba:	d119      	bne.n	80092f0 <_strtod_l+0x8d0>
 80092bc:	4b96      	ldr	r3, [pc, #600]	@ (8009518 <_strtod_l+0xaf8>)
 80092be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d102      	bne.n	80092ca <_strtod_l+0x8aa>
 80092c4:	3101      	adds	r1, #1
 80092c6:	f43f adce 	beq.w	8008e66 <_strtod_l+0x446>
 80092ca:	4b92      	ldr	r3, [pc, #584]	@ (8009514 <_strtod_l+0xaf4>)
 80092cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80092ce:	401a      	ands	r2, r3
 80092d0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80092d4:	f04f 0a00 	mov.w	sl, #0
 80092d8:	9b08      	ldr	r3, [sp, #32]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d1b9      	bne.n	8009252 <_strtod_l+0x832>
 80092de:	e5cd      	b.n	8008e7c <_strtod_l+0x45c>
 80092e0:	f04f 33ff 	mov.w	r3, #4294967295
 80092e4:	e7e8      	b.n	80092b8 <_strtod_l+0x898>
 80092e6:	4613      	mov	r3, r2
 80092e8:	e7e6      	b.n	80092b8 <_strtod_l+0x898>
 80092ea:	ea53 030a 	orrs.w	r3, r3, sl
 80092ee:	d0a2      	beq.n	8009236 <_strtod_l+0x816>
 80092f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80092f2:	b1db      	cbz	r3, 800932c <_strtod_l+0x90c>
 80092f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80092f6:	4213      	tst	r3, r2
 80092f8:	d0ee      	beq.n	80092d8 <_strtod_l+0x8b8>
 80092fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092fc:	9a08      	ldr	r2, [sp, #32]
 80092fe:	4650      	mov	r0, sl
 8009300:	4659      	mov	r1, fp
 8009302:	b1bb      	cbz	r3, 8009334 <_strtod_l+0x914>
 8009304:	f7ff fb6d 	bl	80089e2 <sulp>
 8009308:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800930c:	ec53 2b10 	vmov	r2, r3, d0
 8009310:	f7f6 ffdc 	bl	80002cc <__adddf3>
 8009314:	4682      	mov	sl, r0
 8009316:	468b      	mov	fp, r1
 8009318:	e7de      	b.n	80092d8 <_strtod_l+0x8b8>
 800931a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800931e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009322:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009326:	f04f 3aff 	mov.w	sl, #4294967295
 800932a:	e7d5      	b.n	80092d8 <_strtod_l+0x8b8>
 800932c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800932e:	ea13 0f0a 	tst.w	r3, sl
 8009332:	e7e1      	b.n	80092f8 <_strtod_l+0x8d8>
 8009334:	f7ff fb55 	bl	80089e2 <sulp>
 8009338:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800933c:	ec53 2b10 	vmov	r2, r3, d0
 8009340:	f7f6 ffc2 	bl	80002c8 <__aeabi_dsub>
 8009344:	2200      	movs	r2, #0
 8009346:	2300      	movs	r3, #0
 8009348:	4682      	mov	sl, r0
 800934a:	468b      	mov	fp, r1
 800934c:	f7f7 fbdc 	bl	8000b08 <__aeabi_dcmpeq>
 8009350:	2800      	cmp	r0, #0
 8009352:	d0c1      	beq.n	80092d8 <_strtod_l+0x8b8>
 8009354:	e61a      	b.n	8008f8c <_strtod_l+0x56c>
 8009356:	4641      	mov	r1, r8
 8009358:	4620      	mov	r0, r4
 800935a:	f003 f9e5 	bl	800c728 <__ratio>
 800935e:	ec57 6b10 	vmov	r6, r7, d0
 8009362:	2200      	movs	r2, #0
 8009364:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009368:	4630      	mov	r0, r6
 800936a:	4639      	mov	r1, r7
 800936c:	f7f7 fbe0 	bl	8000b30 <__aeabi_dcmple>
 8009370:	2800      	cmp	r0, #0
 8009372:	d06f      	beq.n	8009454 <_strtod_l+0xa34>
 8009374:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009376:	2b00      	cmp	r3, #0
 8009378:	d17a      	bne.n	8009470 <_strtod_l+0xa50>
 800937a:	f1ba 0f00 	cmp.w	sl, #0
 800937e:	d158      	bne.n	8009432 <_strtod_l+0xa12>
 8009380:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009382:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009386:	2b00      	cmp	r3, #0
 8009388:	d15a      	bne.n	8009440 <_strtod_l+0xa20>
 800938a:	4b64      	ldr	r3, [pc, #400]	@ (800951c <_strtod_l+0xafc>)
 800938c:	2200      	movs	r2, #0
 800938e:	4630      	mov	r0, r6
 8009390:	4639      	mov	r1, r7
 8009392:	f7f7 fbc3 	bl	8000b1c <__aeabi_dcmplt>
 8009396:	2800      	cmp	r0, #0
 8009398:	d159      	bne.n	800944e <_strtod_l+0xa2e>
 800939a:	4630      	mov	r0, r6
 800939c:	4639      	mov	r1, r7
 800939e:	4b60      	ldr	r3, [pc, #384]	@ (8009520 <_strtod_l+0xb00>)
 80093a0:	2200      	movs	r2, #0
 80093a2:	f7f7 f949 	bl	8000638 <__aeabi_dmul>
 80093a6:	4606      	mov	r6, r0
 80093a8:	460f      	mov	r7, r1
 80093aa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80093ae:	9606      	str	r6, [sp, #24]
 80093b0:	9307      	str	r3, [sp, #28]
 80093b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093b6:	4d57      	ldr	r5, [pc, #348]	@ (8009514 <_strtod_l+0xaf4>)
 80093b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80093bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093be:	401d      	ands	r5, r3
 80093c0:	4b58      	ldr	r3, [pc, #352]	@ (8009524 <_strtod_l+0xb04>)
 80093c2:	429d      	cmp	r5, r3
 80093c4:	f040 80b2 	bne.w	800952c <_strtod_l+0xb0c>
 80093c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093ca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80093ce:	ec4b ab10 	vmov	d0, sl, fp
 80093d2:	f003 f8e1 	bl	800c598 <__ulp>
 80093d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093da:	ec51 0b10 	vmov	r0, r1, d0
 80093de:	f7f7 f92b 	bl	8000638 <__aeabi_dmul>
 80093e2:	4652      	mov	r2, sl
 80093e4:	465b      	mov	r3, fp
 80093e6:	f7f6 ff71 	bl	80002cc <__adddf3>
 80093ea:	460b      	mov	r3, r1
 80093ec:	4949      	ldr	r1, [pc, #292]	@ (8009514 <_strtod_l+0xaf4>)
 80093ee:	4a4e      	ldr	r2, [pc, #312]	@ (8009528 <_strtod_l+0xb08>)
 80093f0:	4019      	ands	r1, r3
 80093f2:	4291      	cmp	r1, r2
 80093f4:	4682      	mov	sl, r0
 80093f6:	d942      	bls.n	800947e <_strtod_l+0xa5e>
 80093f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80093fa:	4b47      	ldr	r3, [pc, #284]	@ (8009518 <_strtod_l+0xaf8>)
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d103      	bne.n	8009408 <_strtod_l+0x9e8>
 8009400:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009402:	3301      	adds	r3, #1
 8009404:	f43f ad2f 	beq.w	8008e66 <_strtod_l+0x446>
 8009408:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009518 <_strtod_l+0xaf8>
 800940c:	f04f 3aff 	mov.w	sl, #4294967295
 8009410:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009412:	9805      	ldr	r0, [sp, #20]
 8009414:	f002 fd94 	bl	800bf40 <_Bfree>
 8009418:	9805      	ldr	r0, [sp, #20]
 800941a:	4649      	mov	r1, r9
 800941c:	f002 fd90 	bl	800bf40 <_Bfree>
 8009420:	9805      	ldr	r0, [sp, #20]
 8009422:	4641      	mov	r1, r8
 8009424:	f002 fd8c 	bl	800bf40 <_Bfree>
 8009428:	9805      	ldr	r0, [sp, #20]
 800942a:	4621      	mov	r1, r4
 800942c:	f002 fd88 	bl	800bf40 <_Bfree>
 8009430:	e619      	b.n	8009066 <_strtod_l+0x646>
 8009432:	f1ba 0f01 	cmp.w	sl, #1
 8009436:	d103      	bne.n	8009440 <_strtod_l+0xa20>
 8009438:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800943a:	2b00      	cmp	r3, #0
 800943c:	f43f ada6 	beq.w	8008f8c <_strtod_l+0x56c>
 8009440:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80094f0 <_strtod_l+0xad0>
 8009444:	4f35      	ldr	r7, [pc, #212]	@ (800951c <_strtod_l+0xafc>)
 8009446:	ed8d 7b06 	vstr	d7, [sp, #24]
 800944a:	2600      	movs	r6, #0
 800944c:	e7b1      	b.n	80093b2 <_strtod_l+0x992>
 800944e:	4f34      	ldr	r7, [pc, #208]	@ (8009520 <_strtod_l+0xb00>)
 8009450:	2600      	movs	r6, #0
 8009452:	e7aa      	b.n	80093aa <_strtod_l+0x98a>
 8009454:	4b32      	ldr	r3, [pc, #200]	@ (8009520 <_strtod_l+0xb00>)
 8009456:	4630      	mov	r0, r6
 8009458:	4639      	mov	r1, r7
 800945a:	2200      	movs	r2, #0
 800945c:	f7f7 f8ec 	bl	8000638 <__aeabi_dmul>
 8009460:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009462:	4606      	mov	r6, r0
 8009464:	460f      	mov	r7, r1
 8009466:	2b00      	cmp	r3, #0
 8009468:	d09f      	beq.n	80093aa <_strtod_l+0x98a>
 800946a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800946e:	e7a0      	b.n	80093b2 <_strtod_l+0x992>
 8009470:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80094f8 <_strtod_l+0xad8>
 8009474:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009478:	ec57 6b17 	vmov	r6, r7, d7
 800947c:	e799      	b.n	80093b2 <_strtod_l+0x992>
 800947e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009482:	9b08      	ldr	r3, [sp, #32]
 8009484:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1c1      	bne.n	8009410 <_strtod_l+0x9f0>
 800948c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009490:	0d1b      	lsrs	r3, r3, #20
 8009492:	051b      	lsls	r3, r3, #20
 8009494:	429d      	cmp	r5, r3
 8009496:	d1bb      	bne.n	8009410 <_strtod_l+0x9f0>
 8009498:	4630      	mov	r0, r6
 800949a:	4639      	mov	r1, r7
 800949c:	f7f7 fc2c 	bl	8000cf8 <__aeabi_d2lz>
 80094a0:	f7f7 f89c 	bl	80005dc <__aeabi_l2d>
 80094a4:	4602      	mov	r2, r0
 80094a6:	460b      	mov	r3, r1
 80094a8:	4630      	mov	r0, r6
 80094aa:	4639      	mov	r1, r7
 80094ac:	f7f6 ff0c 	bl	80002c8 <__aeabi_dsub>
 80094b0:	460b      	mov	r3, r1
 80094b2:	4602      	mov	r2, r0
 80094b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80094b8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80094bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094be:	ea46 060a 	orr.w	r6, r6, sl
 80094c2:	431e      	orrs	r6, r3
 80094c4:	d06f      	beq.n	80095a6 <_strtod_l+0xb86>
 80094c6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009500 <_strtod_l+0xae0>)
 80094c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094cc:	f7f7 fb26 	bl	8000b1c <__aeabi_dcmplt>
 80094d0:	2800      	cmp	r0, #0
 80094d2:	f47f acd3 	bne.w	8008e7c <_strtod_l+0x45c>
 80094d6:	a30c      	add	r3, pc, #48	@ (adr r3, 8009508 <_strtod_l+0xae8>)
 80094d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094e0:	f7f7 fb3a 	bl	8000b58 <__aeabi_dcmpgt>
 80094e4:	2800      	cmp	r0, #0
 80094e6:	d093      	beq.n	8009410 <_strtod_l+0x9f0>
 80094e8:	e4c8      	b.n	8008e7c <_strtod_l+0x45c>
 80094ea:	bf00      	nop
 80094ec:	f3af 8000 	nop.w
 80094f0:	00000000 	.word	0x00000000
 80094f4:	bff00000 	.word	0xbff00000
 80094f8:	00000000 	.word	0x00000000
 80094fc:	3ff00000 	.word	0x3ff00000
 8009500:	94a03595 	.word	0x94a03595
 8009504:	3fdfffff 	.word	0x3fdfffff
 8009508:	35afe535 	.word	0x35afe535
 800950c:	3fe00000 	.word	0x3fe00000
 8009510:	000fffff 	.word	0x000fffff
 8009514:	7ff00000 	.word	0x7ff00000
 8009518:	7fefffff 	.word	0x7fefffff
 800951c:	3ff00000 	.word	0x3ff00000
 8009520:	3fe00000 	.word	0x3fe00000
 8009524:	7fe00000 	.word	0x7fe00000
 8009528:	7c9fffff 	.word	0x7c9fffff
 800952c:	9b08      	ldr	r3, [sp, #32]
 800952e:	b323      	cbz	r3, 800957a <_strtod_l+0xb5a>
 8009530:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009534:	d821      	bhi.n	800957a <_strtod_l+0xb5a>
 8009536:	a328      	add	r3, pc, #160	@ (adr r3, 80095d8 <_strtod_l+0xbb8>)
 8009538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953c:	4630      	mov	r0, r6
 800953e:	4639      	mov	r1, r7
 8009540:	f7f7 faf6 	bl	8000b30 <__aeabi_dcmple>
 8009544:	b1a0      	cbz	r0, 8009570 <_strtod_l+0xb50>
 8009546:	4639      	mov	r1, r7
 8009548:	4630      	mov	r0, r6
 800954a:	f7f7 fb4d 	bl	8000be8 <__aeabi_d2uiz>
 800954e:	2801      	cmp	r0, #1
 8009550:	bf38      	it	cc
 8009552:	2001      	movcc	r0, #1
 8009554:	f7f6 fff6 	bl	8000544 <__aeabi_ui2d>
 8009558:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800955a:	4606      	mov	r6, r0
 800955c:	460f      	mov	r7, r1
 800955e:	b9fb      	cbnz	r3, 80095a0 <_strtod_l+0xb80>
 8009560:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009564:	9014      	str	r0, [sp, #80]	@ 0x50
 8009566:	9315      	str	r3, [sp, #84]	@ 0x54
 8009568:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800956c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009570:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009572:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009576:	1b5b      	subs	r3, r3, r5
 8009578:	9311      	str	r3, [sp, #68]	@ 0x44
 800957a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800957e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009582:	f003 f809 	bl	800c598 <__ulp>
 8009586:	4650      	mov	r0, sl
 8009588:	ec53 2b10 	vmov	r2, r3, d0
 800958c:	4659      	mov	r1, fp
 800958e:	f7f7 f853 	bl	8000638 <__aeabi_dmul>
 8009592:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009596:	f7f6 fe99 	bl	80002cc <__adddf3>
 800959a:	4682      	mov	sl, r0
 800959c:	468b      	mov	fp, r1
 800959e:	e770      	b.n	8009482 <_strtod_l+0xa62>
 80095a0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80095a4:	e7e0      	b.n	8009568 <_strtod_l+0xb48>
 80095a6:	a30e      	add	r3, pc, #56	@ (adr r3, 80095e0 <_strtod_l+0xbc0>)
 80095a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ac:	f7f7 fab6 	bl	8000b1c <__aeabi_dcmplt>
 80095b0:	e798      	b.n	80094e4 <_strtod_l+0xac4>
 80095b2:	2300      	movs	r3, #0
 80095b4:	930e      	str	r3, [sp, #56]	@ 0x38
 80095b6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80095b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095ba:	6013      	str	r3, [r2, #0]
 80095bc:	f7ff ba6d 	b.w	8008a9a <_strtod_l+0x7a>
 80095c0:	2a65      	cmp	r2, #101	@ 0x65
 80095c2:	f43f ab68 	beq.w	8008c96 <_strtod_l+0x276>
 80095c6:	2a45      	cmp	r2, #69	@ 0x45
 80095c8:	f43f ab65 	beq.w	8008c96 <_strtod_l+0x276>
 80095cc:	2301      	movs	r3, #1
 80095ce:	f7ff bba0 	b.w	8008d12 <_strtod_l+0x2f2>
 80095d2:	bf00      	nop
 80095d4:	f3af 8000 	nop.w
 80095d8:	ffc00000 	.word	0xffc00000
 80095dc:	41dfffff 	.word	0x41dfffff
 80095e0:	94a03595 	.word	0x94a03595
 80095e4:	3fcfffff 	.word	0x3fcfffff

080095e8 <_strtod_r>:
 80095e8:	4b01      	ldr	r3, [pc, #4]	@ (80095f0 <_strtod_r+0x8>)
 80095ea:	f7ff ba19 	b.w	8008a20 <_strtod_l>
 80095ee:	bf00      	nop
 80095f0:	20000018 	.word	0x20000018

080095f4 <strtod>:
 80095f4:	460a      	mov	r2, r1
 80095f6:	4601      	mov	r1, r0
 80095f8:	4802      	ldr	r0, [pc, #8]	@ (8009604 <strtod+0x10>)
 80095fa:	4b03      	ldr	r3, [pc, #12]	@ (8009608 <strtod+0x14>)
 80095fc:	6800      	ldr	r0, [r0, #0]
 80095fe:	f7ff ba0f 	b.w	8008a20 <_strtod_l>
 8009602:	bf00      	nop
 8009604:	20000184 	.word	0x20000184
 8009608:	20000018 	.word	0x20000018

0800960c <__cvt>:
 800960c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009610:	ec57 6b10 	vmov	r6, r7, d0
 8009614:	2f00      	cmp	r7, #0
 8009616:	460c      	mov	r4, r1
 8009618:	4619      	mov	r1, r3
 800961a:	463b      	mov	r3, r7
 800961c:	bfbb      	ittet	lt
 800961e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009622:	461f      	movlt	r7, r3
 8009624:	2300      	movge	r3, #0
 8009626:	232d      	movlt	r3, #45	@ 0x2d
 8009628:	700b      	strb	r3, [r1, #0]
 800962a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800962c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009630:	4691      	mov	r9, r2
 8009632:	f023 0820 	bic.w	r8, r3, #32
 8009636:	bfbc      	itt	lt
 8009638:	4632      	movlt	r2, r6
 800963a:	4616      	movlt	r6, r2
 800963c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009640:	d005      	beq.n	800964e <__cvt+0x42>
 8009642:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009646:	d100      	bne.n	800964a <__cvt+0x3e>
 8009648:	3401      	adds	r4, #1
 800964a:	2102      	movs	r1, #2
 800964c:	e000      	b.n	8009650 <__cvt+0x44>
 800964e:	2103      	movs	r1, #3
 8009650:	ab03      	add	r3, sp, #12
 8009652:	9301      	str	r3, [sp, #4]
 8009654:	ab02      	add	r3, sp, #8
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	ec47 6b10 	vmov	d0, r6, r7
 800965c:	4653      	mov	r3, sl
 800965e:	4622      	mov	r2, r4
 8009660:	f001 fa12 	bl	800aa88 <_dtoa_r>
 8009664:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009668:	4605      	mov	r5, r0
 800966a:	d119      	bne.n	80096a0 <__cvt+0x94>
 800966c:	f019 0f01 	tst.w	r9, #1
 8009670:	d00e      	beq.n	8009690 <__cvt+0x84>
 8009672:	eb00 0904 	add.w	r9, r0, r4
 8009676:	2200      	movs	r2, #0
 8009678:	2300      	movs	r3, #0
 800967a:	4630      	mov	r0, r6
 800967c:	4639      	mov	r1, r7
 800967e:	f7f7 fa43 	bl	8000b08 <__aeabi_dcmpeq>
 8009682:	b108      	cbz	r0, 8009688 <__cvt+0x7c>
 8009684:	f8cd 900c 	str.w	r9, [sp, #12]
 8009688:	2230      	movs	r2, #48	@ 0x30
 800968a:	9b03      	ldr	r3, [sp, #12]
 800968c:	454b      	cmp	r3, r9
 800968e:	d31e      	bcc.n	80096ce <__cvt+0xc2>
 8009690:	9b03      	ldr	r3, [sp, #12]
 8009692:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009694:	1b5b      	subs	r3, r3, r5
 8009696:	4628      	mov	r0, r5
 8009698:	6013      	str	r3, [r2, #0]
 800969a:	b004      	add	sp, #16
 800969c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80096a4:	eb00 0904 	add.w	r9, r0, r4
 80096a8:	d1e5      	bne.n	8009676 <__cvt+0x6a>
 80096aa:	7803      	ldrb	r3, [r0, #0]
 80096ac:	2b30      	cmp	r3, #48	@ 0x30
 80096ae:	d10a      	bne.n	80096c6 <__cvt+0xba>
 80096b0:	2200      	movs	r2, #0
 80096b2:	2300      	movs	r3, #0
 80096b4:	4630      	mov	r0, r6
 80096b6:	4639      	mov	r1, r7
 80096b8:	f7f7 fa26 	bl	8000b08 <__aeabi_dcmpeq>
 80096bc:	b918      	cbnz	r0, 80096c6 <__cvt+0xba>
 80096be:	f1c4 0401 	rsb	r4, r4, #1
 80096c2:	f8ca 4000 	str.w	r4, [sl]
 80096c6:	f8da 3000 	ldr.w	r3, [sl]
 80096ca:	4499      	add	r9, r3
 80096cc:	e7d3      	b.n	8009676 <__cvt+0x6a>
 80096ce:	1c59      	adds	r1, r3, #1
 80096d0:	9103      	str	r1, [sp, #12]
 80096d2:	701a      	strb	r2, [r3, #0]
 80096d4:	e7d9      	b.n	800968a <__cvt+0x7e>

080096d6 <__exponent>:
 80096d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096d8:	2900      	cmp	r1, #0
 80096da:	bfba      	itte	lt
 80096dc:	4249      	neglt	r1, r1
 80096de:	232d      	movlt	r3, #45	@ 0x2d
 80096e0:	232b      	movge	r3, #43	@ 0x2b
 80096e2:	2909      	cmp	r1, #9
 80096e4:	7002      	strb	r2, [r0, #0]
 80096e6:	7043      	strb	r3, [r0, #1]
 80096e8:	dd29      	ble.n	800973e <__exponent+0x68>
 80096ea:	f10d 0307 	add.w	r3, sp, #7
 80096ee:	461d      	mov	r5, r3
 80096f0:	270a      	movs	r7, #10
 80096f2:	461a      	mov	r2, r3
 80096f4:	fbb1 f6f7 	udiv	r6, r1, r7
 80096f8:	fb07 1416 	mls	r4, r7, r6, r1
 80096fc:	3430      	adds	r4, #48	@ 0x30
 80096fe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009702:	460c      	mov	r4, r1
 8009704:	2c63      	cmp	r4, #99	@ 0x63
 8009706:	f103 33ff 	add.w	r3, r3, #4294967295
 800970a:	4631      	mov	r1, r6
 800970c:	dcf1      	bgt.n	80096f2 <__exponent+0x1c>
 800970e:	3130      	adds	r1, #48	@ 0x30
 8009710:	1e94      	subs	r4, r2, #2
 8009712:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009716:	1c41      	adds	r1, r0, #1
 8009718:	4623      	mov	r3, r4
 800971a:	42ab      	cmp	r3, r5
 800971c:	d30a      	bcc.n	8009734 <__exponent+0x5e>
 800971e:	f10d 0309 	add.w	r3, sp, #9
 8009722:	1a9b      	subs	r3, r3, r2
 8009724:	42ac      	cmp	r4, r5
 8009726:	bf88      	it	hi
 8009728:	2300      	movhi	r3, #0
 800972a:	3302      	adds	r3, #2
 800972c:	4403      	add	r3, r0
 800972e:	1a18      	subs	r0, r3, r0
 8009730:	b003      	add	sp, #12
 8009732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009734:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009738:	f801 6f01 	strb.w	r6, [r1, #1]!
 800973c:	e7ed      	b.n	800971a <__exponent+0x44>
 800973e:	2330      	movs	r3, #48	@ 0x30
 8009740:	3130      	adds	r1, #48	@ 0x30
 8009742:	7083      	strb	r3, [r0, #2]
 8009744:	70c1      	strb	r1, [r0, #3]
 8009746:	1d03      	adds	r3, r0, #4
 8009748:	e7f1      	b.n	800972e <__exponent+0x58>
	...

0800974c <_printf_float>:
 800974c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009750:	b08d      	sub	sp, #52	@ 0x34
 8009752:	460c      	mov	r4, r1
 8009754:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009758:	4616      	mov	r6, r2
 800975a:	461f      	mov	r7, r3
 800975c:	4605      	mov	r5, r0
 800975e:	f001 f873 	bl	800a848 <_localeconv_r>
 8009762:	6803      	ldr	r3, [r0, #0]
 8009764:	9304      	str	r3, [sp, #16]
 8009766:	4618      	mov	r0, r3
 8009768:	f7f6 fda2 	bl	80002b0 <strlen>
 800976c:	2300      	movs	r3, #0
 800976e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009770:	f8d8 3000 	ldr.w	r3, [r8]
 8009774:	9005      	str	r0, [sp, #20]
 8009776:	3307      	adds	r3, #7
 8009778:	f023 0307 	bic.w	r3, r3, #7
 800977c:	f103 0208 	add.w	r2, r3, #8
 8009780:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009784:	f8d4 b000 	ldr.w	fp, [r4]
 8009788:	f8c8 2000 	str.w	r2, [r8]
 800978c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009790:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009794:	9307      	str	r3, [sp, #28]
 8009796:	f8cd 8018 	str.w	r8, [sp, #24]
 800979a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800979e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097a2:	4b9c      	ldr	r3, [pc, #624]	@ (8009a14 <_printf_float+0x2c8>)
 80097a4:	f04f 32ff 	mov.w	r2, #4294967295
 80097a8:	f7f7 f9e0 	bl	8000b6c <__aeabi_dcmpun>
 80097ac:	bb70      	cbnz	r0, 800980c <_printf_float+0xc0>
 80097ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097b2:	4b98      	ldr	r3, [pc, #608]	@ (8009a14 <_printf_float+0x2c8>)
 80097b4:	f04f 32ff 	mov.w	r2, #4294967295
 80097b8:	f7f7 f9ba 	bl	8000b30 <__aeabi_dcmple>
 80097bc:	bb30      	cbnz	r0, 800980c <_printf_float+0xc0>
 80097be:	2200      	movs	r2, #0
 80097c0:	2300      	movs	r3, #0
 80097c2:	4640      	mov	r0, r8
 80097c4:	4649      	mov	r1, r9
 80097c6:	f7f7 f9a9 	bl	8000b1c <__aeabi_dcmplt>
 80097ca:	b110      	cbz	r0, 80097d2 <_printf_float+0x86>
 80097cc:	232d      	movs	r3, #45	@ 0x2d
 80097ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097d2:	4a91      	ldr	r2, [pc, #580]	@ (8009a18 <_printf_float+0x2cc>)
 80097d4:	4b91      	ldr	r3, [pc, #580]	@ (8009a1c <_printf_float+0x2d0>)
 80097d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80097da:	bf8c      	ite	hi
 80097dc:	4690      	movhi	r8, r2
 80097de:	4698      	movls	r8, r3
 80097e0:	2303      	movs	r3, #3
 80097e2:	6123      	str	r3, [r4, #16]
 80097e4:	f02b 0304 	bic.w	r3, fp, #4
 80097e8:	6023      	str	r3, [r4, #0]
 80097ea:	f04f 0900 	mov.w	r9, #0
 80097ee:	9700      	str	r7, [sp, #0]
 80097f0:	4633      	mov	r3, r6
 80097f2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80097f4:	4621      	mov	r1, r4
 80097f6:	4628      	mov	r0, r5
 80097f8:	f000 f9d2 	bl	8009ba0 <_printf_common>
 80097fc:	3001      	adds	r0, #1
 80097fe:	f040 808d 	bne.w	800991c <_printf_float+0x1d0>
 8009802:	f04f 30ff 	mov.w	r0, #4294967295
 8009806:	b00d      	add	sp, #52	@ 0x34
 8009808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800980c:	4642      	mov	r2, r8
 800980e:	464b      	mov	r3, r9
 8009810:	4640      	mov	r0, r8
 8009812:	4649      	mov	r1, r9
 8009814:	f7f7 f9aa 	bl	8000b6c <__aeabi_dcmpun>
 8009818:	b140      	cbz	r0, 800982c <_printf_float+0xe0>
 800981a:	464b      	mov	r3, r9
 800981c:	2b00      	cmp	r3, #0
 800981e:	bfbc      	itt	lt
 8009820:	232d      	movlt	r3, #45	@ 0x2d
 8009822:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009826:	4a7e      	ldr	r2, [pc, #504]	@ (8009a20 <_printf_float+0x2d4>)
 8009828:	4b7e      	ldr	r3, [pc, #504]	@ (8009a24 <_printf_float+0x2d8>)
 800982a:	e7d4      	b.n	80097d6 <_printf_float+0x8a>
 800982c:	6863      	ldr	r3, [r4, #4]
 800982e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009832:	9206      	str	r2, [sp, #24]
 8009834:	1c5a      	adds	r2, r3, #1
 8009836:	d13b      	bne.n	80098b0 <_printf_float+0x164>
 8009838:	2306      	movs	r3, #6
 800983a:	6063      	str	r3, [r4, #4]
 800983c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009840:	2300      	movs	r3, #0
 8009842:	6022      	str	r2, [r4, #0]
 8009844:	9303      	str	r3, [sp, #12]
 8009846:	ab0a      	add	r3, sp, #40	@ 0x28
 8009848:	e9cd a301 	strd	sl, r3, [sp, #4]
 800984c:	ab09      	add	r3, sp, #36	@ 0x24
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	6861      	ldr	r1, [r4, #4]
 8009852:	ec49 8b10 	vmov	d0, r8, r9
 8009856:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800985a:	4628      	mov	r0, r5
 800985c:	f7ff fed6 	bl	800960c <__cvt>
 8009860:	9b06      	ldr	r3, [sp, #24]
 8009862:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009864:	2b47      	cmp	r3, #71	@ 0x47
 8009866:	4680      	mov	r8, r0
 8009868:	d129      	bne.n	80098be <_printf_float+0x172>
 800986a:	1cc8      	adds	r0, r1, #3
 800986c:	db02      	blt.n	8009874 <_printf_float+0x128>
 800986e:	6863      	ldr	r3, [r4, #4]
 8009870:	4299      	cmp	r1, r3
 8009872:	dd41      	ble.n	80098f8 <_printf_float+0x1ac>
 8009874:	f1aa 0a02 	sub.w	sl, sl, #2
 8009878:	fa5f fa8a 	uxtb.w	sl, sl
 800987c:	3901      	subs	r1, #1
 800987e:	4652      	mov	r2, sl
 8009880:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009884:	9109      	str	r1, [sp, #36]	@ 0x24
 8009886:	f7ff ff26 	bl	80096d6 <__exponent>
 800988a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800988c:	1813      	adds	r3, r2, r0
 800988e:	2a01      	cmp	r2, #1
 8009890:	4681      	mov	r9, r0
 8009892:	6123      	str	r3, [r4, #16]
 8009894:	dc02      	bgt.n	800989c <_printf_float+0x150>
 8009896:	6822      	ldr	r2, [r4, #0]
 8009898:	07d2      	lsls	r2, r2, #31
 800989a:	d501      	bpl.n	80098a0 <_printf_float+0x154>
 800989c:	3301      	adds	r3, #1
 800989e:	6123      	str	r3, [r4, #16]
 80098a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d0a2      	beq.n	80097ee <_printf_float+0xa2>
 80098a8:	232d      	movs	r3, #45	@ 0x2d
 80098aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80098ae:	e79e      	b.n	80097ee <_printf_float+0xa2>
 80098b0:	9a06      	ldr	r2, [sp, #24]
 80098b2:	2a47      	cmp	r2, #71	@ 0x47
 80098b4:	d1c2      	bne.n	800983c <_printf_float+0xf0>
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1c0      	bne.n	800983c <_printf_float+0xf0>
 80098ba:	2301      	movs	r3, #1
 80098bc:	e7bd      	b.n	800983a <_printf_float+0xee>
 80098be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80098c2:	d9db      	bls.n	800987c <_printf_float+0x130>
 80098c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80098c8:	d118      	bne.n	80098fc <_printf_float+0x1b0>
 80098ca:	2900      	cmp	r1, #0
 80098cc:	6863      	ldr	r3, [r4, #4]
 80098ce:	dd0b      	ble.n	80098e8 <_printf_float+0x19c>
 80098d0:	6121      	str	r1, [r4, #16]
 80098d2:	b913      	cbnz	r3, 80098da <_printf_float+0x18e>
 80098d4:	6822      	ldr	r2, [r4, #0]
 80098d6:	07d0      	lsls	r0, r2, #31
 80098d8:	d502      	bpl.n	80098e0 <_printf_float+0x194>
 80098da:	3301      	adds	r3, #1
 80098dc:	440b      	add	r3, r1
 80098de:	6123      	str	r3, [r4, #16]
 80098e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80098e2:	f04f 0900 	mov.w	r9, #0
 80098e6:	e7db      	b.n	80098a0 <_printf_float+0x154>
 80098e8:	b913      	cbnz	r3, 80098f0 <_printf_float+0x1a4>
 80098ea:	6822      	ldr	r2, [r4, #0]
 80098ec:	07d2      	lsls	r2, r2, #31
 80098ee:	d501      	bpl.n	80098f4 <_printf_float+0x1a8>
 80098f0:	3302      	adds	r3, #2
 80098f2:	e7f4      	b.n	80098de <_printf_float+0x192>
 80098f4:	2301      	movs	r3, #1
 80098f6:	e7f2      	b.n	80098de <_printf_float+0x192>
 80098f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80098fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098fe:	4299      	cmp	r1, r3
 8009900:	db05      	blt.n	800990e <_printf_float+0x1c2>
 8009902:	6823      	ldr	r3, [r4, #0]
 8009904:	6121      	str	r1, [r4, #16]
 8009906:	07d8      	lsls	r0, r3, #31
 8009908:	d5ea      	bpl.n	80098e0 <_printf_float+0x194>
 800990a:	1c4b      	adds	r3, r1, #1
 800990c:	e7e7      	b.n	80098de <_printf_float+0x192>
 800990e:	2900      	cmp	r1, #0
 8009910:	bfd4      	ite	le
 8009912:	f1c1 0202 	rsble	r2, r1, #2
 8009916:	2201      	movgt	r2, #1
 8009918:	4413      	add	r3, r2
 800991a:	e7e0      	b.n	80098de <_printf_float+0x192>
 800991c:	6823      	ldr	r3, [r4, #0]
 800991e:	055a      	lsls	r2, r3, #21
 8009920:	d407      	bmi.n	8009932 <_printf_float+0x1e6>
 8009922:	6923      	ldr	r3, [r4, #16]
 8009924:	4642      	mov	r2, r8
 8009926:	4631      	mov	r1, r6
 8009928:	4628      	mov	r0, r5
 800992a:	47b8      	blx	r7
 800992c:	3001      	adds	r0, #1
 800992e:	d12b      	bne.n	8009988 <_printf_float+0x23c>
 8009930:	e767      	b.n	8009802 <_printf_float+0xb6>
 8009932:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009936:	f240 80dd 	bls.w	8009af4 <_printf_float+0x3a8>
 800993a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800993e:	2200      	movs	r2, #0
 8009940:	2300      	movs	r3, #0
 8009942:	f7f7 f8e1 	bl	8000b08 <__aeabi_dcmpeq>
 8009946:	2800      	cmp	r0, #0
 8009948:	d033      	beq.n	80099b2 <_printf_float+0x266>
 800994a:	4a37      	ldr	r2, [pc, #220]	@ (8009a28 <_printf_float+0x2dc>)
 800994c:	2301      	movs	r3, #1
 800994e:	4631      	mov	r1, r6
 8009950:	4628      	mov	r0, r5
 8009952:	47b8      	blx	r7
 8009954:	3001      	adds	r0, #1
 8009956:	f43f af54 	beq.w	8009802 <_printf_float+0xb6>
 800995a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800995e:	4543      	cmp	r3, r8
 8009960:	db02      	blt.n	8009968 <_printf_float+0x21c>
 8009962:	6823      	ldr	r3, [r4, #0]
 8009964:	07d8      	lsls	r0, r3, #31
 8009966:	d50f      	bpl.n	8009988 <_printf_float+0x23c>
 8009968:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800996c:	4631      	mov	r1, r6
 800996e:	4628      	mov	r0, r5
 8009970:	47b8      	blx	r7
 8009972:	3001      	adds	r0, #1
 8009974:	f43f af45 	beq.w	8009802 <_printf_float+0xb6>
 8009978:	f04f 0900 	mov.w	r9, #0
 800997c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009980:	f104 0a1a 	add.w	sl, r4, #26
 8009984:	45c8      	cmp	r8, r9
 8009986:	dc09      	bgt.n	800999c <_printf_float+0x250>
 8009988:	6823      	ldr	r3, [r4, #0]
 800998a:	079b      	lsls	r3, r3, #30
 800998c:	f100 8103 	bmi.w	8009b96 <_printf_float+0x44a>
 8009990:	68e0      	ldr	r0, [r4, #12]
 8009992:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009994:	4298      	cmp	r0, r3
 8009996:	bfb8      	it	lt
 8009998:	4618      	movlt	r0, r3
 800999a:	e734      	b.n	8009806 <_printf_float+0xba>
 800999c:	2301      	movs	r3, #1
 800999e:	4652      	mov	r2, sl
 80099a0:	4631      	mov	r1, r6
 80099a2:	4628      	mov	r0, r5
 80099a4:	47b8      	blx	r7
 80099a6:	3001      	adds	r0, #1
 80099a8:	f43f af2b 	beq.w	8009802 <_printf_float+0xb6>
 80099ac:	f109 0901 	add.w	r9, r9, #1
 80099b0:	e7e8      	b.n	8009984 <_printf_float+0x238>
 80099b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	dc39      	bgt.n	8009a2c <_printf_float+0x2e0>
 80099b8:	4a1b      	ldr	r2, [pc, #108]	@ (8009a28 <_printf_float+0x2dc>)
 80099ba:	2301      	movs	r3, #1
 80099bc:	4631      	mov	r1, r6
 80099be:	4628      	mov	r0, r5
 80099c0:	47b8      	blx	r7
 80099c2:	3001      	adds	r0, #1
 80099c4:	f43f af1d 	beq.w	8009802 <_printf_float+0xb6>
 80099c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80099cc:	ea59 0303 	orrs.w	r3, r9, r3
 80099d0:	d102      	bne.n	80099d8 <_printf_float+0x28c>
 80099d2:	6823      	ldr	r3, [r4, #0]
 80099d4:	07d9      	lsls	r1, r3, #31
 80099d6:	d5d7      	bpl.n	8009988 <_printf_float+0x23c>
 80099d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099dc:	4631      	mov	r1, r6
 80099de:	4628      	mov	r0, r5
 80099e0:	47b8      	blx	r7
 80099e2:	3001      	adds	r0, #1
 80099e4:	f43f af0d 	beq.w	8009802 <_printf_float+0xb6>
 80099e8:	f04f 0a00 	mov.w	sl, #0
 80099ec:	f104 0b1a 	add.w	fp, r4, #26
 80099f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099f2:	425b      	negs	r3, r3
 80099f4:	4553      	cmp	r3, sl
 80099f6:	dc01      	bgt.n	80099fc <_printf_float+0x2b0>
 80099f8:	464b      	mov	r3, r9
 80099fa:	e793      	b.n	8009924 <_printf_float+0x1d8>
 80099fc:	2301      	movs	r3, #1
 80099fe:	465a      	mov	r2, fp
 8009a00:	4631      	mov	r1, r6
 8009a02:	4628      	mov	r0, r5
 8009a04:	47b8      	blx	r7
 8009a06:	3001      	adds	r0, #1
 8009a08:	f43f aefb 	beq.w	8009802 <_printf_float+0xb6>
 8009a0c:	f10a 0a01 	add.w	sl, sl, #1
 8009a10:	e7ee      	b.n	80099f0 <_printf_float+0x2a4>
 8009a12:	bf00      	nop
 8009a14:	7fefffff 	.word	0x7fefffff
 8009a18:	0800d646 	.word	0x0800d646
 8009a1c:	0800d642 	.word	0x0800d642
 8009a20:	0800d64e 	.word	0x0800d64e
 8009a24:	0800d64a 	.word	0x0800d64a
 8009a28:	0800d652 	.word	0x0800d652
 8009a2c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009a2e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009a32:	4553      	cmp	r3, sl
 8009a34:	bfa8      	it	ge
 8009a36:	4653      	movge	r3, sl
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	4699      	mov	r9, r3
 8009a3c:	dc36      	bgt.n	8009aac <_printf_float+0x360>
 8009a3e:	f04f 0b00 	mov.w	fp, #0
 8009a42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a46:	f104 021a 	add.w	r2, r4, #26
 8009a4a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009a4c:	9306      	str	r3, [sp, #24]
 8009a4e:	eba3 0309 	sub.w	r3, r3, r9
 8009a52:	455b      	cmp	r3, fp
 8009a54:	dc31      	bgt.n	8009aba <_printf_float+0x36e>
 8009a56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a58:	459a      	cmp	sl, r3
 8009a5a:	dc3a      	bgt.n	8009ad2 <_printf_float+0x386>
 8009a5c:	6823      	ldr	r3, [r4, #0]
 8009a5e:	07da      	lsls	r2, r3, #31
 8009a60:	d437      	bmi.n	8009ad2 <_printf_float+0x386>
 8009a62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a64:	ebaa 0903 	sub.w	r9, sl, r3
 8009a68:	9b06      	ldr	r3, [sp, #24]
 8009a6a:	ebaa 0303 	sub.w	r3, sl, r3
 8009a6e:	4599      	cmp	r9, r3
 8009a70:	bfa8      	it	ge
 8009a72:	4699      	movge	r9, r3
 8009a74:	f1b9 0f00 	cmp.w	r9, #0
 8009a78:	dc33      	bgt.n	8009ae2 <_printf_float+0x396>
 8009a7a:	f04f 0800 	mov.w	r8, #0
 8009a7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a82:	f104 0b1a 	add.w	fp, r4, #26
 8009a86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a88:	ebaa 0303 	sub.w	r3, sl, r3
 8009a8c:	eba3 0309 	sub.w	r3, r3, r9
 8009a90:	4543      	cmp	r3, r8
 8009a92:	f77f af79 	ble.w	8009988 <_printf_float+0x23c>
 8009a96:	2301      	movs	r3, #1
 8009a98:	465a      	mov	r2, fp
 8009a9a:	4631      	mov	r1, r6
 8009a9c:	4628      	mov	r0, r5
 8009a9e:	47b8      	blx	r7
 8009aa0:	3001      	adds	r0, #1
 8009aa2:	f43f aeae 	beq.w	8009802 <_printf_float+0xb6>
 8009aa6:	f108 0801 	add.w	r8, r8, #1
 8009aaa:	e7ec      	b.n	8009a86 <_printf_float+0x33a>
 8009aac:	4642      	mov	r2, r8
 8009aae:	4631      	mov	r1, r6
 8009ab0:	4628      	mov	r0, r5
 8009ab2:	47b8      	blx	r7
 8009ab4:	3001      	adds	r0, #1
 8009ab6:	d1c2      	bne.n	8009a3e <_printf_float+0x2f2>
 8009ab8:	e6a3      	b.n	8009802 <_printf_float+0xb6>
 8009aba:	2301      	movs	r3, #1
 8009abc:	4631      	mov	r1, r6
 8009abe:	4628      	mov	r0, r5
 8009ac0:	9206      	str	r2, [sp, #24]
 8009ac2:	47b8      	blx	r7
 8009ac4:	3001      	adds	r0, #1
 8009ac6:	f43f ae9c 	beq.w	8009802 <_printf_float+0xb6>
 8009aca:	9a06      	ldr	r2, [sp, #24]
 8009acc:	f10b 0b01 	add.w	fp, fp, #1
 8009ad0:	e7bb      	b.n	8009a4a <_printf_float+0x2fe>
 8009ad2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ad6:	4631      	mov	r1, r6
 8009ad8:	4628      	mov	r0, r5
 8009ada:	47b8      	blx	r7
 8009adc:	3001      	adds	r0, #1
 8009ade:	d1c0      	bne.n	8009a62 <_printf_float+0x316>
 8009ae0:	e68f      	b.n	8009802 <_printf_float+0xb6>
 8009ae2:	9a06      	ldr	r2, [sp, #24]
 8009ae4:	464b      	mov	r3, r9
 8009ae6:	4442      	add	r2, r8
 8009ae8:	4631      	mov	r1, r6
 8009aea:	4628      	mov	r0, r5
 8009aec:	47b8      	blx	r7
 8009aee:	3001      	adds	r0, #1
 8009af0:	d1c3      	bne.n	8009a7a <_printf_float+0x32e>
 8009af2:	e686      	b.n	8009802 <_printf_float+0xb6>
 8009af4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009af8:	f1ba 0f01 	cmp.w	sl, #1
 8009afc:	dc01      	bgt.n	8009b02 <_printf_float+0x3b6>
 8009afe:	07db      	lsls	r3, r3, #31
 8009b00:	d536      	bpl.n	8009b70 <_printf_float+0x424>
 8009b02:	2301      	movs	r3, #1
 8009b04:	4642      	mov	r2, r8
 8009b06:	4631      	mov	r1, r6
 8009b08:	4628      	mov	r0, r5
 8009b0a:	47b8      	blx	r7
 8009b0c:	3001      	adds	r0, #1
 8009b0e:	f43f ae78 	beq.w	8009802 <_printf_float+0xb6>
 8009b12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b16:	4631      	mov	r1, r6
 8009b18:	4628      	mov	r0, r5
 8009b1a:	47b8      	blx	r7
 8009b1c:	3001      	adds	r0, #1
 8009b1e:	f43f ae70 	beq.w	8009802 <_printf_float+0xb6>
 8009b22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009b26:	2200      	movs	r2, #0
 8009b28:	2300      	movs	r3, #0
 8009b2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b2e:	f7f6 ffeb 	bl	8000b08 <__aeabi_dcmpeq>
 8009b32:	b9c0      	cbnz	r0, 8009b66 <_printf_float+0x41a>
 8009b34:	4653      	mov	r3, sl
 8009b36:	f108 0201 	add.w	r2, r8, #1
 8009b3a:	4631      	mov	r1, r6
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	47b8      	blx	r7
 8009b40:	3001      	adds	r0, #1
 8009b42:	d10c      	bne.n	8009b5e <_printf_float+0x412>
 8009b44:	e65d      	b.n	8009802 <_printf_float+0xb6>
 8009b46:	2301      	movs	r3, #1
 8009b48:	465a      	mov	r2, fp
 8009b4a:	4631      	mov	r1, r6
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	47b8      	blx	r7
 8009b50:	3001      	adds	r0, #1
 8009b52:	f43f ae56 	beq.w	8009802 <_printf_float+0xb6>
 8009b56:	f108 0801 	add.w	r8, r8, #1
 8009b5a:	45d0      	cmp	r8, sl
 8009b5c:	dbf3      	blt.n	8009b46 <_printf_float+0x3fa>
 8009b5e:	464b      	mov	r3, r9
 8009b60:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009b64:	e6df      	b.n	8009926 <_printf_float+0x1da>
 8009b66:	f04f 0800 	mov.w	r8, #0
 8009b6a:	f104 0b1a 	add.w	fp, r4, #26
 8009b6e:	e7f4      	b.n	8009b5a <_printf_float+0x40e>
 8009b70:	2301      	movs	r3, #1
 8009b72:	4642      	mov	r2, r8
 8009b74:	e7e1      	b.n	8009b3a <_printf_float+0x3ee>
 8009b76:	2301      	movs	r3, #1
 8009b78:	464a      	mov	r2, r9
 8009b7a:	4631      	mov	r1, r6
 8009b7c:	4628      	mov	r0, r5
 8009b7e:	47b8      	blx	r7
 8009b80:	3001      	adds	r0, #1
 8009b82:	f43f ae3e 	beq.w	8009802 <_printf_float+0xb6>
 8009b86:	f108 0801 	add.w	r8, r8, #1
 8009b8a:	68e3      	ldr	r3, [r4, #12]
 8009b8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b8e:	1a5b      	subs	r3, r3, r1
 8009b90:	4543      	cmp	r3, r8
 8009b92:	dcf0      	bgt.n	8009b76 <_printf_float+0x42a>
 8009b94:	e6fc      	b.n	8009990 <_printf_float+0x244>
 8009b96:	f04f 0800 	mov.w	r8, #0
 8009b9a:	f104 0919 	add.w	r9, r4, #25
 8009b9e:	e7f4      	b.n	8009b8a <_printf_float+0x43e>

08009ba0 <_printf_common>:
 8009ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba4:	4616      	mov	r6, r2
 8009ba6:	4698      	mov	r8, r3
 8009ba8:	688a      	ldr	r2, [r1, #8]
 8009baa:	690b      	ldr	r3, [r1, #16]
 8009bac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	bfb8      	it	lt
 8009bb4:	4613      	movlt	r3, r2
 8009bb6:	6033      	str	r3, [r6, #0]
 8009bb8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009bbc:	4607      	mov	r7, r0
 8009bbe:	460c      	mov	r4, r1
 8009bc0:	b10a      	cbz	r2, 8009bc6 <_printf_common+0x26>
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	6033      	str	r3, [r6, #0]
 8009bc6:	6823      	ldr	r3, [r4, #0]
 8009bc8:	0699      	lsls	r1, r3, #26
 8009bca:	bf42      	ittt	mi
 8009bcc:	6833      	ldrmi	r3, [r6, #0]
 8009bce:	3302      	addmi	r3, #2
 8009bd0:	6033      	strmi	r3, [r6, #0]
 8009bd2:	6825      	ldr	r5, [r4, #0]
 8009bd4:	f015 0506 	ands.w	r5, r5, #6
 8009bd8:	d106      	bne.n	8009be8 <_printf_common+0x48>
 8009bda:	f104 0a19 	add.w	sl, r4, #25
 8009bde:	68e3      	ldr	r3, [r4, #12]
 8009be0:	6832      	ldr	r2, [r6, #0]
 8009be2:	1a9b      	subs	r3, r3, r2
 8009be4:	42ab      	cmp	r3, r5
 8009be6:	dc26      	bgt.n	8009c36 <_printf_common+0x96>
 8009be8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009bec:	6822      	ldr	r2, [r4, #0]
 8009bee:	3b00      	subs	r3, #0
 8009bf0:	bf18      	it	ne
 8009bf2:	2301      	movne	r3, #1
 8009bf4:	0692      	lsls	r2, r2, #26
 8009bf6:	d42b      	bmi.n	8009c50 <_printf_common+0xb0>
 8009bf8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009bfc:	4641      	mov	r1, r8
 8009bfe:	4638      	mov	r0, r7
 8009c00:	47c8      	blx	r9
 8009c02:	3001      	adds	r0, #1
 8009c04:	d01e      	beq.n	8009c44 <_printf_common+0xa4>
 8009c06:	6823      	ldr	r3, [r4, #0]
 8009c08:	6922      	ldr	r2, [r4, #16]
 8009c0a:	f003 0306 	and.w	r3, r3, #6
 8009c0e:	2b04      	cmp	r3, #4
 8009c10:	bf02      	ittt	eq
 8009c12:	68e5      	ldreq	r5, [r4, #12]
 8009c14:	6833      	ldreq	r3, [r6, #0]
 8009c16:	1aed      	subeq	r5, r5, r3
 8009c18:	68a3      	ldr	r3, [r4, #8]
 8009c1a:	bf0c      	ite	eq
 8009c1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c20:	2500      	movne	r5, #0
 8009c22:	4293      	cmp	r3, r2
 8009c24:	bfc4      	itt	gt
 8009c26:	1a9b      	subgt	r3, r3, r2
 8009c28:	18ed      	addgt	r5, r5, r3
 8009c2a:	2600      	movs	r6, #0
 8009c2c:	341a      	adds	r4, #26
 8009c2e:	42b5      	cmp	r5, r6
 8009c30:	d11a      	bne.n	8009c68 <_printf_common+0xc8>
 8009c32:	2000      	movs	r0, #0
 8009c34:	e008      	b.n	8009c48 <_printf_common+0xa8>
 8009c36:	2301      	movs	r3, #1
 8009c38:	4652      	mov	r2, sl
 8009c3a:	4641      	mov	r1, r8
 8009c3c:	4638      	mov	r0, r7
 8009c3e:	47c8      	blx	r9
 8009c40:	3001      	adds	r0, #1
 8009c42:	d103      	bne.n	8009c4c <_printf_common+0xac>
 8009c44:	f04f 30ff 	mov.w	r0, #4294967295
 8009c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c4c:	3501      	adds	r5, #1
 8009c4e:	e7c6      	b.n	8009bde <_printf_common+0x3e>
 8009c50:	18e1      	adds	r1, r4, r3
 8009c52:	1c5a      	adds	r2, r3, #1
 8009c54:	2030      	movs	r0, #48	@ 0x30
 8009c56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009c5a:	4422      	add	r2, r4
 8009c5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009c60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009c64:	3302      	adds	r3, #2
 8009c66:	e7c7      	b.n	8009bf8 <_printf_common+0x58>
 8009c68:	2301      	movs	r3, #1
 8009c6a:	4622      	mov	r2, r4
 8009c6c:	4641      	mov	r1, r8
 8009c6e:	4638      	mov	r0, r7
 8009c70:	47c8      	blx	r9
 8009c72:	3001      	adds	r0, #1
 8009c74:	d0e6      	beq.n	8009c44 <_printf_common+0xa4>
 8009c76:	3601      	adds	r6, #1
 8009c78:	e7d9      	b.n	8009c2e <_printf_common+0x8e>
	...

08009c7c <_printf_i>:
 8009c7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c80:	7e0f      	ldrb	r7, [r1, #24]
 8009c82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009c84:	2f78      	cmp	r7, #120	@ 0x78
 8009c86:	4691      	mov	r9, r2
 8009c88:	4680      	mov	r8, r0
 8009c8a:	460c      	mov	r4, r1
 8009c8c:	469a      	mov	sl, r3
 8009c8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009c92:	d807      	bhi.n	8009ca4 <_printf_i+0x28>
 8009c94:	2f62      	cmp	r7, #98	@ 0x62
 8009c96:	d80a      	bhi.n	8009cae <_printf_i+0x32>
 8009c98:	2f00      	cmp	r7, #0
 8009c9a:	f000 80d1 	beq.w	8009e40 <_printf_i+0x1c4>
 8009c9e:	2f58      	cmp	r7, #88	@ 0x58
 8009ca0:	f000 80b8 	beq.w	8009e14 <_printf_i+0x198>
 8009ca4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ca8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009cac:	e03a      	b.n	8009d24 <_printf_i+0xa8>
 8009cae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009cb2:	2b15      	cmp	r3, #21
 8009cb4:	d8f6      	bhi.n	8009ca4 <_printf_i+0x28>
 8009cb6:	a101      	add	r1, pc, #4	@ (adr r1, 8009cbc <_printf_i+0x40>)
 8009cb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009cbc:	08009d15 	.word	0x08009d15
 8009cc0:	08009d29 	.word	0x08009d29
 8009cc4:	08009ca5 	.word	0x08009ca5
 8009cc8:	08009ca5 	.word	0x08009ca5
 8009ccc:	08009ca5 	.word	0x08009ca5
 8009cd0:	08009ca5 	.word	0x08009ca5
 8009cd4:	08009d29 	.word	0x08009d29
 8009cd8:	08009ca5 	.word	0x08009ca5
 8009cdc:	08009ca5 	.word	0x08009ca5
 8009ce0:	08009ca5 	.word	0x08009ca5
 8009ce4:	08009ca5 	.word	0x08009ca5
 8009ce8:	08009e27 	.word	0x08009e27
 8009cec:	08009d53 	.word	0x08009d53
 8009cf0:	08009de1 	.word	0x08009de1
 8009cf4:	08009ca5 	.word	0x08009ca5
 8009cf8:	08009ca5 	.word	0x08009ca5
 8009cfc:	08009e49 	.word	0x08009e49
 8009d00:	08009ca5 	.word	0x08009ca5
 8009d04:	08009d53 	.word	0x08009d53
 8009d08:	08009ca5 	.word	0x08009ca5
 8009d0c:	08009ca5 	.word	0x08009ca5
 8009d10:	08009de9 	.word	0x08009de9
 8009d14:	6833      	ldr	r3, [r6, #0]
 8009d16:	1d1a      	adds	r2, r3, #4
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	6032      	str	r2, [r6, #0]
 8009d1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009d24:	2301      	movs	r3, #1
 8009d26:	e09c      	b.n	8009e62 <_printf_i+0x1e6>
 8009d28:	6833      	ldr	r3, [r6, #0]
 8009d2a:	6820      	ldr	r0, [r4, #0]
 8009d2c:	1d19      	adds	r1, r3, #4
 8009d2e:	6031      	str	r1, [r6, #0]
 8009d30:	0606      	lsls	r6, r0, #24
 8009d32:	d501      	bpl.n	8009d38 <_printf_i+0xbc>
 8009d34:	681d      	ldr	r5, [r3, #0]
 8009d36:	e003      	b.n	8009d40 <_printf_i+0xc4>
 8009d38:	0645      	lsls	r5, r0, #25
 8009d3a:	d5fb      	bpl.n	8009d34 <_printf_i+0xb8>
 8009d3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009d40:	2d00      	cmp	r5, #0
 8009d42:	da03      	bge.n	8009d4c <_printf_i+0xd0>
 8009d44:	232d      	movs	r3, #45	@ 0x2d
 8009d46:	426d      	negs	r5, r5
 8009d48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d4c:	4858      	ldr	r0, [pc, #352]	@ (8009eb0 <_printf_i+0x234>)
 8009d4e:	230a      	movs	r3, #10
 8009d50:	e011      	b.n	8009d76 <_printf_i+0xfa>
 8009d52:	6821      	ldr	r1, [r4, #0]
 8009d54:	6833      	ldr	r3, [r6, #0]
 8009d56:	0608      	lsls	r0, r1, #24
 8009d58:	f853 5b04 	ldr.w	r5, [r3], #4
 8009d5c:	d402      	bmi.n	8009d64 <_printf_i+0xe8>
 8009d5e:	0649      	lsls	r1, r1, #25
 8009d60:	bf48      	it	mi
 8009d62:	b2ad      	uxthmi	r5, r5
 8009d64:	2f6f      	cmp	r7, #111	@ 0x6f
 8009d66:	4852      	ldr	r0, [pc, #328]	@ (8009eb0 <_printf_i+0x234>)
 8009d68:	6033      	str	r3, [r6, #0]
 8009d6a:	bf14      	ite	ne
 8009d6c:	230a      	movne	r3, #10
 8009d6e:	2308      	moveq	r3, #8
 8009d70:	2100      	movs	r1, #0
 8009d72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009d76:	6866      	ldr	r6, [r4, #4]
 8009d78:	60a6      	str	r6, [r4, #8]
 8009d7a:	2e00      	cmp	r6, #0
 8009d7c:	db05      	blt.n	8009d8a <_printf_i+0x10e>
 8009d7e:	6821      	ldr	r1, [r4, #0]
 8009d80:	432e      	orrs	r6, r5
 8009d82:	f021 0104 	bic.w	r1, r1, #4
 8009d86:	6021      	str	r1, [r4, #0]
 8009d88:	d04b      	beq.n	8009e22 <_printf_i+0x1a6>
 8009d8a:	4616      	mov	r6, r2
 8009d8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009d90:	fb03 5711 	mls	r7, r3, r1, r5
 8009d94:	5dc7      	ldrb	r7, [r0, r7]
 8009d96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d9a:	462f      	mov	r7, r5
 8009d9c:	42bb      	cmp	r3, r7
 8009d9e:	460d      	mov	r5, r1
 8009da0:	d9f4      	bls.n	8009d8c <_printf_i+0x110>
 8009da2:	2b08      	cmp	r3, #8
 8009da4:	d10b      	bne.n	8009dbe <_printf_i+0x142>
 8009da6:	6823      	ldr	r3, [r4, #0]
 8009da8:	07df      	lsls	r7, r3, #31
 8009daa:	d508      	bpl.n	8009dbe <_printf_i+0x142>
 8009dac:	6923      	ldr	r3, [r4, #16]
 8009dae:	6861      	ldr	r1, [r4, #4]
 8009db0:	4299      	cmp	r1, r3
 8009db2:	bfde      	ittt	le
 8009db4:	2330      	movle	r3, #48	@ 0x30
 8009db6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009dba:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009dbe:	1b92      	subs	r2, r2, r6
 8009dc0:	6122      	str	r2, [r4, #16]
 8009dc2:	f8cd a000 	str.w	sl, [sp]
 8009dc6:	464b      	mov	r3, r9
 8009dc8:	aa03      	add	r2, sp, #12
 8009dca:	4621      	mov	r1, r4
 8009dcc:	4640      	mov	r0, r8
 8009dce:	f7ff fee7 	bl	8009ba0 <_printf_common>
 8009dd2:	3001      	adds	r0, #1
 8009dd4:	d14a      	bne.n	8009e6c <_printf_i+0x1f0>
 8009dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8009dda:	b004      	add	sp, #16
 8009ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009de0:	6823      	ldr	r3, [r4, #0]
 8009de2:	f043 0320 	orr.w	r3, r3, #32
 8009de6:	6023      	str	r3, [r4, #0]
 8009de8:	4832      	ldr	r0, [pc, #200]	@ (8009eb4 <_printf_i+0x238>)
 8009dea:	2778      	movs	r7, #120	@ 0x78
 8009dec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009df0:	6823      	ldr	r3, [r4, #0]
 8009df2:	6831      	ldr	r1, [r6, #0]
 8009df4:	061f      	lsls	r7, r3, #24
 8009df6:	f851 5b04 	ldr.w	r5, [r1], #4
 8009dfa:	d402      	bmi.n	8009e02 <_printf_i+0x186>
 8009dfc:	065f      	lsls	r7, r3, #25
 8009dfe:	bf48      	it	mi
 8009e00:	b2ad      	uxthmi	r5, r5
 8009e02:	6031      	str	r1, [r6, #0]
 8009e04:	07d9      	lsls	r1, r3, #31
 8009e06:	bf44      	itt	mi
 8009e08:	f043 0320 	orrmi.w	r3, r3, #32
 8009e0c:	6023      	strmi	r3, [r4, #0]
 8009e0e:	b11d      	cbz	r5, 8009e18 <_printf_i+0x19c>
 8009e10:	2310      	movs	r3, #16
 8009e12:	e7ad      	b.n	8009d70 <_printf_i+0xf4>
 8009e14:	4826      	ldr	r0, [pc, #152]	@ (8009eb0 <_printf_i+0x234>)
 8009e16:	e7e9      	b.n	8009dec <_printf_i+0x170>
 8009e18:	6823      	ldr	r3, [r4, #0]
 8009e1a:	f023 0320 	bic.w	r3, r3, #32
 8009e1e:	6023      	str	r3, [r4, #0]
 8009e20:	e7f6      	b.n	8009e10 <_printf_i+0x194>
 8009e22:	4616      	mov	r6, r2
 8009e24:	e7bd      	b.n	8009da2 <_printf_i+0x126>
 8009e26:	6833      	ldr	r3, [r6, #0]
 8009e28:	6825      	ldr	r5, [r4, #0]
 8009e2a:	6961      	ldr	r1, [r4, #20]
 8009e2c:	1d18      	adds	r0, r3, #4
 8009e2e:	6030      	str	r0, [r6, #0]
 8009e30:	062e      	lsls	r6, r5, #24
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	d501      	bpl.n	8009e3a <_printf_i+0x1be>
 8009e36:	6019      	str	r1, [r3, #0]
 8009e38:	e002      	b.n	8009e40 <_printf_i+0x1c4>
 8009e3a:	0668      	lsls	r0, r5, #25
 8009e3c:	d5fb      	bpl.n	8009e36 <_printf_i+0x1ba>
 8009e3e:	8019      	strh	r1, [r3, #0]
 8009e40:	2300      	movs	r3, #0
 8009e42:	6123      	str	r3, [r4, #16]
 8009e44:	4616      	mov	r6, r2
 8009e46:	e7bc      	b.n	8009dc2 <_printf_i+0x146>
 8009e48:	6833      	ldr	r3, [r6, #0]
 8009e4a:	1d1a      	adds	r2, r3, #4
 8009e4c:	6032      	str	r2, [r6, #0]
 8009e4e:	681e      	ldr	r6, [r3, #0]
 8009e50:	6862      	ldr	r2, [r4, #4]
 8009e52:	2100      	movs	r1, #0
 8009e54:	4630      	mov	r0, r6
 8009e56:	f7f6 f9db 	bl	8000210 <memchr>
 8009e5a:	b108      	cbz	r0, 8009e60 <_printf_i+0x1e4>
 8009e5c:	1b80      	subs	r0, r0, r6
 8009e5e:	6060      	str	r0, [r4, #4]
 8009e60:	6863      	ldr	r3, [r4, #4]
 8009e62:	6123      	str	r3, [r4, #16]
 8009e64:	2300      	movs	r3, #0
 8009e66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e6a:	e7aa      	b.n	8009dc2 <_printf_i+0x146>
 8009e6c:	6923      	ldr	r3, [r4, #16]
 8009e6e:	4632      	mov	r2, r6
 8009e70:	4649      	mov	r1, r9
 8009e72:	4640      	mov	r0, r8
 8009e74:	47d0      	blx	sl
 8009e76:	3001      	adds	r0, #1
 8009e78:	d0ad      	beq.n	8009dd6 <_printf_i+0x15a>
 8009e7a:	6823      	ldr	r3, [r4, #0]
 8009e7c:	079b      	lsls	r3, r3, #30
 8009e7e:	d413      	bmi.n	8009ea8 <_printf_i+0x22c>
 8009e80:	68e0      	ldr	r0, [r4, #12]
 8009e82:	9b03      	ldr	r3, [sp, #12]
 8009e84:	4298      	cmp	r0, r3
 8009e86:	bfb8      	it	lt
 8009e88:	4618      	movlt	r0, r3
 8009e8a:	e7a6      	b.n	8009dda <_printf_i+0x15e>
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	4632      	mov	r2, r6
 8009e90:	4649      	mov	r1, r9
 8009e92:	4640      	mov	r0, r8
 8009e94:	47d0      	blx	sl
 8009e96:	3001      	adds	r0, #1
 8009e98:	d09d      	beq.n	8009dd6 <_printf_i+0x15a>
 8009e9a:	3501      	adds	r5, #1
 8009e9c:	68e3      	ldr	r3, [r4, #12]
 8009e9e:	9903      	ldr	r1, [sp, #12]
 8009ea0:	1a5b      	subs	r3, r3, r1
 8009ea2:	42ab      	cmp	r3, r5
 8009ea4:	dcf2      	bgt.n	8009e8c <_printf_i+0x210>
 8009ea6:	e7eb      	b.n	8009e80 <_printf_i+0x204>
 8009ea8:	2500      	movs	r5, #0
 8009eaa:	f104 0619 	add.w	r6, r4, #25
 8009eae:	e7f5      	b.n	8009e9c <_printf_i+0x220>
 8009eb0:	0800d654 	.word	0x0800d654
 8009eb4:	0800d665 	.word	0x0800d665

08009eb8 <_scanf_float>:
 8009eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ebc:	b087      	sub	sp, #28
 8009ebe:	4691      	mov	r9, r2
 8009ec0:	9303      	str	r3, [sp, #12]
 8009ec2:	688b      	ldr	r3, [r1, #8]
 8009ec4:	1e5a      	subs	r2, r3, #1
 8009ec6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009eca:	bf81      	itttt	hi
 8009ecc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009ed0:	eb03 0b05 	addhi.w	fp, r3, r5
 8009ed4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009ed8:	608b      	strhi	r3, [r1, #8]
 8009eda:	680b      	ldr	r3, [r1, #0]
 8009edc:	460a      	mov	r2, r1
 8009ede:	f04f 0500 	mov.w	r5, #0
 8009ee2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009ee6:	f842 3b1c 	str.w	r3, [r2], #28
 8009eea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009eee:	4680      	mov	r8, r0
 8009ef0:	460c      	mov	r4, r1
 8009ef2:	bf98      	it	ls
 8009ef4:	f04f 0b00 	movls.w	fp, #0
 8009ef8:	9201      	str	r2, [sp, #4]
 8009efa:	4616      	mov	r6, r2
 8009efc:	46aa      	mov	sl, r5
 8009efe:	462f      	mov	r7, r5
 8009f00:	9502      	str	r5, [sp, #8]
 8009f02:	68a2      	ldr	r2, [r4, #8]
 8009f04:	b15a      	cbz	r2, 8009f1e <_scanf_float+0x66>
 8009f06:	f8d9 3000 	ldr.w	r3, [r9]
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	2b4e      	cmp	r3, #78	@ 0x4e
 8009f0e:	d863      	bhi.n	8009fd8 <_scanf_float+0x120>
 8009f10:	2b40      	cmp	r3, #64	@ 0x40
 8009f12:	d83b      	bhi.n	8009f8c <_scanf_float+0xd4>
 8009f14:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009f18:	b2c8      	uxtb	r0, r1
 8009f1a:	280e      	cmp	r0, #14
 8009f1c:	d939      	bls.n	8009f92 <_scanf_float+0xda>
 8009f1e:	b11f      	cbz	r7, 8009f28 <_scanf_float+0x70>
 8009f20:	6823      	ldr	r3, [r4, #0]
 8009f22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f26:	6023      	str	r3, [r4, #0]
 8009f28:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f2c:	f1ba 0f01 	cmp.w	sl, #1
 8009f30:	f200 8114 	bhi.w	800a15c <_scanf_float+0x2a4>
 8009f34:	9b01      	ldr	r3, [sp, #4]
 8009f36:	429e      	cmp	r6, r3
 8009f38:	f200 8105 	bhi.w	800a146 <_scanf_float+0x28e>
 8009f3c:	2001      	movs	r0, #1
 8009f3e:	b007      	add	sp, #28
 8009f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f44:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009f48:	2a0d      	cmp	r2, #13
 8009f4a:	d8e8      	bhi.n	8009f1e <_scanf_float+0x66>
 8009f4c:	a101      	add	r1, pc, #4	@ (adr r1, 8009f54 <_scanf_float+0x9c>)
 8009f4e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009f52:	bf00      	nop
 8009f54:	0800a09d 	.word	0x0800a09d
 8009f58:	08009f1f 	.word	0x08009f1f
 8009f5c:	08009f1f 	.word	0x08009f1f
 8009f60:	08009f1f 	.word	0x08009f1f
 8009f64:	0800a0f9 	.word	0x0800a0f9
 8009f68:	0800a0d3 	.word	0x0800a0d3
 8009f6c:	08009f1f 	.word	0x08009f1f
 8009f70:	08009f1f 	.word	0x08009f1f
 8009f74:	0800a0ab 	.word	0x0800a0ab
 8009f78:	08009f1f 	.word	0x08009f1f
 8009f7c:	08009f1f 	.word	0x08009f1f
 8009f80:	08009f1f 	.word	0x08009f1f
 8009f84:	08009f1f 	.word	0x08009f1f
 8009f88:	0800a067 	.word	0x0800a067
 8009f8c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009f90:	e7da      	b.n	8009f48 <_scanf_float+0x90>
 8009f92:	290e      	cmp	r1, #14
 8009f94:	d8c3      	bhi.n	8009f1e <_scanf_float+0x66>
 8009f96:	a001      	add	r0, pc, #4	@ (adr r0, 8009f9c <_scanf_float+0xe4>)
 8009f98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009f9c:	0800a057 	.word	0x0800a057
 8009fa0:	08009f1f 	.word	0x08009f1f
 8009fa4:	0800a057 	.word	0x0800a057
 8009fa8:	0800a0e7 	.word	0x0800a0e7
 8009fac:	08009f1f 	.word	0x08009f1f
 8009fb0:	08009ff9 	.word	0x08009ff9
 8009fb4:	0800a03d 	.word	0x0800a03d
 8009fb8:	0800a03d 	.word	0x0800a03d
 8009fbc:	0800a03d 	.word	0x0800a03d
 8009fc0:	0800a03d 	.word	0x0800a03d
 8009fc4:	0800a03d 	.word	0x0800a03d
 8009fc8:	0800a03d 	.word	0x0800a03d
 8009fcc:	0800a03d 	.word	0x0800a03d
 8009fd0:	0800a03d 	.word	0x0800a03d
 8009fd4:	0800a03d 	.word	0x0800a03d
 8009fd8:	2b6e      	cmp	r3, #110	@ 0x6e
 8009fda:	d809      	bhi.n	8009ff0 <_scanf_float+0x138>
 8009fdc:	2b60      	cmp	r3, #96	@ 0x60
 8009fde:	d8b1      	bhi.n	8009f44 <_scanf_float+0x8c>
 8009fe0:	2b54      	cmp	r3, #84	@ 0x54
 8009fe2:	d07b      	beq.n	800a0dc <_scanf_float+0x224>
 8009fe4:	2b59      	cmp	r3, #89	@ 0x59
 8009fe6:	d19a      	bne.n	8009f1e <_scanf_float+0x66>
 8009fe8:	2d07      	cmp	r5, #7
 8009fea:	d198      	bne.n	8009f1e <_scanf_float+0x66>
 8009fec:	2508      	movs	r5, #8
 8009fee:	e02f      	b.n	800a050 <_scanf_float+0x198>
 8009ff0:	2b74      	cmp	r3, #116	@ 0x74
 8009ff2:	d073      	beq.n	800a0dc <_scanf_float+0x224>
 8009ff4:	2b79      	cmp	r3, #121	@ 0x79
 8009ff6:	e7f6      	b.n	8009fe6 <_scanf_float+0x12e>
 8009ff8:	6821      	ldr	r1, [r4, #0]
 8009ffa:	05c8      	lsls	r0, r1, #23
 8009ffc:	d51e      	bpl.n	800a03c <_scanf_float+0x184>
 8009ffe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a002:	6021      	str	r1, [r4, #0]
 800a004:	3701      	adds	r7, #1
 800a006:	f1bb 0f00 	cmp.w	fp, #0
 800a00a:	d003      	beq.n	800a014 <_scanf_float+0x15c>
 800a00c:	3201      	adds	r2, #1
 800a00e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a012:	60a2      	str	r2, [r4, #8]
 800a014:	68a3      	ldr	r3, [r4, #8]
 800a016:	3b01      	subs	r3, #1
 800a018:	60a3      	str	r3, [r4, #8]
 800a01a:	6923      	ldr	r3, [r4, #16]
 800a01c:	3301      	adds	r3, #1
 800a01e:	6123      	str	r3, [r4, #16]
 800a020:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a024:	3b01      	subs	r3, #1
 800a026:	2b00      	cmp	r3, #0
 800a028:	f8c9 3004 	str.w	r3, [r9, #4]
 800a02c:	f340 8082 	ble.w	800a134 <_scanf_float+0x27c>
 800a030:	f8d9 3000 	ldr.w	r3, [r9]
 800a034:	3301      	adds	r3, #1
 800a036:	f8c9 3000 	str.w	r3, [r9]
 800a03a:	e762      	b.n	8009f02 <_scanf_float+0x4a>
 800a03c:	eb1a 0105 	adds.w	r1, sl, r5
 800a040:	f47f af6d 	bne.w	8009f1e <_scanf_float+0x66>
 800a044:	6822      	ldr	r2, [r4, #0]
 800a046:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a04a:	6022      	str	r2, [r4, #0]
 800a04c:	460d      	mov	r5, r1
 800a04e:	468a      	mov	sl, r1
 800a050:	f806 3b01 	strb.w	r3, [r6], #1
 800a054:	e7de      	b.n	800a014 <_scanf_float+0x15c>
 800a056:	6822      	ldr	r2, [r4, #0]
 800a058:	0610      	lsls	r0, r2, #24
 800a05a:	f57f af60 	bpl.w	8009f1e <_scanf_float+0x66>
 800a05e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a062:	6022      	str	r2, [r4, #0]
 800a064:	e7f4      	b.n	800a050 <_scanf_float+0x198>
 800a066:	f1ba 0f00 	cmp.w	sl, #0
 800a06a:	d10c      	bne.n	800a086 <_scanf_float+0x1ce>
 800a06c:	b977      	cbnz	r7, 800a08c <_scanf_float+0x1d4>
 800a06e:	6822      	ldr	r2, [r4, #0]
 800a070:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a074:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a078:	d108      	bne.n	800a08c <_scanf_float+0x1d4>
 800a07a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a07e:	6022      	str	r2, [r4, #0]
 800a080:	f04f 0a01 	mov.w	sl, #1
 800a084:	e7e4      	b.n	800a050 <_scanf_float+0x198>
 800a086:	f1ba 0f02 	cmp.w	sl, #2
 800a08a:	d050      	beq.n	800a12e <_scanf_float+0x276>
 800a08c:	2d01      	cmp	r5, #1
 800a08e:	d002      	beq.n	800a096 <_scanf_float+0x1de>
 800a090:	2d04      	cmp	r5, #4
 800a092:	f47f af44 	bne.w	8009f1e <_scanf_float+0x66>
 800a096:	3501      	adds	r5, #1
 800a098:	b2ed      	uxtb	r5, r5
 800a09a:	e7d9      	b.n	800a050 <_scanf_float+0x198>
 800a09c:	f1ba 0f01 	cmp.w	sl, #1
 800a0a0:	f47f af3d 	bne.w	8009f1e <_scanf_float+0x66>
 800a0a4:	f04f 0a02 	mov.w	sl, #2
 800a0a8:	e7d2      	b.n	800a050 <_scanf_float+0x198>
 800a0aa:	b975      	cbnz	r5, 800a0ca <_scanf_float+0x212>
 800a0ac:	2f00      	cmp	r7, #0
 800a0ae:	f47f af37 	bne.w	8009f20 <_scanf_float+0x68>
 800a0b2:	6822      	ldr	r2, [r4, #0]
 800a0b4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a0b8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a0bc:	f040 8103 	bne.w	800a2c6 <_scanf_float+0x40e>
 800a0c0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a0c4:	6022      	str	r2, [r4, #0]
 800a0c6:	2501      	movs	r5, #1
 800a0c8:	e7c2      	b.n	800a050 <_scanf_float+0x198>
 800a0ca:	2d03      	cmp	r5, #3
 800a0cc:	d0e3      	beq.n	800a096 <_scanf_float+0x1de>
 800a0ce:	2d05      	cmp	r5, #5
 800a0d0:	e7df      	b.n	800a092 <_scanf_float+0x1da>
 800a0d2:	2d02      	cmp	r5, #2
 800a0d4:	f47f af23 	bne.w	8009f1e <_scanf_float+0x66>
 800a0d8:	2503      	movs	r5, #3
 800a0da:	e7b9      	b.n	800a050 <_scanf_float+0x198>
 800a0dc:	2d06      	cmp	r5, #6
 800a0de:	f47f af1e 	bne.w	8009f1e <_scanf_float+0x66>
 800a0e2:	2507      	movs	r5, #7
 800a0e4:	e7b4      	b.n	800a050 <_scanf_float+0x198>
 800a0e6:	6822      	ldr	r2, [r4, #0]
 800a0e8:	0591      	lsls	r1, r2, #22
 800a0ea:	f57f af18 	bpl.w	8009f1e <_scanf_float+0x66>
 800a0ee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a0f2:	6022      	str	r2, [r4, #0]
 800a0f4:	9702      	str	r7, [sp, #8]
 800a0f6:	e7ab      	b.n	800a050 <_scanf_float+0x198>
 800a0f8:	6822      	ldr	r2, [r4, #0]
 800a0fa:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a0fe:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a102:	d005      	beq.n	800a110 <_scanf_float+0x258>
 800a104:	0550      	lsls	r0, r2, #21
 800a106:	f57f af0a 	bpl.w	8009f1e <_scanf_float+0x66>
 800a10a:	2f00      	cmp	r7, #0
 800a10c:	f000 80db 	beq.w	800a2c6 <_scanf_float+0x40e>
 800a110:	0591      	lsls	r1, r2, #22
 800a112:	bf58      	it	pl
 800a114:	9902      	ldrpl	r1, [sp, #8]
 800a116:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a11a:	bf58      	it	pl
 800a11c:	1a79      	subpl	r1, r7, r1
 800a11e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a122:	bf58      	it	pl
 800a124:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a128:	6022      	str	r2, [r4, #0]
 800a12a:	2700      	movs	r7, #0
 800a12c:	e790      	b.n	800a050 <_scanf_float+0x198>
 800a12e:	f04f 0a03 	mov.w	sl, #3
 800a132:	e78d      	b.n	800a050 <_scanf_float+0x198>
 800a134:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a138:	4649      	mov	r1, r9
 800a13a:	4640      	mov	r0, r8
 800a13c:	4798      	blx	r3
 800a13e:	2800      	cmp	r0, #0
 800a140:	f43f aedf 	beq.w	8009f02 <_scanf_float+0x4a>
 800a144:	e6eb      	b.n	8009f1e <_scanf_float+0x66>
 800a146:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a14a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a14e:	464a      	mov	r2, r9
 800a150:	4640      	mov	r0, r8
 800a152:	4798      	blx	r3
 800a154:	6923      	ldr	r3, [r4, #16]
 800a156:	3b01      	subs	r3, #1
 800a158:	6123      	str	r3, [r4, #16]
 800a15a:	e6eb      	b.n	8009f34 <_scanf_float+0x7c>
 800a15c:	1e6b      	subs	r3, r5, #1
 800a15e:	2b06      	cmp	r3, #6
 800a160:	d824      	bhi.n	800a1ac <_scanf_float+0x2f4>
 800a162:	2d02      	cmp	r5, #2
 800a164:	d836      	bhi.n	800a1d4 <_scanf_float+0x31c>
 800a166:	9b01      	ldr	r3, [sp, #4]
 800a168:	429e      	cmp	r6, r3
 800a16a:	f67f aee7 	bls.w	8009f3c <_scanf_float+0x84>
 800a16e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a172:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a176:	464a      	mov	r2, r9
 800a178:	4640      	mov	r0, r8
 800a17a:	4798      	blx	r3
 800a17c:	6923      	ldr	r3, [r4, #16]
 800a17e:	3b01      	subs	r3, #1
 800a180:	6123      	str	r3, [r4, #16]
 800a182:	e7f0      	b.n	800a166 <_scanf_float+0x2ae>
 800a184:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a188:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a18c:	464a      	mov	r2, r9
 800a18e:	4640      	mov	r0, r8
 800a190:	4798      	blx	r3
 800a192:	6923      	ldr	r3, [r4, #16]
 800a194:	3b01      	subs	r3, #1
 800a196:	6123      	str	r3, [r4, #16]
 800a198:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a19c:	fa5f fa8a 	uxtb.w	sl, sl
 800a1a0:	f1ba 0f02 	cmp.w	sl, #2
 800a1a4:	d1ee      	bne.n	800a184 <_scanf_float+0x2cc>
 800a1a6:	3d03      	subs	r5, #3
 800a1a8:	b2ed      	uxtb	r5, r5
 800a1aa:	1b76      	subs	r6, r6, r5
 800a1ac:	6823      	ldr	r3, [r4, #0]
 800a1ae:	05da      	lsls	r2, r3, #23
 800a1b0:	d530      	bpl.n	800a214 <_scanf_float+0x35c>
 800a1b2:	055b      	lsls	r3, r3, #21
 800a1b4:	d511      	bpl.n	800a1da <_scanf_float+0x322>
 800a1b6:	9b01      	ldr	r3, [sp, #4]
 800a1b8:	429e      	cmp	r6, r3
 800a1ba:	f67f aebf 	bls.w	8009f3c <_scanf_float+0x84>
 800a1be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a1c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a1c6:	464a      	mov	r2, r9
 800a1c8:	4640      	mov	r0, r8
 800a1ca:	4798      	blx	r3
 800a1cc:	6923      	ldr	r3, [r4, #16]
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	6123      	str	r3, [r4, #16]
 800a1d2:	e7f0      	b.n	800a1b6 <_scanf_float+0x2fe>
 800a1d4:	46aa      	mov	sl, r5
 800a1d6:	46b3      	mov	fp, r6
 800a1d8:	e7de      	b.n	800a198 <_scanf_float+0x2e0>
 800a1da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a1de:	6923      	ldr	r3, [r4, #16]
 800a1e0:	2965      	cmp	r1, #101	@ 0x65
 800a1e2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a1e6:	f106 35ff 	add.w	r5, r6, #4294967295
 800a1ea:	6123      	str	r3, [r4, #16]
 800a1ec:	d00c      	beq.n	800a208 <_scanf_float+0x350>
 800a1ee:	2945      	cmp	r1, #69	@ 0x45
 800a1f0:	d00a      	beq.n	800a208 <_scanf_float+0x350>
 800a1f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a1f6:	464a      	mov	r2, r9
 800a1f8:	4640      	mov	r0, r8
 800a1fa:	4798      	blx	r3
 800a1fc:	6923      	ldr	r3, [r4, #16]
 800a1fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a202:	3b01      	subs	r3, #1
 800a204:	1eb5      	subs	r5, r6, #2
 800a206:	6123      	str	r3, [r4, #16]
 800a208:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a20c:	464a      	mov	r2, r9
 800a20e:	4640      	mov	r0, r8
 800a210:	4798      	blx	r3
 800a212:	462e      	mov	r6, r5
 800a214:	6822      	ldr	r2, [r4, #0]
 800a216:	f012 0210 	ands.w	r2, r2, #16
 800a21a:	d001      	beq.n	800a220 <_scanf_float+0x368>
 800a21c:	2000      	movs	r0, #0
 800a21e:	e68e      	b.n	8009f3e <_scanf_float+0x86>
 800a220:	7032      	strb	r2, [r6, #0]
 800a222:	6823      	ldr	r3, [r4, #0]
 800a224:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a228:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a22c:	d125      	bne.n	800a27a <_scanf_float+0x3c2>
 800a22e:	9b02      	ldr	r3, [sp, #8]
 800a230:	429f      	cmp	r7, r3
 800a232:	d00a      	beq.n	800a24a <_scanf_float+0x392>
 800a234:	1bda      	subs	r2, r3, r7
 800a236:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a23a:	429e      	cmp	r6, r3
 800a23c:	bf28      	it	cs
 800a23e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a242:	4922      	ldr	r1, [pc, #136]	@ (800a2cc <_scanf_float+0x414>)
 800a244:	4630      	mov	r0, r6
 800a246:	f000 f977 	bl	800a538 <siprintf>
 800a24a:	9901      	ldr	r1, [sp, #4]
 800a24c:	2200      	movs	r2, #0
 800a24e:	4640      	mov	r0, r8
 800a250:	f7ff f9ca 	bl	80095e8 <_strtod_r>
 800a254:	9b03      	ldr	r3, [sp, #12]
 800a256:	6821      	ldr	r1, [r4, #0]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f011 0f02 	tst.w	r1, #2
 800a25e:	ec57 6b10 	vmov	r6, r7, d0
 800a262:	f103 0204 	add.w	r2, r3, #4
 800a266:	d015      	beq.n	800a294 <_scanf_float+0x3dc>
 800a268:	9903      	ldr	r1, [sp, #12]
 800a26a:	600a      	str	r2, [r1, #0]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	e9c3 6700 	strd	r6, r7, [r3]
 800a272:	68e3      	ldr	r3, [r4, #12]
 800a274:	3301      	adds	r3, #1
 800a276:	60e3      	str	r3, [r4, #12]
 800a278:	e7d0      	b.n	800a21c <_scanf_float+0x364>
 800a27a:	9b04      	ldr	r3, [sp, #16]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d0e4      	beq.n	800a24a <_scanf_float+0x392>
 800a280:	9905      	ldr	r1, [sp, #20]
 800a282:	230a      	movs	r3, #10
 800a284:	3101      	adds	r1, #1
 800a286:	4640      	mov	r0, r8
 800a288:	f002 fb3e 	bl	800c908 <_strtol_r>
 800a28c:	9b04      	ldr	r3, [sp, #16]
 800a28e:	9e05      	ldr	r6, [sp, #20]
 800a290:	1ac2      	subs	r2, r0, r3
 800a292:	e7d0      	b.n	800a236 <_scanf_float+0x37e>
 800a294:	f011 0f04 	tst.w	r1, #4
 800a298:	9903      	ldr	r1, [sp, #12]
 800a29a:	600a      	str	r2, [r1, #0]
 800a29c:	d1e6      	bne.n	800a26c <_scanf_float+0x3b4>
 800a29e:	681d      	ldr	r5, [r3, #0]
 800a2a0:	4632      	mov	r2, r6
 800a2a2:	463b      	mov	r3, r7
 800a2a4:	4630      	mov	r0, r6
 800a2a6:	4639      	mov	r1, r7
 800a2a8:	f7f6 fc60 	bl	8000b6c <__aeabi_dcmpun>
 800a2ac:	b128      	cbz	r0, 800a2ba <_scanf_float+0x402>
 800a2ae:	4808      	ldr	r0, [pc, #32]	@ (800a2d0 <_scanf_float+0x418>)
 800a2b0:	f000 fb5a 	bl	800a968 <nanf>
 800a2b4:	ed85 0a00 	vstr	s0, [r5]
 800a2b8:	e7db      	b.n	800a272 <_scanf_float+0x3ba>
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	4639      	mov	r1, r7
 800a2be:	f7f6 fcb3 	bl	8000c28 <__aeabi_d2f>
 800a2c2:	6028      	str	r0, [r5, #0]
 800a2c4:	e7d5      	b.n	800a272 <_scanf_float+0x3ba>
 800a2c6:	2700      	movs	r7, #0
 800a2c8:	e62e      	b.n	8009f28 <_scanf_float+0x70>
 800a2ca:	bf00      	nop
 800a2cc:	0800d676 	.word	0x0800d676
 800a2d0:	0800d815 	.word	0x0800d815

0800a2d4 <std>:
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	b510      	push	{r4, lr}
 800a2d8:	4604      	mov	r4, r0
 800a2da:	e9c0 3300 	strd	r3, r3, [r0]
 800a2de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2e2:	6083      	str	r3, [r0, #8]
 800a2e4:	8181      	strh	r1, [r0, #12]
 800a2e6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a2e8:	81c2      	strh	r2, [r0, #14]
 800a2ea:	6183      	str	r3, [r0, #24]
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	2208      	movs	r2, #8
 800a2f0:	305c      	adds	r0, #92	@ 0x5c
 800a2f2:	f000 fa57 	bl	800a7a4 <memset>
 800a2f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a32c <std+0x58>)
 800a2f8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a2fa:	4b0d      	ldr	r3, [pc, #52]	@ (800a330 <std+0x5c>)
 800a2fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a2fe:	4b0d      	ldr	r3, [pc, #52]	@ (800a334 <std+0x60>)
 800a300:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a302:	4b0d      	ldr	r3, [pc, #52]	@ (800a338 <std+0x64>)
 800a304:	6323      	str	r3, [r4, #48]	@ 0x30
 800a306:	4b0d      	ldr	r3, [pc, #52]	@ (800a33c <std+0x68>)
 800a308:	6224      	str	r4, [r4, #32]
 800a30a:	429c      	cmp	r4, r3
 800a30c:	d006      	beq.n	800a31c <std+0x48>
 800a30e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a312:	4294      	cmp	r4, r2
 800a314:	d002      	beq.n	800a31c <std+0x48>
 800a316:	33d0      	adds	r3, #208	@ 0xd0
 800a318:	429c      	cmp	r4, r3
 800a31a:	d105      	bne.n	800a328 <std+0x54>
 800a31c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a324:	f000 bb04 	b.w	800a930 <__retarget_lock_init_recursive>
 800a328:	bd10      	pop	{r4, pc}
 800a32a:	bf00      	nop
 800a32c:	0800a57d 	.word	0x0800a57d
 800a330:	0800a59f 	.word	0x0800a59f
 800a334:	0800a5d7 	.word	0x0800a5d7
 800a338:	0800a5fb 	.word	0x0800a5fb
 800a33c:	20000e30 	.word	0x20000e30

0800a340 <stdio_exit_handler>:
 800a340:	4a02      	ldr	r2, [pc, #8]	@ (800a34c <stdio_exit_handler+0xc>)
 800a342:	4903      	ldr	r1, [pc, #12]	@ (800a350 <stdio_exit_handler+0x10>)
 800a344:	4803      	ldr	r0, [pc, #12]	@ (800a354 <stdio_exit_handler+0x14>)
 800a346:	f000 b869 	b.w	800a41c <_fwalk_sglue>
 800a34a:	bf00      	nop
 800a34c:	2000000c 	.word	0x2000000c
 800a350:	0800cf61 	.word	0x0800cf61
 800a354:	20000188 	.word	0x20000188

0800a358 <cleanup_stdio>:
 800a358:	6841      	ldr	r1, [r0, #4]
 800a35a:	4b0c      	ldr	r3, [pc, #48]	@ (800a38c <cleanup_stdio+0x34>)
 800a35c:	4299      	cmp	r1, r3
 800a35e:	b510      	push	{r4, lr}
 800a360:	4604      	mov	r4, r0
 800a362:	d001      	beq.n	800a368 <cleanup_stdio+0x10>
 800a364:	f002 fdfc 	bl	800cf60 <_fflush_r>
 800a368:	68a1      	ldr	r1, [r4, #8]
 800a36a:	4b09      	ldr	r3, [pc, #36]	@ (800a390 <cleanup_stdio+0x38>)
 800a36c:	4299      	cmp	r1, r3
 800a36e:	d002      	beq.n	800a376 <cleanup_stdio+0x1e>
 800a370:	4620      	mov	r0, r4
 800a372:	f002 fdf5 	bl	800cf60 <_fflush_r>
 800a376:	68e1      	ldr	r1, [r4, #12]
 800a378:	4b06      	ldr	r3, [pc, #24]	@ (800a394 <cleanup_stdio+0x3c>)
 800a37a:	4299      	cmp	r1, r3
 800a37c:	d004      	beq.n	800a388 <cleanup_stdio+0x30>
 800a37e:	4620      	mov	r0, r4
 800a380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a384:	f002 bdec 	b.w	800cf60 <_fflush_r>
 800a388:	bd10      	pop	{r4, pc}
 800a38a:	bf00      	nop
 800a38c:	20000e30 	.word	0x20000e30
 800a390:	20000e98 	.word	0x20000e98
 800a394:	20000f00 	.word	0x20000f00

0800a398 <global_stdio_init.part.0>:
 800a398:	b510      	push	{r4, lr}
 800a39a:	4b0b      	ldr	r3, [pc, #44]	@ (800a3c8 <global_stdio_init.part.0+0x30>)
 800a39c:	4c0b      	ldr	r4, [pc, #44]	@ (800a3cc <global_stdio_init.part.0+0x34>)
 800a39e:	4a0c      	ldr	r2, [pc, #48]	@ (800a3d0 <global_stdio_init.part.0+0x38>)
 800a3a0:	601a      	str	r2, [r3, #0]
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	2104      	movs	r1, #4
 800a3a8:	f7ff ff94 	bl	800a2d4 <std>
 800a3ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	2109      	movs	r1, #9
 800a3b4:	f7ff ff8e 	bl	800a2d4 <std>
 800a3b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a3bc:	2202      	movs	r2, #2
 800a3be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3c2:	2112      	movs	r1, #18
 800a3c4:	f7ff bf86 	b.w	800a2d4 <std>
 800a3c8:	20000f68 	.word	0x20000f68
 800a3cc:	20000e30 	.word	0x20000e30
 800a3d0:	0800a341 	.word	0x0800a341

0800a3d4 <__sfp_lock_acquire>:
 800a3d4:	4801      	ldr	r0, [pc, #4]	@ (800a3dc <__sfp_lock_acquire+0x8>)
 800a3d6:	f000 baac 	b.w	800a932 <__retarget_lock_acquire_recursive>
 800a3da:	bf00      	nop
 800a3dc:	20000f71 	.word	0x20000f71

0800a3e0 <__sfp_lock_release>:
 800a3e0:	4801      	ldr	r0, [pc, #4]	@ (800a3e8 <__sfp_lock_release+0x8>)
 800a3e2:	f000 baa7 	b.w	800a934 <__retarget_lock_release_recursive>
 800a3e6:	bf00      	nop
 800a3e8:	20000f71 	.word	0x20000f71

0800a3ec <__sinit>:
 800a3ec:	b510      	push	{r4, lr}
 800a3ee:	4604      	mov	r4, r0
 800a3f0:	f7ff fff0 	bl	800a3d4 <__sfp_lock_acquire>
 800a3f4:	6a23      	ldr	r3, [r4, #32]
 800a3f6:	b11b      	cbz	r3, 800a400 <__sinit+0x14>
 800a3f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3fc:	f7ff bff0 	b.w	800a3e0 <__sfp_lock_release>
 800a400:	4b04      	ldr	r3, [pc, #16]	@ (800a414 <__sinit+0x28>)
 800a402:	6223      	str	r3, [r4, #32]
 800a404:	4b04      	ldr	r3, [pc, #16]	@ (800a418 <__sinit+0x2c>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d1f5      	bne.n	800a3f8 <__sinit+0xc>
 800a40c:	f7ff ffc4 	bl	800a398 <global_stdio_init.part.0>
 800a410:	e7f2      	b.n	800a3f8 <__sinit+0xc>
 800a412:	bf00      	nop
 800a414:	0800a359 	.word	0x0800a359
 800a418:	20000f68 	.word	0x20000f68

0800a41c <_fwalk_sglue>:
 800a41c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a420:	4607      	mov	r7, r0
 800a422:	4688      	mov	r8, r1
 800a424:	4614      	mov	r4, r2
 800a426:	2600      	movs	r6, #0
 800a428:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a42c:	f1b9 0901 	subs.w	r9, r9, #1
 800a430:	d505      	bpl.n	800a43e <_fwalk_sglue+0x22>
 800a432:	6824      	ldr	r4, [r4, #0]
 800a434:	2c00      	cmp	r4, #0
 800a436:	d1f7      	bne.n	800a428 <_fwalk_sglue+0xc>
 800a438:	4630      	mov	r0, r6
 800a43a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a43e:	89ab      	ldrh	r3, [r5, #12]
 800a440:	2b01      	cmp	r3, #1
 800a442:	d907      	bls.n	800a454 <_fwalk_sglue+0x38>
 800a444:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a448:	3301      	adds	r3, #1
 800a44a:	d003      	beq.n	800a454 <_fwalk_sglue+0x38>
 800a44c:	4629      	mov	r1, r5
 800a44e:	4638      	mov	r0, r7
 800a450:	47c0      	blx	r8
 800a452:	4306      	orrs	r6, r0
 800a454:	3568      	adds	r5, #104	@ 0x68
 800a456:	e7e9      	b.n	800a42c <_fwalk_sglue+0x10>

0800a458 <iprintf>:
 800a458:	b40f      	push	{r0, r1, r2, r3}
 800a45a:	b507      	push	{r0, r1, r2, lr}
 800a45c:	4906      	ldr	r1, [pc, #24]	@ (800a478 <iprintf+0x20>)
 800a45e:	ab04      	add	r3, sp, #16
 800a460:	6808      	ldr	r0, [r1, #0]
 800a462:	f853 2b04 	ldr.w	r2, [r3], #4
 800a466:	6881      	ldr	r1, [r0, #8]
 800a468:	9301      	str	r3, [sp, #4]
 800a46a:	f002 fbdd 	bl	800cc28 <_vfiprintf_r>
 800a46e:	b003      	add	sp, #12
 800a470:	f85d eb04 	ldr.w	lr, [sp], #4
 800a474:	b004      	add	sp, #16
 800a476:	4770      	bx	lr
 800a478:	20000184 	.word	0x20000184

0800a47c <_puts_r>:
 800a47c:	6a03      	ldr	r3, [r0, #32]
 800a47e:	b570      	push	{r4, r5, r6, lr}
 800a480:	6884      	ldr	r4, [r0, #8]
 800a482:	4605      	mov	r5, r0
 800a484:	460e      	mov	r6, r1
 800a486:	b90b      	cbnz	r3, 800a48c <_puts_r+0x10>
 800a488:	f7ff ffb0 	bl	800a3ec <__sinit>
 800a48c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a48e:	07db      	lsls	r3, r3, #31
 800a490:	d405      	bmi.n	800a49e <_puts_r+0x22>
 800a492:	89a3      	ldrh	r3, [r4, #12]
 800a494:	0598      	lsls	r0, r3, #22
 800a496:	d402      	bmi.n	800a49e <_puts_r+0x22>
 800a498:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a49a:	f000 fa4a 	bl	800a932 <__retarget_lock_acquire_recursive>
 800a49e:	89a3      	ldrh	r3, [r4, #12]
 800a4a0:	0719      	lsls	r1, r3, #28
 800a4a2:	d502      	bpl.n	800a4aa <_puts_r+0x2e>
 800a4a4:	6923      	ldr	r3, [r4, #16]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d135      	bne.n	800a516 <_puts_r+0x9a>
 800a4aa:	4621      	mov	r1, r4
 800a4ac:	4628      	mov	r0, r5
 800a4ae:	f000 f923 	bl	800a6f8 <__swsetup_r>
 800a4b2:	b380      	cbz	r0, 800a516 <_puts_r+0x9a>
 800a4b4:	f04f 35ff 	mov.w	r5, #4294967295
 800a4b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a4ba:	07da      	lsls	r2, r3, #31
 800a4bc:	d405      	bmi.n	800a4ca <_puts_r+0x4e>
 800a4be:	89a3      	ldrh	r3, [r4, #12]
 800a4c0:	059b      	lsls	r3, r3, #22
 800a4c2:	d402      	bmi.n	800a4ca <_puts_r+0x4e>
 800a4c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4c6:	f000 fa35 	bl	800a934 <__retarget_lock_release_recursive>
 800a4ca:	4628      	mov	r0, r5
 800a4cc:	bd70      	pop	{r4, r5, r6, pc}
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	da04      	bge.n	800a4dc <_puts_r+0x60>
 800a4d2:	69a2      	ldr	r2, [r4, #24]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	dc17      	bgt.n	800a508 <_puts_r+0x8c>
 800a4d8:	290a      	cmp	r1, #10
 800a4da:	d015      	beq.n	800a508 <_puts_r+0x8c>
 800a4dc:	6823      	ldr	r3, [r4, #0]
 800a4de:	1c5a      	adds	r2, r3, #1
 800a4e0:	6022      	str	r2, [r4, #0]
 800a4e2:	7019      	strb	r1, [r3, #0]
 800a4e4:	68a3      	ldr	r3, [r4, #8]
 800a4e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	60a3      	str	r3, [r4, #8]
 800a4ee:	2900      	cmp	r1, #0
 800a4f0:	d1ed      	bne.n	800a4ce <_puts_r+0x52>
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	da11      	bge.n	800a51a <_puts_r+0x9e>
 800a4f6:	4622      	mov	r2, r4
 800a4f8:	210a      	movs	r1, #10
 800a4fa:	4628      	mov	r0, r5
 800a4fc:	f000 f8be 	bl	800a67c <__swbuf_r>
 800a500:	3001      	adds	r0, #1
 800a502:	d0d7      	beq.n	800a4b4 <_puts_r+0x38>
 800a504:	250a      	movs	r5, #10
 800a506:	e7d7      	b.n	800a4b8 <_puts_r+0x3c>
 800a508:	4622      	mov	r2, r4
 800a50a:	4628      	mov	r0, r5
 800a50c:	f000 f8b6 	bl	800a67c <__swbuf_r>
 800a510:	3001      	adds	r0, #1
 800a512:	d1e7      	bne.n	800a4e4 <_puts_r+0x68>
 800a514:	e7ce      	b.n	800a4b4 <_puts_r+0x38>
 800a516:	3e01      	subs	r6, #1
 800a518:	e7e4      	b.n	800a4e4 <_puts_r+0x68>
 800a51a:	6823      	ldr	r3, [r4, #0]
 800a51c:	1c5a      	adds	r2, r3, #1
 800a51e:	6022      	str	r2, [r4, #0]
 800a520:	220a      	movs	r2, #10
 800a522:	701a      	strb	r2, [r3, #0]
 800a524:	e7ee      	b.n	800a504 <_puts_r+0x88>
	...

0800a528 <puts>:
 800a528:	4b02      	ldr	r3, [pc, #8]	@ (800a534 <puts+0xc>)
 800a52a:	4601      	mov	r1, r0
 800a52c:	6818      	ldr	r0, [r3, #0]
 800a52e:	f7ff bfa5 	b.w	800a47c <_puts_r>
 800a532:	bf00      	nop
 800a534:	20000184 	.word	0x20000184

0800a538 <siprintf>:
 800a538:	b40e      	push	{r1, r2, r3}
 800a53a:	b510      	push	{r4, lr}
 800a53c:	b09d      	sub	sp, #116	@ 0x74
 800a53e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a540:	9002      	str	r0, [sp, #8]
 800a542:	9006      	str	r0, [sp, #24]
 800a544:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a548:	480a      	ldr	r0, [pc, #40]	@ (800a574 <siprintf+0x3c>)
 800a54a:	9107      	str	r1, [sp, #28]
 800a54c:	9104      	str	r1, [sp, #16]
 800a54e:	490a      	ldr	r1, [pc, #40]	@ (800a578 <siprintf+0x40>)
 800a550:	f853 2b04 	ldr.w	r2, [r3], #4
 800a554:	9105      	str	r1, [sp, #20]
 800a556:	2400      	movs	r4, #0
 800a558:	a902      	add	r1, sp, #8
 800a55a:	6800      	ldr	r0, [r0, #0]
 800a55c:	9301      	str	r3, [sp, #4]
 800a55e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a560:	f002 fa3c 	bl	800c9dc <_svfiprintf_r>
 800a564:	9b02      	ldr	r3, [sp, #8]
 800a566:	701c      	strb	r4, [r3, #0]
 800a568:	b01d      	add	sp, #116	@ 0x74
 800a56a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a56e:	b003      	add	sp, #12
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	20000184 	.word	0x20000184
 800a578:	ffff0208 	.word	0xffff0208

0800a57c <__sread>:
 800a57c:	b510      	push	{r4, lr}
 800a57e:	460c      	mov	r4, r1
 800a580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a584:	f000 f986 	bl	800a894 <_read_r>
 800a588:	2800      	cmp	r0, #0
 800a58a:	bfab      	itete	ge
 800a58c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a58e:	89a3      	ldrhlt	r3, [r4, #12]
 800a590:	181b      	addge	r3, r3, r0
 800a592:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a596:	bfac      	ite	ge
 800a598:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a59a:	81a3      	strhlt	r3, [r4, #12]
 800a59c:	bd10      	pop	{r4, pc}

0800a59e <__swrite>:
 800a59e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5a2:	461f      	mov	r7, r3
 800a5a4:	898b      	ldrh	r3, [r1, #12]
 800a5a6:	05db      	lsls	r3, r3, #23
 800a5a8:	4605      	mov	r5, r0
 800a5aa:	460c      	mov	r4, r1
 800a5ac:	4616      	mov	r6, r2
 800a5ae:	d505      	bpl.n	800a5bc <__swrite+0x1e>
 800a5b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5b4:	2302      	movs	r3, #2
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f000 f95a 	bl	800a870 <_lseek_r>
 800a5bc:	89a3      	ldrh	r3, [r4, #12]
 800a5be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a5c6:	81a3      	strh	r3, [r4, #12]
 800a5c8:	4632      	mov	r2, r6
 800a5ca:	463b      	mov	r3, r7
 800a5cc:	4628      	mov	r0, r5
 800a5ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d2:	f000 b971 	b.w	800a8b8 <_write_r>

0800a5d6 <__sseek>:
 800a5d6:	b510      	push	{r4, lr}
 800a5d8:	460c      	mov	r4, r1
 800a5da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5de:	f000 f947 	bl	800a870 <_lseek_r>
 800a5e2:	1c43      	adds	r3, r0, #1
 800a5e4:	89a3      	ldrh	r3, [r4, #12]
 800a5e6:	bf15      	itete	ne
 800a5e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a5ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a5ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a5f2:	81a3      	strheq	r3, [r4, #12]
 800a5f4:	bf18      	it	ne
 800a5f6:	81a3      	strhne	r3, [r4, #12]
 800a5f8:	bd10      	pop	{r4, pc}

0800a5fa <__sclose>:
 800a5fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5fe:	f000 b927 	b.w	800a850 <_close_r>

0800a602 <_vsniprintf_r>:
 800a602:	b530      	push	{r4, r5, lr}
 800a604:	4614      	mov	r4, r2
 800a606:	2c00      	cmp	r4, #0
 800a608:	b09b      	sub	sp, #108	@ 0x6c
 800a60a:	4605      	mov	r5, r0
 800a60c:	461a      	mov	r2, r3
 800a60e:	da05      	bge.n	800a61c <_vsniprintf_r+0x1a>
 800a610:	238b      	movs	r3, #139	@ 0x8b
 800a612:	6003      	str	r3, [r0, #0]
 800a614:	f04f 30ff 	mov.w	r0, #4294967295
 800a618:	b01b      	add	sp, #108	@ 0x6c
 800a61a:	bd30      	pop	{r4, r5, pc}
 800a61c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a620:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a624:	f04f 0300 	mov.w	r3, #0
 800a628:	9319      	str	r3, [sp, #100]	@ 0x64
 800a62a:	bf14      	ite	ne
 800a62c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a630:	4623      	moveq	r3, r4
 800a632:	9302      	str	r3, [sp, #8]
 800a634:	9305      	str	r3, [sp, #20]
 800a636:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a63a:	9100      	str	r1, [sp, #0]
 800a63c:	9104      	str	r1, [sp, #16]
 800a63e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a642:	4669      	mov	r1, sp
 800a644:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a646:	f002 f9c9 	bl	800c9dc <_svfiprintf_r>
 800a64a:	1c43      	adds	r3, r0, #1
 800a64c:	bfbc      	itt	lt
 800a64e:	238b      	movlt	r3, #139	@ 0x8b
 800a650:	602b      	strlt	r3, [r5, #0]
 800a652:	2c00      	cmp	r4, #0
 800a654:	d0e0      	beq.n	800a618 <_vsniprintf_r+0x16>
 800a656:	9b00      	ldr	r3, [sp, #0]
 800a658:	2200      	movs	r2, #0
 800a65a:	701a      	strb	r2, [r3, #0]
 800a65c:	e7dc      	b.n	800a618 <_vsniprintf_r+0x16>
	...

0800a660 <vsniprintf>:
 800a660:	b507      	push	{r0, r1, r2, lr}
 800a662:	9300      	str	r3, [sp, #0]
 800a664:	4613      	mov	r3, r2
 800a666:	460a      	mov	r2, r1
 800a668:	4601      	mov	r1, r0
 800a66a:	4803      	ldr	r0, [pc, #12]	@ (800a678 <vsniprintf+0x18>)
 800a66c:	6800      	ldr	r0, [r0, #0]
 800a66e:	f7ff ffc8 	bl	800a602 <_vsniprintf_r>
 800a672:	b003      	add	sp, #12
 800a674:	f85d fb04 	ldr.w	pc, [sp], #4
 800a678:	20000184 	.word	0x20000184

0800a67c <__swbuf_r>:
 800a67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a67e:	460e      	mov	r6, r1
 800a680:	4614      	mov	r4, r2
 800a682:	4605      	mov	r5, r0
 800a684:	b118      	cbz	r0, 800a68e <__swbuf_r+0x12>
 800a686:	6a03      	ldr	r3, [r0, #32]
 800a688:	b90b      	cbnz	r3, 800a68e <__swbuf_r+0x12>
 800a68a:	f7ff feaf 	bl	800a3ec <__sinit>
 800a68e:	69a3      	ldr	r3, [r4, #24]
 800a690:	60a3      	str	r3, [r4, #8]
 800a692:	89a3      	ldrh	r3, [r4, #12]
 800a694:	071a      	lsls	r2, r3, #28
 800a696:	d501      	bpl.n	800a69c <__swbuf_r+0x20>
 800a698:	6923      	ldr	r3, [r4, #16]
 800a69a:	b943      	cbnz	r3, 800a6ae <__swbuf_r+0x32>
 800a69c:	4621      	mov	r1, r4
 800a69e:	4628      	mov	r0, r5
 800a6a0:	f000 f82a 	bl	800a6f8 <__swsetup_r>
 800a6a4:	b118      	cbz	r0, 800a6ae <__swbuf_r+0x32>
 800a6a6:	f04f 37ff 	mov.w	r7, #4294967295
 800a6aa:	4638      	mov	r0, r7
 800a6ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6ae:	6823      	ldr	r3, [r4, #0]
 800a6b0:	6922      	ldr	r2, [r4, #16]
 800a6b2:	1a98      	subs	r0, r3, r2
 800a6b4:	6963      	ldr	r3, [r4, #20]
 800a6b6:	b2f6      	uxtb	r6, r6
 800a6b8:	4283      	cmp	r3, r0
 800a6ba:	4637      	mov	r7, r6
 800a6bc:	dc05      	bgt.n	800a6ca <__swbuf_r+0x4e>
 800a6be:	4621      	mov	r1, r4
 800a6c0:	4628      	mov	r0, r5
 800a6c2:	f002 fc4d 	bl	800cf60 <_fflush_r>
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	d1ed      	bne.n	800a6a6 <__swbuf_r+0x2a>
 800a6ca:	68a3      	ldr	r3, [r4, #8]
 800a6cc:	3b01      	subs	r3, #1
 800a6ce:	60a3      	str	r3, [r4, #8]
 800a6d0:	6823      	ldr	r3, [r4, #0]
 800a6d2:	1c5a      	adds	r2, r3, #1
 800a6d4:	6022      	str	r2, [r4, #0]
 800a6d6:	701e      	strb	r6, [r3, #0]
 800a6d8:	6962      	ldr	r2, [r4, #20]
 800a6da:	1c43      	adds	r3, r0, #1
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d004      	beq.n	800a6ea <__swbuf_r+0x6e>
 800a6e0:	89a3      	ldrh	r3, [r4, #12]
 800a6e2:	07db      	lsls	r3, r3, #31
 800a6e4:	d5e1      	bpl.n	800a6aa <__swbuf_r+0x2e>
 800a6e6:	2e0a      	cmp	r6, #10
 800a6e8:	d1df      	bne.n	800a6aa <__swbuf_r+0x2e>
 800a6ea:	4621      	mov	r1, r4
 800a6ec:	4628      	mov	r0, r5
 800a6ee:	f002 fc37 	bl	800cf60 <_fflush_r>
 800a6f2:	2800      	cmp	r0, #0
 800a6f4:	d0d9      	beq.n	800a6aa <__swbuf_r+0x2e>
 800a6f6:	e7d6      	b.n	800a6a6 <__swbuf_r+0x2a>

0800a6f8 <__swsetup_r>:
 800a6f8:	b538      	push	{r3, r4, r5, lr}
 800a6fa:	4b29      	ldr	r3, [pc, #164]	@ (800a7a0 <__swsetup_r+0xa8>)
 800a6fc:	4605      	mov	r5, r0
 800a6fe:	6818      	ldr	r0, [r3, #0]
 800a700:	460c      	mov	r4, r1
 800a702:	b118      	cbz	r0, 800a70c <__swsetup_r+0x14>
 800a704:	6a03      	ldr	r3, [r0, #32]
 800a706:	b90b      	cbnz	r3, 800a70c <__swsetup_r+0x14>
 800a708:	f7ff fe70 	bl	800a3ec <__sinit>
 800a70c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a710:	0719      	lsls	r1, r3, #28
 800a712:	d422      	bmi.n	800a75a <__swsetup_r+0x62>
 800a714:	06da      	lsls	r2, r3, #27
 800a716:	d407      	bmi.n	800a728 <__swsetup_r+0x30>
 800a718:	2209      	movs	r2, #9
 800a71a:	602a      	str	r2, [r5, #0]
 800a71c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a720:	81a3      	strh	r3, [r4, #12]
 800a722:	f04f 30ff 	mov.w	r0, #4294967295
 800a726:	e033      	b.n	800a790 <__swsetup_r+0x98>
 800a728:	0758      	lsls	r0, r3, #29
 800a72a:	d512      	bpl.n	800a752 <__swsetup_r+0x5a>
 800a72c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a72e:	b141      	cbz	r1, 800a742 <__swsetup_r+0x4a>
 800a730:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a734:	4299      	cmp	r1, r3
 800a736:	d002      	beq.n	800a73e <__swsetup_r+0x46>
 800a738:	4628      	mov	r0, r5
 800a73a:	f000 ff75 	bl	800b628 <_free_r>
 800a73e:	2300      	movs	r3, #0
 800a740:	6363      	str	r3, [r4, #52]	@ 0x34
 800a742:	89a3      	ldrh	r3, [r4, #12]
 800a744:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a748:	81a3      	strh	r3, [r4, #12]
 800a74a:	2300      	movs	r3, #0
 800a74c:	6063      	str	r3, [r4, #4]
 800a74e:	6923      	ldr	r3, [r4, #16]
 800a750:	6023      	str	r3, [r4, #0]
 800a752:	89a3      	ldrh	r3, [r4, #12]
 800a754:	f043 0308 	orr.w	r3, r3, #8
 800a758:	81a3      	strh	r3, [r4, #12]
 800a75a:	6923      	ldr	r3, [r4, #16]
 800a75c:	b94b      	cbnz	r3, 800a772 <__swsetup_r+0x7a>
 800a75e:	89a3      	ldrh	r3, [r4, #12]
 800a760:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a768:	d003      	beq.n	800a772 <__swsetup_r+0x7a>
 800a76a:	4621      	mov	r1, r4
 800a76c:	4628      	mov	r0, r5
 800a76e:	f002 fc45 	bl	800cffc <__smakebuf_r>
 800a772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a776:	f013 0201 	ands.w	r2, r3, #1
 800a77a:	d00a      	beq.n	800a792 <__swsetup_r+0x9a>
 800a77c:	2200      	movs	r2, #0
 800a77e:	60a2      	str	r2, [r4, #8]
 800a780:	6962      	ldr	r2, [r4, #20]
 800a782:	4252      	negs	r2, r2
 800a784:	61a2      	str	r2, [r4, #24]
 800a786:	6922      	ldr	r2, [r4, #16]
 800a788:	b942      	cbnz	r2, 800a79c <__swsetup_r+0xa4>
 800a78a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a78e:	d1c5      	bne.n	800a71c <__swsetup_r+0x24>
 800a790:	bd38      	pop	{r3, r4, r5, pc}
 800a792:	0799      	lsls	r1, r3, #30
 800a794:	bf58      	it	pl
 800a796:	6962      	ldrpl	r2, [r4, #20]
 800a798:	60a2      	str	r2, [r4, #8]
 800a79a:	e7f4      	b.n	800a786 <__swsetup_r+0x8e>
 800a79c:	2000      	movs	r0, #0
 800a79e:	e7f7      	b.n	800a790 <__swsetup_r+0x98>
 800a7a0:	20000184 	.word	0x20000184

0800a7a4 <memset>:
 800a7a4:	4402      	add	r2, r0
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d100      	bne.n	800a7ae <memset+0xa>
 800a7ac:	4770      	bx	lr
 800a7ae:	f803 1b01 	strb.w	r1, [r3], #1
 800a7b2:	e7f9      	b.n	800a7a8 <memset+0x4>

0800a7b4 <strchr>:
 800a7b4:	b2c9      	uxtb	r1, r1
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7be:	b112      	cbz	r2, 800a7c6 <strchr+0x12>
 800a7c0:	428a      	cmp	r2, r1
 800a7c2:	d1f9      	bne.n	800a7b8 <strchr+0x4>
 800a7c4:	4770      	bx	lr
 800a7c6:	2900      	cmp	r1, #0
 800a7c8:	bf18      	it	ne
 800a7ca:	2000      	movne	r0, #0
 800a7cc:	4770      	bx	lr

0800a7ce <strncmp>:
 800a7ce:	b510      	push	{r4, lr}
 800a7d0:	b16a      	cbz	r2, 800a7ee <strncmp+0x20>
 800a7d2:	3901      	subs	r1, #1
 800a7d4:	1884      	adds	r4, r0, r2
 800a7d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7da:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d103      	bne.n	800a7ea <strncmp+0x1c>
 800a7e2:	42a0      	cmp	r0, r4
 800a7e4:	d001      	beq.n	800a7ea <strncmp+0x1c>
 800a7e6:	2a00      	cmp	r2, #0
 800a7e8:	d1f5      	bne.n	800a7d6 <strncmp+0x8>
 800a7ea:	1ad0      	subs	r0, r2, r3
 800a7ec:	bd10      	pop	{r4, pc}
 800a7ee:	4610      	mov	r0, r2
 800a7f0:	e7fc      	b.n	800a7ec <strncmp+0x1e>

0800a7f2 <__strtok_r>:
 800a7f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7f4:	4604      	mov	r4, r0
 800a7f6:	b908      	cbnz	r0, 800a7fc <__strtok_r+0xa>
 800a7f8:	6814      	ldr	r4, [r2, #0]
 800a7fa:	b144      	cbz	r4, 800a80e <__strtok_r+0x1c>
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a802:	460f      	mov	r7, r1
 800a804:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a808:	b91e      	cbnz	r6, 800a812 <__strtok_r+0x20>
 800a80a:	b965      	cbnz	r5, 800a826 <__strtok_r+0x34>
 800a80c:	6015      	str	r5, [r2, #0]
 800a80e:	2000      	movs	r0, #0
 800a810:	e005      	b.n	800a81e <__strtok_r+0x2c>
 800a812:	42b5      	cmp	r5, r6
 800a814:	d1f6      	bne.n	800a804 <__strtok_r+0x12>
 800a816:	2b00      	cmp	r3, #0
 800a818:	d1f0      	bne.n	800a7fc <__strtok_r+0xa>
 800a81a:	6014      	str	r4, [r2, #0]
 800a81c:	7003      	strb	r3, [r0, #0]
 800a81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a820:	461c      	mov	r4, r3
 800a822:	e00c      	b.n	800a83e <__strtok_r+0x4c>
 800a824:	b91d      	cbnz	r5, 800a82e <__strtok_r+0x3c>
 800a826:	4627      	mov	r7, r4
 800a828:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a82c:	460e      	mov	r6, r1
 800a82e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a832:	42ab      	cmp	r3, r5
 800a834:	d1f6      	bne.n	800a824 <__strtok_r+0x32>
 800a836:	2b00      	cmp	r3, #0
 800a838:	d0f2      	beq.n	800a820 <__strtok_r+0x2e>
 800a83a:	2300      	movs	r3, #0
 800a83c:	703b      	strb	r3, [r7, #0]
 800a83e:	6014      	str	r4, [r2, #0]
 800a840:	e7ed      	b.n	800a81e <__strtok_r+0x2c>

0800a842 <strtok_r>:
 800a842:	2301      	movs	r3, #1
 800a844:	f7ff bfd5 	b.w	800a7f2 <__strtok_r>

0800a848 <_localeconv_r>:
 800a848:	4800      	ldr	r0, [pc, #0]	@ (800a84c <_localeconv_r+0x4>)
 800a84a:	4770      	bx	lr
 800a84c:	20000108 	.word	0x20000108

0800a850 <_close_r>:
 800a850:	b538      	push	{r3, r4, r5, lr}
 800a852:	4d06      	ldr	r5, [pc, #24]	@ (800a86c <_close_r+0x1c>)
 800a854:	2300      	movs	r3, #0
 800a856:	4604      	mov	r4, r0
 800a858:	4608      	mov	r0, r1
 800a85a:	602b      	str	r3, [r5, #0]
 800a85c:	f7f9 fa42 	bl	8003ce4 <_close>
 800a860:	1c43      	adds	r3, r0, #1
 800a862:	d102      	bne.n	800a86a <_close_r+0x1a>
 800a864:	682b      	ldr	r3, [r5, #0]
 800a866:	b103      	cbz	r3, 800a86a <_close_r+0x1a>
 800a868:	6023      	str	r3, [r4, #0]
 800a86a:	bd38      	pop	{r3, r4, r5, pc}
 800a86c:	20000f6c 	.word	0x20000f6c

0800a870 <_lseek_r>:
 800a870:	b538      	push	{r3, r4, r5, lr}
 800a872:	4d07      	ldr	r5, [pc, #28]	@ (800a890 <_lseek_r+0x20>)
 800a874:	4604      	mov	r4, r0
 800a876:	4608      	mov	r0, r1
 800a878:	4611      	mov	r1, r2
 800a87a:	2200      	movs	r2, #0
 800a87c:	602a      	str	r2, [r5, #0]
 800a87e:	461a      	mov	r2, r3
 800a880:	f7f9 fa57 	bl	8003d32 <_lseek>
 800a884:	1c43      	adds	r3, r0, #1
 800a886:	d102      	bne.n	800a88e <_lseek_r+0x1e>
 800a888:	682b      	ldr	r3, [r5, #0]
 800a88a:	b103      	cbz	r3, 800a88e <_lseek_r+0x1e>
 800a88c:	6023      	str	r3, [r4, #0]
 800a88e:	bd38      	pop	{r3, r4, r5, pc}
 800a890:	20000f6c 	.word	0x20000f6c

0800a894 <_read_r>:
 800a894:	b538      	push	{r3, r4, r5, lr}
 800a896:	4d07      	ldr	r5, [pc, #28]	@ (800a8b4 <_read_r+0x20>)
 800a898:	4604      	mov	r4, r0
 800a89a:	4608      	mov	r0, r1
 800a89c:	4611      	mov	r1, r2
 800a89e:	2200      	movs	r2, #0
 800a8a0:	602a      	str	r2, [r5, #0]
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	f7f9 f9e5 	bl	8003c72 <_read>
 800a8a8:	1c43      	adds	r3, r0, #1
 800a8aa:	d102      	bne.n	800a8b2 <_read_r+0x1e>
 800a8ac:	682b      	ldr	r3, [r5, #0]
 800a8ae:	b103      	cbz	r3, 800a8b2 <_read_r+0x1e>
 800a8b0:	6023      	str	r3, [r4, #0]
 800a8b2:	bd38      	pop	{r3, r4, r5, pc}
 800a8b4:	20000f6c 	.word	0x20000f6c

0800a8b8 <_write_r>:
 800a8b8:	b538      	push	{r3, r4, r5, lr}
 800a8ba:	4d07      	ldr	r5, [pc, #28]	@ (800a8d8 <_write_r+0x20>)
 800a8bc:	4604      	mov	r4, r0
 800a8be:	4608      	mov	r0, r1
 800a8c0:	4611      	mov	r1, r2
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	602a      	str	r2, [r5, #0]
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	f7f9 f9f0 	bl	8003cac <_write>
 800a8cc:	1c43      	adds	r3, r0, #1
 800a8ce:	d102      	bne.n	800a8d6 <_write_r+0x1e>
 800a8d0:	682b      	ldr	r3, [r5, #0]
 800a8d2:	b103      	cbz	r3, 800a8d6 <_write_r+0x1e>
 800a8d4:	6023      	str	r3, [r4, #0]
 800a8d6:	bd38      	pop	{r3, r4, r5, pc}
 800a8d8:	20000f6c 	.word	0x20000f6c

0800a8dc <__errno>:
 800a8dc:	4b01      	ldr	r3, [pc, #4]	@ (800a8e4 <__errno+0x8>)
 800a8de:	6818      	ldr	r0, [r3, #0]
 800a8e0:	4770      	bx	lr
 800a8e2:	bf00      	nop
 800a8e4:	20000184 	.word	0x20000184

0800a8e8 <__libc_init_array>:
 800a8e8:	b570      	push	{r4, r5, r6, lr}
 800a8ea:	4d0d      	ldr	r5, [pc, #52]	@ (800a920 <__libc_init_array+0x38>)
 800a8ec:	4c0d      	ldr	r4, [pc, #52]	@ (800a924 <__libc_init_array+0x3c>)
 800a8ee:	1b64      	subs	r4, r4, r5
 800a8f0:	10a4      	asrs	r4, r4, #2
 800a8f2:	2600      	movs	r6, #0
 800a8f4:	42a6      	cmp	r6, r4
 800a8f6:	d109      	bne.n	800a90c <__libc_init_array+0x24>
 800a8f8:	4d0b      	ldr	r5, [pc, #44]	@ (800a928 <__libc_init_array+0x40>)
 800a8fa:	4c0c      	ldr	r4, [pc, #48]	@ (800a92c <__libc_init_array+0x44>)
 800a8fc:	f002 fccc 	bl	800d298 <_init>
 800a900:	1b64      	subs	r4, r4, r5
 800a902:	10a4      	asrs	r4, r4, #2
 800a904:	2600      	movs	r6, #0
 800a906:	42a6      	cmp	r6, r4
 800a908:	d105      	bne.n	800a916 <__libc_init_array+0x2e>
 800a90a:	bd70      	pop	{r4, r5, r6, pc}
 800a90c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a910:	4798      	blx	r3
 800a912:	3601      	adds	r6, #1
 800a914:	e7ee      	b.n	800a8f4 <__libc_init_array+0xc>
 800a916:	f855 3b04 	ldr.w	r3, [r5], #4
 800a91a:	4798      	blx	r3
 800a91c:	3601      	adds	r6, #1
 800a91e:	e7f2      	b.n	800a906 <__libc_init_array+0x1e>
 800a920:	0800da70 	.word	0x0800da70
 800a924:	0800da70 	.word	0x0800da70
 800a928:	0800da70 	.word	0x0800da70
 800a92c:	0800da74 	.word	0x0800da74

0800a930 <__retarget_lock_init_recursive>:
 800a930:	4770      	bx	lr

0800a932 <__retarget_lock_acquire_recursive>:
 800a932:	4770      	bx	lr

0800a934 <__retarget_lock_release_recursive>:
 800a934:	4770      	bx	lr

0800a936 <memcpy>:
 800a936:	440a      	add	r2, r1
 800a938:	4291      	cmp	r1, r2
 800a93a:	f100 33ff 	add.w	r3, r0, #4294967295
 800a93e:	d100      	bne.n	800a942 <memcpy+0xc>
 800a940:	4770      	bx	lr
 800a942:	b510      	push	{r4, lr}
 800a944:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a948:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a94c:	4291      	cmp	r1, r2
 800a94e:	d1f9      	bne.n	800a944 <memcpy+0xe>
 800a950:	bd10      	pop	{r4, pc}
 800a952:	0000      	movs	r0, r0
 800a954:	0000      	movs	r0, r0
	...

0800a958 <nan>:
 800a958:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a960 <nan+0x8>
 800a95c:	4770      	bx	lr
 800a95e:	bf00      	nop
 800a960:	00000000 	.word	0x00000000
 800a964:	7ff80000 	.word	0x7ff80000

0800a968 <nanf>:
 800a968:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a970 <nanf+0x8>
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	7fc00000 	.word	0x7fc00000

0800a974 <quorem>:
 800a974:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a978:	6903      	ldr	r3, [r0, #16]
 800a97a:	690c      	ldr	r4, [r1, #16]
 800a97c:	42a3      	cmp	r3, r4
 800a97e:	4607      	mov	r7, r0
 800a980:	db7e      	blt.n	800aa80 <quorem+0x10c>
 800a982:	3c01      	subs	r4, #1
 800a984:	f101 0814 	add.w	r8, r1, #20
 800a988:	00a3      	lsls	r3, r4, #2
 800a98a:	f100 0514 	add.w	r5, r0, #20
 800a98e:	9300      	str	r3, [sp, #0]
 800a990:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a994:	9301      	str	r3, [sp, #4]
 800a996:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a99a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a99e:	3301      	adds	r3, #1
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a9a6:	fbb2 f6f3 	udiv	r6, r2, r3
 800a9aa:	d32e      	bcc.n	800aa0a <quorem+0x96>
 800a9ac:	f04f 0a00 	mov.w	sl, #0
 800a9b0:	46c4      	mov	ip, r8
 800a9b2:	46ae      	mov	lr, r5
 800a9b4:	46d3      	mov	fp, sl
 800a9b6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a9ba:	b298      	uxth	r0, r3
 800a9bc:	fb06 a000 	mla	r0, r6, r0, sl
 800a9c0:	0c02      	lsrs	r2, r0, #16
 800a9c2:	0c1b      	lsrs	r3, r3, #16
 800a9c4:	fb06 2303 	mla	r3, r6, r3, r2
 800a9c8:	f8de 2000 	ldr.w	r2, [lr]
 800a9cc:	b280      	uxth	r0, r0
 800a9ce:	b292      	uxth	r2, r2
 800a9d0:	1a12      	subs	r2, r2, r0
 800a9d2:	445a      	add	r2, fp
 800a9d4:	f8de 0000 	ldr.w	r0, [lr]
 800a9d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a9e2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a9e6:	b292      	uxth	r2, r2
 800a9e8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a9ec:	45e1      	cmp	r9, ip
 800a9ee:	f84e 2b04 	str.w	r2, [lr], #4
 800a9f2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a9f6:	d2de      	bcs.n	800a9b6 <quorem+0x42>
 800a9f8:	9b00      	ldr	r3, [sp, #0]
 800a9fa:	58eb      	ldr	r3, [r5, r3]
 800a9fc:	b92b      	cbnz	r3, 800aa0a <quorem+0x96>
 800a9fe:	9b01      	ldr	r3, [sp, #4]
 800aa00:	3b04      	subs	r3, #4
 800aa02:	429d      	cmp	r5, r3
 800aa04:	461a      	mov	r2, r3
 800aa06:	d32f      	bcc.n	800aa68 <quorem+0xf4>
 800aa08:	613c      	str	r4, [r7, #16]
 800aa0a:	4638      	mov	r0, r7
 800aa0c:	f001 fd14 	bl	800c438 <__mcmp>
 800aa10:	2800      	cmp	r0, #0
 800aa12:	db25      	blt.n	800aa60 <quorem+0xec>
 800aa14:	4629      	mov	r1, r5
 800aa16:	2000      	movs	r0, #0
 800aa18:	f858 2b04 	ldr.w	r2, [r8], #4
 800aa1c:	f8d1 c000 	ldr.w	ip, [r1]
 800aa20:	fa1f fe82 	uxth.w	lr, r2
 800aa24:	fa1f f38c 	uxth.w	r3, ip
 800aa28:	eba3 030e 	sub.w	r3, r3, lr
 800aa2c:	4403      	add	r3, r0
 800aa2e:	0c12      	lsrs	r2, r2, #16
 800aa30:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800aa34:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa3e:	45c1      	cmp	r9, r8
 800aa40:	f841 3b04 	str.w	r3, [r1], #4
 800aa44:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aa48:	d2e6      	bcs.n	800aa18 <quorem+0xa4>
 800aa4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa52:	b922      	cbnz	r2, 800aa5e <quorem+0xea>
 800aa54:	3b04      	subs	r3, #4
 800aa56:	429d      	cmp	r5, r3
 800aa58:	461a      	mov	r2, r3
 800aa5a:	d30b      	bcc.n	800aa74 <quorem+0x100>
 800aa5c:	613c      	str	r4, [r7, #16]
 800aa5e:	3601      	adds	r6, #1
 800aa60:	4630      	mov	r0, r6
 800aa62:	b003      	add	sp, #12
 800aa64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa68:	6812      	ldr	r2, [r2, #0]
 800aa6a:	3b04      	subs	r3, #4
 800aa6c:	2a00      	cmp	r2, #0
 800aa6e:	d1cb      	bne.n	800aa08 <quorem+0x94>
 800aa70:	3c01      	subs	r4, #1
 800aa72:	e7c6      	b.n	800aa02 <quorem+0x8e>
 800aa74:	6812      	ldr	r2, [r2, #0]
 800aa76:	3b04      	subs	r3, #4
 800aa78:	2a00      	cmp	r2, #0
 800aa7a:	d1ef      	bne.n	800aa5c <quorem+0xe8>
 800aa7c:	3c01      	subs	r4, #1
 800aa7e:	e7ea      	b.n	800aa56 <quorem+0xe2>
 800aa80:	2000      	movs	r0, #0
 800aa82:	e7ee      	b.n	800aa62 <quorem+0xee>
 800aa84:	0000      	movs	r0, r0
	...

0800aa88 <_dtoa_r>:
 800aa88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa8c:	69c7      	ldr	r7, [r0, #28]
 800aa8e:	b097      	sub	sp, #92	@ 0x5c
 800aa90:	ed8d 0b04 	vstr	d0, [sp, #16]
 800aa94:	ec55 4b10 	vmov	r4, r5, d0
 800aa98:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800aa9a:	9107      	str	r1, [sp, #28]
 800aa9c:	4681      	mov	r9, r0
 800aa9e:	920c      	str	r2, [sp, #48]	@ 0x30
 800aaa0:	9311      	str	r3, [sp, #68]	@ 0x44
 800aaa2:	b97f      	cbnz	r7, 800aac4 <_dtoa_r+0x3c>
 800aaa4:	2010      	movs	r0, #16
 800aaa6:	f001 f943 	bl	800bd30 <malloc>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	f8c9 001c 	str.w	r0, [r9, #28]
 800aab0:	b920      	cbnz	r0, 800aabc <_dtoa_r+0x34>
 800aab2:	4ba9      	ldr	r3, [pc, #676]	@ (800ad58 <_dtoa_r+0x2d0>)
 800aab4:	21ef      	movs	r1, #239	@ 0xef
 800aab6:	48a9      	ldr	r0, [pc, #676]	@ (800ad5c <_dtoa_r+0x2d4>)
 800aab8:	f002 fb28 	bl	800d10c <__assert_func>
 800aabc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800aac0:	6007      	str	r7, [r0, #0]
 800aac2:	60c7      	str	r7, [r0, #12]
 800aac4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aac8:	6819      	ldr	r1, [r3, #0]
 800aaca:	b159      	cbz	r1, 800aae4 <_dtoa_r+0x5c>
 800aacc:	685a      	ldr	r2, [r3, #4]
 800aace:	604a      	str	r2, [r1, #4]
 800aad0:	2301      	movs	r3, #1
 800aad2:	4093      	lsls	r3, r2
 800aad4:	608b      	str	r3, [r1, #8]
 800aad6:	4648      	mov	r0, r9
 800aad8:	f001 fa32 	bl	800bf40 <_Bfree>
 800aadc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aae0:	2200      	movs	r2, #0
 800aae2:	601a      	str	r2, [r3, #0]
 800aae4:	1e2b      	subs	r3, r5, #0
 800aae6:	bfb9      	ittee	lt
 800aae8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800aaec:	9305      	strlt	r3, [sp, #20]
 800aaee:	2300      	movge	r3, #0
 800aaf0:	6033      	strge	r3, [r6, #0]
 800aaf2:	9f05      	ldr	r7, [sp, #20]
 800aaf4:	4b9a      	ldr	r3, [pc, #616]	@ (800ad60 <_dtoa_r+0x2d8>)
 800aaf6:	bfbc      	itt	lt
 800aaf8:	2201      	movlt	r2, #1
 800aafa:	6032      	strlt	r2, [r6, #0]
 800aafc:	43bb      	bics	r3, r7
 800aafe:	d112      	bne.n	800ab26 <_dtoa_r+0x9e>
 800ab00:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ab02:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ab06:	6013      	str	r3, [r2, #0]
 800ab08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ab0c:	4323      	orrs	r3, r4
 800ab0e:	f000 855a 	beq.w	800b5c6 <_dtoa_r+0xb3e>
 800ab12:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ab14:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800ad74 <_dtoa_r+0x2ec>
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	f000 855c 	beq.w	800b5d6 <_dtoa_r+0xb4e>
 800ab1e:	f10a 0303 	add.w	r3, sl, #3
 800ab22:	f000 bd56 	b.w	800b5d2 <_dtoa_r+0xb4a>
 800ab26:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	ec51 0b17 	vmov	r0, r1, d7
 800ab30:	2300      	movs	r3, #0
 800ab32:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ab36:	f7f5 ffe7 	bl	8000b08 <__aeabi_dcmpeq>
 800ab3a:	4680      	mov	r8, r0
 800ab3c:	b158      	cbz	r0, 800ab56 <_dtoa_r+0xce>
 800ab3e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ab40:	2301      	movs	r3, #1
 800ab42:	6013      	str	r3, [r2, #0]
 800ab44:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ab46:	b113      	cbz	r3, 800ab4e <_dtoa_r+0xc6>
 800ab48:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ab4a:	4b86      	ldr	r3, [pc, #536]	@ (800ad64 <_dtoa_r+0x2dc>)
 800ab4c:	6013      	str	r3, [r2, #0]
 800ab4e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800ad78 <_dtoa_r+0x2f0>
 800ab52:	f000 bd40 	b.w	800b5d6 <_dtoa_r+0xb4e>
 800ab56:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800ab5a:	aa14      	add	r2, sp, #80	@ 0x50
 800ab5c:	a915      	add	r1, sp, #84	@ 0x54
 800ab5e:	4648      	mov	r0, r9
 800ab60:	f001 fd8a 	bl	800c678 <__d2b>
 800ab64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ab68:	9002      	str	r0, [sp, #8]
 800ab6a:	2e00      	cmp	r6, #0
 800ab6c:	d078      	beq.n	800ac60 <_dtoa_r+0x1d8>
 800ab6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab70:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ab74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ab7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ab80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ab84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ab88:	4619      	mov	r1, r3
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	4b76      	ldr	r3, [pc, #472]	@ (800ad68 <_dtoa_r+0x2e0>)
 800ab8e:	f7f5 fb9b 	bl	80002c8 <__aeabi_dsub>
 800ab92:	a36b      	add	r3, pc, #428	@ (adr r3, 800ad40 <_dtoa_r+0x2b8>)
 800ab94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab98:	f7f5 fd4e 	bl	8000638 <__aeabi_dmul>
 800ab9c:	a36a      	add	r3, pc, #424	@ (adr r3, 800ad48 <_dtoa_r+0x2c0>)
 800ab9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba2:	f7f5 fb93 	bl	80002cc <__adddf3>
 800aba6:	4604      	mov	r4, r0
 800aba8:	4630      	mov	r0, r6
 800abaa:	460d      	mov	r5, r1
 800abac:	f7f5 fcda 	bl	8000564 <__aeabi_i2d>
 800abb0:	a367      	add	r3, pc, #412	@ (adr r3, 800ad50 <_dtoa_r+0x2c8>)
 800abb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb6:	f7f5 fd3f 	bl	8000638 <__aeabi_dmul>
 800abba:	4602      	mov	r2, r0
 800abbc:	460b      	mov	r3, r1
 800abbe:	4620      	mov	r0, r4
 800abc0:	4629      	mov	r1, r5
 800abc2:	f7f5 fb83 	bl	80002cc <__adddf3>
 800abc6:	4604      	mov	r4, r0
 800abc8:	460d      	mov	r5, r1
 800abca:	f7f5 ffe5 	bl	8000b98 <__aeabi_d2iz>
 800abce:	2200      	movs	r2, #0
 800abd0:	4607      	mov	r7, r0
 800abd2:	2300      	movs	r3, #0
 800abd4:	4620      	mov	r0, r4
 800abd6:	4629      	mov	r1, r5
 800abd8:	f7f5 ffa0 	bl	8000b1c <__aeabi_dcmplt>
 800abdc:	b140      	cbz	r0, 800abf0 <_dtoa_r+0x168>
 800abde:	4638      	mov	r0, r7
 800abe0:	f7f5 fcc0 	bl	8000564 <__aeabi_i2d>
 800abe4:	4622      	mov	r2, r4
 800abe6:	462b      	mov	r3, r5
 800abe8:	f7f5 ff8e 	bl	8000b08 <__aeabi_dcmpeq>
 800abec:	b900      	cbnz	r0, 800abf0 <_dtoa_r+0x168>
 800abee:	3f01      	subs	r7, #1
 800abf0:	2f16      	cmp	r7, #22
 800abf2:	d852      	bhi.n	800ac9a <_dtoa_r+0x212>
 800abf4:	4b5d      	ldr	r3, [pc, #372]	@ (800ad6c <_dtoa_r+0x2e4>)
 800abf6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800abfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ac02:	f7f5 ff8b 	bl	8000b1c <__aeabi_dcmplt>
 800ac06:	2800      	cmp	r0, #0
 800ac08:	d049      	beq.n	800ac9e <_dtoa_r+0x216>
 800ac0a:	3f01      	subs	r7, #1
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ac10:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ac12:	1b9b      	subs	r3, r3, r6
 800ac14:	1e5a      	subs	r2, r3, #1
 800ac16:	bf45      	ittet	mi
 800ac18:	f1c3 0301 	rsbmi	r3, r3, #1
 800ac1c:	9300      	strmi	r3, [sp, #0]
 800ac1e:	2300      	movpl	r3, #0
 800ac20:	2300      	movmi	r3, #0
 800ac22:	9206      	str	r2, [sp, #24]
 800ac24:	bf54      	ite	pl
 800ac26:	9300      	strpl	r3, [sp, #0]
 800ac28:	9306      	strmi	r3, [sp, #24]
 800ac2a:	2f00      	cmp	r7, #0
 800ac2c:	db39      	blt.n	800aca2 <_dtoa_r+0x21a>
 800ac2e:	9b06      	ldr	r3, [sp, #24]
 800ac30:	970d      	str	r7, [sp, #52]	@ 0x34
 800ac32:	443b      	add	r3, r7
 800ac34:	9306      	str	r3, [sp, #24]
 800ac36:	2300      	movs	r3, #0
 800ac38:	9308      	str	r3, [sp, #32]
 800ac3a:	9b07      	ldr	r3, [sp, #28]
 800ac3c:	2b09      	cmp	r3, #9
 800ac3e:	d863      	bhi.n	800ad08 <_dtoa_r+0x280>
 800ac40:	2b05      	cmp	r3, #5
 800ac42:	bfc4      	itt	gt
 800ac44:	3b04      	subgt	r3, #4
 800ac46:	9307      	strgt	r3, [sp, #28]
 800ac48:	9b07      	ldr	r3, [sp, #28]
 800ac4a:	f1a3 0302 	sub.w	r3, r3, #2
 800ac4e:	bfcc      	ite	gt
 800ac50:	2400      	movgt	r4, #0
 800ac52:	2401      	movle	r4, #1
 800ac54:	2b03      	cmp	r3, #3
 800ac56:	d863      	bhi.n	800ad20 <_dtoa_r+0x298>
 800ac58:	e8df f003 	tbb	[pc, r3]
 800ac5c:	2b375452 	.word	0x2b375452
 800ac60:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ac64:	441e      	add	r6, r3
 800ac66:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ac6a:	2b20      	cmp	r3, #32
 800ac6c:	bfc1      	itttt	gt
 800ac6e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ac72:	409f      	lslgt	r7, r3
 800ac74:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ac78:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ac7c:	bfd6      	itet	le
 800ac7e:	f1c3 0320 	rsble	r3, r3, #32
 800ac82:	ea47 0003 	orrgt.w	r0, r7, r3
 800ac86:	fa04 f003 	lslle.w	r0, r4, r3
 800ac8a:	f7f5 fc5b 	bl	8000544 <__aeabi_ui2d>
 800ac8e:	2201      	movs	r2, #1
 800ac90:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ac94:	3e01      	subs	r6, #1
 800ac96:	9212      	str	r2, [sp, #72]	@ 0x48
 800ac98:	e776      	b.n	800ab88 <_dtoa_r+0x100>
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	e7b7      	b.n	800ac0e <_dtoa_r+0x186>
 800ac9e:	9010      	str	r0, [sp, #64]	@ 0x40
 800aca0:	e7b6      	b.n	800ac10 <_dtoa_r+0x188>
 800aca2:	9b00      	ldr	r3, [sp, #0]
 800aca4:	1bdb      	subs	r3, r3, r7
 800aca6:	9300      	str	r3, [sp, #0]
 800aca8:	427b      	negs	r3, r7
 800acaa:	9308      	str	r3, [sp, #32]
 800acac:	2300      	movs	r3, #0
 800acae:	930d      	str	r3, [sp, #52]	@ 0x34
 800acb0:	e7c3      	b.n	800ac3a <_dtoa_r+0x1b2>
 800acb2:	2301      	movs	r3, #1
 800acb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800acb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800acb8:	eb07 0b03 	add.w	fp, r7, r3
 800acbc:	f10b 0301 	add.w	r3, fp, #1
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	9303      	str	r3, [sp, #12]
 800acc4:	bfb8      	it	lt
 800acc6:	2301      	movlt	r3, #1
 800acc8:	e006      	b.n	800acd8 <_dtoa_r+0x250>
 800acca:	2301      	movs	r3, #1
 800accc:	9309      	str	r3, [sp, #36]	@ 0x24
 800acce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	dd28      	ble.n	800ad26 <_dtoa_r+0x29e>
 800acd4:	469b      	mov	fp, r3
 800acd6:	9303      	str	r3, [sp, #12]
 800acd8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800acdc:	2100      	movs	r1, #0
 800acde:	2204      	movs	r2, #4
 800ace0:	f102 0514 	add.w	r5, r2, #20
 800ace4:	429d      	cmp	r5, r3
 800ace6:	d926      	bls.n	800ad36 <_dtoa_r+0x2ae>
 800ace8:	6041      	str	r1, [r0, #4]
 800acea:	4648      	mov	r0, r9
 800acec:	f001 f8e8 	bl	800bec0 <_Balloc>
 800acf0:	4682      	mov	sl, r0
 800acf2:	2800      	cmp	r0, #0
 800acf4:	d142      	bne.n	800ad7c <_dtoa_r+0x2f4>
 800acf6:	4b1e      	ldr	r3, [pc, #120]	@ (800ad70 <_dtoa_r+0x2e8>)
 800acf8:	4602      	mov	r2, r0
 800acfa:	f240 11af 	movw	r1, #431	@ 0x1af
 800acfe:	e6da      	b.n	800aab6 <_dtoa_r+0x2e>
 800ad00:	2300      	movs	r3, #0
 800ad02:	e7e3      	b.n	800accc <_dtoa_r+0x244>
 800ad04:	2300      	movs	r3, #0
 800ad06:	e7d5      	b.n	800acb4 <_dtoa_r+0x22c>
 800ad08:	2401      	movs	r4, #1
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	9307      	str	r3, [sp, #28]
 800ad0e:	9409      	str	r4, [sp, #36]	@ 0x24
 800ad10:	f04f 3bff 	mov.w	fp, #4294967295
 800ad14:	2200      	movs	r2, #0
 800ad16:	f8cd b00c 	str.w	fp, [sp, #12]
 800ad1a:	2312      	movs	r3, #18
 800ad1c:	920c      	str	r2, [sp, #48]	@ 0x30
 800ad1e:	e7db      	b.n	800acd8 <_dtoa_r+0x250>
 800ad20:	2301      	movs	r3, #1
 800ad22:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad24:	e7f4      	b.n	800ad10 <_dtoa_r+0x288>
 800ad26:	f04f 0b01 	mov.w	fp, #1
 800ad2a:	f8cd b00c 	str.w	fp, [sp, #12]
 800ad2e:	465b      	mov	r3, fp
 800ad30:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800ad34:	e7d0      	b.n	800acd8 <_dtoa_r+0x250>
 800ad36:	3101      	adds	r1, #1
 800ad38:	0052      	lsls	r2, r2, #1
 800ad3a:	e7d1      	b.n	800ace0 <_dtoa_r+0x258>
 800ad3c:	f3af 8000 	nop.w
 800ad40:	636f4361 	.word	0x636f4361
 800ad44:	3fd287a7 	.word	0x3fd287a7
 800ad48:	8b60c8b3 	.word	0x8b60c8b3
 800ad4c:	3fc68a28 	.word	0x3fc68a28
 800ad50:	509f79fb 	.word	0x509f79fb
 800ad54:	3fd34413 	.word	0x3fd34413
 800ad58:	0800d690 	.word	0x0800d690
 800ad5c:	0800d6a7 	.word	0x0800d6a7
 800ad60:	7ff00000 	.word	0x7ff00000
 800ad64:	0800d653 	.word	0x0800d653
 800ad68:	3ff80000 	.word	0x3ff80000
 800ad6c:	0800d9a0 	.word	0x0800d9a0
 800ad70:	0800d6ff 	.word	0x0800d6ff
 800ad74:	0800d68c 	.word	0x0800d68c
 800ad78:	0800d652 	.word	0x0800d652
 800ad7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ad80:	6018      	str	r0, [r3, #0]
 800ad82:	9b03      	ldr	r3, [sp, #12]
 800ad84:	2b0e      	cmp	r3, #14
 800ad86:	f200 80a1 	bhi.w	800aecc <_dtoa_r+0x444>
 800ad8a:	2c00      	cmp	r4, #0
 800ad8c:	f000 809e 	beq.w	800aecc <_dtoa_r+0x444>
 800ad90:	2f00      	cmp	r7, #0
 800ad92:	dd33      	ble.n	800adfc <_dtoa_r+0x374>
 800ad94:	4b9c      	ldr	r3, [pc, #624]	@ (800b008 <_dtoa_r+0x580>)
 800ad96:	f007 020f 	and.w	r2, r7, #15
 800ad9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad9e:	ed93 7b00 	vldr	d7, [r3]
 800ada2:	05f8      	lsls	r0, r7, #23
 800ada4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ada8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800adac:	d516      	bpl.n	800addc <_dtoa_r+0x354>
 800adae:	4b97      	ldr	r3, [pc, #604]	@ (800b00c <_dtoa_r+0x584>)
 800adb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800adb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800adb8:	f7f5 fd68 	bl	800088c <__aeabi_ddiv>
 800adbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800adc0:	f004 040f 	and.w	r4, r4, #15
 800adc4:	2603      	movs	r6, #3
 800adc6:	4d91      	ldr	r5, [pc, #580]	@ (800b00c <_dtoa_r+0x584>)
 800adc8:	b954      	cbnz	r4, 800ade0 <_dtoa_r+0x358>
 800adca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800adce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800add2:	f7f5 fd5b 	bl	800088c <__aeabi_ddiv>
 800add6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800adda:	e028      	b.n	800ae2e <_dtoa_r+0x3a6>
 800addc:	2602      	movs	r6, #2
 800adde:	e7f2      	b.n	800adc6 <_dtoa_r+0x33e>
 800ade0:	07e1      	lsls	r1, r4, #31
 800ade2:	d508      	bpl.n	800adf6 <_dtoa_r+0x36e>
 800ade4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ade8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800adec:	f7f5 fc24 	bl	8000638 <__aeabi_dmul>
 800adf0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800adf4:	3601      	adds	r6, #1
 800adf6:	1064      	asrs	r4, r4, #1
 800adf8:	3508      	adds	r5, #8
 800adfa:	e7e5      	b.n	800adc8 <_dtoa_r+0x340>
 800adfc:	f000 80af 	beq.w	800af5e <_dtoa_r+0x4d6>
 800ae00:	427c      	negs	r4, r7
 800ae02:	4b81      	ldr	r3, [pc, #516]	@ (800b008 <_dtoa_r+0x580>)
 800ae04:	4d81      	ldr	r5, [pc, #516]	@ (800b00c <_dtoa_r+0x584>)
 800ae06:	f004 020f 	and.w	r2, r4, #15
 800ae0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ae16:	f7f5 fc0f 	bl	8000638 <__aeabi_dmul>
 800ae1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae1e:	1124      	asrs	r4, r4, #4
 800ae20:	2300      	movs	r3, #0
 800ae22:	2602      	movs	r6, #2
 800ae24:	2c00      	cmp	r4, #0
 800ae26:	f040 808f 	bne.w	800af48 <_dtoa_r+0x4c0>
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d1d3      	bne.n	800add6 <_dtoa_r+0x34e>
 800ae2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ae30:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	f000 8094 	beq.w	800af62 <_dtoa_r+0x4da>
 800ae3a:	4b75      	ldr	r3, [pc, #468]	@ (800b010 <_dtoa_r+0x588>)
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	4620      	mov	r0, r4
 800ae40:	4629      	mov	r1, r5
 800ae42:	f7f5 fe6b 	bl	8000b1c <__aeabi_dcmplt>
 800ae46:	2800      	cmp	r0, #0
 800ae48:	f000 808b 	beq.w	800af62 <_dtoa_r+0x4da>
 800ae4c:	9b03      	ldr	r3, [sp, #12]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	f000 8087 	beq.w	800af62 <_dtoa_r+0x4da>
 800ae54:	f1bb 0f00 	cmp.w	fp, #0
 800ae58:	dd34      	ble.n	800aec4 <_dtoa_r+0x43c>
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	4b6d      	ldr	r3, [pc, #436]	@ (800b014 <_dtoa_r+0x58c>)
 800ae5e:	2200      	movs	r2, #0
 800ae60:	4629      	mov	r1, r5
 800ae62:	f7f5 fbe9 	bl	8000638 <__aeabi_dmul>
 800ae66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae6a:	f107 38ff 	add.w	r8, r7, #4294967295
 800ae6e:	3601      	adds	r6, #1
 800ae70:	465c      	mov	r4, fp
 800ae72:	4630      	mov	r0, r6
 800ae74:	f7f5 fb76 	bl	8000564 <__aeabi_i2d>
 800ae78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae7c:	f7f5 fbdc 	bl	8000638 <__aeabi_dmul>
 800ae80:	4b65      	ldr	r3, [pc, #404]	@ (800b018 <_dtoa_r+0x590>)
 800ae82:	2200      	movs	r2, #0
 800ae84:	f7f5 fa22 	bl	80002cc <__adddf3>
 800ae88:	4605      	mov	r5, r0
 800ae8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ae8e:	2c00      	cmp	r4, #0
 800ae90:	d16a      	bne.n	800af68 <_dtoa_r+0x4e0>
 800ae92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae96:	4b61      	ldr	r3, [pc, #388]	@ (800b01c <_dtoa_r+0x594>)
 800ae98:	2200      	movs	r2, #0
 800ae9a:	f7f5 fa15 	bl	80002c8 <__aeabi_dsub>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	460b      	mov	r3, r1
 800aea2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aea6:	462a      	mov	r2, r5
 800aea8:	4633      	mov	r3, r6
 800aeaa:	f7f5 fe55 	bl	8000b58 <__aeabi_dcmpgt>
 800aeae:	2800      	cmp	r0, #0
 800aeb0:	f040 8298 	bne.w	800b3e4 <_dtoa_r+0x95c>
 800aeb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aeb8:	462a      	mov	r2, r5
 800aeba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800aebe:	f7f5 fe2d 	bl	8000b1c <__aeabi_dcmplt>
 800aec2:	bb38      	cbnz	r0, 800af14 <_dtoa_r+0x48c>
 800aec4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800aec8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800aecc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800aece:	2b00      	cmp	r3, #0
 800aed0:	f2c0 8157 	blt.w	800b182 <_dtoa_r+0x6fa>
 800aed4:	2f0e      	cmp	r7, #14
 800aed6:	f300 8154 	bgt.w	800b182 <_dtoa_r+0x6fa>
 800aeda:	4b4b      	ldr	r3, [pc, #300]	@ (800b008 <_dtoa_r+0x580>)
 800aedc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aee0:	ed93 7b00 	vldr	d7, [r3]
 800aee4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	ed8d 7b00 	vstr	d7, [sp]
 800aeec:	f280 80e5 	bge.w	800b0ba <_dtoa_r+0x632>
 800aef0:	9b03      	ldr	r3, [sp, #12]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	f300 80e1 	bgt.w	800b0ba <_dtoa_r+0x632>
 800aef8:	d10c      	bne.n	800af14 <_dtoa_r+0x48c>
 800aefa:	4b48      	ldr	r3, [pc, #288]	@ (800b01c <_dtoa_r+0x594>)
 800aefc:	2200      	movs	r2, #0
 800aefe:	ec51 0b17 	vmov	r0, r1, d7
 800af02:	f7f5 fb99 	bl	8000638 <__aeabi_dmul>
 800af06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af0a:	f7f5 fe1b 	bl	8000b44 <__aeabi_dcmpge>
 800af0e:	2800      	cmp	r0, #0
 800af10:	f000 8266 	beq.w	800b3e0 <_dtoa_r+0x958>
 800af14:	2400      	movs	r4, #0
 800af16:	4625      	mov	r5, r4
 800af18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af1a:	4656      	mov	r6, sl
 800af1c:	ea6f 0803 	mvn.w	r8, r3
 800af20:	2700      	movs	r7, #0
 800af22:	4621      	mov	r1, r4
 800af24:	4648      	mov	r0, r9
 800af26:	f001 f80b 	bl	800bf40 <_Bfree>
 800af2a:	2d00      	cmp	r5, #0
 800af2c:	f000 80bd 	beq.w	800b0aa <_dtoa_r+0x622>
 800af30:	b12f      	cbz	r7, 800af3e <_dtoa_r+0x4b6>
 800af32:	42af      	cmp	r7, r5
 800af34:	d003      	beq.n	800af3e <_dtoa_r+0x4b6>
 800af36:	4639      	mov	r1, r7
 800af38:	4648      	mov	r0, r9
 800af3a:	f001 f801 	bl	800bf40 <_Bfree>
 800af3e:	4629      	mov	r1, r5
 800af40:	4648      	mov	r0, r9
 800af42:	f000 fffd 	bl	800bf40 <_Bfree>
 800af46:	e0b0      	b.n	800b0aa <_dtoa_r+0x622>
 800af48:	07e2      	lsls	r2, r4, #31
 800af4a:	d505      	bpl.n	800af58 <_dtoa_r+0x4d0>
 800af4c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800af50:	f7f5 fb72 	bl	8000638 <__aeabi_dmul>
 800af54:	3601      	adds	r6, #1
 800af56:	2301      	movs	r3, #1
 800af58:	1064      	asrs	r4, r4, #1
 800af5a:	3508      	adds	r5, #8
 800af5c:	e762      	b.n	800ae24 <_dtoa_r+0x39c>
 800af5e:	2602      	movs	r6, #2
 800af60:	e765      	b.n	800ae2e <_dtoa_r+0x3a6>
 800af62:	9c03      	ldr	r4, [sp, #12]
 800af64:	46b8      	mov	r8, r7
 800af66:	e784      	b.n	800ae72 <_dtoa_r+0x3ea>
 800af68:	4b27      	ldr	r3, [pc, #156]	@ (800b008 <_dtoa_r+0x580>)
 800af6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af6c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800af74:	4454      	add	r4, sl
 800af76:	2900      	cmp	r1, #0
 800af78:	d054      	beq.n	800b024 <_dtoa_r+0x59c>
 800af7a:	4929      	ldr	r1, [pc, #164]	@ (800b020 <_dtoa_r+0x598>)
 800af7c:	2000      	movs	r0, #0
 800af7e:	f7f5 fc85 	bl	800088c <__aeabi_ddiv>
 800af82:	4633      	mov	r3, r6
 800af84:	462a      	mov	r2, r5
 800af86:	f7f5 f99f 	bl	80002c8 <__aeabi_dsub>
 800af8a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800af8e:	4656      	mov	r6, sl
 800af90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af94:	f7f5 fe00 	bl	8000b98 <__aeabi_d2iz>
 800af98:	4605      	mov	r5, r0
 800af9a:	f7f5 fae3 	bl	8000564 <__aeabi_i2d>
 800af9e:	4602      	mov	r2, r0
 800afa0:	460b      	mov	r3, r1
 800afa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afa6:	f7f5 f98f 	bl	80002c8 <__aeabi_dsub>
 800afaa:	3530      	adds	r5, #48	@ 0x30
 800afac:	4602      	mov	r2, r0
 800afae:	460b      	mov	r3, r1
 800afb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800afb4:	f806 5b01 	strb.w	r5, [r6], #1
 800afb8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800afbc:	f7f5 fdae 	bl	8000b1c <__aeabi_dcmplt>
 800afc0:	2800      	cmp	r0, #0
 800afc2:	d172      	bne.n	800b0aa <_dtoa_r+0x622>
 800afc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afc8:	4911      	ldr	r1, [pc, #68]	@ (800b010 <_dtoa_r+0x588>)
 800afca:	2000      	movs	r0, #0
 800afcc:	f7f5 f97c 	bl	80002c8 <__aeabi_dsub>
 800afd0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800afd4:	f7f5 fda2 	bl	8000b1c <__aeabi_dcmplt>
 800afd8:	2800      	cmp	r0, #0
 800afda:	f040 80b4 	bne.w	800b146 <_dtoa_r+0x6be>
 800afde:	42a6      	cmp	r6, r4
 800afe0:	f43f af70 	beq.w	800aec4 <_dtoa_r+0x43c>
 800afe4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800afe8:	4b0a      	ldr	r3, [pc, #40]	@ (800b014 <_dtoa_r+0x58c>)
 800afea:	2200      	movs	r2, #0
 800afec:	f7f5 fb24 	bl	8000638 <__aeabi_dmul>
 800aff0:	4b08      	ldr	r3, [pc, #32]	@ (800b014 <_dtoa_r+0x58c>)
 800aff2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800aff6:	2200      	movs	r2, #0
 800aff8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800affc:	f7f5 fb1c 	bl	8000638 <__aeabi_dmul>
 800b000:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b004:	e7c4      	b.n	800af90 <_dtoa_r+0x508>
 800b006:	bf00      	nop
 800b008:	0800d9a0 	.word	0x0800d9a0
 800b00c:	0800d978 	.word	0x0800d978
 800b010:	3ff00000 	.word	0x3ff00000
 800b014:	40240000 	.word	0x40240000
 800b018:	401c0000 	.word	0x401c0000
 800b01c:	40140000 	.word	0x40140000
 800b020:	3fe00000 	.word	0x3fe00000
 800b024:	4631      	mov	r1, r6
 800b026:	4628      	mov	r0, r5
 800b028:	f7f5 fb06 	bl	8000638 <__aeabi_dmul>
 800b02c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b030:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b032:	4656      	mov	r6, sl
 800b034:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b038:	f7f5 fdae 	bl	8000b98 <__aeabi_d2iz>
 800b03c:	4605      	mov	r5, r0
 800b03e:	f7f5 fa91 	bl	8000564 <__aeabi_i2d>
 800b042:	4602      	mov	r2, r0
 800b044:	460b      	mov	r3, r1
 800b046:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b04a:	f7f5 f93d 	bl	80002c8 <__aeabi_dsub>
 800b04e:	3530      	adds	r5, #48	@ 0x30
 800b050:	f806 5b01 	strb.w	r5, [r6], #1
 800b054:	4602      	mov	r2, r0
 800b056:	460b      	mov	r3, r1
 800b058:	42a6      	cmp	r6, r4
 800b05a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b05e:	f04f 0200 	mov.w	r2, #0
 800b062:	d124      	bne.n	800b0ae <_dtoa_r+0x626>
 800b064:	4baf      	ldr	r3, [pc, #700]	@ (800b324 <_dtoa_r+0x89c>)
 800b066:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b06a:	f7f5 f92f 	bl	80002cc <__adddf3>
 800b06e:	4602      	mov	r2, r0
 800b070:	460b      	mov	r3, r1
 800b072:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b076:	f7f5 fd6f 	bl	8000b58 <__aeabi_dcmpgt>
 800b07a:	2800      	cmp	r0, #0
 800b07c:	d163      	bne.n	800b146 <_dtoa_r+0x6be>
 800b07e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b082:	49a8      	ldr	r1, [pc, #672]	@ (800b324 <_dtoa_r+0x89c>)
 800b084:	2000      	movs	r0, #0
 800b086:	f7f5 f91f 	bl	80002c8 <__aeabi_dsub>
 800b08a:	4602      	mov	r2, r0
 800b08c:	460b      	mov	r3, r1
 800b08e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b092:	f7f5 fd43 	bl	8000b1c <__aeabi_dcmplt>
 800b096:	2800      	cmp	r0, #0
 800b098:	f43f af14 	beq.w	800aec4 <_dtoa_r+0x43c>
 800b09c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b09e:	1e73      	subs	r3, r6, #1
 800b0a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b0a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b0a6:	2b30      	cmp	r3, #48	@ 0x30
 800b0a8:	d0f8      	beq.n	800b09c <_dtoa_r+0x614>
 800b0aa:	4647      	mov	r7, r8
 800b0ac:	e03b      	b.n	800b126 <_dtoa_r+0x69e>
 800b0ae:	4b9e      	ldr	r3, [pc, #632]	@ (800b328 <_dtoa_r+0x8a0>)
 800b0b0:	f7f5 fac2 	bl	8000638 <__aeabi_dmul>
 800b0b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0b8:	e7bc      	b.n	800b034 <_dtoa_r+0x5ac>
 800b0ba:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b0be:	4656      	mov	r6, sl
 800b0c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	4629      	mov	r1, r5
 800b0c8:	f7f5 fbe0 	bl	800088c <__aeabi_ddiv>
 800b0cc:	f7f5 fd64 	bl	8000b98 <__aeabi_d2iz>
 800b0d0:	4680      	mov	r8, r0
 800b0d2:	f7f5 fa47 	bl	8000564 <__aeabi_i2d>
 800b0d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0da:	f7f5 faad 	bl	8000638 <__aeabi_dmul>
 800b0de:	4602      	mov	r2, r0
 800b0e0:	460b      	mov	r3, r1
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	4629      	mov	r1, r5
 800b0e6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b0ea:	f7f5 f8ed 	bl	80002c8 <__aeabi_dsub>
 800b0ee:	f806 4b01 	strb.w	r4, [r6], #1
 800b0f2:	9d03      	ldr	r5, [sp, #12]
 800b0f4:	eba6 040a 	sub.w	r4, r6, sl
 800b0f8:	42a5      	cmp	r5, r4
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	d133      	bne.n	800b168 <_dtoa_r+0x6e0>
 800b100:	f7f5 f8e4 	bl	80002cc <__adddf3>
 800b104:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b108:	4604      	mov	r4, r0
 800b10a:	460d      	mov	r5, r1
 800b10c:	f7f5 fd24 	bl	8000b58 <__aeabi_dcmpgt>
 800b110:	b9c0      	cbnz	r0, 800b144 <_dtoa_r+0x6bc>
 800b112:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b116:	4620      	mov	r0, r4
 800b118:	4629      	mov	r1, r5
 800b11a:	f7f5 fcf5 	bl	8000b08 <__aeabi_dcmpeq>
 800b11e:	b110      	cbz	r0, 800b126 <_dtoa_r+0x69e>
 800b120:	f018 0f01 	tst.w	r8, #1
 800b124:	d10e      	bne.n	800b144 <_dtoa_r+0x6bc>
 800b126:	9902      	ldr	r1, [sp, #8]
 800b128:	4648      	mov	r0, r9
 800b12a:	f000 ff09 	bl	800bf40 <_Bfree>
 800b12e:	2300      	movs	r3, #0
 800b130:	7033      	strb	r3, [r6, #0]
 800b132:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b134:	3701      	adds	r7, #1
 800b136:	601f      	str	r7, [r3, #0]
 800b138:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	f000 824b 	beq.w	800b5d6 <_dtoa_r+0xb4e>
 800b140:	601e      	str	r6, [r3, #0]
 800b142:	e248      	b.n	800b5d6 <_dtoa_r+0xb4e>
 800b144:	46b8      	mov	r8, r7
 800b146:	4633      	mov	r3, r6
 800b148:	461e      	mov	r6, r3
 800b14a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b14e:	2a39      	cmp	r2, #57	@ 0x39
 800b150:	d106      	bne.n	800b160 <_dtoa_r+0x6d8>
 800b152:	459a      	cmp	sl, r3
 800b154:	d1f8      	bne.n	800b148 <_dtoa_r+0x6c0>
 800b156:	2230      	movs	r2, #48	@ 0x30
 800b158:	f108 0801 	add.w	r8, r8, #1
 800b15c:	f88a 2000 	strb.w	r2, [sl]
 800b160:	781a      	ldrb	r2, [r3, #0]
 800b162:	3201      	adds	r2, #1
 800b164:	701a      	strb	r2, [r3, #0]
 800b166:	e7a0      	b.n	800b0aa <_dtoa_r+0x622>
 800b168:	4b6f      	ldr	r3, [pc, #444]	@ (800b328 <_dtoa_r+0x8a0>)
 800b16a:	2200      	movs	r2, #0
 800b16c:	f7f5 fa64 	bl	8000638 <__aeabi_dmul>
 800b170:	2200      	movs	r2, #0
 800b172:	2300      	movs	r3, #0
 800b174:	4604      	mov	r4, r0
 800b176:	460d      	mov	r5, r1
 800b178:	f7f5 fcc6 	bl	8000b08 <__aeabi_dcmpeq>
 800b17c:	2800      	cmp	r0, #0
 800b17e:	d09f      	beq.n	800b0c0 <_dtoa_r+0x638>
 800b180:	e7d1      	b.n	800b126 <_dtoa_r+0x69e>
 800b182:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b184:	2a00      	cmp	r2, #0
 800b186:	f000 80ea 	beq.w	800b35e <_dtoa_r+0x8d6>
 800b18a:	9a07      	ldr	r2, [sp, #28]
 800b18c:	2a01      	cmp	r2, #1
 800b18e:	f300 80cd 	bgt.w	800b32c <_dtoa_r+0x8a4>
 800b192:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b194:	2a00      	cmp	r2, #0
 800b196:	f000 80c1 	beq.w	800b31c <_dtoa_r+0x894>
 800b19a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b19e:	9c08      	ldr	r4, [sp, #32]
 800b1a0:	9e00      	ldr	r6, [sp, #0]
 800b1a2:	9a00      	ldr	r2, [sp, #0]
 800b1a4:	441a      	add	r2, r3
 800b1a6:	9200      	str	r2, [sp, #0]
 800b1a8:	9a06      	ldr	r2, [sp, #24]
 800b1aa:	2101      	movs	r1, #1
 800b1ac:	441a      	add	r2, r3
 800b1ae:	4648      	mov	r0, r9
 800b1b0:	9206      	str	r2, [sp, #24]
 800b1b2:	f000 ffc3 	bl	800c13c <__i2b>
 800b1b6:	4605      	mov	r5, r0
 800b1b8:	b166      	cbz	r6, 800b1d4 <_dtoa_r+0x74c>
 800b1ba:	9b06      	ldr	r3, [sp, #24]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	dd09      	ble.n	800b1d4 <_dtoa_r+0x74c>
 800b1c0:	42b3      	cmp	r3, r6
 800b1c2:	9a00      	ldr	r2, [sp, #0]
 800b1c4:	bfa8      	it	ge
 800b1c6:	4633      	movge	r3, r6
 800b1c8:	1ad2      	subs	r2, r2, r3
 800b1ca:	9200      	str	r2, [sp, #0]
 800b1cc:	9a06      	ldr	r2, [sp, #24]
 800b1ce:	1af6      	subs	r6, r6, r3
 800b1d0:	1ad3      	subs	r3, r2, r3
 800b1d2:	9306      	str	r3, [sp, #24]
 800b1d4:	9b08      	ldr	r3, [sp, #32]
 800b1d6:	b30b      	cbz	r3, 800b21c <_dtoa_r+0x794>
 800b1d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	f000 80c6 	beq.w	800b36c <_dtoa_r+0x8e4>
 800b1e0:	2c00      	cmp	r4, #0
 800b1e2:	f000 80c0 	beq.w	800b366 <_dtoa_r+0x8de>
 800b1e6:	4629      	mov	r1, r5
 800b1e8:	4622      	mov	r2, r4
 800b1ea:	4648      	mov	r0, r9
 800b1ec:	f001 f85e 	bl	800c2ac <__pow5mult>
 800b1f0:	9a02      	ldr	r2, [sp, #8]
 800b1f2:	4601      	mov	r1, r0
 800b1f4:	4605      	mov	r5, r0
 800b1f6:	4648      	mov	r0, r9
 800b1f8:	f000 ffb6 	bl	800c168 <__multiply>
 800b1fc:	9902      	ldr	r1, [sp, #8]
 800b1fe:	4680      	mov	r8, r0
 800b200:	4648      	mov	r0, r9
 800b202:	f000 fe9d 	bl	800bf40 <_Bfree>
 800b206:	9b08      	ldr	r3, [sp, #32]
 800b208:	1b1b      	subs	r3, r3, r4
 800b20a:	9308      	str	r3, [sp, #32]
 800b20c:	f000 80b1 	beq.w	800b372 <_dtoa_r+0x8ea>
 800b210:	9a08      	ldr	r2, [sp, #32]
 800b212:	4641      	mov	r1, r8
 800b214:	4648      	mov	r0, r9
 800b216:	f001 f849 	bl	800c2ac <__pow5mult>
 800b21a:	9002      	str	r0, [sp, #8]
 800b21c:	2101      	movs	r1, #1
 800b21e:	4648      	mov	r0, r9
 800b220:	f000 ff8c 	bl	800c13c <__i2b>
 800b224:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b226:	4604      	mov	r4, r0
 800b228:	2b00      	cmp	r3, #0
 800b22a:	f000 81d8 	beq.w	800b5de <_dtoa_r+0xb56>
 800b22e:	461a      	mov	r2, r3
 800b230:	4601      	mov	r1, r0
 800b232:	4648      	mov	r0, r9
 800b234:	f001 f83a 	bl	800c2ac <__pow5mult>
 800b238:	9b07      	ldr	r3, [sp, #28]
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	4604      	mov	r4, r0
 800b23e:	f300 809f 	bgt.w	800b380 <_dtoa_r+0x8f8>
 800b242:	9b04      	ldr	r3, [sp, #16]
 800b244:	2b00      	cmp	r3, #0
 800b246:	f040 8097 	bne.w	800b378 <_dtoa_r+0x8f0>
 800b24a:	9b05      	ldr	r3, [sp, #20]
 800b24c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b250:	2b00      	cmp	r3, #0
 800b252:	f040 8093 	bne.w	800b37c <_dtoa_r+0x8f4>
 800b256:	9b05      	ldr	r3, [sp, #20]
 800b258:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b25c:	0d1b      	lsrs	r3, r3, #20
 800b25e:	051b      	lsls	r3, r3, #20
 800b260:	b133      	cbz	r3, 800b270 <_dtoa_r+0x7e8>
 800b262:	9b00      	ldr	r3, [sp, #0]
 800b264:	3301      	adds	r3, #1
 800b266:	9300      	str	r3, [sp, #0]
 800b268:	9b06      	ldr	r3, [sp, #24]
 800b26a:	3301      	adds	r3, #1
 800b26c:	9306      	str	r3, [sp, #24]
 800b26e:	2301      	movs	r3, #1
 800b270:	9308      	str	r3, [sp, #32]
 800b272:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b274:	2b00      	cmp	r3, #0
 800b276:	f000 81b8 	beq.w	800b5ea <_dtoa_r+0xb62>
 800b27a:	6923      	ldr	r3, [r4, #16]
 800b27c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b280:	6918      	ldr	r0, [r3, #16]
 800b282:	f000 ff0f 	bl	800c0a4 <__hi0bits>
 800b286:	f1c0 0020 	rsb	r0, r0, #32
 800b28a:	9b06      	ldr	r3, [sp, #24]
 800b28c:	4418      	add	r0, r3
 800b28e:	f010 001f 	ands.w	r0, r0, #31
 800b292:	f000 8082 	beq.w	800b39a <_dtoa_r+0x912>
 800b296:	f1c0 0320 	rsb	r3, r0, #32
 800b29a:	2b04      	cmp	r3, #4
 800b29c:	dd73      	ble.n	800b386 <_dtoa_r+0x8fe>
 800b29e:	9b00      	ldr	r3, [sp, #0]
 800b2a0:	f1c0 001c 	rsb	r0, r0, #28
 800b2a4:	4403      	add	r3, r0
 800b2a6:	9300      	str	r3, [sp, #0]
 800b2a8:	9b06      	ldr	r3, [sp, #24]
 800b2aa:	4403      	add	r3, r0
 800b2ac:	4406      	add	r6, r0
 800b2ae:	9306      	str	r3, [sp, #24]
 800b2b0:	9b00      	ldr	r3, [sp, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	dd05      	ble.n	800b2c2 <_dtoa_r+0x83a>
 800b2b6:	9902      	ldr	r1, [sp, #8]
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	4648      	mov	r0, r9
 800b2bc:	f001 f850 	bl	800c360 <__lshift>
 800b2c0:	9002      	str	r0, [sp, #8]
 800b2c2:	9b06      	ldr	r3, [sp, #24]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	dd05      	ble.n	800b2d4 <_dtoa_r+0x84c>
 800b2c8:	4621      	mov	r1, r4
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	4648      	mov	r0, r9
 800b2ce:	f001 f847 	bl	800c360 <__lshift>
 800b2d2:	4604      	mov	r4, r0
 800b2d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d061      	beq.n	800b39e <_dtoa_r+0x916>
 800b2da:	9802      	ldr	r0, [sp, #8]
 800b2dc:	4621      	mov	r1, r4
 800b2de:	f001 f8ab 	bl	800c438 <__mcmp>
 800b2e2:	2800      	cmp	r0, #0
 800b2e4:	da5b      	bge.n	800b39e <_dtoa_r+0x916>
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	9902      	ldr	r1, [sp, #8]
 800b2ea:	220a      	movs	r2, #10
 800b2ec:	4648      	mov	r0, r9
 800b2ee:	f000 fe49 	bl	800bf84 <__multadd>
 800b2f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2f4:	9002      	str	r0, [sp, #8]
 800b2f6:	f107 38ff 	add.w	r8, r7, #4294967295
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	f000 8177 	beq.w	800b5ee <_dtoa_r+0xb66>
 800b300:	4629      	mov	r1, r5
 800b302:	2300      	movs	r3, #0
 800b304:	220a      	movs	r2, #10
 800b306:	4648      	mov	r0, r9
 800b308:	f000 fe3c 	bl	800bf84 <__multadd>
 800b30c:	f1bb 0f00 	cmp.w	fp, #0
 800b310:	4605      	mov	r5, r0
 800b312:	dc6f      	bgt.n	800b3f4 <_dtoa_r+0x96c>
 800b314:	9b07      	ldr	r3, [sp, #28]
 800b316:	2b02      	cmp	r3, #2
 800b318:	dc49      	bgt.n	800b3ae <_dtoa_r+0x926>
 800b31a:	e06b      	b.n	800b3f4 <_dtoa_r+0x96c>
 800b31c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b31e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b322:	e73c      	b.n	800b19e <_dtoa_r+0x716>
 800b324:	3fe00000 	.word	0x3fe00000
 800b328:	40240000 	.word	0x40240000
 800b32c:	9b03      	ldr	r3, [sp, #12]
 800b32e:	1e5c      	subs	r4, r3, #1
 800b330:	9b08      	ldr	r3, [sp, #32]
 800b332:	42a3      	cmp	r3, r4
 800b334:	db09      	blt.n	800b34a <_dtoa_r+0x8c2>
 800b336:	1b1c      	subs	r4, r3, r4
 800b338:	9b03      	ldr	r3, [sp, #12]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	f6bf af30 	bge.w	800b1a0 <_dtoa_r+0x718>
 800b340:	9b00      	ldr	r3, [sp, #0]
 800b342:	9a03      	ldr	r2, [sp, #12]
 800b344:	1a9e      	subs	r6, r3, r2
 800b346:	2300      	movs	r3, #0
 800b348:	e72b      	b.n	800b1a2 <_dtoa_r+0x71a>
 800b34a:	9b08      	ldr	r3, [sp, #32]
 800b34c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b34e:	9408      	str	r4, [sp, #32]
 800b350:	1ae3      	subs	r3, r4, r3
 800b352:	441a      	add	r2, r3
 800b354:	9e00      	ldr	r6, [sp, #0]
 800b356:	9b03      	ldr	r3, [sp, #12]
 800b358:	920d      	str	r2, [sp, #52]	@ 0x34
 800b35a:	2400      	movs	r4, #0
 800b35c:	e721      	b.n	800b1a2 <_dtoa_r+0x71a>
 800b35e:	9c08      	ldr	r4, [sp, #32]
 800b360:	9e00      	ldr	r6, [sp, #0]
 800b362:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b364:	e728      	b.n	800b1b8 <_dtoa_r+0x730>
 800b366:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b36a:	e751      	b.n	800b210 <_dtoa_r+0x788>
 800b36c:	9a08      	ldr	r2, [sp, #32]
 800b36e:	9902      	ldr	r1, [sp, #8]
 800b370:	e750      	b.n	800b214 <_dtoa_r+0x78c>
 800b372:	f8cd 8008 	str.w	r8, [sp, #8]
 800b376:	e751      	b.n	800b21c <_dtoa_r+0x794>
 800b378:	2300      	movs	r3, #0
 800b37a:	e779      	b.n	800b270 <_dtoa_r+0x7e8>
 800b37c:	9b04      	ldr	r3, [sp, #16]
 800b37e:	e777      	b.n	800b270 <_dtoa_r+0x7e8>
 800b380:	2300      	movs	r3, #0
 800b382:	9308      	str	r3, [sp, #32]
 800b384:	e779      	b.n	800b27a <_dtoa_r+0x7f2>
 800b386:	d093      	beq.n	800b2b0 <_dtoa_r+0x828>
 800b388:	9a00      	ldr	r2, [sp, #0]
 800b38a:	331c      	adds	r3, #28
 800b38c:	441a      	add	r2, r3
 800b38e:	9200      	str	r2, [sp, #0]
 800b390:	9a06      	ldr	r2, [sp, #24]
 800b392:	441a      	add	r2, r3
 800b394:	441e      	add	r6, r3
 800b396:	9206      	str	r2, [sp, #24]
 800b398:	e78a      	b.n	800b2b0 <_dtoa_r+0x828>
 800b39a:	4603      	mov	r3, r0
 800b39c:	e7f4      	b.n	800b388 <_dtoa_r+0x900>
 800b39e:	9b03      	ldr	r3, [sp, #12]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	46b8      	mov	r8, r7
 800b3a4:	dc20      	bgt.n	800b3e8 <_dtoa_r+0x960>
 800b3a6:	469b      	mov	fp, r3
 800b3a8:	9b07      	ldr	r3, [sp, #28]
 800b3aa:	2b02      	cmp	r3, #2
 800b3ac:	dd1e      	ble.n	800b3ec <_dtoa_r+0x964>
 800b3ae:	f1bb 0f00 	cmp.w	fp, #0
 800b3b2:	f47f adb1 	bne.w	800af18 <_dtoa_r+0x490>
 800b3b6:	4621      	mov	r1, r4
 800b3b8:	465b      	mov	r3, fp
 800b3ba:	2205      	movs	r2, #5
 800b3bc:	4648      	mov	r0, r9
 800b3be:	f000 fde1 	bl	800bf84 <__multadd>
 800b3c2:	4601      	mov	r1, r0
 800b3c4:	4604      	mov	r4, r0
 800b3c6:	9802      	ldr	r0, [sp, #8]
 800b3c8:	f001 f836 	bl	800c438 <__mcmp>
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	f77f ada3 	ble.w	800af18 <_dtoa_r+0x490>
 800b3d2:	4656      	mov	r6, sl
 800b3d4:	2331      	movs	r3, #49	@ 0x31
 800b3d6:	f806 3b01 	strb.w	r3, [r6], #1
 800b3da:	f108 0801 	add.w	r8, r8, #1
 800b3de:	e59f      	b.n	800af20 <_dtoa_r+0x498>
 800b3e0:	9c03      	ldr	r4, [sp, #12]
 800b3e2:	46b8      	mov	r8, r7
 800b3e4:	4625      	mov	r5, r4
 800b3e6:	e7f4      	b.n	800b3d2 <_dtoa_r+0x94a>
 800b3e8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b3ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	f000 8101 	beq.w	800b5f6 <_dtoa_r+0xb6e>
 800b3f4:	2e00      	cmp	r6, #0
 800b3f6:	dd05      	ble.n	800b404 <_dtoa_r+0x97c>
 800b3f8:	4629      	mov	r1, r5
 800b3fa:	4632      	mov	r2, r6
 800b3fc:	4648      	mov	r0, r9
 800b3fe:	f000 ffaf 	bl	800c360 <__lshift>
 800b402:	4605      	mov	r5, r0
 800b404:	9b08      	ldr	r3, [sp, #32]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d05c      	beq.n	800b4c4 <_dtoa_r+0xa3c>
 800b40a:	6869      	ldr	r1, [r5, #4]
 800b40c:	4648      	mov	r0, r9
 800b40e:	f000 fd57 	bl	800bec0 <_Balloc>
 800b412:	4606      	mov	r6, r0
 800b414:	b928      	cbnz	r0, 800b422 <_dtoa_r+0x99a>
 800b416:	4b82      	ldr	r3, [pc, #520]	@ (800b620 <_dtoa_r+0xb98>)
 800b418:	4602      	mov	r2, r0
 800b41a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b41e:	f7ff bb4a 	b.w	800aab6 <_dtoa_r+0x2e>
 800b422:	692a      	ldr	r2, [r5, #16]
 800b424:	3202      	adds	r2, #2
 800b426:	0092      	lsls	r2, r2, #2
 800b428:	f105 010c 	add.w	r1, r5, #12
 800b42c:	300c      	adds	r0, #12
 800b42e:	f7ff fa82 	bl	800a936 <memcpy>
 800b432:	2201      	movs	r2, #1
 800b434:	4631      	mov	r1, r6
 800b436:	4648      	mov	r0, r9
 800b438:	f000 ff92 	bl	800c360 <__lshift>
 800b43c:	f10a 0301 	add.w	r3, sl, #1
 800b440:	9300      	str	r3, [sp, #0]
 800b442:	eb0a 030b 	add.w	r3, sl, fp
 800b446:	9308      	str	r3, [sp, #32]
 800b448:	9b04      	ldr	r3, [sp, #16]
 800b44a:	f003 0301 	and.w	r3, r3, #1
 800b44e:	462f      	mov	r7, r5
 800b450:	9306      	str	r3, [sp, #24]
 800b452:	4605      	mov	r5, r0
 800b454:	9b00      	ldr	r3, [sp, #0]
 800b456:	9802      	ldr	r0, [sp, #8]
 800b458:	4621      	mov	r1, r4
 800b45a:	f103 3bff 	add.w	fp, r3, #4294967295
 800b45e:	f7ff fa89 	bl	800a974 <quorem>
 800b462:	4603      	mov	r3, r0
 800b464:	3330      	adds	r3, #48	@ 0x30
 800b466:	9003      	str	r0, [sp, #12]
 800b468:	4639      	mov	r1, r7
 800b46a:	9802      	ldr	r0, [sp, #8]
 800b46c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b46e:	f000 ffe3 	bl	800c438 <__mcmp>
 800b472:	462a      	mov	r2, r5
 800b474:	9004      	str	r0, [sp, #16]
 800b476:	4621      	mov	r1, r4
 800b478:	4648      	mov	r0, r9
 800b47a:	f000 fff9 	bl	800c470 <__mdiff>
 800b47e:	68c2      	ldr	r2, [r0, #12]
 800b480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b482:	4606      	mov	r6, r0
 800b484:	bb02      	cbnz	r2, 800b4c8 <_dtoa_r+0xa40>
 800b486:	4601      	mov	r1, r0
 800b488:	9802      	ldr	r0, [sp, #8]
 800b48a:	f000 ffd5 	bl	800c438 <__mcmp>
 800b48e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b490:	4602      	mov	r2, r0
 800b492:	4631      	mov	r1, r6
 800b494:	4648      	mov	r0, r9
 800b496:	920c      	str	r2, [sp, #48]	@ 0x30
 800b498:	9309      	str	r3, [sp, #36]	@ 0x24
 800b49a:	f000 fd51 	bl	800bf40 <_Bfree>
 800b49e:	9b07      	ldr	r3, [sp, #28]
 800b4a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b4a2:	9e00      	ldr	r6, [sp, #0]
 800b4a4:	ea42 0103 	orr.w	r1, r2, r3
 800b4a8:	9b06      	ldr	r3, [sp, #24]
 800b4aa:	4319      	orrs	r1, r3
 800b4ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4ae:	d10d      	bne.n	800b4cc <_dtoa_r+0xa44>
 800b4b0:	2b39      	cmp	r3, #57	@ 0x39
 800b4b2:	d027      	beq.n	800b504 <_dtoa_r+0xa7c>
 800b4b4:	9a04      	ldr	r2, [sp, #16]
 800b4b6:	2a00      	cmp	r2, #0
 800b4b8:	dd01      	ble.n	800b4be <_dtoa_r+0xa36>
 800b4ba:	9b03      	ldr	r3, [sp, #12]
 800b4bc:	3331      	adds	r3, #49	@ 0x31
 800b4be:	f88b 3000 	strb.w	r3, [fp]
 800b4c2:	e52e      	b.n	800af22 <_dtoa_r+0x49a>
 800b4c4:	4628      	mov	r0, r5
 800b4c6:	e7b9      	b.n	800b43c <_dtoa_r+0x9b4>
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	e7e2      	b.n	800b492 <_dtoa_r+0xa0a>
 800b4cc:	9904      	ldr	r1, [sp, #16]
 800b4ce:	2900      	cmp	r1, #0
 800b4d0:	db04      	blt.n	800b4dc <_dtoa_r+0xa54>
 800b4d2:	9807      	ldr	r0, [sp, #28]
 800b4d4:	4301      	orrs	r1, r0
 800b4d6:	9806      	ldr	r0, [sp, #24]
 800b4d8:	4301      	orrs	r1, r0
 800b4da:	d120      	bne.n	800b51e <_dtoa_r+0xa96>
 800b4dc:	2a00      	cmp	r2, #0
 800b4de:	ddee      	ble.n	800b4be <_dtoa_r+0xa36>
 800b4e0:	9902      	ldr	r1, [sp, #8]
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	4648      	mov	r0, r9
 800b4e8:	f000 ff3a 	bl	800c360 <__lshift>
 800b4ec:	4621      	mov	r1, r4
 800b4ee:	9002      	str	r0, [sp, #8]
 800b4f0:	f000 ffa2 	bl	800c438 <__mcmp>
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	9b00      	ldr	r3, [sp, #0]
 800b4f8:	dc02      	bgt.n	800b500 <_dtoa_r+0xa78>
 800b4fa:	d1e0      	bne.n	800b4be <_dtoa_r+0xa36>
 800b4fc:	07da      	lsls	r2, r3, #31
 800b4fe:	d5de      	bpl.n	800b4be <_dtoa_r+0xa36>
 800b500:	2b39      	cmp	r3, #57	@ 0x39
 800b502:	d1da      	bne.n	800b4ba <_dtoa_r+0xa32>
 800b504:	2339      	movs	r3, #57	@ 0x39
 800b506:	f88b 3000 	strb.w	r3, [fp]
 800b50a:	4633      	mov	r3, r6
 800b50c:	461e      	mov	r6, r3
 800b50e:	3b01      	subs	r3, #1
 800b510:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b514:	2a39      	cmp	r2, #57	@ 0x39
 800b516:	d04e      	beq.n	800b5b6 <_dtoa_r+0xb2e>
 800b518:	3201      	adds	r2, #1
 800b51a:	701a      	strb	r2, [r3, #0]
 800b51c:	e501      	b.n	800af22 <_dtoa_r+0x49a>
 800b51e:	2a00      	cmp	r2, #0
 800b520:	dd03      	ble.n	800b52a <_dtoa_r+0xaa2>
 800b522:	2b39      	cmp	r3, #57	@ 0x39
 800b524:	d0ee      	beq.n	800b504 <_dtoa_r+0xa7c>
 800b526:	3301      	adds	r3, #1
 800b528:	e7c9      	b.n	800b4be <_dtoa_r+0xa36>
 800b52a:	9a00      	ldr	r2, [sp, #0]
 800b52c:	9908      	ldr	r1, [sp, #32]
 800b52e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b532:	428a      	cmp	r2, r1
 800b534:	d028      	beq.n	800b588 <_dtoa_r+0xb00>
 800b536:	9902      	ldr	r1, [sp, #8]
 800b538:	2300      	movs	r3, #0
 800b53a:	220a      	movs	r2, #10
 800b53c:	4648      	mov	r0, r9
 800b53e:	f000 fd21 	bl	800bf84 <__multadd>
 800b542:	42af      	cmp	r7, r5
 800b544:	9002      	str	r0, [sp, #8]
 800b546:	f04f 0300 	mov.w	r3, #0
 800b54a:	f04f 020a 	mov.w	r2, #10
 800b54e:	4639      	mov	r1, r7
 800b550:	4648      	mov	r0, r9
 800b552:	d107      	bne.n	800b564 <_dtoa_r+0xadc>
 800b554:	f000 fd16 	bl	800bf84 <__multadd>
 800b558:	4607      	mov	r7, r0
 800b55a:	4605      	mov	r5, r0
 800b55c:	9b00      	ldr	r3, [sp, #0]
 800b55e:	3301      	adds	r3, #1
 800b560:	9300      	str	r3, [sp, #0]
 800b562:	e777      	b.n	800b454 <_dtoa_r+0x9cc>
 800b564:	f000 fd0e 	bl	800bf84 <__multadd>
 800b568:	4629      	mov	r1, r5
 800b56a:	4607      	mov	r7, r0
 800b56c:	2300      	movs	r3, #0
 800b56e:	220a      	movs	r2, #10
 800b570:	4648      	mov	r0, r9
 800b572:	f000 fd07 	bl	800bf84 <__multadd>
 800b576:	4605      	mov	r5, r0
 800b578:	e7f0      	b.n	800b55c <_dtoa_r+0xad4>
 800b57a:	f1bb 0f00 	cmp.w	fp, #0
 800b57e:	bfcc      	ite	gt
 800b580:	465e      	movgt	r6, fp
 800b582:	2601      	movle	r6, #1
 800b584:	4456      	add	r6, sl
 800b586:	2700      	movs	r7, #0
 800b588:	9902      	ldr	r1, [sp, #8]
 800b58a:	9300      	str	r3, [sp, #0]
 800b58c:	2201      	movs	r2, #1
 800b58e:	4648      	mov	r0, r9
 800b590:	f000 fee6 	bl	800c360 <__lshift>
 800b594:	4621      	mov	r1, r4
 800b596:	9002      	str	r0, [sp, #8]
 800b598:	f000 ff4e 	bl	800c438 <__mcmp>
 800b59c:	2800      	cmp	r0, #0
 800b59e:	dcb4      	bgt.n	800b50a <_dtoa_r+0xa82>
 800b5a0:	d102      	bne.n	800b5a8 <_dtoa_r+0xb20>
 800b5a2:	9b00      	ldr	r3, [sp, #0]
 800b5a4:	07db      	lsls	r3, r3, #31
 800b5a6:	d4b0      	bmi.n	800b50a <_dtoa_r+0xa82>
 800b5a8:	4633      	mov	r3, r6
 800b5aa:	461e      	mov	r6, r3
 800b5ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5b0:	2a30      	cmp	r2, #48	@ 0x30
 800b5b2:	d0fa      	beq.n	800b5aa <_dtoa_r+0xb22>
 800b5b4:	e4b5      	b.n	800af22 <_dtoa_r+0x49a>
 800b5b6:	459a      	cmp	sl, r3
 800b5b8:	d1a8      	bne.n	800b50c <_dtoa_r+0xa84>
 800b5ba:	2331      	movs	r3, #49	@ 0x31
 800b5bc:	f108 0801 	add.w	r8, r8, #1
 800b5c0:	f88a 3000 	strb.w	r3, [sl]
 800b5c4:	e4ad      	b.n	800af22 <_dtoa_r+0x49a>
 800b5c6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b5c8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b624 <_dtoa_r+0xb9c>
 800b5cc:	b11b      	cbz	r3, 800b5d6 <_dtoa_r+0xb4e>
 800b5ce:	f10a 0308 	add.w	r3, sl, #8
 800b5d2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b5d4:	6013      	str	r3, [r2, #0]
 800b5d6:	4650      	mov	r0, sl
 800b5d8:	b017      	add	sp, #92	@ 0x5c
 800b5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5de:	9b07      	ldr	r3, [sp, #28]
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	f77f ae2e 	ble.w	800b242 <_dtoa_r+0x7ba>
 800b5e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b5e8:	9308      	str	r3, [sp, #32]
 800b5ea:	2001      	movs	r0, #1
 800b5ec:	e64d      	b.n	800b28a <_dtoa_r+0x802>
 800b5ee:	f1bb 0f00 	cmp.w	fp, #0
 800b5f2:	f77f aed9 	ble.w	800b3a8 <_dtoa_r+0x920>
 800b5f6:	4656      	mov	r6, sl
 800b5f8:	9802      	ldr	r0, [sp, #8]
 800b5fa:	4621      	mov	r1, r4
 800b5fc:	f7ff f9ba 	bl	800a974 <quorem>
 800b600:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b604:	f806 3b01 	strb.w	r3, [r6], #1
 800b608:	eba6 020a 	sub.w	r2, r6, sl
 800b60c:	4593      	cmp	fp, r2
 800b60e:	ddb4      	ble.n	800b57a <_dtoa_r+0xaf2>
 800b610:	9902      	ldr	r1, [sp, #8]
 800b612:	2300      	movs	r3, #0
 800b614:	220a      	movs	r2, #10
 800b616:	4648      	mov	r0, r9
 800b618:	f000 fcb4 	bl	800bf84 <__multadd>
 800b61c:	9002      	str	r0, [sp, #8]
 800b61e:	e7eb      	b.n	800b5f8 <_dtoa_r+0xb70>
 800b620:	0800d6ff 	.word	0x0800d6ff
 800b624:	0800d683 	.word	0x0800d683

0800b628 <_free_r>:
 800b628:	b538      	push	{r3, r4, r5, lr}
 800b62a:	4605      	mov	r5, r0
 800b62c:	2900      	cmp	r1, #0
 800b62e:	d041      	beq.n	800b6b4 <_free_r+0x8c>
 800b630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b634:	1f0c      	subs	r4, r1, #4
 800b636:	2b00      	cmp	r3, #0
 800b638:	bfb8      	it	lt
 800b63a:	18e4      	addlt	r4, r4, r3
 800b63c:	f000 fc34 	bl	800bea8 <__malloc_lock>
 800b640:	4a1d      	ldr	r2, [pc, #116]	@ (800b6b8 <_free_r+0x90>)
 800b642:	6813      	ldr	r3, [r2, #0]
 800b644:	b933      	cbnz	r3, 800b654 <_free_r+0x2c>
 800b646:	6063      	str	r3, [r4, #4]
 800b648:	6014      	str	r4, [r2, #0]
 800b64a:	4628      	mov	r0, r5
 800b64c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b650:	f000 bc30 	b.w	800beb4 <__malloc_unlock>
 800b654:	42a3      	cmp	r3, r4
 800b656:	d908      	bls.n	800b66a <_free_r+0x42>
 800b658:	6820      	ldr	r0, [r4, #0]
 800b65a:	1821      	adds	r1, r4, r0
 800b65c:	428b      	cmp	r3, r1
 800b65e:	bf01      	itttt	eq
 800b660:	6819      	ldreq	r1, [r3, #0]
 800b662:	685b      	ldreq	r3, [r3, #4]
 800b664:	1809      	addeq	r1, r1, r0
 800b666:	6021      	streq	r1, [r4, #0]
 800b668:	e7ed      	b.n	800b646 <_free_r+0x1e>
 800b66a:	461a      	mov	r2, r3
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	b10b      	cbz	r3, 800b674 <_free_r+0x4c>
 800b670:	42a3      	cmp	r3, r4
 800b672:	d9fa      	bls.n	800b66a <_free_r+0x42>
 800b674:	6811      	ldr	r1, [r2, #0]
 800b676:	1850      	adds	r0, r2, r1
 800b678:	42a0      	cmp	r0, r4
 800b67a:	d10b      	bne.n	800b694 <_free_r+0x6c>
 800b67c:	6820      	ldr	r0, [r4, #0]
 800b67e:	4401      	add	r1, r0
 800b680:	1850      	adds	r0, r2, r1
 800b682:	4283      	cmp	r3, r0
 800b684:	6011      	str	r1, [r2, #0]
 800b686:	d1e0      	bne.n	800b64a <_free_r+0x22>
 800b688:	6818      	ldr	r0, [r3, #0]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	6053      	str	r3, [r2, #4]
 800b68e:	4408      	add	r0, r1
 800b690:	6010      	str	r0, [r2, #0]
 800b692:	e7da      	b.n	800b64a <_free_r+0x22>
 800b694:	d902      	bls.n	800b69c <_free_r+0x74>
 800b696:	230c      	movs	r3, #12
 800b698:	602b      	str	r3, [r5, #0]
 800b69a:	e7d6      	b.n	800b64a <_free_r+0x22>
 800b69c:	6820      	ldr	r0, [r4, #0]
 800b69e:	1821      	adds	r1, r4, r0
 800b6a0:	428b      	cmp	r3, r1
 800b6a2:	bf04      	itt	eq
 800b6a4:	6819      	ldreq	r1, [r3, #0]
 800b6a6:	685b      	ldreq	r3, [r3, #4]
 800b6a8:	6063      	str	r3, [r4, #4]
 800b6aa:	bf04      	itt	eq
 800b6ac:	1809      	addeq	r1, r1, r0
 800b6ae:	6021      	streq	r1, [r4, #0]
 800b6b0:	6054      	str	r4, [r2, #4]
 800b6b2:	e7ca      	b.n	800b64a <_free_r+0x22>
 800b6b4:	bd38      	pop	{r3, r4, r5, pc}
 800b6b6:	bf00      	nop
 800b6b8:	20000f78 	.word	0x20000f78

0800b6bc <rshift>:
 800b6bc:	6903      	ldr	r3, [r0, #16]
 800b6be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b6c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b6c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b6ca:	f100 0414 	add.w	r4, r0, #20
 800b6ce:	dd45      	ble.n	800b75c <rshift+0xa0>
 800b6d0:	f011 011f 	ands.w	r1, r1, #31
 800b6d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b6d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b6dc:	d10c      	bne.n	800b6f8 <rshift+0x3c>
 800b6de:	f100 0710 	add.w	r7, r0, #16
 800b6e2:	4629      	mov	r1, r5
 800b6e4:	42b1      	cmp	r1, r6
 800b6e6:	d334      	bcc.n	800b752 <rshift+0x96>
 800b6e8:	1a9b      	subs	r3, r3, r2
 800b6ea:	009b      	lsls	r3, r3, #2
 800b6ec:	1eea      	subs	r2, r5, #3
 800b6ee:	4296      	cmp	r6, r2
 800b6f0:	bf38      	it	cc
 800b6f2:	2300      	movcc	r3, #0
 800b6f4:	4423      	add	r3, r4
 800b6f6:	e015      	b.n	800b724 <rshift+0x68>
 800b6f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b6fc:	f1c1 0820 	rsb	r8, r1, #32
 800b700:	40cf      	lsrs	r7, r1
 800b702:	f105 0e04 	add.w	lr, r5, #4
 800b706:	46a1      	mov	r9, r4
 800b708:	4576      	cmp	r6, lr
 800b70a:	46f4      	mov	ip, lr
 800b70c:	d815      	bhi.n	800b73a <rshift+0x7e>
 800b70e:	1a9a      	subs	r2, r3, r2
 800b710:	0092      	lsls	r2, r2, #2
 800b712:	3a04      	subs	r2, #4
 800b714:	3501      	adds	r5, #1
 800b716:	42ae      	cmp	r6, r5
 800b718:	bf38      	it	cc
 800b71a:	2200      	movcc	r2, #0
 800b71c:	18a3      	adds	r3, r4, r2
 800b71e:	50a7      	str	r7, [r4, r2]
 800b720:	b107      	cbz	r7, 800b724 <rshift+0x68>
 800b722:	3304      	adds	r3, #4
 800b724:	1b1a      	subs	r2, r3, r4
 800b726:	42a3      	cmp	r3, r4
 800b728:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b72c:	bf08      	it	eq
 800b72e:	2300      	moveq	r3, #0
 800b730:	6102      	str	r2, [r0, #16]
 800b732:	bf08      	it	eq
 800b734:	6143      	streq	r3, [r0, #20]
 800b736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b73a:	f8dc c000 	ldr.w	ip, [ip]
 800b73e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b742:	ea4c 0707 	orr.w	r7, ip, r7
 800b746:	f849 7b04 	str.w	r7, [r9], #4
 800b74a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b74e:	40cf      	lsrs	r7, r1
 800b750:	e7da      	b.n	800b708 <rshift+0x4c>
 800b752:	f851 cb04 	ldr.w	ip, [r1], #4
 800b756:	f847 cf04 	str.w	ip, [r7, #4]!
 800b75a:	e7c3      	b.n	800b6e4 <rshift+0x28>
 800b75c:	4623      	mov	r3, r4
 800b75e:	e7e1      	b.n	800b724 <rshift+0x68>

0800b760 <__hexdig_fun>:
 800b760:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b764:	2b09      	cmp	r3, #9
 800b766:	d802      	bhi.n	800b76e <__hexdig_fun+0xe>
 800b768:	3820      	subs	r0, #32
 800b76a:	b2c0      	uxtb	r0, r0
 800b76c:	4770      	bx	lr
 800b76e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b772:	2b05      	cmp	r3, #5
 800b774:	d801      	bhi.n	800b77a <__hexdig_fun+0x1a>
 800b776:	3847      	subs	r0, #71	@ 0x47
 800b778:	e7f7      	b.n	800b76a <__hexdig_fun+0xa>
 800b77a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b77e:	2b05      	cmp	r3, #5
 800b780:	d801      	bhi.n	800b786 <__hexdig_fun+0x26>
 800b782:	3827      	subs	r0, #39	@ 0x27
 800b784:	e7f1      	b.n	800b76a <__hexdig_fun+0xa>
 800b786:	2000      	movs	r0, #0
 800b788:	4770      	bx	lr
	...

0800b78c <__gethex>:
 800b78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b790:	b085      	sub	sp, #20
 800b792:	468a      	mov	sl, r1
 800b794:	9302      	str	r3, [sp, #8]
 800b796:	680b      	ldr	r3, [r1, #0]
 800b798:	9001      	str	r0, [sp, #4]
 800b79a:	4690      	mov	r8, r2
 800b79c:	1c9c      	adds	r4, r3, #2
 800b79e:	46a1      	mov	r9, r4
 800b7a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b7a4:	2830      	cmp	r0, #48	@ 0x30
 800b7a6:	d0fa      	beq.n	800b79e <__gethex+0x12>
 800b7a8:	eba9 0303 	sub.w	r3, r9, r3
 800b7ac:	f1a3 0b02 	sub.w	fp, r3, #2
 800b7b0:	f7ff ffd6 	bl	800b760 <__hexdig_fun>
 800b7b4:	4605      	mov	r5, r0
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	d168      	bne.n	800b88c <__gethex+0x100>
 800b7ba:	49a0      	ldr	r1, [pc, #640]	@ (800ba3c <__gethex+0x2b0>)
 800b7bc:	2201      	movs	r2, #1
 800b7be:	4648      	mov	r0, r9
 800b7c0:	f7ff f805 	bl	800a7ce <strncmp>
 800b7c4:	4607      	mov	r7, r0
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	d167      	bne.n	800b89a <__gethex+0x10e>
 800b7ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b7ce:	4626      	mov	r6, r4
 800b7d0:	f7ff ffc6 	bl	800b760 <__hexdig_fun>
 800b7d4:	2800      	cmp	r0, #0
 800b7d6:	d062      	beq.n	800b89e <__gethex+0x112>
 800b7d8:	4623      	mov	r3, r4
 800b7da:	7818      	ldrb	r0, [r3, #0]
 800b7dc:	2830      	cmp	r0, #48	@ 0x30
 800b7de:	4699      	mov	r9, r3
 800b7e0:	f103 0301 	add.w	r3, r3, #1
 800b7e4:	d0f9      	beq.n	800b7da <__gethex+0x4e>
 800b7e6:	f7ff ffbb 	bl	800b760 <__hexdig_fun>
 800b7ea:	fab0 f580 	clz	r5, r0
 800b7ee:	096d      	lsrs	r5, r5, #5
 800b7f0:	f04f 0b01 	mov.w	fp, #1
 800b7f4:	464a      	mov	r2, r9
 800b7f6:	4616      	mov	r6, r2
 800b7f8:	3201      	adds	r2, #1
 800b7fa:	7830      	ldrb	r0, [r6, #0]
 800b7fc:	f7ff ffb0 	bl	800b760 <__hexdig_fun>
 800b800:	2800      	cmp	r0, #0
 800b802:	d1f8      	bne.n	800b7f6 <__gethex+0x6a>
 800b804:	498d      	ldr	r1, [pc, #564]	@ (800ba3c <__gethex+0x2b0>)
 800b806:	2201      	movs	r2, #1
 800b808:	4630      	mov	r0, r6
 800b80a:	f7fe ffe0 	bl	800a7ce <strncmp>
 800b80e:	2800      	cmp	r0, #0
 800b810:	d13f      	bne.n	800b892 <__gethex+0x106>
 800b812:	b944      	cbnz	r4, 800b826 <__gethex+0x9a>
 800b814:	1c74      	adds	r4, r6, #1
 800b816:	4622      	mov	r2, r4
 800b818:	4616      	mov	r6, r2
 800b81a:	3201      	adds	r2, #1
 800b81c:	7830      	ldrb	r0, [r6, #0]
 800b81e:	f7ff ff9f 	bl	800b760 <__hexdig_fun>
 800b822:	2800      	cmp	r0, #0
 800b824:	d1f8      	bne.n	800b818 <__gethex+0x8c>
 800b826:	1ba4      	subs	r4, r4, r6
 800b828:	00a7      	lsls	r7, r4, #2
 800b82a:	7833      	ldrb	r3, [r6, #0]
 800b82c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b830:	2b50      	cmp	r3, #80	@ 0x50
 800b832:	d13e      	bne.n	800b8b2 <__gethex+0x126>
 800b834:	7873      	ldrb	r3, [r6, #1]
 800b836:	2b2b      	cmp	r3, #43	@ 0x2b
 800b838:	d033      	beq.n	800b8a2 <__gethex+0x116>
 800b83a:	2b2d      	cmp	r3, #45	@ 0x2d
 800b83c:	d034      	beq.n	800b8a8 <__gethex+0x11c>
 800b83e:	1c71      	adds	r1, r6, #1
 800b840:	2400      	movs	r4, #0
 800b842:	7808      	ldrb	r0, [r1, #0]
 800b844:	f7ff ff8c 	bl	800b760 <__hexdig_fun>
 800b848:	1e43      	subs	r3, r0, #1
 800b84a:	b2db      	uxtb	r3, r3
 800b84c:	2b18      	cmp	r3, #24
 800b84e:	d830      	bhi.n	800b8b2 <__gethex+0x126>
 800b850:	f1a0 0210 	sub.w	r2, r0, #16
 800b854:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b858:	f7ff ff82 	bl	800b760 <__hexdig_fun>
 800b85c:	f100 3cff 	add.w	ip, r0, #4294967295
 800b860:	fa5f fc8c 	uxtb.w	ip, ip
 800b864:	f1bc 0f18 	cmp.w	ip, #24
 800b868:	f04f 030a 	mov.w	r3, #10
 800b86c:	d91e      	bls.n	800b8ac <__gethex+0x120>
 800b86e:	b104      	cbz	r4, 800b872 <__gethex+0xe6>
 800b870:	4252      	negs	r2, r2
 800b872:	4417      	add	r7, r2
 800b874:	f8ca 1000 	str.w	r1, [sl]
 800b878:	b1ed      	cbz	r5, 800b8b6 <__gethex+0x12a>
 800b87a:	f1bb 0f00 	cmp.w	fp, #0
 800b87e:	bf0c      	ite	eq
 800b880:	2506      	moveq	r5, #6
 800b882:	2500      	movne	r5, #0
 800b884:	4628      	mov	r0, r5
 800b886:	b005      	add	sp, #20
 800b888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b88c:	2500      	movs	r5, #0
 800b88e:	462c      	mov	r4, r5
 800b890:	e7b0      	b.n	800b7f4 <__gethex+0x68>
 800b892:	2c00      	cmp	r4, #0
 800b894:	d1c7      	bne.n	800b826 <__gethex+0x9a>
 800b896:	4627      	mov	r7, r4
 800b898:	e7c7      	b.n	800b82a <__gethex+0x9e>
 800b89a:	464e      	mov	r6, r9
 800b89c:	462f      	mov	r7, r5
 800b89e:	2501      	movs	r5, #1
 800b8a0:	e7c3      	b.n	800b82a <__gethex+0x9e>
 800b8a2:	2400      	movs	r4, #0
 800b8a4:	1cb1      	adds	r1, r6, #2
 800b8a6:	e7cc      	b.n	800b842 <__gethex+0xb6>
 800b8a8:	2401      	movs	r4, #1
 800b8aa:	e7fb      	b.n	800b8a4 <__gethex+0x118>
 800b8ac:	fb03 0002 	mla	r0, r3, r2, r0
 800b8b0:	e7ce      	b.n	800b850 <__gethex+0xc4>
 800b8b2:	4631      	mov	r1, r6
 800b8b4:	e7de      	b.n	800b874 <__gethex+0xe8>
 800b8b6:	eba6 0309 	sub.w	r3, r6, r9
 800b8ba:	3b01      	subs	r3, #1
 800b8bc:	4629      	mov	r1, r5
 800b8be:	2b07      	cmp	r3, #7
 800b8c0:	dc0a      	bgt.n	800b8d8 <__gethex+0x14c>
 800b8c2:	9801      	ldr	r0, [sp, #4]
 800b8c4:	f000 fafc 	bl	800bec0 <_Balloc>
 800b8c8:	4604      	mov	r4, r0
 800b8ca:	b940      	cbnz	r0, 800b8de <__gethex+0x152>
 800b8cc:	4b5c      	ldr	r3, [pc, #368]	@ (800ba40 <__gethex+0x2b4>)
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	21e4      	movs	r1, #228	@ 0xe4
 800b8d2:	485c      	ldr	r0, [pc, #368]	@ (800ba44 <__gethex+0x2b8>)
 800b8d4:	f001 fc1a 	bl	800d10c <__assert_func>
 800b8d8:	3101      	adds	r1, #1
 800b8da:	105b      	asrs	r3, r3, #1
 800b8dc:	e7ef      	b.n	800b8be <__gethex+0x132>
 800b8de:	f100 0a14 	add.w	sl, r0, #20
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	4655      	mov	r5, sl
 800b8e6:	469b      	mov	fp, r3
 800b8e8:	45b1      	cmp	r9, r6
 800b8ea:	d337      	bcc.n	800b95c <__gethex+0x1d0>
 800b8ec:	f845 bb04 	str.w	fp, [r5], #4
 800b8f0:	eba5 050a 	sub.w	r5, r5, sl
 800b8f4:	10ad      	asrs	r5, r5, #2
 800b8f6:	6125      	str	r5, [r4, #16]
 800b8f8:	4658      	mov	r0, fp
 800b8fa:	f000 fbd3 	bl	800c0a4 <__hi0bits>
 800b8fe:	016d      	lsls	r5, r5, #5
 800b900:	f8d8 6000 	ldr.w	r6, [r8]
 800b904:	1a2d      	subs	r5, r5, r0
 800b906:	42b5      	cmp	r5, r6
 800b908:	dd54      	ble.n	800b9b4 <__gethex+0x228>
 800b90a:	1bad      	subs	r5, r5, r6
 800b90c:	4629      	mov	r1, r5
 800b90e:	4620      	mov	r0, r4
 800b910:	f000 ff5f 	bl	800c7d2 <__any_on>
 800b914:	4681      	mov	r9, r0
 800b916:	b178      	cbz	r0, 800b938 <__gethex+0x1ac>
 800b918:	1e6b      	subs	r3, r5, #1
 800b91a:	1159      	asrs	r1, r3, #5
 800b91c:	f003 021f 	and.w	r2, r3, #31
 800b920:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b924:	f04f 0901 	mov.w	r9, #1
 800b928:	fa09 f202 	lsl.w	r2, r9, r2
 800b92c:	420a      	tst	r2, r1
 800b92e:	d003      	beq.n	800b938 <__gethex+0x1ac>
 800b930:	454b      	cmp	r3, r9
 800b932:	dc36      	bgt.n	800b9a2 <__gethex+0x216>
 800b934:	f04f 0902 	mov.w	r9, #2
 800b938:	4629      	mov	r1, r5
 800b93a:	4620      	mov	r0, r4
 800b93c:	f7ff febe 	bl	800b6bc <rshift>
 800b940:	442f      	add	r7, r5
 800b942:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b946:	42bb      	cmp	r3, r7
 800b948:	da42      	bge.n	800b9d0 <__gethex+0x244>
 800b94a:	9801      	ldr	r0, [sp, #4]
 800b94c:	4621      	mov	r1, r4
 800b94e:	f000 faf7 	bl	800bf40 <_Bfree>
 800b952:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b954:	2300      	movs	r3, #0
 800b956:	6013      	str	r3, [r2, #0]
 800b958:	25a3      	movs	r5, #163	@ 0xa3
 800b95a:	e793      	b.n	800b884 <__gethex+0xf8>
 800b95c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b960:	2a2e      	cmp	r2, #46	@ 0x2e
 800b962:	d012      	beq.n	800b98a <__gethex+0x1fe>
 800b964:	2b20      	cmp	r3, #32
 800b966:	d104      	bne.n	800b972 <__gethex+0x1e6>
 800b968:	f845 bb04 	str.w	fp, [r5], #4
 800b96c:	f04f 0b00 	mov.w	fp, #0
 800b970:	465b      	mov	r3, fp
 800b972:	7830      	ldrb	r0, [r6, #0]
 800b974:	9303      	str	r3, [sp, #12]
 800b976:	f7ff fef3 	bl	800b760 <__hexdig_fun>
 800b97a:	9b03      	ldr	r3, [sp, #12]
 800b97c:	f000 000f 	and.w	r0, r0, #15
 800b980:	4098      	lsls	r0, r3
 800b982:	ea4b 0b00 	orr.w	fp, fp, r0
 800b986:	3304      	adds	r3, #4
 800b988:	e7ae      	b.n	800b8e8 <__gethex+0x15c>
 800b98a:	45b1      	cmp	r9, r6
 800b98c:	d8ea      	bhi.n	800b964 <__gethex+0x1d8>
 800b98e:	492b      	ldr	r1, [pc, #172]	@ (800ba3c <__gethex+0x2b0>)
 800b990:	9303      	str	r3, [sp, #12]
 800b992:	2201      	movs	r2, #1
 800b994:	4630      	mov	r0, r6
 800b996:	f7fe ff1a 	bl	800a7ce <strncmp>
 800b99a:	9b03      	ldr	r3, [sp, #12]
 800b99c:	2800      	cmp	r0, #0
 800b99e:	d1e1      	bne.n	800b964 <__gethex+0x1d8>
 800b9a0:	e7a2      	b.n	800b8e8 <__gethex+0x15c>
 800b9a2:	1ea9      	subs	r1, r5, #2
 800b9a4:	4620      	mov	r0, r4
 800b9a6:	f000 ff14 	bl	800c7d2 <__any_on>
 800b9aa:	2800      	cmp	r0, #0
 800b9ac:	d0c2      	beq.n	800b934 <__gethex+0x1a8>
 800b9ae:	f04f 0903 	mov.w	r9, #3
 800b9b2:	e7c1      	b.n	800b938 <__gethex+0x1ac>
 800b9b4:	da09      	bge.n	800b9ca <__gethex+0x23e>
 800b9b6:	1b75      	subs	r5, r6, r5
 800b9b8:	4621      	mov	r1, r4
 800b9ba:	9801      	ldr	r0, [sp, #4]
 800b9bc:	462a      	mov	r2, r5
 800b9be:	f000 fccf 	bl	800c360 <__lshift>
 800b9c2:	1b7f      	subs	r7, r7, r5
 800b9c4:	4604      	mov	r4, r0
 800b9c6:	f100 0a14 	add.w	sl, r0, #20
 800b9ca:	f04f 0900 	mov.w	r9, #0
 800b9ce:	e7b8      	b.n	800b942 <__gethex+0x1b6>
 800b9d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b9d4:	42bd      	cmp	r5, r7
 800b9d6:	dd6f      	ble.n	800bab8 <__gethex+0x32c>
 800b9d8:	1bed      	subs	r5, r5, r7
 800b9da:	42ae      	cmp	r6, r5
 800b9dc:	dc34      	bgt.n	800ba48 <__gethex+0x2bc>
 800b9de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b9e2:	2b02      	cmp	r3, #2
 800b9e4:	d022      	beq.n	800ba2c <__gethex+0x2a0>
 800b9e6:	2b03      	cmp	r3, #3
 800b9e8:	d024      	beq.n	800ba34 <__gethex+0x2a8>
 800b9ea:	2b01      	cmp	r3, #1
 800b9ec:	d115      	bne.n	800ba1a <__gethex+0x28e>
 800b9ee:	42ae      	cmp	r6, r5
 800b9f0:	d113      	bne.n	800ba1a <__gethex+0x28e>
 800b9f2:	2e01      	cmp	r6, #1
 800b9f4:	d10b      	bne.n	800ba0e <__gethex+0x282>
 800b9f6:	9a02      	ldr	r2, [sp, #8]
 800b9f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b9fc:	6013      	str	r3, [r2, #0]
 800b9fe:	2301      	movs	r3, #1
 800ba00:	6123      	str	r3, [r4, #16]
 800ba02:	f8ca 3000 	str.w	r3, [sl]
 800ba06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba08:	2562      	movs	r5, #98	@ 0x62
 800ba0a:	601c      	str	r4, [r3, #0]
 800ba0c:	e73a      	b.n	800b884 <__gethex+0xf8>
 800ba0e:	1e71      	subs	r1, r6, #1
 800ba10:	4620      	mov	r0, r4
 800ba12:	f000 fede 	bl	800c7d2 <__any_on>
 800ba16:	2800      	cmp	r0, #0
 800ba18:	d1ed      	bne.n	800b9f6 <__gethex+0x26a>
 800ba1a:	9801      	ldr	r0, [sp, #4]
 800ba1c:	4621      	mov	r1, r4
 800ba1e:	f000 fa8f 	bl	800bf40 <_Bfree>
 800ba22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba24:	2300      	movs	r3, #0
 800ba26:	6013      	str	r3, [r2, #0]
 800ba28:	2550      	movs	r5, #80	@ 0x50
 800ba2a:	e72b      	b.n	800b884 <__gethex+0xf8>
 800ba2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d1f3      	bne.n	800ba1a <__gethex+0x28e>
 800ba32:	e7e0      	b.n	800b9f6 <__gethex+0x26a>
 800ba34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d1dd      	bne.n	800b9f6 <__gethex+0x26a>
 800ba3a:	e7ee      	b.n	800ba1a <__gethex+0x28e>
 800ba3c:	0800d640 	.word	0x0800d640
 800ba40:	0800d6ff 	.word	0x0800d6ff
 800ba44:	0800d710 	.word	0x0800d710
 800ba48:	1e6f      	subs	r7, r5, #1
 800ba4a:	f1b9 0f00 	cmp.w	r9, #0
 800ba4e:	d130      	bne.n	800bab2 <__gethex+0x326>
 800ba50:	b127      	cbz	r7, 800ba5c <__gethex+0x2d0>
 800ba52:	4639      	mov	r1, r7
 800ba54:	4620      	mov	r0, r4
 800ba56:	f000 febc 	bl	800c7d2 <__any_on>
 800ba5a:	4681      	mov	r9, r0
 800ba5c:	117a      	asrs	r2, r7, #5
 800ba5e:	2301      	movs	r3, #1
 800ba60:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ba64:	f007 071f 	and.w	r7, r7, #31
 800ba68:	40bb      	lsls	r3, r7
 800ba6a:	4213      	tst	r3, r2
 800ba6c:	4629      	mov	r1, r5
 800ba6e:	4620      	mov	r0, r4
 800ba70:	bf18      	it	ne
 800ba72:	f049 0902 	orrne.w	r9, r9, #2
 800ba76:	f7ff fe21 	bl	800b6bc <rshift>
 800ba7a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ba7e:	1b76      	subs	r6, r6, r5
 800ba80:	2502      	movs	r5, #2
 800ba82:	f1b9 0f00 	cmp.w	r9, #0
 800ba86:	d047      	beq.n	800bb18 <__gethex+0x38c>
 800ba88:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ba8c:	2b02      	cmp	r3, #2
 800ba8e:	d015      	beq.n	800babc <__gethex+0x330>
 800ba90:	2b03      	cmp	r3, #3
 800ba92:	d017      	beq.n	800bac4 <__gethex+0x338>
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d109      	bne.n	800baac <__gethex+0x320>
 800ba98:	f019 0f02 	tst.w	r9, #2
 800ba9c:	d006      	beq.n	800baac <__gethex+0x320>
 800ba9e:	f8da 3000 	ldr.w	r3, [sl]
 800baa2:	ea49 0903 	orr.w	r9, r9, r3
 800baa6:	f019 0f01 	tst.w	r9, #1
 800baaa:	d10e      	bne.n	800baca <__gethex+0x33e>
 800baac:	f045 0510 	orr.w	r5, r5, #16
 800bab0:	e032      	b.n	800bb18 <__gethex+0x38c>
 800bab2:	f04f 0901 	mov.w	r9, #1
 800bab6:	e7d1      	b.n	800ba5c <__gethex+0x2d0>
 800bab8:	2501      	movs	r5, #1
 800baba:	e7e2      	b.n	800ba82 <__gethex+0x2f6>
 800babc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800babe:	f1c3 0301 	rsb	r3, r3, #1
 800bac2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bac4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d0f0      	beq.n	800baac <__gethex+0x320>
 800baca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bace:	f104 0314 	add.w	r3, r4, #20
 800bad2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bad6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bada:	f04f 0c00 	mov.w	ip, #0
 800bade:	4618      	mov	r0, r3
 800bae0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bae4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bae8:	d01b      	beq.n	800bb22 <__gethex+0x396>
 800baea:	3201      	adds	r2, #1
 800baec:	6002      	str	r2, [r0, #0]
 800baee:	2d02      	cmp	r5, #2
 800baf0:	f104 0314 	add.w	r3, r4, #20
 800baf4:	d13c      	bne.n	800bb70 <__gethex+0x3e4>
 800baf6:	f8d8 2000 	ldr.w	r2, [r8]
 800bafa:	3a01      	subs	r2, #1
 800bafc:	42b2      	cmp	r2, r6
 800bafe:	d109      	bne.n	800bb14 <__gethex+0x388>
 800bb00:	1171      	asrs	r1, r6, #5
 800bb02:	2201      	movs	r2, #1
 800bb04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bb08:	f006 061f 	and.w	r6, r6, #31
 800bb0c:	fa02 f606 	lsl.w	r6, r2, r6
 800bb10:	421e      	tst	r6, r3
 800bb12:	d13a      	bne.n	800bb8a <__gethex+0x3fe>
 800bb14:	f045 0520 	orr.w	r5, r5, #32
 800bb18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb1a:	601c      	str	r4, [r3, #0]
 800bb1c:	9b02      	ldr	r3, [sp, #8]
 800bb1e:	601f      	str	r7, [r3, #0]
 800bb20:	e6b0      	b.n	800b884 <__gethex+0xf8>
 800bb22:	4299      	cmp	r1, r3
 800bb24:	f843 cc04 	str.w	ip, [r3, #-4]
 800bb28:	d8d9      	bhi.n	800bade <__gethex+0x352>
 800bb2a:	68a3      	ldr	r3, [r4, #8]
 800bb2c:	459b      	cmp	fp, r3
 800bb2e:	db17      	blt.n	800bb60 <__gethex+0x3d4>
 800bb30:	6861      	ldr	r1, [r4, #4]
 800bb32:	9801      	ldr	r0, [sp, #4]
 800bb34:	3101      	adds	r1, #1
 800bb36:	f000 f9c3 	bl	800bec0 <_Balloc>
 800bb3a:	4681      	mov	r9, r0
 800bb3c:	b918      	cbnz	r0, 800bb46 <__gethex+0x3ba>
 800bb3e:	4b1a      	ldr	r3, [pc, #104]	@ (800bba8 <__gethex+0x41c>)
 800bb40:	4602      	mov	r2, r0
 800bb42:	2184      	movs	r1, #132	@ 0x84
 800bb44:	e6c5      	b.n	800b8d2 <__gethex+0x146>
 800bb46:	6922      	ldr	r2, [r4, #16]
 800bb48:	3202      	adds	r2, #2
 800bb4a:	f104 010c 	add.w	r1, r4, #12
 800bb4e:	0092      	lsls	r2, r2, #2
 800bb50:	300c      	adds	r0, #12
 800bb52:	f7fe fef0 	bl	800a936 <memcpy>
 800bb56:	4621      	mov	r1, r4
 800bb58:	9801      	ldr	r0, [sp, #4]
 800bb5a:	f000 f9f1 	bl	800bf40 <_Bfree>
 800bb5e:	464c      	mov	r4, r9
 800bb60:	6923      	ldr	r3, [r4, #16]
 800bb62:	1c5a      	adds	r2, r3, #1
 800bb64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bb68:	6122      	str	r2, [r4, #16]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	615a      	str	r2, [r3, #20]
 800bb6e:	e7be      	b.n	800baee <__gethex+0x362>
 800bb70:	6922      	ldr	r2, [r4, #16]
 800bb72:	455a      	cmp	r2, fp
 800bb74:	dd0b      	ble.n	800bb8e <__gethex+0x402>
 800bb76:	2101      	movs	r1, #1
 800bb78:	4620      	mov	r0, r4
 800bb7a:	f7ff fd9f 	bl	800b6bc <rshift>
 800bb7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bb82:	3701      	adds	r7, #1
 800bb84:	42bb      	cmp	r3, r7
 800bb86:	f6ff aee0 	blt.w	800b94a <__gethex+0x1be>
 800bb8a:	2501      	movs	r5, #1
 800bb8c:	e7c2      	b.n	800bb14 <__gethex+0x388>
 800bb8e:	f016 061f 	ands.w	r6, r6, #31
 800bb92:	d0fa      	beq.n	800bb8a <__gethex+0x3fe>
 800bb94:	4453      	add	r3, sl
 800bb96:	f1c6 0620 	rsb	r6, r6, #32
 800bb9a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bb9e:	f000 fa81 	bl	800c0a4 <__hi0bits>
 800bba2:	42b0      	cmp	r0, r6
 800bba4:	dbe7      	blt.n	800bb76 <__gethex+0x3ea>
 800bba6:	e7f0      	b.n	800bb8a <__gethex+0x3fe>
 800bba8:	0800d6ff 	.word	0x0800d6ff

0800bbac <L_shift>:
 800bbac:	f1c2 0208 	rsb	r2, r2, #8
 800bbb0:	0092      	lsls	r2, r2, #2
 800bbb2:	b570      	push	{r4, r5, r6, lr}
 800bbb4:	f1c2 0620 	rsb	r6, r2, #32
 800bbb8:	6843      	ldr	r3, [r0, #4]
 800bbba:	6804      	ldr	r4, [r0, #0]
 800bbbc:	fa03 f506 	lsl.w	r5, r3, r6
 800bbc0:	432c      	orrs	r4, r5
 800bbc2:	40d3      	lsrs	r3, r2
 800bbc4:	6004      	str	r4, [r0, #0]
 800bbc6:	f840 3f04 	str.w	r3, [r0, #4]!
 800bbca:	4288      	cmp	r0, r1
 800bbcc:	d3f4      	bcc.n	800bbb8 <L_shift+0xc>
 800bbce:	bd70      	pop	{r4, r5, r6, pc}

0800bbd0 <__match>:
 800bbd0:	b530      	push	{r4, r5, lr}
 800bbd2:	6803      	ldr	r3, [r0, #0]
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbda:	b914      	cbnz	r4, 800bbe2 <__match+0x12>
 800bbdc:	6003      	str	r3, [r0, #0]
 800bbde:	2001      	movs	r0, #1
 800bbe0:	bd30      	pop	{r4, r5, pc}
 800bbe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbe6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bbea:	2d19      	cmp	r5, #25
 800bbec:	bf98      	it	ls
 800bbee:	3220      	addls	r2, #32
 800bbf0:	42a2      	cmp	r2, r4
 800bbf2:	d0f0      	beq.n	800bbd6 <__match+0x6>
 800bbf4:	2000      	movs	r0, #0
 800bbf6:	e7f3      	b.n	800bbe0 <__match+0x10>

0800bbf8 <__hexnan>:
 800bbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbfc:	680b      	ldr	r3, [r1, #0]
 800bbfe:	6801      	ldr	r1, [r0, #0]
 800bc00:	115e      	asrs	r6, r3, #5
 800bc02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bc06:	f013 031f 	ands.w	r3, r3, #31
 800bc0a:	b087      	sub	sp, #28
 800bc0c:	bf18      	it	ne
 800bc0e:	3604      	addne	r6, #4
 800bc10:	2500      	movs	r5, #0
 800bc12:	1f37      	subs	r7, r6, #4
 800bc14:	4682      	mov	sl, r0
 800bc16:	4690      	mov	r8, r2
 800bc18:	9301      	str	r3, [sp, #4]
 800bc1a:	f846 5c04 	str.w	r5, [r6, #-4]
 800bc1e:	46b9      	mov	r9, r7
 800bc20:	463c      	mov	r4, r7
 800bc22:	9502      	str	r5, [sp, #8]
 800bc24:	46ab      	mov	fp, r5
 800bc26:	784a      	ldrb	r2, [r1, #1]
 800bc28:	1c4b      	adds	r3, r1, #1
 800bc2a:	9303      	str	r3, [sp, #12]
 800bc2c:	b342      	cbz	r2, 800bc80 <__hexnan+0x88>
 800bc2e:	4610      	mov	r0, r2
 800bc30:	9105      	str	r1, [sp, #20]
 800bc32:	9204      	str	r2, [sp, #16]
 800bc34:	f7ff fd94 	bl	800b760 <__hexdig_fun>
 800bc38:	2800      	cmp	r0, #0
 800bc3a:	d151      	bne.n	800bce0 <__hexnan+0xe8>
 800bc3c:	9a04      	ldr	r2, [sp, #16]
 800bc3e:	9905      	ldr	r1, [sp, #20]
 800bc40:	2a20      	cmp	r2, #32
 800bc42:	d818      	bhi.n	800bc76 <__hexnan+0x7e>
 800bc44:	9b02      	ldr	r3, [sp, #8]
 800bc46:	459b      	cmp	fp, r3
 800bc48:	dd13      	ble.n	800bc72 <__hexnan+0x7a>
 800bc4a:	454c      	cmp	r4, r9
 800bc4c:	d206      	bcs.n	800bc5c <__hexnan+0x64>
 800bc4e:	2d07      	cmp	r5, #7
 800bc50:	dc04      	bgt.n	800bc5c <__hexnan+0x64>
 800bc52:	462a      	mov	r2, r5
 800bc54:	4649      	mov	r1, r9
 800bc56:	4620      	mov	r0, r4
 800bc58:	f7ff ffa8 	bl	800bbac <L_shift>
 800bc5c:	4544      	cmp	r4, r8
 800bc5e:	d952      	bls.n	800bd06 <__hexnan+0x10e>
 800bc60:	2300      	movs	r3, #0
 800bc62:	f1a4 0904 	sub.w	r9, r4, #4
 800bc66:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc6a:	f8cd b008 	str.w	fp, [sp, #8]
 800bc6e:	464c      	mov	r4, r9
 800bc70:	461d      	mov	r5, r3
 800bc72:	9903      	ldr	r1, [sp, #12]
 800bc74:	e7d7      	b.n	800bc26 <__hexnan+0x2e>
 800bc76:	2a29      	cmp	r2, #41	@ 0x29
 800bc78:	d157      	bne.n	800bd2a <__hexnan+0x132>
 800bc7a:	3102      	adds	r1, #2
 800bc7c:	f8ca 1000 	str.w	r1, [sl]
 800bc80:	f1bb 0f00 	cmp.w	fp, #0
 800bc84:	d051      	beq.n	800bd2a <__hexnan+0x132>
 800bc86:	454c      	cmp	r4, r9
 800bc88:	d206      	bcs.n	800bc98 <__hexnan+0xa0>
 800bc8a:	2d07      	cmp	r5, #7
 800bc8c:	dc04      	bgt.n	800bc98 <__hexnan+0xa0>
 800bc8e:	462a      	mov	r2, r5
 800bc90:	4649      	mov	r1, r9
 800bc92:	4620      	mov	r0, r4
 800bc94:	f7ff ff8a 	bl	800bbac <L_shift>
 800bc98:	4544      	cmp	r4, r8
 800bc9a:	d936      	bls.n	800bd0a <__hexnan+0x112>
 800bc9c:	f1a8 0204 	sub.w	r2, r8, #4
 800bca0:	4623      	mov	r3, r4
 800bca2:	f853 1b04 	ldr.w	r1, [r3], #4
 800bca6:	f842 1f04 	str.w	r1, [r2, #4]!
 800bcaa:	429f      	cmp	r7, r3
 800bcac:	d2f9      	bcs.n	800bca2 <__hexnan+0xaa>
 800bcae:	1b3b      	subs	r3, r7, r4
 800bcb0:	f023 0303 	bic.w	r3, r3, #3
 800bcb4:	3304      	adds	r3, #4
 800bcb6:	3401      	adds	r4, #1
 800bcb8:	3e03      	subs	r6, #3
 800bcba:	42b4      	cmp	r4, r6
 800bcbc:	bf88      	it	hi
 800bcbe:	2304      	movhi	r3, #4
 800bcc0:	4443      	add	r3, r8
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	f843 2b04 	str.w	r2, [r3], #4
 800bcc8:	429f      	cmp	r7, r3
 800bcca:	d2fb      	bcs.n	800bcc4 <__hexnan+0xcc>
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	b91b      	cbnz	r3, 800bcd8 <__hexnan+0xe0>
 800bcd0:	4547      	cmp	r7, r8
 800bcd2:	d128      	bne.n	800bd26 <__hexnan+0x12e>
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	603b      	str	r3, [r7, #0]
 800bcd8:	2005      	movs	r0, #5
 800bcda:	b007      	add	sp, #28
 800bcdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bce0:	3501      	adds	r5, #1
 800bce2:	2d08      	cmp	r5, #8
 800bce4:	f10b 0b01 	add.w	fp, fp, #1
 800bce8:	dd06      	ble.n	800bcf8 <__hexnan+0x100>
 800bcea:	4544      	cmp	r4, r8
 800bcec:	d9c1      	bls.n	800bc72 <__hexnan+0x7a>
 800bcee:	2300      	movs	r3, #0
 800bcf0:	f844 3c04 	str.w	r3, [r4, #-4]
 800bcf4:	2501      	movs	r5, #1
 800bcf6:	3c04      	subs	r4, #4
 800bcf8:	6822      	ldr	r2, [r4, #0]
 800bcfa:	f000 000f 	and.w	r0, r0, #15
 800bcfe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bd02:	6020      	str	r0, [r4, #0]
 800bd04:	e7b5      	b.n	800bc72 <__hexnan+0x7a>
 800bd06:	2508      	movs	r5, #8
 800bd08:	e7b3      	b.n	800bc72 <__hexnan+0x7a>
 800bd0a:	9b01      	ldr	r3, [sp, #4]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d0dd      	beq.n	800bccc <__hexnan+0xd4>
 800bd10:	f1c3 0320 	rsb	r3, r3, #32
 800bd14:	f04f 32ff 	mov.w	r2, #4294967295
 800bd18:	40da      	lsrs	r2, r3
 800bd1a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bd1e:	4013      	ands	r3, r2
 800bd20:	f846 3c04 	str.w	r3, [r6, #-4]
 800bd24:	e7d2      	b.n	800bccc <__hexnan+0xd4>
 800bd26:	3f04      	subs	r7, #4
 800bd28:	e7d0      	b.n	800bccc <__hexnan+0xd4>
 800bd2a:	2004      	movs	r0, #4
 800bd2c:	e7d5      	b.n	800bcda <__hexnan+0xe2>
	...

0800bd30 <malloc>:
 800bd30:	4b02      	ldr	r3, [pc, #8]	@ (800bd3c <malloc+0xc>)
 800bd32:	4601      	mov	r1, r0
 800bd34:	6818      	ldr	r0, [r3, #0]
 800bd36:	f000 b825 	b.w	800bd84 <_malloc_r>
 800bd3a:	bf00      	nop
 800bd3c:	20000184 	.word	0x20000184

0800bd40 <sbrk_aligned>:
 800bd40:	b570      	push	{r4, r5, r6, lr}
 800bd42:	4e0f      	ldr	r6, [pc, #60]	@ (800bd80 <sbrk_aligned+0x40>)
 800bd44:	460c      	mov	r4, r1
 800bd46:	6831      	ldr	r1, [r6, #0]
 800bd48:	4605      	mov	r5, r0
 800bd4a:	b911      	cbnz	r1, 800bd52 <sbrk_aligned+0x12>
 800bd4c:	f001 f9ce 	bl	800d0ec <_sbrk_r>
 800bd50:	6030      	str	r0, [r6, #0]
 800bd52:	4621      	mov	r1, r4
 800bd54:	4628      	mov	r0, r5
 800bd56:	f001 f9c9 	bl	800d0ec <_sbrk_r>
 800bd5a:	1c43      	adds	r3, r0, #1
 800bd5c:	d103      	bne.n	800bd66 <sbrk_aligned+0x26>
 800bd5e:	f04f 34ff 	mov.w	r4, #4294967295
 800bd62:	4620      	mov	r0, r4
 800bd64:	bd70      	pop	{r4, r5, r6, pc}
 800bd66:	1cc4      	adds	r4, r0, #3
 800bd68:	f024 0403 	bic.w	r4, r4, #3
 800bd6c:	42a0      	cmp	r0, r4
 800bd6e:	d0f8      	beq.n	800bd62 <sbrk_aligned+0x22>
 800bd70:	1a21      	subs	r1, r4, r0
 800bd72:	4628      	mov	r0, r5
 800bd74:	f001 f9ba 	bl	800d0ec <_sbrk_r>
 800bd78:	3001      	adds	r0, #1
 800bd7a:	d1f2      	bne.n	800bd62 <sbrk_aligned+0x22>
 800bd7c:	e7ef      	b.n	800bd5e <sbrk_aligned+0x1e>
 800bd7e:	bf00      	nop
 800bd80:	20000f74 	.word	0x20000f74

0800bd84 <_malloc_r>:
 800bd84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd88:	1ccd      	adds	r5, r1, #3
 800bd8a:	f025 0503 	bic.w	r5, r5, #3
 800bd8e:	3508      	adds	r5, #8
 800bd90:	2d0c      	cmp	r5, #12
 800bd92:	bf38      	it	cc
 800bd94:	250c      	movcc	r5, #12
 800bd96:	2d00      	cmp	r5, #0
 800bd98:	4606      	mov	r6, r0
 800bd9a:	db01      	blt.n	800bda0 <_malloc_r+0x1c>
 800bd9c:	42a9      	cmp	r1, r5
 800bd9e:	d904      	bls.n	800bdaa <_malloc_r+0x26>
 800bda0:	230c      	movs	r3, #12
 800bda2:	6033      	str	r3, [r6, #0]
 800bda4:	2000      	movs	r0, #0
 800bda6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800be80 <_malloc_r+0xfc>
 800bdae:	f000 f87b 	bl	800bea8 <__malloc_lock>
 800bdb2:	f8d8 3000 	ldr.w	r3, [r8]
 800bdb6:	461c      	mov	r4, r3
 800bdb8:	bb44      	cbnz	r4, 800be0c <_malloc_r+0x88>
 800bdba:	4629      	mov	r1, r5
 800bdbc:	4630      	mov	r0, r6
 800bdbe:	f7ff ffbf 	bl	800bd40 <sbrk_aligned>
 800bdc2:	1c43      	adds	r3, r0, #1
 800bdc4:	4604      	mov	r4, r0
 800bdc6:	d158      	bne.n	800be7a <_malloc_r+0xf6>
 800bdc8:	f8d8 4000 	ldr.w	r4, [r8]
 800bdcc:	4627      	mov	r7, r4
 800bdce:	2f00      	cmp	r7, #0
 800bdd0:	d143      	bne.n	800be5a <_malloc_r+0xd6>
 800bdd2:	2c00      	cmp	r4, #0
 800bdd4:	d04b      	beq.n	800be6e <_malloc_r+0xea>
 800bdd6:	6823      	ldr	r3, [r4, #0]
 800bdd8:	4639      	mov	r1, r7
 800bdda:	4630      	mov	r0, r6
 800bddc:	eb04 0903 	add.w	r9, r4, r3
 800bde0:	f001 f984 	bl	800d0ec <_sbrk_r>
 800bde4:	4581      	cmp	r9, r0
 800bde6:	d142      	bne.n	800be6e <_malloc_r+0xea>
 800bde8:	6821      	ldr	r1, [r4, #0]
 800bdea:	1a6d      	subs	r5, r5, r1
 800bdec:	4629      	mov	r1, r5
 800bdee:	4630      	mov	r0, r6
 800bdf0:	f7ff ffa6 	bl	800bd40 <sbrk_aligned>
 800bdf4:	3001      	adds	r0, #1
 800bdf6:	d03a      	beq.n	800be6e <_malloc_r+0xea>
 800bdf8:	6823      	ldr	r3, [r4, #0]
 800bdfa:	442b      	add	r3, r5
 800bdfc:	6023      	str	r3, [r4, #0]
 800bdfe:	f8d8 3000 	ldr.w	r3, [r8]
 800be02:	685a      	ldr	r2, [r3, #4]
 800be04:	bb62      	cbnz	r2, 800be60 <_malloc_r+0xdc>
 800be06:	f8c8 7000 	str.w	r7, [r8]
 800be0a:	e00f      	b.n	800be2c <_malloc_r+0xa8>
 800be0c:	6822      	ldr	r2, [r4, #0]
 800be0e:	1b52      	subs	r2, r2, r5
 800be10:	d420      	bmi.n	800be54 <_malloc_r+0xd0>
 800be12:	2a0b      	cmp	r2, #11
 800be14:	d917      	bls.n	800be46 <_malloc_r+0xc2>
 800be16:	1961      	adds	r1, r4, r5
 800be18:	42a3      	cmp	r3, r4
 800be1a:	6025      	str	r5, [r4, #0]
 800be1c:	bf18      	it	ne
 800be1e:	6059      	strne	r1, [r3, #4]
 800be20:	6863      	ldr	r3, [r4, #4]
 800be22:	bf08      	it	eq
 800be24:	f8c8 1000 	streq.w	r1, [r8]
 800be28:	5162      	str	r2, [r4, r5]
 800be2a:	604b      	str	r3, [r1, #4]
 800be2c:	4630      	mov	r0, r6
 800be2e:	f000 f841 	bl	800beb4 <__malloc_unlock>
 800be32:	f104 000b 	add.w	r0, r4, #11
 800be36:	1d23      	adds	r3, r4, #4
 800be38:	f020 0007 	bic.w	r0, r0, #7
 800be3c:	1ac2      	subs	r2, r0, r3
 800be3e:	bf1c      	itt	ne
 800be40:	1a1b      	subne	r3, r3, r0
 800be42:	50a3      	strne	r3, [r4, r2]
 800be44:	e7af      	b.n	800bda6 <_malloc_r+0x22>
 800be46:	6862      	ldr	r2, [r4, #4]
 800be48:	42a3      	cmp	r3, r4
 800be4a:	bf0c      	ite	eq
 800be4c:	f8c8 2000 	streq.w	r2, [r8]
 800be50:	605a      	strne	r2, [r3, #4]
 800be52:	e7eb      	b.n	800be2c <_malloc_r+0xa8>
 800be54:	4623      	mov	r3, r4
 800be56:	6864      	ldr	r4, [r4, #4]
 800be58:	e7ae      	b.n	800bdb8 <_malloc_r+0x34>
 800be5a:	463c      	mov	r4, r7
 800be5c:	687f      	ldr	r7, [r7, #4]
 800be5e:	e7b6      	b.n	800bdce <_malloc_r+0x4a>
 800be60:	461a      	mov	r2, r3
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	42a3      	cmp	r3, r4
 800be66:	d1fb      	bne.n	800be60 <_malloc_r+0xdc>
 800be68:	2300      	movs	r3, #0
 800be6a:	6053      	str	r3, [r2, #4]
 800be6c:	e7de      	b.n	800be2c <_malloc_r+0xa8>
 800be6e:	230c      	movs	r3, #12
 800be70:	6033      	str	r3, [r6, #0]
 800be72:	4630      	mov	r0, r6
 800be74:	f000 f81e 	bl	800beb4 <__malloc_unlock>
 800be78:	e794      	b.n	800bda4 <_malloc_r+0x20>
 800be7a:	6005      	str	r5, [r0, #0]
 800be7c:	e7d6      	b.n	800be2c <_malloc_r+0xa8>
 800be7e:	bf00      	nop
 800be80:	20000f78 	.word	0x20000f78

0800be84 <__ascii_mbtowc>:
 800be84:	b082      	sub	sp, #8
 800be86:	b901      	cbnz	r1, 800be8a <__ascii_mbtowc+0x6>
 800be88:	a901      	add	r1, sp, #4
 800be8a:	b142      	cbz	r2, 800be9e <__ascii_mbtowc+0x1a>
 800be8c:	b14b      	cbz	r3, 800bea2 <__ascii_mbtowc+0x1e>
 800be8e:	7813      	ldrb	r3, [r2, #0]
 800be90:	600b      	str	r3, [r1, #0]
 800be92:	7812      	ldrb	r2, [r2, #0]
 800be94:	1e10      	subs	r0, r2, #0
 800be96:	bf18      	it	ne
 800be98:	2001      	movne	r0, #1
 800be9a:	b002      	add	sp, #8
 800be9c:	4770      	bx	lr
 800be9e:	4610      	mov	r0, r2
 800bea0:	e7fb      	b.n	800be9a <__ascii_mbtowc+0x16>
 800bea2:	f06f 0001 	mvn.w	r0, #1
 800bea6:	e7f8      	b.n	800be9a <__ascii_mbtowc+0x16>

0800bea8 <__malloc_lock>:
 800bea8:	4801      	ldr	r0, [pc, #4]	@ (800beb0 <__malloc_lock+0x8>)
 800beaa:	f7fe bd42 	b.w	800a932 <__retarget_lock_acquire_recursive>
 800beae:	bf00      	nop
 800beb0:	20000f70 	.word	0x20000f70

0800beb4 <__malloc_unlock>:
 800beb4:	4801      	ldr	r0, [pc, #4]	@ (800bebc <__malloc_unlock+0x8>)
 800beb6:	f7fe bd3d 	b.w	800a934 <__retarget_lock_release_recursive>
 800beba:	bf00      	nop
 800bebc:	20000f70 	.word	0x20000f70

0800bec0 <_Balloc>:
 800bec0:	b570      	push	{r4, r5, r6, lr}
 800bec2:	69c6      	ldr	r6, [r0, #28]
 800bec4:	4604      	mov	r4, r0
 800bec6:	460d      	mov	r5, r1
 800bec8:	b976      	cbnz	r6, 800bee8 <_Balloc+0x28>
 800beca:	2010      	movs	r0, #16
 800becc:	f7ff ff30 	bl	800bd30 <malloc>
 800bed0:	4602      	mov	r2, r0
 800bed2:	61e0      	str	r0, [r4, #28]
 800bed4:	b920      	cbnz	r0, 800bee0 <_Balloc+0x20>
 800bed6:	4b18      	ldr	r3, [pc, #96]	@ (800bf38 <_Balloc+0x78>)
 800bed8:	4818      	ldr	r0, [pc, #96]	@ (800bf3c <_Balloc+0x7c>)
 800beda:	216b      	movs	r1, #107	@ 0x6b
 800bedc:	f001 f916 	bl	800d10c <__assert_func>
 800bee0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bee4:	6006      	str	r6, [r0, #0]
 800bee6:	60c6      	str	r6, [r0, #12]
 800bee8:	69e6      	ldr	r6, [r4, #28]
 800beea:	68f3      	ldr	r3, [r6, #12]
 800beec:	b183      	cbz	r3, 800bf10 <_Balloc+0x50>
 800beee:	69e3      	ldr	r3, [r4, #28]
 800bef0:	68db      	ldr	r3, [r3, #12]
 800bef2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bef6:	b9b8      	cbnz	r0, 800bf28 <_Balloc+0x68>
 800bef8:	2101      	movs	r1, #1
 800befa:	fa01 f605 	lsl.w	r6, r1, r5
 800befe:	1d72      	adds	r2, r6, #5
 800bf00:	0092      	lsls	r2, r2, #2
 800bf02:	4620      	mov	r0, r4
 800bf04:	f001 f920 	bl	800d148 <_calloc_r>
 800bf08:	b160      	cbz	r0, 800bf24 <_Balloc+0x64>
 800bf0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf0e:	e00e      	b.n	800bf2e <_Balloc+0x6e>
 800bf10:	2221      	movs	r2, #33	@ 0x21
 800bf12:	2104      	movs	r1, #4
 800bf14:	4620      	mov	r0, r4
 800bf16:	f001 f917 	bl	800d148 <_calloc_r>
 800bf1a:	69e3      	ldr	r3, [r4, #28]
 800bf1c:	60f0      	str	r0, [r6, #12]
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d1e4      	bne.n	800beee <_Balloc+0x2e>
 800bf24:	2000      	movs	r0, #0
 800bf26:	bd70      	pop	{r4, r5, r6, pc}
 800bf28:	6802      	ldr	r2, [r0, #0]
 800bf2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf2e:	2300      	movs	r3, #0
 800bf30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf34:	e7f7      	b.n	800bf26 <_Balloc+0x66>
 800bf36:	bf00      	nop
 800bf38:	0800d690 	.word	0x0800d690
 800bf3c:	0800d770 	.word	0x0800d770

0800bf40 <_Bfree>:
 800bf40:	b570      	push	{r4, r5, r6, lr}
 800bf42:	69c6      	ldr	r6, [r0, #28]
 800bf44:	4605      	mov	r5, r0
 800bf46:	460c      	mov	r4, r1
 800bf48:	b976      	cbnz	r6, 800bf68 <_Bfree+0x28>
 800bf4a:	2010      	movs	r0, #16
 800bf4c:	f7ff fef0 	bl	800bd30 <malloc>
 800bf50:	4602      	mov	r2, r0
 800bf52:	61e8      	str	r0, [r5, #28]
 800bf54:	b920      	cbnz	r0, 800bf60 <_Bfree+0x20>
 800bf56:	4b09      	ldr	r3, [pc, #36]	@ (800bf7c <_Bfree+0x3c>)
 800bf58:	4809      	ldr	r0, [pc, #36]	@ (800bf80 <_Bfree+0x40>)
 800bf5a:	218f      	movs	r1, #143	@ 0x8f
 800bf5c:	f001 f8d6 	bl	800d10c <__assert_func>
 800bf60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf64:	6006      	str	r6, [r0, #0]
 800bf66:	60c6      	str	r6, [r0, #12]
 800bf68:	b13c      	cbz	r4, 800bf7a <_Bfree+0x3a>
 800bf6a:	69eb      	ldr	r3, [r5, #28]
 800bf6c:	6862      	ldr	r2, [r4, #4]
 800bf6e:	68db      	ldr	r3, [r3, #12]
 800bf70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf74:	6021      	str	r1, [r4, #0]
 800bf76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf7a:	bd70      	pop	{r4, r5, r6, pc}
 800bf7c:	0800d690 	.word	0x0800d690
 800bf80:	0800d770 	.word	0x0800d770

0800bf84 <__multadd>:
 800bf84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf88:	690d      	ldr	r5, [r1, #16]
 800bf8a:	4607      	mov	r7, r0
 800bf8c:	460c      	mov	r4, r1
 800bf8e:	461e      	mov	r6, r3
 800bf90:	f101 0c14 	add.w	ip, r1, #20
 800bf94:	2000      	movs	r0, #0
 800bf96:	f8dc 3000 	ldr.w	r3, [ip]
 800bf9a:	b299      	uxth	r1, r3
 800bf9c:	fb02 6101 	mla	r1, r2, r1, r6
 800bfa0:	0c1e      	lsrs	r6, r3, #16
 800bfa2:	0c0b      	lsrs	r3, r1, #16
 800bfa4:	fb02 3306 	mla	r3, r2, r6, r3
 800bfa8:	b289      	uxth	r1, r1
 800bfaa:	3001      	adds	r0, #1
 800bfac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bfb0:	4285      	cmp	r5, r0
 800bfb2:	f84c 1b04 	str.w	r1, [ip], #4
 800bfb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bfba:	dcec      	bgt.n	800bf96 <__multadd+0x12>
 800bfbc:	b30e      	cbz	r6, 800c002 <__multadd+0x7e>
 800bfbe:	68a3      	ldr	r3, [r4, #8]
 800bfc0:	42ab      	cmp	r3, r5
 800bfc2:	dc19      	bgt.n	800bff8 <__multadd+0x74>
 800bfc4:	6861      	ldr	r1, [r4, #4]
 800bfc6:	4638      	mov	r0, r7
 800bfc8:	3101      	adds	r1, #1
 800bfca:	f7ff ff79 	bl	800bec0 <_Balloc>
 800bfce:	4680      	mov	r8, r0
 800bfd0:	b928      	cbnz	r0, 800bfde <__multadd+0x5a>
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	4b0c      	ldr	r3, [pc, #48]	@ (800c008 <__multadd+0x84>)
 800bfd6:	480d      	ldr	r0, [pc, #52]	@ (800c00c <__multadd+0x88>)
 800bfd8:	21ba      	movs	r1, #186	@ 0xba
 800bfda:	f001 f897 	bl	800d10c <__assert_func>
 800bfde:	6922      	ldr	r2, [r4, #16]
 800bfe0:	3202      	adds	r2, #2
 800bfe2:	f104 010c 	add.w	r1, r4, #12
 800bfe6:	0092      	lsls	r2, r2, #2
 800bfe8:	300c      	adds	r0, #12
 800bfea:	f7fe fca4 	bl	800a936 <memcpy>
 800bfee:	4621      	mov	r1, r4
 800bff0:	4638      	mov	r0, r7
 800bff2:	f7ff ffa5 	bl	800bf40 <_Bfree>
 800bff6:	4644      	mov	r4, r8
 800bff8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bffc:	3501      	adds	r5, #1
 800bffe:	615e      	str	r6, [r3, #20]
 800c000:	6125      	str	r5, [r4, #16]
 800c002:	4620      	mov	r0, r4
 800c004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c008:	0800d6ff 	.word	0x0800d6ff
 800c00c:	0800d770 	.word	0x0800d770

0800c010 <__s2b>:
 800c010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c014:	460c      	mov	r4, r1
 800c016:	4615      	mov	r5, r2
 800c018:	461f      	mov	r7, r3
 800c01a:	2209      	movs	r2, #9
 800c01c:	3308      	adds	r3, #8
 800c01e:	4606      	mov	r6, r0
 800c020:	fb93 f3f2 	sdiv	r3, r3, r2
 800c024:	2100      	movs	r1, #0
 800c026:	2201      	movs	r2, #1
 800c028:	429a      	cmp	r2, r3
 800c02a:	db09      	blt.n	800c040 <__s2b+0x30>
 800c02c:	4630      	mov	r0, r6
 800c02e:	f7ff ff47 	bl	800bec0 <_Balloc>
 800c032:	b940      	cbnz	r0, 800c046 <__s2b+0x36>
 800c034:	4602      	mov	r2, r0
 800c036:	4b19      	ldr	r3, [pc, #100]	@ (800c09c <__s2b+0x8c>)
 800c038:	4819      	ldr	r0, [pc, #100]	@ (800c0a0 <__s2b+0x90>)
 800c03a:	21d3      	movs	r1, #211	@ 0xd3
 800c03c:	f001 f866 	bl	800d10c <__assert_func>
 800c040:	0052      	lsls	r2, r2, #1
 800c042:	3101      	adds	r1, #1
 800c044:	e7f0      	b.n	800c028 <__s2b+0x18>
 800c046:	9b08      	ldr	r3, [sp, #32]
 800c048:	6143      	str	r3, [r0, #20]
 800c04a:	2d09      	cmp	r5, #9
 800c04c:	f04f 0301 	mov.w	r3, #1
 800c050:	6103      	str	r3, [r0, #16]
 800c052:	dd16      	ble.n	800c082 <__s2b+0x72>
 800c054:	f104 0909 	add.w	r9, r4, #9
 800c058:	46c8      	mov	r8, r9
 800c05a:	442c      	add	r4, r5
 800c05c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c060:	4601      	mov	r1, r0
 800c062:	3b30      	subs	r3, #48	@ 0x30
 800c064:	220a      	movs	r2, #10
 800c066:	4630      	mov	r0, r6
 800c068:	f7ff ff8c 	bl	800bf84 <__multadd>
 800c06c:	45a0      	cmp	r8, r4
 800c06e:	d1f5      	bne.n	800c05c <__s2b+0x4c>
 800c070:	f1a5 0408 	sub.w	r4, r5, #8
 800c074:	444c      	add	r4, r9
 800c076:	1b2d      	subs	r5, r5, r4
 800c078:	1963      	adds	r3, r4, r5
 800c07a:	42bb      	cmp	r3, r7
 800c07c:	db04      	blt.n	800c088 <__s2b+0x78>
 800c07e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c082:	340a      	adds	r4, #10
 800c084:	2509      	movs	r5, #9
 800c086:	e7f6      	b.n	800c076 <__s2b+0x66>
 800c088:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c08c:	4601      	mov	r1, r0
 800c08e:	3b30      	subs	r3, #48	@ 0x30
 800c090:	220a      	movs	r2, #10
 800c092:	4630      	mov	r0, r6
 800c094:	f7ff ff76 	bl	800bf84 <__multadd>
 800c098:	e7ee      	b.n	800c078 <__s2b+0x68>
 800c09a:	bf00      	nop
 800c09c:	0800d6ff 	.word	0x0800d6ff
 800c0a0:	0800d770 	.word	0x0800d770

0800c0a4 <__hi0bits>:
 800c0a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	bf36      	itet	cc
 800c0ac:	0403      	lslcc	r3, r0, #16
 800c0ae:	2000      	movcs	r0, #0
 800c0b0:	2010      	movcc	r0, #16
 800c0b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c0b6:	bf3c      	itt	cc
 800c0b8:	021b      	lslcc	r3, r3, #8
 800c0ba:	3008      	addcc	r0, #8
 800c0bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c0c0:	bf3c      	itt	cc
 800c0c2:	011b      	lslcc	r3, r3, #4
 800c0c4:	3004      	addcc	r0, #4
 800c0c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0ca:	bf3c      	itt	cc
 800c0cc:	009b      	lslcc	r3, r3, #2
 800c0ce:	3002      	addcc	r0, #2
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	db05      	blt.n	800c0e0 <__hi0bits+0x3c>
 800c0d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c0d8:	f100 0001 	add.w	r0, r0, #1
 800c0dc:	bf08      	it	eq
 800c0de:	2020      	moveq	r0, #32
 800c0e0:	4770      	bx	lr

0800c0e2 <__lo0bits>:
 800c0e2:	6803      	ldr	r3, [r0, #0]
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	f013 0007 	ands.w	r0, r3, #7
 800c0ea:	d00b      	beq.n	800c104 <__lo0bits+0x22>
 800c0ec:	07d9      	lsls	r1, r3, #31
 800c0ee:	d421      	bmi.n	800c134 <__lo0bits+0x52>
 800c0f0:	0798      	lsls	r0, r3, #30
 800c0f2:	bf49      	itett	mi
 800c0f4:	085b      	lsrmi	r3, r3, #1
 800c0f6:	089b      	lsrpl	r3, r3, #2
 800c0f8:	2001      	movmi	r0, #1
 800c0fa:	6013      	strmi	r3, [r2, #0]
 800c0fc:	bf5c      	itt	pl
 800c0fe:	6013      	strpl	r3, [r2, #0]
 800c100:	2002      	movpl	r0, #2
 800c102:	4770      	bx	lr
 800c104:	b299      	uxth	r1, r3
 800c106:	b909      	cbnz	r1, 800c10c <__lo0bits+0x2a>
 800c108:	0c1b      	lsrs	r3, r3, #16
 800c10a:	2010      	movs	r0, #16
 800c10c:	b2d9      	uxtb	r1, r3
 800c10e:	b909      	cbnz	r1, 800c114 <__lo0bits+0x32>
 800c110:	3008      	adds	r0, #8
 800c112:	0a1b      	lsrs	r3, r3, #8
 800c114:	0719      	lsls	r1, r3, #28
 800c116:	bf04      	itt	eq
 800c118:	091b      	lsreq	r3, r3, #4
 800c11a:	3004      	addeq	r0, #4
 800c11c:	0799      	lsls	r1, r3, #30
 800c11e:	bf04      	itt	eq
 800c120:	089b      	lsreq	r3, r3, #2
 800c122:	3002      	addeq	r0, #2
 800c124:	07d9      	lsls	r1, r3, #31
 800c126:	d403      	bmi.n	800c130 <__lo0bits+0x4e>
 800c128:	085b      	lsrs	r3, r3, #1
 800c12a:	f100 0001 	add.w	r0, r0, #1
 800c12e:	d003      	beq.n	800c138 <__lo0bits+0x56>
 800c130:	6013      	str	r3, [r2, #0]
 800c132:	4770      	bx	lr
 800c134:	2000      	movs	r0, #0
 800c136:	4770      	bx	lr
 800c138:	2020      	movs	r0, #32
 800c13a:	4770      	bx	lr

0800c13c <__i2b>:
 800c13c:	b510      	push	{r4, lr}
 800c13e:	460c      	mov	r4, r1
 800c140:	2101      	movs	r1, #1
 800c142:	f7ff febd 	bl	800bec0 <_Balloc>
 800c146:	4602      	mov	r2, r0
 800c148:	b928      	cbnz	r0, 800c156 <__i2b+0x1a>
 800c14a:	4b05      	ldr	r3, [pc, #20]	@ (800c160 <__i2b+0x24>)
 800c14c:	4805      	ldr	r0, [pc, #20]	@ (800c164 <__i2b+0x28>)
 800c14e:	f240 1145 	movw	r1, #325	@ 0x145
 800c152:	f000 ffdb 	bl	800d10c <__assert_func>
 800c156:	2301      	movs	r3, #1
 800c158:	6144      	str	r4, [r0, #20]
 800c15a:	6103      	str	r3, [r0, #16]
 800c15c:	bd10      	pop	{r4, pc}
 800c15e:	bf00      	nop
 800c160:	0800d6ff 	.word	0x0800d6ff
 800c164:	0800d770 	.word	0x0800d770

0800c168 <__multiply>:
 800c168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c16c:	4617      	mov	r7, r2
 800c16e:	690a      	ldr	r2, [r1, #16]
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	429a      	cmp	r2, r3
 800c174:	bfa8      	it	ge
 800c176:	463b      	movge	r3, r7
 800c178:	4689      	mov	r9, r1
 800c17a:	bfa4      	itt	ge
 800c17c:	460f      	movge	r7, r1
 800c17e:	4699      	movge	r9, r3
 800c180:	693d      	ldr	r5, [r7, #16]
 800c182:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	6879      	ldr	r1, [r7, #4]
 800c18a:	eb05 060a 	add.w	r6, r5, sl
 800c18e:	42b3      	cmp	r3, r6
 800c190:	b085      	sub	sp, #20
 800c192:	bfb8      	it	lt
 800c194:	3101      	addlt	r1, #1
 800c196:	f7ff fe93 	bl	800bec0 <_Balloc>
 800c19a:	b930      	cbnz	r0, 800c1aa <__multiply+0x42>
 800c19c:	4602      	mov	r2, r0
 800c19e:	4b41      	ldr	r3, [pc, #260]	@ (800c2a4 <__multiply+0x13c>)
 800c1a0:	4841      	ldr	r0, [pc, #260]	@ (800c2a8 <__multiply+0x140>)
 800c1a2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c1a6:	f000 ffb1 	bl	800d10c <__assert_func>
 800c1aa:	f100 0414 	add.w	r4, r0, #20
 800c1ae:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c1b2:	4623      	mov	r3, r4
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	4573      	cmp	r3, lr
 800c1b8:	d320      	bcc.n	800c1fc <__multiply+0x94>
 800c1ba:	f107 0814 	add.w	r8, r7, #20
 800c1be:	f109 0114 	add.w	r1, r9, #20
 800c1c2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c1c6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c1ca:	9302      	str	r3, [sp, #8]
 800c1cc:	1beb      	subs	r3, r5, r7
 800c1ce:	3b15      	subs	r3, #21
 800c1d0:	f023 0303 	bic.w	r3, r3, #3
 800c1d4:	3304      	adds	r3, #4
 800c1d6:	3715      	adds	r7, #21
 800c1d8:	42bd      	cmp	r5, r7
 800c1da:	bf38      	it	cc
 800c1dc:	2304      	movcc	r3, #4
 800c1de:	9301      	str	r3, [sp, #4]
 800c1e0:	9b02      	ldr	r3, [sp, #8]
 800c1e2:	9103      	str	r1, [sp, #12]
 800c1e4:	428b      	cmp	r3, r1
 800c1e6:	d80c      	bhi.n	800c202 <__multiply+0x9a>
 800c1e8:	2e00      	cmp	r6, #0
 800c1ea:	dd03      	ble.n	800c1f4 <__multiply+0x8c>
 800c1ec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d055      	beq.n	800c2a0 <__multiply+0x138>
 800c1f4:	6106      	str	r6, [r0, #16]
 800c1f6:	b005      	add	sp, #20
 800c1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1fc:	f843 2b04 	str.w	r2, [r3], #4
 800c200:	e7d9      	b.n	800c1b6 <__multiply+0x4e>
 800c202:	f8b1 a000 	ldrh.w	sl, [r1]
 800c206:	f1ba 0f00 	cmp.w	sl, #0
 800c20a:	d01f      	beq.n	800c24c <__multiply+0xe4>
 800c20c:	46c4      	mov	ip, r8
 800c20e:	46a1      	mov	r9, r4
 800c210:	2700      	movs	r7, #0
 800c212:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c216:	f8d9 3000 	ldr.w	r3, [r9]
 800c21a:	fa1f fb82 	uxth.w	fp, r2
 800c21e:	b29b      	uxth	r3, r3
 800c220:	fb0a 330b 	mla	r3, sl, fp, r3
 800c224:	443b      	add	r3, r7
 800c226:	f8d9 7000 	ldr.w	r7, [r9]
 800c22a:	0c12      	lsrs	r2, r2, #16
 800c22c:	0c3f      	lsrs	r7, r7, #16
 800c22e:	fb0a 7202 	mla	r2, sl, r2, r7
 800c232:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c236:	b29b      	uxth	r3, r3
 800c238:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c23c:	4565      	cmp	r5, ip
 800c23e:	f849 3b04 	str.w	r3, [r9], #4
 800c242:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c246:	d8e4      	bhi.n	800c212 <__multiply+0xaa>
 800c248:	9b01      	ldr	r3, [sp, #4]
 800c24a:	50e7      	str	r7, [r4, r3]
 800c24c:	9b03      	ldr	r3, [sp, #12]
 800c24e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c252:	3104      	adds	r1, #4
 800c254:	f1b9 0f00 	cmp.w	r9, #0
 800c258:	d020      	beq.n	800c29c <__multiply+0x134>
 800c25a:	6823      	ldr	r3, [r4, #0]
 800c25c:	4647      	mov	r7, r8
 800c25e:	46a4      	mov	ip, r4
 800c260:	f04f 0a00 	mov.w	sl, #0
 800c264:	f8b7 b000 	ldrh.w	fp, [r7]
 800c268:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c26c:	fb09 220b 	mla	r2, r9, fp, r2
 800c270:	4452      	add	r2, sl
 800c272:	b29b      	uxth	r3, r3
 800c274:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c278:	f84c 3b04 	str.w	r3, [ip], #4
 800c27c:	f857 3b04 	ldr.w	r3, [r7], #4
 800c280:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c284:	f8bc 3000 	ldrh.w	r3, [ip]
 800c288:	fb09 330a 	mla	r3, r9, sl, r3
 800c28c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c290:	42bd      	cmp	r5, r7
 800c292:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c296:	d8e5      	bhi.n	800c264 <__multiply+0xfc>
 800c298:	9a01      	ldr	r2, [sp, #4]
 800c29a:	50a3      	str	r3, [r4, r2]
 800c29c:	3404      	adds	r4, #4
 800c29e:	e79f      	b.n	800c1e0 <__multiply+0x78>
 800c2a0:	3e01      	subs	r6, #1
 800c2a2:	e7a1      	b.n	800c1e8 <__multiply+0x80>
 800c2a4:	0800d6ff 	.word	0x0800d6ff
 800c2a8:	0800d770 	.word	0x0800d770

0800c2ac <__pow5mult>:
 800c2ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2b0:	4615      	mov	r5, r2
 800c2b2:	f012 0203 	ands.w	r2, r2, #3
 800c2b6:	4607      	mov	r7, r0
 800c2b8:	460e      	mov	r6, r1
 800c2ba:	d007      	beq.n	800c2cc <__pow5mult+0x20>
 800c2bc:	4c25      	ldr	r4, [pc, #148]	@ (800c354 <__pow5mult+0xa8>)
 800c2be:	3a01      	subs	r2, #1
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c2c6:	f7ff fe5d 	bl	800bf84 <__multadd>
 800c2ca:	4606      	mov	r6, r0
 800c2cc:	10ad      	asrs	r5, r5, #2
 800c2ce:	d03d      	beq.n	800c34c <__pow5mult+0xa0>
 800c2d0:	69fc      	ldr	r4, [r7, #28]
 800c2d2:	b97c      	cbnz	r4, 800c2f4 <__pow5mult+0x48>
 800c2d4:	2010      	movs	r0, #16
 800c2d6:	f7ff fd2b 	bl	800bd30 <malloc>
 800c2da:	4602      	mov	r2, r0
 800c2dc:	61f8      	str	r0, [r7, #28]
 800c2de:	b928      	cbnz	r0, 800c2ec <__pow5mult+0x40>
 800c2e0:	4b1d      	ldr	r3, [pc, #116]	@ (800c358 <__pow5mult+0xac>)
 800c2e2:	481e      	ldr	r0, [pc, #120]	@ (800c35c <__pow5mult+0xb0>)
 800c2e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c2e8:	f000 ff10 	bl	800d10c <__assert_func>
 800c2ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c2f0:	6004      	str	r4, [r0, #0]
 800c2f2:	60c4      	str	r4, [r0, #12]
 800c2f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c2f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c2fc:	b94c      	cbnz	r4, 800c312 <__pow5mult+0x66>
 800c2fe:	f240 2171 	movw	r1, #625	@ 0x271
 800c302:	4638      	mov	r0, r7
 800c304:	f7ff ff1a 	bl	800c13c <__i2b>
 800c308:	2300      	movs	r3, #0
 800c30a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c30e:	4604      	mov	r4, r0
 800c310:	6003      	str	r3, [r0, #0]
 800c312:	f04f 0900 	mov.w	r9, #0
 800c316:	07eb      	lsls	r3, r5, #31
 800c318:	d50a      	bpl.n	800c330 <__pow5mult+0x84>
 800c31a:	4631      	mov	r1, r6
 800c31c:	4622      	mov	r2, r4
 800c31e:	4638      	mov	r0, r7
 800c320:	f7ff ff22 	bl	800c168 <__multiply>
 800c324:	4631      	mov	r1, r6
 800c326:	4680      	mov	r8, r0
 800c328:	4638      	mov	r0, r7
 800c32a:	f7ff fe09 	bl	800bf40 <_Bfree>
 800c32e:	4646      	mov	r6, r8
 800c330:	106d      	asrs	r5, r5, #1
 800c332:	d00b      	beq.n	800c34c <__pow5mult+0xa0>
 800c334:	6820      	ldr	r0, [r4, #0]
 800c336:	b938      	cbnz	r0, 800c348 <__pow5mult+0x9c>
 800c338:	4622      	mov	r2, r4
 800c33a:	4621      	mov	r1, r4
 800c33c:	4638      	mov	r0, r7
 800c33e:	f7ff ff13 	bl	800c168 <__multiply>
 800c342:	6020      	str	r0, [r4, #0]
 800c344:	f8c0 9000 	str.w	r9, [r0]
 800c348:	4604      	mov	r4, r0
 800c34a:	e7e4      	b.n	800c316 <__pow5mult+0x6a>
 800c34c:	4630      	mov	r0, r6
 800c34e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c352:	bf00      	nop
 800c354:	0800d96c 	.word	0x0800d96c
 800c358:	0800d690 	.word	0x0800d690
 800c35c:	0800d770 	.word	0x0800d770

0800c360 <__lshift>:
 800c360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c364:	460c      	mov	r4, r1
 800c366:	6849      	ldr	r1, [r1, #4]
 800c368:	6923      	ldr	r3, [r4, #16]
 800c36a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c36e:	68a3      	ldr	r3, [r4, #8]
 800c370:	4607      	mov	r7, r0
 800c372:	4691      	mov	r9, r2
 800c374:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c378:	f108 0601 	add.w	r6, r8, #1
 800c37c:	42b3      	cmp	r3, r6
 800c37e:	db0b      	blt.n	800c398 <__lshift+0x38>
 800c380:	4638      	mov	r0, r7
 800c382:	f7ff fd9d 	bl	800bec0 <_Balloc>
 800c386:	4605      	mov	r5, r0
 800c388:	b948      	cbnz	r0, 800c39e <__lshift+0x3e>
 800c38a:	4602      	mov	r2, r0
 800c38c:	4b28      	ldr	r3, [pc, #160]	@ (800c430 <__lshift+0xd0>)
 800c38e:	4829      	ldr	r0, [pc, #164]	@ (800c434 <__lshift+0xd4>)
 800c390:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c394:	f000 feba 	bl	800d10c <__assert_func>
 800c398:	3101      	adds	r1, #1
 800c39a:	005b      	lsls	r3, r3, #1
 800c39c:	e7ee      	b.n	800c37c <__lshift+0x1c>
 800c39e:	2300      	movs	r3, #0
 800c3a0:	f100 0114 	add.w	r1, r0, #20
 800c3a4:	f100 0210 	add.w	r2, r0, #16
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	4553      	cmp	r3, sl
 800c3ac:	db33      	blt.n	800c416 <__lshift+0xb6>
 800c3ae:	6920      	ldr	r0, [r4, #16]
 800c3b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c3b4:	f104 0314 	add.w	r3, r4, #20
 800c3b8:	f019 091f 	ands.w	r9, r9, #31
 800c3bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c3c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c3c4:	d02b      	beq.n	800c41e <__lshift+0xbe>
 800c3c6:	f1c9 0e20 	rsb	lr, r9, #32
 800c3ca:	468a      	mov	sl, r1
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	6818      	ldr	r0, [r3, #0]
 800c3d0:	fa00 f009 	lsl.w	r0, r0, r9
 800c3d4:	4310      	orrs	r0, r2
 800c3d6:	f84a 0b04 	str.w	r0, [sl], #4
 800c3da:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3de:	459c      	cmp	ip, r3
 800c3e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800c3e4:	d8f3      	bhi.n	800c3ce <__lshift+0x6e>
 800c3e6:	ebac 0304 	sub.w	r3, ip, r4
 800c3ea:	3b15      	subs	r3, #21
 800c3ec:	f023 0303 	bic.w	r3, r3, #3
 800c3f0:	3304      	adds	r3, #4
 800c3f2:	f104 0015 	add.w	r0, r4, #21
 800c3f6:	4560      	cmp	r0, ip
 800c3f8:	bf88      	it	hi
 800c3fa:	2304      	movhi	r3, #4
 800c3fc:	50ca      	str	r2, [r1, r3]
 800c3fe:	b10a      	cbz	r2, 800c404 <__lshift+0xa4>
 800c400:	f108 0602 	add.w	r6, r8, #2
 800c404:	3e01      	subs	r6, #1
 800c406:	4638      	mov	r0, r7
 800c408:	612e      	str	r6, [r5, #16]
 800c40a:	4621      	mov	r1, r4
 800c40c:	f7ff fd98 	bl	800bf40 <_Bfree>
 800c410:	4628      	mov	r0, r5
 800c412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c416:	f842 0f04 	str.w	r0, [r2, #4]!
 800c41a:	3301      	adds	r3, #1
 800c41c:	e7c5      	b.n	800c3aa <__lshift+0x4a>
 800c41e:	3904      	subs	r1, #4
 800c420:	f853 2b04 	ldr.w	r2, [r3], #4
 800c424:	f841 2f04 	str.w	r2, [r1, #4]!
 800c428:	459c      	cmp	ip, r3
 800c42a:	d8f9      	bhi.n	800c420 <__lshift+0xc0>
 800c42c:	e7ea      	b.n	800c404 <__lshift+0xa4>
 800c42e:	bf00      	nop
 800c430:	0800d6ff 	.word	0x0800d6ff
 800c434:	0800d770 	.word	0x0800d770

0800c438 <__mcmp>:
 800c438:	690a      	ldr	r2, [r1, #16]
 800c43a:	4603      	mov	r3, r0
 800c43c:	6900      	ldr	r0, [r0, #16]
 800c43e:	1a80      	subs	r0, r0, r2
 800c440:	b530      	push	{r4, r5, lr}
 800c442:	d10e      	bne.n	800c462 <__mcmp+0x2a>
 800c444:	3314      	adds	r3, #20
 800c446:	3114      	adds	r1, #20
 800c448:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c44c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c450:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c454:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c458:	4295      	cmp	r5, r2
 800c45a:	d003      	beq.n	800c464 <__mcmp+0x2c>
 800c45c:	d205      	bcs.n	800c46a <__mcmp+0x32>
 800c45e:	f04f 30ff 	mov.w	r0, #4294967295
 800c462:	bd30      	pop	{r4, r5, pc}
 800c464:	42a3      	cmp	r3, r4
 800c466:	d3f3      	bcc.n	800c450 <__mcmp+0x18>
 800c468:	e7fb      	b.n	800c462 <__mcmp+0x2a>
 800c46a:	2001      	movs	r0, #1
 800c46c:	e7f9      	b.n	800c462 <__mcmp+0x2a>
	...

0800c470 <__mdiff>:
 800c470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c474:	4689      	mov	r9, r1
 800c476:	4606      	mov	r6, r0
 800c478:	4611      	mov	r1, r2
 800c47a:	4648      	mov	r0, r9
 800c47c:	4614      	mov	r4, r2
 800c47e:	f7ff ffdb 	bl	800c438 <__mcmp>
 800c482:	1e05      	subs	r5, r0, #0
 800c484:	d112      	bne.n	800c4ac <__mdiff+0x3c>
 800c486:	4629      	mov	r1, r5
 800c488:	4630      	mov	r0, r6
 800c48a:	f7ff fd19 	bl	800bec0 <_Balloc>
 800c48e:	4602      	mov	r2, r0
 800c490:	b928      	cbnz	r0, 800c49e <__mdiff+0x2e>
 800c492:	4b3f      	ldr	r3, [pc, #252]	@ (800c590 <__mdiff+0x120>)
 800c494:	f240 2137 	movw	r1, #567	@ 0x237
 800c498:	483e      	ldr	r0, [pc, #248]	@ (800c594 <__mdiff+0x124>)
 800c49a:	f000 fe37 	bl	800d10c <__assert_func>
 800c49e:	2301      	movs	r3, #1
 800c4a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c4a4:	4610      	mov	r0, r2
 800c4a6:	b003      	add	sp, #12
 800c4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4ac:	bfbc      	itt	lt
 800c4ae:	464b      	movlt	r3, r9
 800c4b0:	46a1      	movlt	r9, r4
 800c4b2:	4630      	mov	r0, r6
 800c4b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c4b8:	bfba      	itte	lt
 800c4ba:	461c      	movlt	r4, r3
 800c4bc:	2501      	movlt	r5, #1
 800c4be:	2500      	movge	r5, #0
 800c4c0:	f7ff fcfe 	bl	800bec0 <_Balloc>
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	b918      	cbnz	r0, 800c4d0 <__mdiff+0x60>
 800c4c8:	4b31      	ldr	r3, [pc, #196]	@ (800c590 <__mdiff+0x120>)
 800c4ca:	f240 2145 	movw	r1, #581	@ 0x245
 800c4ce:	e7e3      	b.n	800c498 <__mdiff+0x28>
 800c4d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c4d4:	6926      	ldr	r6, [r4, #16]
 800c4d6:	60c5      	str	r5, [r0, #12]
 800c4d8:	f109 0310 	add.w	r3, r9, #16
 800c4dc:	f109 0514 	add.w	r5, r9, #20
 800c4e0:	f104 0e14 	add.w	lr, r4, #20
 800c4e4:	f100 0b14 	add.w	fp, r0, #20
 800c4e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c4ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c4f0:	9301      	str	r3, [sp, #4]
 800c4f2:	46d9      	mov	r9, fp
 800c4f4:	f04f 0c00 	mov.w	ip, #0
 800c4f8:	9b01      	ldr	r3, [sp, #4]
 800c4fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c4fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c502:	9301      	str	r3, [sp, #4]
 800c504:	fa1f f38a 	uxth.w	r3, sl
 800c508:	4619      	mov	r1, r3
 800c50a:	b283      	uxth	r3, r0
 800c50c:	1acb      	subs	r3, r1, r3
 800c50e:	0c00      	lsrs	r0, r0, #16
 800c510:	4463      	add	r3, ip
 800c512:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c516:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c51a:	b29b      	uxth	r3, r3
 800c51c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c520:	4576      	cmp	r6, lr
 800c522:	f849 3b04 	str.w	r3, [r9], #4
 800c526:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c52a:	d8e5      	bhi.n	800c4f8 <__mdiff+0x88>
 800c52c:	1b33      	subs	r3, r6, r4
 800c52e:	3b15      	subs	r3, #21
 800c530:	f023 0303 	bic.w	r3, r3, #3
 800c534:	3415      	adds	r4, #21
 800c536:	3304      	adds	r3, #4
 800c538:	42a6      	cmp	r6, r4
 800c53a:	bf38      	it	cc
 800c53c:	2304      	movcc	r3, #4
 800c53e:	441d      	add	r5, r3
 800c540:	445b      	add	r3, fp
 800c542:	461e      	mov	r6, r3
 800c544:	462c      	mov	r4, r5
 800c546:	4544      	cmp	r4, r8
 800c548:	d30e      	bcc.n	800c568 <__mdiff+0xf8>
 800c54a:	f108 0103 	add.w	r1, r8, #3
 800c54e:	1b49      	subs	r1, r1, r5
 800c550:	f021 0103 	bic.w	r1, r1, #3
 800c554:	3d03      	subs	r5, #3
 800c556:	45a8      	cmp	r8, r5
 800c558:	bf38      	it	cc
 800c55a:	2100      	movcc	r1, #0
 800c55c:	440b      	add	r3, r1
 800c55e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c562:	b191      	cbz	r1, 800c58a <__mdiff+0x11a>
 800c564:	6117      	str	r7, [r2, #16]
 800c566:	e79d      	b.n	800c4a4 <__mdiff+0x34>
 800c568:	f854 1b04 	ldr.w	r1, [r4], #4
 800c56c:	46e6      	mov	lr, ip
 800c56e:	0c08      	lsrs	r0, r1, #16
 800c570:	fa1c fc81 	uxtah	ip, ip, r1
 800c574:	4471      	add	r1, lr
 800c576:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c57a:	b289      	uxth	r1, r1
 800c57c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c580:	f846 1b04 	str.w	r1, [r6], #4
 800c584:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c588:	e7dd      	b.n	800c546 <__mdiff+0xd6>
 800c58a:	3f01      	subs	r7, #1
 800c58c:	e7e7      	b.n	800c55e <__mdiff+0xee>
 800c58e:	bf00      	nop
 800c590:	0800d6ff 	.word	0x0800d6ff
 800c594:	0800d770 	.word	0x0800d770

0800c598 <__ulp>:
 800c598:	b082      	sub	sp, #8
 800c59a:	ed8d 0b00 	vstr	d0, [sp]
 800c59e:	9a01      	ldr	r2, [sp, #4]
 800c5a0:	4b0f      	ldr	r3, [pc, #60]	@ (800c5e0 <__ulp+0x48>)
 800c5a2:	4013      	ands	r3, r2
 800c5a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	dc08      	bgt.n	800c5be <__ulp+0x26>
 800c5ac:	425b      	negs	r3, r3
 800c5ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c5b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c5b6:	da04      	bge.n	800c5c2 <__ulp+0x2a>
 800c5b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c5bc:	4113      	asrs	r3, r2
 800c5be:	2200      	movs	r2, #0
 800c5c0:	e008      	b.n	800c5d4 <__ulp+0x3c>
 800c5c2:	f1a2 0314 	sub.w	r3, r2, #20
 800c5c6:	2b1e      	cmp	r3, #30
 800c5c8:	bfda      	itte	le
 800c5ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c5ce:	40da      	lsrle	r2, r3
 800c5d0:	2201      	movgt	r2, #1
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	4619      	mov	r1, r3
 800c5d6:	4610      	mov	r0, r2
 800c5d8:	ec41 0b10 	vmov	d0, r0, r1
 800c5dc:	b002      	add	sp, #8
 800c5de:	4770      	bx	lr
 800c5e0:	7ff00000 	.word	0x7ff00000

0800c5e4 <__b2d>:
 800c5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5e8:	6906      	ldr	r6, [r0, #16]
 800c5ea:	f100 0814 	add.w	r8, r0, #20
 800c5ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c5f2:	1f37      	subs	r7, r6, #4
 800c5f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c5f8:	4610      	mov	r0, r2
 800c5fa:	f7ff fd53 	bl	800c0a4 <__hi0bits>
 800c5fe:	f1c0 0320 	rsb	r3, r0, #32
 800c602:	280a      	cmp	r0, #10
 800c604:	600b      	str	r3, [r1, #0]
 800c606:	491b      	ldr	r1, [pc, #108]	@ (800c674 <__b2d+0x90>)
 800c608:	dc15      	bgt.n	800c636 <__b2d+0x52>
 800c60a:	f1c0 0c0b 	rsb	ip, r0, #11
 800c60e:	fa22 f30c 	lsr.w	r3, r2, ip
 800c612:	45b8      	cmp	r8, r7
 800c614:	ea43 0501 	orr.w	r5, r3, r1
 800c618:	bf34      	ite	cc
 800c61a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c61e:	2300      	movcs	r3, #0
 800c620:	3015      	adds	r0, #21
 800c622:	fa02 f000 	lsl.w	r0, r2, r0
 800c626:	fa23 f30c 	lsr.w	r3, r3, ip
 800c62a:	4303      	orrs	r3, r0
 800c62c:	461c      	mov	r4, r3
 800c62e:	ec45 4b10 	vmov	d0, r4, r5
 800c632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c636:	45b8      	cmp	r8, r7
 800c638:	bf3a      	itte	cc
 800c63a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c63e:	f1a6 0708 	subcc.w	r7, r6, #8
 800c642:	2300      	movcs	r3, #0
 800c644:	380b      	subs	r0, #11
 800c646:	d012      	beq.n	800c66e <__b2d+0x8a>
 800c648:	f1c0 0120 	rsb	r1, r0, #32
 800c64c:	fa23 f401 	lsr.w	r4, r3, r1
 800c650:	4082      	lsls	r2, r0
 800c652:	4322      	orrs	r2, r4
 800c654:	4547      	cmp	r7, r8
 800c656:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c65a:	bf8c      	ite	hi
 800c65c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c660:	2200      	movls	r2, #0
 800c662:	4083      	lsls	r3, r0
 800c664:	40ca      	lsrs	r2, r1
 800c666:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c66a:	4313      	orrs	r3, r2
 800c66c:	e7de      	b.n	800c62c <__b2d+0x48>
 800c66e:	ea42 0501 	orr.w	r5, r2, r1
 800c672:	e7db      	b.n	800c62c <__b2d+0x48>
 800c674:	3ff00000 	.word	0x3ff00000

0800c678 <__d2b>:
 800c678:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c67c:	460f      	mov	r7, r1
 800c67e:	2101      	movs	r1, #1
 800c680:	ec59 8b10 	vmov	r8, r9, d0
 800c684:	4616      	mov	r6, r2
 800c686:	f7ff fc1b 	bl	800bec0 <_Balloc>
 800c68a:	4604      	mov	r4, r0
 800c68c:	b930      	cbnz	r0, 800c69c <__d2b+0x24>
 800c68e:	4602      	mov	r2, r0
 800c690:	4b23      	ldr	r3, [pc, #140]	@ (800c720 <__d2b+0xa8>)
 800c692:	4824      	ldr	r0, [pc, #144]	@ (800c724 <__d2b+0xac>)
 800c694:	f240 310f 	movw	r1, #783	@ 0x30f
 800c698:	f000 fd38 	bl	800d10c <__assert_func>
 800c69c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c6a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c6a4:	b10d      	cbz	r5, 800c6aa <__d2b+0x32>
 800c6a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c6aa:	9301      	str	r3, [sp, #4]
 800c6ac:	f1b8 0300 	subs.w	r3, r8, #0
 800c6b0:	d023      	beq.n	800c6fa <__d2b+0x82>
 800c6b2:	4668      	mov	r0, sp
 800c6b4:	9300      	str	r3, [sp, #0]
 800c6b6:	f7ff fd14 	bl	800c0e2 <__lo0bits>
 800c6ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c6be:	b1d0      	cbz	r0, 800c6f6 <__d2b+0x7e>
 800c6c0:	f1c0 0320 	rsb	r3, r0, #32
 800c6c4:	fa02 f303 	lsl.w	r3, r2, r3
 800c6c8:	430b      	orrs	r3, r1
 800c6ca:	40c2      	lsrs	r2, r0
 800c6cc:	6163      	str	r3, [r4, #20]
 800c6ce:	9201      	str	r2, [sp, #4]
 800c6d0:	9b01      	ldr	r3, [sp, #4]
 800c6d2:	61a3      	str	r3, [r4, #24]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	bf0c      	ite	eq
 800c6d8:	2201      	moveq	r2, #1
 800c6da:	2202      	movne	r2, #2
 800c6dc:	6122      	str	r2, [r4, #16]
 800c6de:	b1a5      	cbz	r5, 800c70a <__d2b+0x92>
 800c6e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c6e4:	4405      	add	r5, r0
 800c6e6:	603d      	str	r5, [r7, #0]
 800c6e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c6ec:	6030      	str	r0, [r6, #0]
 800c6ee:	4620      	mov	r0, r4
 800c6f0:	b003      	add	sp, #12
 800c6f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6f6:	6161      	str	r1, [r4, #20]
 800c6f8:	e7ea      	b.n	800c6d0 <__d2b+0x58>
 800c6fa:	a801      	add	r0, sp, #4
 800c6fc:	f7ff fcf1 	bl	800c0e2 <__lo0bits>
 800c700:	9b01      	ldr	r3, [sp, #4]
 800c702:	6163      	str	r3, [r4, #20]
 800c704:	3020      	adds	r0, #32
 800c706:	2201      	movs	r2, #1
 800c708:	e7e8      	b.n	800c6dc <__d2b+0x64>
 800c70a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c70e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c712:	6038      	str	r0, [r7, #0]
 800c714:	6918      	ldr	r0, [r3, #16]
 800c716:	f7ff fcc5 	bl	800c0a4 <__hi0bits>
 800c71a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c71e:	e7e5      	b.n	800c6ec <__d2b+0x74>
 800c720:	0800d6ff 	.word	0x0800d6ff
 800c724:	0800d770 	.word	0x0800d770

0800c728 <__ratio>:
 800c728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c72c:	b085      	sub	sp, #20
 800c72e:	e9cd 1000 	strd	r1, r0, [sp]
 800c732:	a902      	add	r1, sp, #8
 800c734:	f7ff ff56 	bl	800c5e4 <__b2d>
 800c738:	9800      	ldr	r0, [sp, #0]
 800c73a:	a903      	add	r1, sp, #12
 800c73c:	ec55 4b10 	vmov	r4, r5, d0
 800c740:	f7ff ff50 	bl	800c5e4 <__b2d>
 800c744:	9b01      	ldr	r3, [sp, #4]
 800c746:	6919      	ldr	r1, [r3, #16]
 800c748:	9b00      	ldr	r3, [sp, #0]
 800c74a:	691b      	ldr	r3, [r3, #16]
 800c74c:	1ac9      	subs	r1, r1, r3
 800c74e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c752:	1a9b      	subs	r3, r3, r2
 800c754:	ec5b ab10 	vmov	sl, fp, d0
 800c758:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	bfce      	itee	gt
 800c760:	462a      	movgt	r2, r5
 800c762:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c766:	465a      	movle	r2, fp
 800c768:	462f      	mov	r7, r5
 800c76a:	46d9      	mov	r9, fp
 800c76c:	bfcc      	ite	gt
 800c76e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c772:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c776:	464b      	mov	r3, r9
 800c778:	4652      	mov	r2, sl
 800c77a:	4620      	mov	r0, r4
 800c77c:	4639      	mov	r1, r7
 800c77e:	f7f4 f885 	bl	800088c <__aeabi_ddiv>
 800c782:	ec41 0b10 	vmov	d0, r0, r1
 800c786:	b005      	add	sp, #20
 800c788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c78c <__copybits>:
 800c78c:	3901      	subs	r1, #1
 800c78e:	b570      	push	{r4, r5, r6, lr}
 800c790:	1149      	asrs	r1, r1, #5
 800c792:	6914      	ldr	r4, [r2, #16]
 800c794:	3101      	adds	r1, #1
 800c796:	f102 0314 	add.w	r3, r2, #20
 800c79a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c79e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c7a2:	1f05      	subs	r5, r0, #4
 800c7a4:	42a3      	cmp	r3, r4
 800c7a6:	d30c      	bcc.n	800c7c2 <__copybits+0x36>
 800c7a8:	1aa3      	subs	r3, r4, r2
 800c7aa:	3b11      	subs	r3, #17
 800c7ac:	f023 0303 	bic.w	r3, r3, #3
 800c7b0:	3211      	adds	r2, #17
 800c7b2:	42a2      	cmp	r2, r4
 800c7b4:	bf88      	it	hi
 800c7b6:	2300      	movhi	r3, #0
 800c7b8:	4418      	add	r0, r3
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	4288      	cmp	r0, r1
 800c7be:	d305      	bcc.n	800c7cc <__copybits+0x40>
 800c7c0:	bd70      	pop	{r4, r5, r6, pc}
 800c7c2:	f853 6b04 	ldr.w	r6, [r3], #4
 800c7c6:	f845 6f04 	str.w	r6, [r5, #4]!
 800c7ca:	e7eb      	b.n	800c7a4 <__copybits+0x18>
 800c7cc:	f840 3b04 	str.w	r3, [r0], #4
 800c7d0:	e7f4      	b.n	800c7bc <__copybits+0x30>

0800c7d2 <__any_on>:
 800c7d2:	f100 0214 	add.w	r2, r0, #20
 800c7d6:	6900      	ldr	r0, [r0, #16]
 800c7d8:	114b      	asrs	r3, r1, #5
 800c7da:	4298      	cmp	r0, r3
 800c7dc:	b510      	push	{r4, lr}
 800c7de:	db11      	blt.n	800c804 <__any_on+0x32>
 800c7e0:	dd0a      	ble.n	800c7f8 <__any_on+0x26>
 800c7e2:	f011 011f 	ands.w	r1, r1, #31
 800c7e6:	d007      	beq.n	800c7f8 <__any_on+0x26>
 800c7e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c7ec:	fa24 f001 	lsr.w	r0, r4, r1
 800c7f0:	fa00 f101 	lsl.w	r1, r0, r1
 800c7f4:	428c      	cmp	r4, r1
 800c7f6:	d10b      	bne.n	800c810 <__any_on+0x3e>
 800c7f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d803      	bhi.n	800c808 <__any_on+0x36>
 800c800:	2000      	movs	r0, #0
 800c802:	bd10      	pop	{r4, pc}
 800c804:	4603      	mov	r3, r0
 800c806:	e7f7      	b.n	800c7f8 <__any_on+0x26>
 800c808:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c80c:	2900      	cmp	r1, #0
 800c80e:	d0f5      	beq.n	800c7fc <__any_on+0x2a>
 800c810:	2001      	movs	r0, #1
 800c812:	e7f6      	b.n	800c802 <__any_on+0x30>

0800c814 <_strtol_l.isra.0>:
 800c814:	2b24      	cmp	r3, #36	@ 0x24
 800c816:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c81a:	4686      	mov	lr, r0
 800c81c:	4690      	mov	r8, r2
 800c81e:	d801      	bhi.n	800c824 <_strtol_l.isra.0+0x10>
 800c820:	2b01      	cmp	r3, #1
 800c822:	d106      	bne.n	800c832 <_strtol_l.isra.0+0x1e>
 800c824:	f7fe f85a 	bl	800a8dc <__errno>
 800c828:	2316      	movs	r3, #22
 800c82a:	6003      	str	r3, [r0, #0]
 800c82c:	2000      	movs	r0, #0
 800c82e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c832:	4834      	ldr	r0, [pc, #208]	@ (800c904 <_strtol_l.isra.0+0xf0>)
 800c834:	460d      	mov	r5, r1
 800c836:	462a      	mov	r2, r5
 800c838:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c83c:	5d06      	ldrb	r6, [r0, r4]
 800c83e:	f016 0608 	ands.w	r6, r6, #8
 800c842:	d1f8      	bne.n	800c836 <_strtol_l.isra.0+0x22>
 800c844:	2c2d      	cmp	r4, #45	@ 0x2d
 800c846:	d110      	bne.n	800c86a <_strtol_l.isra.0+0x56>
 800c848:	782c      	ldrb	r4, [r5, #0]
 800c84a:	2601      	movs	r6, #1
 800c84c:	1c95      	adds	r5, r2, #2
 800c84e:	f033 0210 	bics.w	r2, r3, #16
 800c852:	d115      	bne.n	800c880 <_strtol_l.isra.0+0x6c>
 800c854:	2c30      	cmp	r4, #48	@ 0x30
 800c856:	d10d      	bne.n	800c874 <_strtol_l.isra.0+0x60>
 800c858:	782a      	ldrb	r2, [r5, #0]
 800c85a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c85e:	2a58      	cmp	r2, #88	@ 0x58
 800c860:	d108      	bne.n	800c874 <_strtol_l.isra.0+0x60>
 800c862:	786c      	ldrb	r4, [r5, #1]
 800c864:	3502      	adds	r5, #2
 800c866:	2310      	movs	r3, #16
 800c868:	e00a      	b.n	800c880 <_strtol_l.isra.0+0x6c>
 800c86a:	2c2b      	cmp	r4, #43	@ 0x2b
 800c86c:	bf04      	itt	eq
 800c86e:	782c      	ldrbeq	r4, [r5, #0]
 800c870:	1c95      	addeq	r5, r2, #2
 800c872:	e7ec      	b.n	800c84e <_strtol_l.isra.0+0x3a>
 800c874:	2b00      	cmp	r3, #0
 800c876:	d1f6      	bne.n	800c866 <_strtol_l.isra.0+0x52>
 800c878:	2c30      	cmp	r4, #48	@ 0x30
 800c87a:	bf14      	ite	ne
 800c87c:	230a      	movne	r3, #10
 800c87e:	2308      	moveq	r3, #8
 800c880:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c884:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c888:	2200      	movs	r2, #0
 800c88a:	fbbc f9f3 	udiv	r9, ip, r3
 800c88e:	4610      	mov	r0, r2
 800c890:	fb03 ca19 	mls	sl, r3, r9, ip
 800c894:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c898:	2f09      	cmp	r7, #9
 800c89a:	d80f      	bhi.n	800c8bc <_strtol_l.isra.0+0xa8>
 800c89c:	463c      	mov	r4, r7
 800c89e:	42a3      	cmp	r3, r4
 800c8a0:	dd1b      	ble.n	800c8da <_strtol_l.isra.0+0xc6>
 800c8a2:	1c57      	adds	r7, r2, #1
 800c8a4:	d007      	beq.n	800c8b6 <_strtol_l.isra.0+0xa2>
 800c8a6:	4581      	cmp	r9, r0
 800c8a8:	d314      	bcc.n	800c8d4 <_strtol_l.isra.0+0xc0>
 800c8aa:	d101      	bne.n	800c8b0 <_strtol_l.isra.0+0x9c>
 800c8ac:	45a2      	cmp	sl, r4
 800c8ae:	db11      	blt.n	800c8d4 <_strtol_l.isra.0+0xc0>
 800c8b0:	fb00 4003 	mla	r0, r0, r3, r4
 800c8b4:	2201      	movs	r2, #1
 800c8b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c8ba:	e7eb      	b.n	800c894 <_strtol_l.isra.0+0x80>
 800c8bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c8c0:	2f19      	cmp	r7, #25
 800c8c2:	d801      	bhi.n	800c8c8 <_strtol_l.isra.0+0xb4>
 800c8c4:	3c37      	subs	r4, #55	@ 0x37
 800c8c6:	e7ea      	b.n	800c89e <_strtol_l.isra.0+0x8a>
 800c8c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c8cc:	2f19      	cmp	r7, #25
 800c8ce:	d804      	bhi.n	800c8da <_strtol_l.isra.0+0xc6>
 800c8d0:	3c57      	subs	r4, #87	@ 0x57
 800c8d2:	e7e4      	b.n	800c89e <_strtol_l.isra.0+0x8a>
 800c8d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c8d8:	e7ed      	b.n	800c8b6 <_strtol_l.isra.0+0xa2>
 800c8da:	1c53      	adds	r3, r2, #1
 800c8dc:	d108      	bne.n	800c8f0 <_strtol_l.isra.0+0xdc>
 800c8de:	2322      	movs	r3, #34	@ 0x22
 800c8e0:	f8ce 3000 	str.w	r3, [lr]
 800c8e4:	4660      	mov	r0, ip
 800c8e6:	f1b8 0f00 	cmp.w	r8, #0
 800c8ea:	d0a0      	beq.n	800c82e <_strtol_l.isra.0+0x1a>
 800c8ec:	1e69      	subs	r1, r5, #1
 800c8ee:	e006      	b.n	800c8fe <_strtol_l.isra.0+0xea>
 800c8f0:	b106      	cbz	r6, 800c8f4 <_strtol_l.isra.0+0xe0>
 800c8f2:	4240      	negs	r0, r0
 800c8f4:	f1b8 0f00 	cmp.w	r8, #0
 800c8f8:	d099      	beq.n	800c82e <_strtol_l.isra.0+0x1a>
 800c8fa:	2a00      	cmp	r2, #0
 800c8fc:	d1f6      	bne.n	800c8ec <_strtol_l.isra.0+0xd8>
 800c8fe:	f8c8 1000 	str.w	r1, [r8]
 800c902:	e794      	b.n	800c82e <_strtol_l.isra.0+0x1a>
 800c904:	0800d869 	.word	0x0800d869

0800c908 <_strtol_r>:
 800c908:	f7ff bf84 	b.w	800c814 <_strtol_l.isra.0>

0800c90c <__ascii_wctomb>:
 800c90c:	4603      	mov	r3, r0
 800c90e:	4608      	mov	r0, r1
 800c910:	b141      	cbz	r1, 800c924 <__ascii_wctomb+0x18>
 800c912:	2aff      	cmp	r2, #255	@ 0xff
 800c914:	d904      	bls.n	800c920 <__ascii_wctomb+0x14>
 800c916:	228a      	movs	r2, #138	@ 0x8a
 800c918:	601a      	str	r2, [r3, #0]
 800c91a:	f04f 30ff 	mov.w	r0, #4294967295
 800c91e:	4770      	bx	lr
 800c920:	700a      	strb	r2, [r1, #0]
 800c922:	2001      	movs	r0, #1
 800c924:	4770      	bx	lr

0800c926 <__ssputs_r>:
 800c926:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c92a:	688e      	ldr	r6, [r1, #8]
 800c92c:	461f      	mov	r7, r3
 800c92e:	42be      	cmp	r6, r7
 800c930:	680b      	ldr	r3, [r1, #0]
 800c932:	4682      	mov	sl, r0
 800c934:	460c      	mov	r4, r1
 800c936:	4690      	mov	r8, r2
 800c938:	d82d      	bhi.n	800c996 <__ssputs_r+0x70>
 800c93a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c93e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c942:	d026      	beq.n	800c992 <__ssputs_r+0x6c>
 800c944:	6965      	ldr	r5, [r4, #20]
 800c946:	6909      	ldr	r1, [r1, #16]
 800c948:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c94c:	eba3 0901 	sub.w	r9, r3, r1
 800c950:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c954:	1c7b      	adds	r3, r7, #1
 800c956:	444b      	add	r3, r9
 800c958:	106d      	asrs	r5, r5, #1
 800c95a:	429d      	cmp	r5, r3
 800c95c:	bf38      	it	cc
 800c95e:	461d      	movcc	r5, r3
 800c960:	0553      	lsls	r3, r2, #21
 800c962:	d527      	bpl.n	800c9b4 <__ssputs_r+0x8e>
 800c964:	4629      	mov	r1, r5
 800c966:	f7ff fa0d 	bl	800bd84 <_malloc_r>
 800c96a:	4606      	mov	r6, r0
 800c96c:	b360      	cbz	r0, 800c9c8 <__ssputs_r+0xa2>
 800c96e:	6921      	ldr	r1, [r4, #16]
 800c970:	464a      	mov	r2, r9
 800c972:	f7fd ffe0 	bl	800a936 <memcpy>
 800c976:	89a3      	ldrh	r3, [r4, #12]
 800c978:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c97c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c980:	81a3      	strh	r3, [r4, #12]
 800c982:	6126      	str	r6, [r4, #16]
 800c984:	6165      	str	r5, [r4, #20]
 800c986:	444e      	add	r6, r9
 800c988:	eba5 0509 	sub.w	r5, r5, r9
 800c98c:	6026      	str	r6, [r4, #0]
 800c98e:	60a5      	str	r5, [r4, #8]
 800c990:	463e      	mov	r6, r7
 800c992:	42be      	cmp	r6, r7
 800c994:	d900      	bls.n	800c998 <__ssputs_r+0x72>
 800c996:	463e      	mov	r6, r7
 800c998:	6820      	ldr	r0, [r4, #0]
 800c99a:	4632      	mov	r2, r6
 800c99c:	4641      	mov	r1, r8
 800c99e:	f000 fb69 	bl	800d074 <memmove>
 800c9a2:	68a3      	ldr	r3, [r4, #8]
 800c9a4:	1b9b      	subs	r3, r3, r6
 800c9a6:	60a3      	str	r3, [r4, #8]
 800c9a8:	6823      	ldr	r3, [r4, #0]
 800c9aa:	4433      	add	r3, r6
 800c9ac:	6023      	str	r3, [r4, #0]
 800c9ae:	2000      	movs	r0, #0
 800c9b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9b4:	462a      	mov	r2, r5
 800c9b6:	f000 fbdb 	bl	800d170 <_realloc_r>
 800c9ba:	4606      	mov	r6, r0
 800c9bc:	2800      	cmp	r0, #0
 800c9be:	d1e0      	bne.n	800c982 <__ssputs_r+0x5c>
 800c9c0:	6921      	ldr	r1, [r4, #16]
 800c9c2:	4650      	mov	r0, sl
 800c9c4:	f7fe fe30 	bl	800b628 <_free_r>
 800c9c8:	230c      	movs	r3, #12
 800c9ca:	f8ca 3000 	str.w	r3, [sl]
 800c9ce:	89a3      	ldrh	r3, [r4, #12]
 800c9d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9d4:	81a3      	strh	r3, [r4, #12]
 800c9d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c9da:	e7e9      	b.n	800c9b0 <__ssputs_r+0x8a>

0800c9dc <_svfiprintf_r>:
 800c9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9e0:	4698      	mov	r8, r3
 800c9e2:	898b      	ldrh	r3, [r1, #12]
 800c9e4:	061b      	lsls	r3, r3, #24
 800c9e6:	b09d      	sub	sp, #116	@ 0x74
 800c9e8:	4607      	mov	r7, r0
 800c9ea:	460d      	mov	r5, r1
 800c9ec:	4614      	mov	r4, r2
 800c9ee:	d510      	bpl.n	800ca12 <_svfiprintf_r+0x36>
 800c9f0:	690b      	ldr	r3, [r1, #16]
 800c9f2:	b973      	cbnz	r3, 800ca12 <_svfiprintf_r+0x36>
 800c9f4:	2140      	movs	r1, #64	@ 0x40
 800c9f6:	f7ff f9c5 	bl	800bd84 <_malloc_r>
 800c9fa:	6028      	str	r0, [r5, #0]
 800c9fc:	6128      	str	r0, [r5, #16]
 800c9fe:	b930      	cbnz	r0, 800ca0e <_svfiprintf_r+0x32>
 800ca00:	230c      	movs	r3, #12
 800ca02:	603b      	str	r3, [r7, #0]
 800ca04:	f04f 30ff 	mov.w	r0, #4294967295
 800ca08:	b01d      	add	sp, #116	@ 0x74
 800ca0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca0e:	2340      	movs	r3, #64	@ 0x40
 800ca10:	616b      	str	r3, [r5, #20]
 800ca12:	2300      	movs	r3, #0
 800ca14:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca16:	2320      	movs	r3, #32
 800ca18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ca1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca20:	2330      	movs	r3, #48	@ 0x30
 800ca22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cbc0 <_svfiprintf_r+0x1e4>
 800ca26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca2a:	f04f 0901 	mov.w	r9, #1
 800ca2e:	4623      	mov	r3, r4
 800ca30:	469a      	mov	sl, r3
 800ca32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca36:	b10a      	cbz	r2, 800ca3c <_svfiprintf_r+0x60>
 800ca38:	2a25      	cmp	r2, #37	@ 0x25
 800ca3a:	d1f9      	bne.n	800ca30 <_svfiprintf_r+0x54>
 800ca3c:	ebba 0b04 	subs.w	fp, sl, r4
 800ca40:	d00b      	beq.n	800ca5a <_svfiprintf_r+0x7e>
 800ca42:	465b      	mov	r3, fp
 800ca44:	4622      	mov	r2, r4
 800ca46:	4629      	mov	r1, r5
 800ca48:	4638      	mov	r0, r7
 800ca4a:	f7ff ff6c 	bl	800c926 <__ssputs_r>
 800ca4e:	3001      	adds	r0, #1
 800ca50:	f000 80a7 	beq.w	800cba2 <_svfiprintf_r+0x1c6>
 800ca54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca56:	445a      	add	r2, fp
 800ca58:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	f000 809f 	beq.w	800cba2 <_svfiprintf_r+0x1c6>
 800ca64:	2300      	movs	r3, #0
 800ca66:	f04f 32ff 	mov.w	r2, #4294967295
 800ca6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca6e:	f10a 0a01 	add.w	sl, sl, #1
 800ca72:	9304      	str	r3, [sp, #16]
 800ca74:	9307      	str	r3, [sp, #28]
 800ca76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca7a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca7c:	4654      	mov	r4, sl
 800ca7e:	2205      	movs	r2, #5
 800ca80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca84:	484e      	ldr	r0, [pc, #312]	@ (800cbc0 <_svfiprintf_r+0x1e4>)
 800ca86:	f7f3 fbc3 	bl	8000210 <memchr>
 800ca8a:	9a04      	ldr	r2, [sp, #16]
 800ca8c:	b9d8      	cbnz	r0, 800cac6 <_svfiprintf_r+0xea>
 800ca8e:	06d0      	lsls	r0, r2, #27
 800ca90:	bf44      	itt	mi
 800ca92:	2320      	movmi	r3, #32
 800ca94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca98:	0711      	lsls	r1, r2, #28
 800ca9a:	bf44      	itt	mi
 800ca9c:	232b      	movmi	r3, #43	@ 0x2b
 800ca9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800caa2:	f89a 3000 	ldrb.w	r3, [sl]
 800caa6:	2b2a      	cmp	r3, #42	@ 0x2a
 800caa8:	d015      	beq.n	800cad6 <_svfiprintf_r+0xfa>
 800caaa:	9a07      	ldr	r2, [sp, #28]
 800caac:	4654      	mov	r4, sl
 800caae:	2000      	movs	r0, #0
 800cab0:	f04f 0c0a 	mov.w	ip, #10
 800cab4:	4621      	mov	r1, r4
 800cab6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800caba:	3b30      	subs	r3, #48	@ 0x30
 800cabc:	2b09      	cmp	r3, #9
 800cabe:	d94b      	bls.n	800cb58 <_svfiprintf_r+0x17c>
 800cac0:	b1b0      	cbz	r0, 800caf0 <_svfiprintf_r+0x114>
 800cac2:	9207      	str	r2, [sp, #28]
 800cac4:	e014      	b.n	800caf0 <_svfiprintf_r+0x114>
 800cac6:	eba0 0308 	sub.w	r3, r0, r8
 800caca:	fa09 f303 	lsl.w	r3, r9, r3
 800cace:	4313      	orrs	r3, r2
 800cad0:	9304      	str	r3, [sp, #16]
 800cad2:	46a2      	mov	sl, r4
 800cad4:	e7d2      	b.n	800ca7c <_svfiprintf_r+0xa0>
 800cad6:	9b03      	ldr	r3, [sp, #12]
 800cad8:	1d19      	adds	r1, r3, #4
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	9103      	str	r1, [sp, #12]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	bfbb      	ittet	lt
 800cae2:	425b      	neglt	r3, r3
 800cae4:	f042 0202 	orrlt.w	r2, r2, #2
 800cae8:	9307      	strge	r3, [sp, #28]
 800caea:	9307      	strlt	r3, [sp, #28]
 800caec:	bfb8      	it	lt
 800caee:	9204      	strlt	r2, [sp, #16]
 800caf0:	7823      	ldrb	r3, [r4, #0]
 800caf2:	2b2e      	cmp	r3, #46	@ 0x2e
 800caf4:	d10a      	bne.n	800cb0c <_svfiprintf_r+0x130>
 800caf6:	7863      	ldrb	r3, [r4, #1]
 800caf8:	2b2a      	cmp	r3, #42	@ 0x2a
 800cafa:	d132      	bne.n	800cb62 <_svfiprintf_r+0x186>
 800cafc:	9b03      	ldr	r3, [sp, #12]
 800cafe:	1d1a      	adds	r2, r3, #4
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	9203      	str	r2, [sp, #12]
 800cb04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cb08:	3402      	adds	r4, #2
 800cb0a:	9305      	str	r3, [sp, #20]
 800cb0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cbd0 <_svfiprintf_r+0x1f4>
 800cb10:	7821      	ldrb	r1, [r4, #0]
 800cb12:	2203      	movs	r2, #3
 800cb14:	4650      	mov	r0, sl
 800cb16:	f7f3 fb7b 	bl	8000210 <memchr>
 800cb1a:	b138      	cbz	r0, 800cb2c <_svfiprintf_r+0x150>
 800cb1c:	9b04      	ldr	r3, [sp, #16]
 800cb1e:	eba0 000a 	sub.w	r0, r0, sl
 800cb22:	2240      	movs	r2, #64	@ 0x40
 800cb24:	4082      	lsls	r2, r0
 800cb26:	4313      	orrs	r3, r2
 800cb28:	3401      	adds	r4, #1
 800cb2a:	9304      	str	r3, [sp, #16]
 800cb2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb30:	4824      	ldr	r0, [pc, #144]	@ (800cbc4 <_svfiprintf_r+0x1e8>)
 800cb32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb36:	2206      	movs	r2, #6
 800cb38:	f7f3 fb6a 	bl	8000210 <memchr>
 800cb3c:	2800      	cmp	r0, #0
 800cb3e:	d036      	beq.n	800cbae <_svfiprintf_r+0x1d2>
 800cb40:	4b21      	ldr	r3, [pc, #132]	@ (800cbc8 <_svfiprintf_r+0x1ec>)
 800cb42:	bb1b      	cbnz	r3, 800cb8c <_svfiprintf_r+0x1b0>
 800cb44:	9b03      	ldr	r3, [sp, #12]
 800cb46:	3307      	adds	r3, #7
 800cb48:	f023 0307 	bic.w	r3, r3, #7
 800cb4c:	3308      	adds	r3, #8
 800cb4e:	9303      	str	r3, [sp, #12]
 800cb50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb52:	4433      	add	r3, r6
 800cb54:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb56:	e76a      	b.n	800ca2e <_svfiprintf_r+0x52>
 800cb58:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb5c:	460c      	mov	r4, r1
 800cb5e:	2001      	movs	r0, #1
 800cb60:	e7a8      	b.n	800cab4 <_svfiprintf_r+0xd8>
 800cb62:	2300      	movs	r3, #0
 800cb64:	3401      	adds	r4, #1
 800cb66:	9305      	str	r3, [sp, #20]
 800cb68:	4619      	mov	r1, r3
 800cb6a:	f04f 0c0a 	mov.w	ip, #10
 800cb6e:	4620      	mov	r0, r4
 800cb70:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb74:	3a30      	subs	r2, #48	@ 0x30
 800cb76:	2a09      	cmp	r2, #9
 800cb78:	d903      	bls.n	800cb82 <_svfiprintf_r+0x1a6>
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d0c6      	beq.n	800cb0c <_svfiprintf_r+0x130>
 800cb7e:	9105      	str	r1, [sp, #20]
 800cb80:	e7c4      	b.n	800cb0c <_svfiprintf_r+0x130>
 800cb82:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb86:	4604      	mov	r4, r0
 800cb88:	2301      	movs	r3, #1
 800cb8a:	e7f0      	b.n	800cb6e <_svfiprintf_r+0x192>
 800cb8c:	ab03      	add	r3, sp, #12
 800cb8e:	9300      	str	r3, [sp, #0]
 800cb90:	462a      	mov	r2, r5
 800cb92:	4b0e      	ldr	r3, [pc, #56]	@ (800cbcc <_svfiprintf_r+0x1f0>)
 800cb94:	a904      	add	r1, sp, #16
 800cb96:	4638      	mov	r0, r7
 800cb98:	f7fc fdd8 	bl	800974c <_printf_float>
 800cb9c:	1c42      	adds	r2, r0, #1
 800cb9e:	4606      	mov	r6, r0
 800cba0:	d1d6      	bne.n	800cb50 <_svfiprintf_r+0x174>
 800cba2:	89ab      	ldrh	r3, [r5, #12]
 800cba4:	065b      	lsls	r3, r3, #25
 800cba6:	f53f af2d 	bmi.w	800ca04 <_svfiprintf_r+0x28>
 800cbaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cbac:	e72c      	b.n	800ca08 <_svfiprintf_r+0x2c>
 800cbae:	ab03      	add	r3, sp, #12
 800cbb0:	9300      	str	r3, [sp, #0]
 800cbb2:	462a      	mov	r2, r5
 800cbb4:	4b05      	ldr	r3, [pc, #20]	@ (800cbcc <_svfiprintf_r+0x1f0>)
 800cbb6:	a904      	add	r1, sp, #16
 800cbb8:	4638      	mov	r0, r7
 800cbba:	f7fd f85f 	bl	8009c7c <_printf_i>
 800cbbe:	e7ed      	b.n	800cb9c <_svfiprintf_r+0x1c0>
 800cbc0:	0800d7c9 	.word	0x0800d7c9
 800cbc4:	0800d7d3 	.word	0x0800d7d3
 800cbc8:	0800974d 	.word	0x0800974d
 800cbcc:	0800c927 	.word	0x0800c927
 800cbd0:	0800d7cf 	.word	0x0800d7cf

0800cbd4 <__sfputc_r>:
 800cbd4:	6893      	ldr	r3, [r2, #8]
 800cbd6:	3b01      	subs	r3, #1
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	b410      	push	{r4}
 800cbdc:	6093      	str	r3, [r2, #8]
 800cbde:	da08      	bge.n	800cbf2 <__sfputc_r+0x1e>
 800cbe0:	6994      	ldr	r4, [r2, #24]
 800cbe2:	42a3      	cmp	r3, r4
 800cbe4:	db01      	blt.n	800cbea <__sfputc_r+0x16>
 800cbe6:	290a      	cmp	r1, #10
 800cbe8:	d103      	bne.n	800cbf2 <__sfputc_r+0x1e>
 800cbea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbee:	f7fd bd45 	b.w	800a67c <__swbuf_r>
 800cbf2:	6813      	ldr	r3, [r2, #0]
 800cbf4:	1c58      	adds	r0, r3, #1
 800cbf6:	6010      	str	r0, [r2, #0]
 800cbf8:	7019      	strb	r1, [r3, #0]
 800cbfa:	4608      	mov	r0, r1
 800cbfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc00:	4770      	bx	lr

0800cc02 <__sfputs_r>:
 800cc02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc04:	4606      	mov	r6, r0
 800cc06:	460f      	mov	r7, r1
 800cc08:	4614      	mov	r4, r2
 800cc0a:	18d5      	adds	r5, r2, r3
 800cc0c:	42ac      	cmp	r4, r5
 800cc0e:	d101      	bne.n	800cc14 <__sfputs_r+0x12>
 800cc10:	2000      	movs	r0, #0
 800cc12:	e007      	b.n	800cc24 <__sfputs_r+0x22>
 800cc14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc18:	463a      	mov	r2, r7
 800cc1a:	4630      	mov	r0, r6
 800cc1c:	f7ff ffda 	bl	800cbd4 <__sfputc_r>
 800cc20:	1c43      	adds	r3, r0, #1
 800cc22:	d1f3      	bne.n	800cc0c <__sfputs_r+0xa>
 800cc24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc28 <_vfiprintf_r>:
 800cc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc2c:	460d      	mov	r5, r1
 800cc2e:	b09d      	sub	sp, #116	@ 0x74
 800cc30:	4614      	mov	r4, r2
 800cc32:	4698      	mov	r8, r3
 800cc34:	4606      	mov	r6, r0
 800cc36:	b118      	cbz	r0, 800cc40 <_vfiprintf_r+0x18>
 800cc38:	6a03      	ldr	r3, [r0, #32]
 800cc3a:	b90b      	cbnz	r3, 800cc40 <_vfiprintf_r+0x18>
 800cc3c:	f7fd fbd6 	bl	800a3ec <__sinit>
 800cc40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc42:	07d9      	lsls	r1, r3, #31
 800cc44:	d405      	bmi.n	800cc52 <_vfiprintf_r+0x2a>
 800cc46:	89ab      	ldrh	r3, [r5, #12]
 800cc48:	059a      	lsls	r2, r3, #22
 800cc4a:	d402      	bmi.n	800cc52 <_vfiprintf_r+0x2a>
 800cc4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc4e:	f7fd fe70 	bl	800a932 <__retarget_lock_acquire_recursive>
 800cc52:	89ab      	ldrh	r3, [r5, #12]
 800cc54:	071b      	lsls	r3, r3, #28
 800cc56:	d501      	bpl.n	800cc5c <_vfiprintf_r+0x34>
 800cc58:	692b      	ldr	r3, [r5, #16]
 800cc5a:	b99b      	cbnz	r3, 800cc84 <_vfiprintf_r+0x5c>
 800cc5c:	4629      	mov	r1, r5
 800cc5e:	4630      	mov	r0, r6
 800cc60:	f7fd fd4a 	bl	800a6f8 <__swsetup_r>
 800cc64:	b170      	cbz	r0, 800cc84 <_vfiprintf_r+0x5c>
 800cc66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc68:	07dc      	lsls	r4, r3, #31
 800cc6a:	d504      	bpl.n	800cc76 <_vfiprintf_r+0x4e>
 800cc6c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc70:	b01d      	add	sp, #116	@ 0x74
 800cc72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc76:	89ab      	ldrh	r3, [r5, #12]
 800cc78:	0598      	lsls	r0, r3, #22
 800cc7a:	d4f7      	bmi.n	800cc6c <_vfiprintf_r+0x44>
 800cc7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc7e:	f7fd fe59 	bl	800a934 <__retarget_lock_release_recursive>
 800cc82:	e7f3      	b.n	800cc6c <_vfiprintf_r+0x44>
 800cc84:	2300      	movs	r3, #0
 800cc86:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc88:	2320      	movs	r3, #32
 800cc8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cc8e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc92:	2330      	movs	r3, #48	@ 0x30
 800cc94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ce44 <_vfiprintf_r+0x21c>
 800cc98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cc9c:	f04f 0901 	mov.w	r9, #1
 800cca0:	4623      	mov	r3, r4
 800cca2:	469a      	mov	sl, r3
 800cca4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cca8:	b10a      	cbz	r2, 800ccae <_vfiprintf_r+0x86>
 800ccaa:	2a25      	cmp	r2, #37	@ 0x25
 800ccac:	d1f9      	bne.n	800cca2 <_vfiprintf_r+0x7a>
 800ccae:	ebba 0b04 	subs.w	fp, sl, r4
 800ccb2:	d00b      	beq.n	800cccc <_vfiprintf_r+0xa4>
 800ccb4:	465b      	mov	r3, fp
 800ccb6:	4622      	mov	r2, r4
 800ccb8:	4629      	mov	r1, r5
 800ccba:	4630      	mov	r0, r6
 800ccbc:	f7ff ffa1 	bl	800cc02 <__sfputs_r>
 800ccc0:	3001      	adds	r0, #1
 800ccc2:	f000 80a7 	beq.w	800ce14 <_vfiprintf_r+0x1ec>
 800ccc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ccc8:	445a      	add	r2, fp
 800ccca:	9209      	str	r2, [sp, #36]	@ 0x24
 800cccc:	f89a 3000 	ldrb.w	r3, [sl]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	f000 809f 	beq.w	800ce14 <_vfiprintf_r+0x1ec>
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	f04f 32ff 	mov.w	r2, #4294967295
 800ccdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cce0:	f10a 0a01 	add.w	sl, sl, #1
 800cce4:	9304      	str	r3, [sp, #16]
 800cce6:	9307      	str	r3, [sp, #28]
 800cce8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ccec:	931a      	str	r3, [sp, #104]	@ 0x68
 800ccee:	4654      	mov	r4, sl
 800ccf0:	2205      	movs	r2, #5
 800ccf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccf6:	4853      	ldr	r0, [pc, #332]	@ (800ce44 <_vfiprintf_r+0x21c>)
 800ccf8:	f7f3 fa8a 	bl	8000210 <memchr>
 800ccfc:	9a04      	ldr	r2, [sp, #16]
 800ccfe:	b9d8      	cbnz	r0, 800cd38 <_vfiprintf_r+0x110>
 800cd00:	06d1      	lsls	r1, r2, #27
 800cd02:	bf44      	itt	mi
 800cd04:	2320      	movmi	r3, #32
 800cd06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd0a:	0713      	lsls	r3, r2, #28
 800cd0c:	bf44      	itt	mi
 800cd0e:	232b      	movmi	r3, #43	@ 0x2b
 800cd10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd14:	f89a 3000 	ldrb.w	r3, [sl]
 800cd18:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd1a:	d015      	beq.n	800cd48 <_vfiprintf_r+0x120>
 800cd1c:	9a07      	ldr	r2, [sp, #28]
 800cd1e:	4654      	mov	r4, sl
 800cd20:	2000      	movs	r0, #0
 800cd22:	f04f 0c0a 	mov.w	ip, #10
 800cd26:	4621      	mov	r1, r4
 800cd28:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd2c:	3b30      	subs	r3, #48	@ 0x30
 800cd2e:	2b09      	cmp	r3, #9
 800cd30:	d94b      	bls.n	800cdca <_vfiprintf_r+0x1a2>
 800cd32:	b1b0      	cbz	r0, 800cd62 <_vfiprintf_r+0x13a>
 800cd34:	9207      	str	r2, [sp, #28]
 800cd36:	e014      	b.n	800cd62 <_vfiprintf_r+0x13a>
 800cd38:	eba0 0308 	sub.w	r3, r0, r8
 800cd3c:	fa09 f303 	lsl.w	r3, r9, r3
 800cd40:	4313      	orrs	r3, r2
 800cd42:	9304      	str	r3, [sp, #16]
 800cd44:	46a2      	mov	sl, r4
 800cd46:	e7d2      	b.n	800ccee <_vfiprintf_r+0xc6>
 800cd48:	9b03      	ldr	r3, [sp, #12]
 800cd4a:	1d19      	adds	r1, r3, #4
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	9103      	str	r1, [sp, #12]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	bfbb      	ittet	lt
 800cd54:	425b      	neglt	r3, r3
 800cd56:	f042 0202 	orrlt.w	r2, r2, #2
 800cd5a:	9307      	strge	r3, [sp, #28]
 800cd5c:	9307      	strlt	r3, [sp, #28]
 800cd5e:	bfb8      	it	lt
 800cd60:	9204      	strlt	r2, [sp, #16]
 800cd62:	7823      	ldrb	r3, [r4, #0]
 800cd64:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd66:	d10a      	bne.n	800cd7e <_vfiprintf_r+0x156>
 800cd68:	7863      	ldrb	r3, [r4, #1]
 800cd6a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd6c:	d132      	bne.n	800cdd4 <_vfiprintf_r+0x1ac>
 800cd6e:	9b03      	ldr	r3, [sp, #12]
 800cd70:	1d1a      	adds	r2, r3, #4
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	9203      	str	r2, [sp, #12]
 800cd76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cd7a:	3402      	adds	r4, #2
 800cd7c:	9305      	str	r3, [sp, #20]
 800cd7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ce54 <_vfiprintf_r+0x22c>
 800cd82:	7821      	ldrb	r1, [r4, #0]
 800cd84:	2203      	movs	r2, #3
 800cd86:	4650      	mov	r0, sl
 800cd88:	f7f3 fa42 	bl	8000210 <memchr>
 800cd8c:	b138      	cbz	r0, 800cd9e <_vfiprintf_r+0x176>
 800cd8e:	9b04      	ldr	r3, [sp, #16]
 800cd90:	eba0 000a 	sub.w	r0, r0, sl
 800cd94:	2240      	movs	r2, #64	@ 0x40
 800cd96:	4082      	lsls	r2, r0
 800cd98:	4313      	orrs	r3, r2
 800cd9a:	3401      	adds	r4, #1
 800cd9c:	9304      	str	r3, [sp, #16]
 800cd9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cda2:	4829      	ldr	r0, [pc, #164]	@ (800ce48 <_vfiprintf_r+0x220>)
 800cda4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cda8:	2206      	movs	r2, #6
 800cdaa:	f7f3 fa31 	bl	8000210 <memchr>
 800cdae:	2800      	cmp	r0, #0
 800cdb0:	d03f      	beq.n	800ce32 <_vfiprintf_r+0x20a>
 800cdb2:	4b26      	ldr	r3, [pc, #152]	@ (800ce4c <_vfiprintf_r+0x224>)
 800cdb4:	bb1b      	cbnz	r3, 800cdfe <_vfiprintf_r+0x1d6>
 800cdb6:	9b03      	ldr	r3, [sp, #12]
 800cdb8:	3307      	adds	r3, #7
 800cdba:	f023 0307 	bic.w	r3, r3, #7
 800cdbe:	3308      	adds	r3, #8
 800cdc0:	9303      	str	r3, [sp, #12]
 800cdc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdc4:	443b      	add	r3, r7
 800cdc6:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdc8:	e76a      	b.n	800cca0 <_vfiprintf_r+0x78>
 800cdca:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdce:	460c      	mov	r4, r1
 800cdd0:	2001      	movs	r0, #1
 800cdd2:	e7a8      	b.n	800cd26 <_vfiprintf_r+0xfe>
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	3401      	adds	r4, #1
 800cdd8:	9305      	str	r3, [sp, #20]
 800cdda:	4619      	mov	r1, r3
 800cddc:	f04f 0c0a 	mov.w	ip, #10
 800cde0:	4620      	mov	r0, r4
 800cde2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cde6:	3a30      	subs	r2, #48	@ 0x30
 800cde8:	2a09      	cmp	r2, #9
 800cdea:	d903      	bls.n	800cdf4 <_vfiprintf_r+0x1cc>
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d0c6      	beq.n	800cd7e <_vfiprintf_r+0x156>
 800cdf0:	9105      	str	r1, [sp, #20]
 800cdf2:	e7c4      	b.n	800cd7e <_vfiprintf_r+0x156>
 800cdf4:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdf8:	4604      	mov	r4, r0
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	e7f0      	b.n	800cde0 <_vfiprintf_r+0x1b8>
 800cdfe:	ab03      	add	r3, sp, #12
 800ce00:	9300      	str	r3, [sp, #0]
 800ce02:	462a      	mov	r2, r5
 800ce04:	4b12      	ldr	r3, [pc, #72]	@ (800ce50 <_vfiprintf_r+0x228>)
 800ce06:	a904      	add	r1, sp, #16
 800ce08:	4630      	mov	r0, r6
 800ce0a:	f7fc fc9f 	bl	800974c <_printf_float>
 800ce0e:	4607      	mov	r7, r0
 800ce10:	1c78      	adds	r0, r7, #1
 800ce12:	d1d6      	bne.n	800cdc2 <_vfiprintf_r+0x19a>
 800ce14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce16:	07d9      	lsls	r1, r3, #31
 800ce18:	d405      	bmi.n	800ce26 <_vfiprintf_r+0x1fe>
 800ce1a:	89ab      	ldrh	r3, [r5, #12]
 800ce1c:	059a      	lsls	r2, r3, #22
 800ce1e:	d402      	bmi.n	800ce26 <_vfiprintf_r+0x1fe>
 800ce20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce22:	f7fd fd87 	bl	800a934 <__retarget_lock_release_recursive>
 800ce26:	89ab      	ldrh	r3, [r5, #12]
 800ce28:	065b      	lsls	r3, r3, #25
 800ce2a:	f53f af1f 	bmi.w	800cc6c <_vfiprintf_r+0x44>
 800ce2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce30:	e71e      	b.n	800cc70 <_vfiprintf_r+0x48>
 800ce32:	ab03      	add	r3, sp, #12
 800ce34:	9300      	str	r3, [sp, #0]
 800ce36:	462a      	mov	r2, r5
 800ce38:	4b05      	ldr	r3, [pc, #20]	@ (800ce50 <_vfiprintf_r+0x228>)
 800ce3a:	a904      	add	r1, sp, #16
 800ce3c:	4630      	mov	r0, r6
 800ce3e:	f7fc ff1d 	bl	8009c7c <_printf_i>
 800ce42:	e7e4      	b.n	800ce0e <_vfiprintf_r+0x1e6>
 800ce44:	0800d7c9 	.word	0x0800d7c9
 800ce48:	0800d7d3 	.word	0x0800d7d3
 800ce4c:	0800974d 	.word	0x0800974d
 800ce50:	0800cc03 	.word	0x0800cc03
 800ce54:	0800d7cf 	.word	0x0800d7cf

0800ce58 <__sflush_r>:
 800ce58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ce5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce60:	0716      	lsls	r6, r2, #28
 800ce62:	4605      	mov	r5, r0
 800ce64:	460c      	mov	r4, r1
 800ce66:	d454      	bmi.n	800cf12 <__sflush_r+0xba>
 800ce68:	684b      	ldr	r3, [r1, #4]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	dc02      	bgt.n	800ce74 <__sflush_r+0x1c>
 800ce6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	dd48      	ble.n	800cf06 <__sflush_r+0xae>
 800ce74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ce76:	2e00      	cmp	r6, #0
 800ce78:	d045      	beq.n	800cf06 <__sflush_r+0xae>
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ce80:	682f      	ldr	r7, [r5, #0]
 800ce82:	6a21      	ldr	r1, [r4, #32]
 800ce84:	602b      	str	r3, [r5, #0]
 800ce86:	d030      	beq.n	800ceea <__sflush_r+0x92>
 800ce88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ce8a:	89a3      	ldrh	r3, [r4, #12]
 800ce8c:	0759      	lsls	r1, r3, #29
 800ce8e:	d505      	bpl.n	800ce9c <__sflush_r+0x44>
 800ce90:	6863      	ldr	r3, [r4, #4]
 800ce92:	1ad2      	subs	r2, r2, r3
 800ce94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ce96:	b10b      	cbz	r3, 800ce9c <__sflush_r+0x44>
 800ce98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ce9a:	1ad2      	subs	r2, r2, r3
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cea0:	6a21      	ldr	r1, [r4, #32]
 800cea2:	4628      	mov	r0, r5
 800cea4:	47b0      	blx	r6
 800cea6:	1c43      	adds	r3, r0, #1
 800cea8:	89a3      	ldrh	r3, [r4, #12]
 800ceaa:	d106      	bne.n	800ceba <__sflush_r+0x62>
 800ceac:	6829      	ldr	r1, [r5, #0]
 800ceae:	291d      	cmp	r1, #29
 800ceb0:	d82b      	bhi.n	800cf0a <__sflush_r+0xb2>
 800ceb2:	4a2a      	ldr	r2, [pc, #168]	@ (800cf5c <__sflush_r+0x104>)
 800ceb4:	40ca      	lsrs	r2, r1
 800ceb6:	07d6      	lsls	r6, r2, #31
 800ceb8:	d527      	bpl.n	800cf0a <__sflush_r+0xb2>
 800ceba:	2200      	movs	r2, #0
 800cebc:	6062      	str	r2, [r4, #4]
 800cebe:	04d9      	lsls	r1, r3, #19
 800cec0:	6922      	ldr	r2, [r4, #16]
 800cec2:	6022      	str	r2, [r4, #0]
 800cec4:	d504      	bpl.n	800ced0 <__sflush_r+0x78>
 800cec6:	1c42      	adds	r2, r0, #1
 800cec8:	d101      	bne.n	800cece <__sflush_r+0x76>
 800ceca:	682b      	ldr	r3, [r5, #0]
 800cecc:	b903      	cbnz	r3, 800ced0 <__sflush_r+0x78>
 800cece:	6560      	str	r0, [r4, #84]	@ 0x54
 800ced0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ced2:	602f      	str	r7, [r5, #0]
 800ced4:	b1b9      	cbz	r1, 800cf06 <__sflush_r+0xae>
 800ced6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ceda:	4299      	cmp	r1, r3
 800cedc:	d002      	beq.n	800cee4 <__sflush_r+0x8c>
 800cede:	4628      	mov	r0, r5
 800cee0:	f7fe fba2 	bl	800b628 <_free_r>
 800cee4:	2300      	movs	r3, #0
 800cee6:	6363      	str	r3, [r4, #52]	@ 0x34
 800cee8:	e00d      	b.n	800cf06 <__sflush_r+0xae>
 800ceea:	2301      	movs	r3, #1
 800ceec:	4628      	mov	r0, r5
 800ceee:	47b0      	blx	r6
 800cef0:	4602      	mov	r2, r0
 800cef2:	1c50      	adds	r0, r2, #1
 800cef4:	d1c9      	bne.n	800ce8a <__sflush_r+0x32>
 800cef6:	682b      	ldr	r3, [r5, #0]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d0c6      	beq.n	800ce8a <__sflush_r+0x32>
 800cefc:	2b1d      	cmp	r3, #29
 800cefe:	d001      	beq.n	800cf04 <__sflush_r+0xac>
 800cf00:	2b16      	cmp	r3, #22
 800cf02:	d11e      	bne.n	800cf42 <__sflush_r+0xea>
 800cf04:	602f      	str	r7, [r5, #0]
 800cf06:	2000      	movs	r0, #0
 800cf08:	e022      	b.n	800cf50 <__sflush_r+0xf8>
 800cf0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf0e:	b21b      	sxth	r3, r3
 800cf10:	e01b      	b.n	800cf4a <__sflush_r+0xf2>
 800cf12:	690f      	ldr	r7, [r1, #16]
 800cf14:	2f00      	cmp	r7, #0
 800cf16:	d0f6      	beq.n	800cf06 <__sflush_r+0xae>
 800cf18:	0793      	lsls	r3, r2, #30
 800cf1a:	680e      	ldr	r6, [r1, #0]
 800cf1c:	bf08      	it	eq
 800cf1e:	694b      	ldreq	r3, [r1, #20]
 800cf20:	600f      	str	r7, [r1, #0]
 800cf22:	bf18      	it	ne
 800cf24:	2300      	movne	r3, #0
 800cf26:	eba6 0807 	sub.w	r8, r6, r7
 800cf2a:	608b      	str	r3, [r1, #8]
 800cf2c:	f1b8 0f00 	cmp.w	r8, #0
 800cf30:	dde9      	ble.n	800cf06 <__sflush_r+0xae>
 800cf32:	6a21      	ldr	r1, [r4, #32]
 800cf34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cf36:	4643      	mov	r3, r8
 800cf38:	463a      	mov	r2, r7
 800cf3a:	4628      	mov	r0, r5
 800cf3c:	47b0      	blx	r6
 800cf3e:	2800      	cmp	r0, #0
 800cf40:	dc08      	bgt.n	800cf54 <__sflush_r+0xfc>
 800cf42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf4a:	81a3      	strh	r3, [r4, #12]
 800cf4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf54:	4407      	add	r7, r0
 800cf56:	eba8 0800 	sub.w	r8, r8, r0
 800cf5a:	e7e7      	b.n	800cf2c <__sflush_r+0xd4>
 800cf5c:	20400001 	.word	0x20400001

0800cf60 <_fflush_r>:
 800cf60:	b538      	push	{r3, r4, r5, lr}
 800cf62:	690b      	ldr	r3, [r1, #16]
 800cf64:	4605      	mov	r5, r0
 800cf66:	460c      	mov	r4, r1
 800cf68:	b913      	cbnz	r3, 800cf70 <_fflush_r+0x10>
 800cf6a:	2500      	movs	r5, #0
 800cf6c:	4628      	mov	r0, r5
 800cf6e:	bd38      	pop	{r3, r4, r5, pc}
 800cf70:	b118      	cbz	r0, 800cf7a <_fflush_r+0x1a>
 800cf72:	6a03      	ldr	r3, [r0, #32]
 800cf74:	b90b      	cbnz	r3, 800cf7a <_fflush_r+0x1a>
 800cf76:	f7fd fa39 	bl	800a3ec <__sinit>
 800cf7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d0f3      	beq.n	800cf6a <_fflush_r+0xa>
 800cf82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cf84:	07d0      	lsls	r0, r2, #31
 800cf86:	d404      	bmi.n	800cf92 <_fflush_r+0x32>
 800cf88:	0599      	lsls	r1, r3, #22
 800cf8a:	d402      	bmi.n	800cf92 <_fflush_r+0x32>
 800cf8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf8e:	f7fd fcd0 	bl	800a932 <__retarget_lock_acquire_recursive>
 800cf92:	4628      	mov	r0, r5
 800cf94:	4621      	mov	r1, r4
 800cf96:	f7ff ff5f 	bl	800ce58 <__sflush_r>
 800cf9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cf9c:	07da      	lsls	r2, r3, #31
 800cf9e:	4605      	mov	r5, r0
 800cfa0:	d4e4      	bmi.n	800cf6c <_fflush_r+0xc>
 800cfa2:	89a3      	ldrh	r3, [r4, #12]
 800cfa4:	059b      	lsls	r3, r3, #22
 800cfa6:	d4e1      	bmi.n	800cf6c <_fflush_r+0xc>
 800cfa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cfaa:	f7fd fcc3 	bl	800a934 <__retarget_lock_release_recursive>
 800cfae:	e7dd      	b.n	800cf6c <_fflush_r+0xc>

0800cfb0 <__swhatbuf_r>:
 800cfb0:	b570      	push	{r4, r5, r6, lr}
 800cfb2:	460c      	mov	r4, r1
 800cfb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfb8:	2900      	cmp	r1, #0
 800cfba:	b096      	sub	sp, #88	@ 0x58
 800cfbc:	4615      	mov	r5, r2
 800cfbe:	461e      	mov	r6, r3
 800cfc0:	da0d      	bge.n	800cfde <__swhatbuf_r+0x2e>
 800cfc2:	89a3      	ldrh	r3, [r4, #12]
 800cfc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cfc8:	f04f 0100 	mov.w	r1, #0
 800cfcc:	bf14      	ite	ne
 800cfce:	2340      	movne	r3, #64	@ 0x40
 800cfd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cfd4:	2000      	movs	r0, #0
 800cfd6:	6031      	str	r1, [r6, #0]
 800cfd8:	602b      	str	r3, [r5, #0]
 800cfda:	b016      	add	sp, #88	@ 0x58
 800cfdc:	bd70      	pop	{r4, r5, r6, pc}
 800cfde:	466a      	mov	r2, sp
 800cfe0:	f000 f862 	bl	800d0a8 <_fstat_r>
 800cfe4:	2800      	cmp	r0, #0
 800cfe6:	dbec      	blt.n	800cfc2 <__swhatbuf_r+0x12>
 800cfe8:	9901      	ldr	r1, [sp, #4]
 800cfea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cfee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cff2:	4259      	negs	r1, r3
 800cff4:	4159      	adcs	r1, r3
 800cff6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cffa:	e7eb      	b.n	800cfd4 <__swhatbuf_r+0x24>

0800cffc <__smakebuf_r>:
 800cffc:	898b      	ldrh	r3, [r1, #12]
 800cffe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d000:	079d      	lsls	r5, r3, #30
 800d002:	4606      	mov	r6, r0
 800d004:	460c      	mov	r4, r1
 800d006:	d507      	bpl.n	800d018 <__smakebuf_r+0x1c>
 800d008:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d00c:	6023      	str	r3, [r4, #0]
 800d00e:	6123      	str	r3, [r4, #16]
 800d010:	2301      	movs	r3, #1
 800d012:	6163      	str	r3, [r4, #20]
 800d014:	b003      	add	sp, #12
 800d016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d018:	ab01      	add	r3, sp, #4
 800d01a:	466a      	mov	r2, sp
 800d01c:	f7ff ffc8 	bl	800cfb0 <__swhatbuf_r>
 800d020:	9f00      	ldr	r7, [sp, #0]
 800d022:	4605      	mov	r5, r0
 800d024:	4639      	mov	r1, r7
 800d026:	4630      	mov	r0, r6
 800d028:	f7fe feac 	bl	800bd84 <_malloc_r>
 800d02c:	b948      	cbnz	r0, 800d042 <__smakebuf_r+0x46>
 800d02e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d032:	059a      	lsls	r2, r3, #22
 800d034:	d4ee      	bmi.n	800d014 <__smakebuf_r+0x18>
 800d036:	f023 0303 	bic.w	r3, r3, #3
 800d03a:	f043 0302 	orr.w	r3, r3, #2
 800d03e:	81a3      	strh	r3, [r4, #12]
 800d040:	e7e2      	b.n	800d008 <__smakebuf_r+0xc>
 800d042:	89a3      	ldrh	r3, [r4, #12]
 800d044:	6020      	str	r0, [r4, #0]
 800d046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d04a:	81a3      	strh	r3, [r4, #12]
 800d04c:	9b01      	ldr	r3, [sp, #4]
 800d04e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d052:	b15b      	cbz	r3, 800d06c <__smakebuf_r+0x70>
 800d054:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d058:	4630      	mov	r0, r6
 800d05a:	f000 f837 	bl	800d0cc <_isatty_r>
 800d05e:	b128      	cbz	r0, 800d06c <__smakebuf_r+0x70>
 800d060:	89a3      	ldrh	r3, [r4, #12]
 800d062:	f023 0303 	bic.w	r3, r3, #3
 800d066:	f043 0301 	orr.w	r3, r3, #1
 800d06a:	81a3      	strh	r3, [r4, #12]
 800d06c:	89a3      	ldrh	r3, [r4, #12]
 800d06e:	431d      	orrs	r5, r3
 800d070:	81a5      	strh	r5, [r4, #12]
 800d072:	e7cf      	b.n	800d014 <__smakebuf_r+0x18>

0800d074 <memmove>:
 800d074:	4288      	cmp	r0, r1
 800d076:	b510      	push	{r4, lr}
 800d078:	eb01 0402 	add.w	r4, r1, r2
 800d07c:	d902      	bls.n	800d084 <memmove+0x10>
 800d07e:	4284      	cmp	r4, r0
 800d080:	4623      	mov	r3, r4
 800d082:	d807      	bhi.n	800d094 <memmove+0x20>
 800d084:	1e43      	subs	r3, r0, #1
 800d086:	42a1      	cmp	r1, r4
 800d088:	d008      	beq.n	800d09c <memmove+0x28>
 800d08a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d08e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d092:	e7f8      	b.n	800d086 <memmove+0x12>
 800d094:	4402      	add	r2, r0
 800d096:	4601      	mov	r1, r0
 800d098:	428a      	cmp	r2, r1
 800d09a:	d100      	bne.n	800d09e <memmove+0x2a>
 800d09c:	bd10      	pop	{r4, pc}
 800d09e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0a6:	e7f7      	b.n	800d098 <memmove+0x24>

0800d0a8 <_fstat_r>:
 800d0a8:	b538      	push	{r3, r4, r5, lr}
 800d0aa:	4d07      	ldr	r5, [pc, #28]	@ (800d0c8 <_fstat_r+0x20>)
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	4604      	mov	r4, r0
 800d0b0:	4608      	mov	r0, r1
 800d0b2:	4611      	mov	r1, r2
 800d0b4:	602b      	str	r3, [r5, #0]
 800d0b6:	f7f6 fe21 	bl	8003cfc <_fstat>
 800d0ba:	1c43      	adds	r3, r0, #1
 800d0bc:	d102      	bne.n	800d0c4 <_fstat_r+0x1c>
 800d0be:	682b      	ldr	r3, [r5, #0]
 800d0c0:	b103      	cbz	r3, 800d0c4 <_fstat_r+0x1c>
 800d0c2:	6023      	str	r3, [r4, #0]
 800d0c4:	bd38      	pop	{r3, r4, r5, pc}
 800d0c6:	bf00      	nop
 800d0c8:	20000f6c 	.word	0x20000f6c

0800d0cc <_isatty_r>:
 800d0cc:	b538      	push	{r3, r4, r5, lr}
 800d0ce:	4d06      	ldr	r5, [pc, #24]	@ (800d0e8 <_isatty_r+0x1c>)
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	4604      	mov	r4, r0
 800d0d4:	4608      	mov	r0, r1
 800d0d6:	602b      	str	r3, [r5, #0]
 800d0d8:	f7f6 fe20 	bl	8003d1c <_isatty>
 800d0dc:	1c43      	adds	r3, r0, #1
 800d0de:	d102      	bne.n	800d0e6 <_isatty_r+0x1a>
 800d0e0:	682b      	ldr	r3, [r5, #0]
 800d0e2:	b103      	cbz	r3, 800d0e6 <_isatty_r+0x1a>
 800d0e4:	6023      	str	r3, [r4, #0]
 800d0e6:	bd38      	pop	{r3, r4, r5, pc}
 800d0e8:	20000f6c 	.word	0x20000f6c

0800d0ec <_sbrk_r>:
 800d0ec:	b538      	push	{r3, r4, r5, lr}
 800d0ee:	4d06      	ldr	r5, [pc, #24]	@ (800d108 <_sbrk_r+0x1c>)
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	4604      	mov	r4, r0
 800d0f4:	4608      	mov	r0, r1
 800d0f6:	602b      	str	r3, [r5, #0]
 800d0f8:	f7f6 fe28 	bl	8003d4c <_sbrk>
 800d0fc:	1c43      	adds	r3, r0, #1
 800d0fe:	d102      	bne.n	800d106 <_sbrk_r+0x1a>
 800d100:	682b      	ldr	r3, [r5, #0]
 800d102:	b103      	cbz	r3, 800d106 <_sbrk_r+0x1a>
 800d104:	6023      	str	r3, [r4, #0]
 800d106:	bd38      	pop	{r3, r4, r5, pc}
 800d108:	20000f6c 	.word	0x20000f6c

0800d10c <__assert_func>:
 800d10c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d10e:	4614      	mov	r4, r2
 800d110:	461a      	mov	r2, r3
 800d112:	4b09      	ldr	r3, [pc, #36]	@ (800d138 <__assert_func+0x2c>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	4605      	mov	r5, r0
 800d118:	68d8      	ldr	r0, [r3, #12]
 800d11a:	b14c      	cbz	r4, 800d130 <__assert_func+0x24>
 800d11c:	4b07      	ldr	r3, [pc, #28]	@ (800d13c <__assert_func+0x30>)
 800d11e:	9100      	str	r1, [sp, #0]
 800d120:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d124:	4906      	ldr	r1, [pc, #24]	@ (800d140 <__assert_func+0x34>)
 800d126:	462b      	mov	r3, r5
 800d128:	f000 f850 	bl	800d1cc <fiprintf>
 800d12c:	f000 f860 	bl	800d1f0 <abort>
 800d130:	4b04      	ldr	r3, [pc, #16]	@ (800d144 <__assert_func+0x38>)
 800d132:	461c      	mov	r4, r3
 800d134:	e7f3      	b.n	800d11e <__assert_func+0x12>
 800d136:	bf00      	nop
 800d138:	20000184 	.word	0x20000184
 800d13c:	0800d7da 	.word	0x0800d7da
 800d140:	0800d7e7 	.word	0x0800d7e7
 800d144:	0800d815 	.word	0x0800d815

0800d148 <_calloc_r>:
 800d148:	b570      	push	{r4, r5, r6, lr}
 800d14a:	fba1 5402 	umull	r5, r4, r1, r2
 800d14e:	b934      	cbnz	r4, 800d15e <_calloc_r+0x16>
 800d150:	4629      	mov	r1, r5
 800d152:	f7fe fe17 	bl	800bd84 <_malloc_r>
 800d156:	4606      	mov	r6, r0
 800d158:	b928      	cbnz	r0, 800d166 <_calloc_r+0x1e>
 800d15a:	4630      	mov	r0, r6
 800d15c:	bd70      	pop	{r4, r5, r6, pc}
 800d15e:	220c      	movs	r2, #12
 800d160:	6002      	str	r2, [r0, #0]
 800d162:	2600      	movs	r6, #0
 800d164:	e7f9      	b.n	800d15a <_calloc_r+0x12>
 800d166:	462a      	mov	r2, r5
 800d168:	4621      	mov	r1, r4
 800d16a:	f7fd fb1b 	bl	800a7a4 <memset>
 800d16e:	e7f4      	b.n	800d15a <_calloc_r+0x12>

0800d170 <_realloc_r>:
 800d170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d174:	4607      	mov	r7, r0
 800d176:	4614      	mov	r4, r2
 800d178:	460d      	mov	r5, r1
 800d17a:	b921      	cbnz	r1, 800d186 <_realloc_r+0x16>
 800d17c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d180:	4611      	mov	r1, r2
 800d182:	f7fe bdff 	b.w	800bd84 <_malloc_r>
 800d186:	b92a      	cbnz	r2, 800d194 <_realloc_r+0x24>
 800d188:	f7fe fa4e 	bl	800b628 <_free_r>
 800d18c:	4625      	mov	r5, r4
 800d18e:	4628      	mov	r0, r5
 800d190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d194:	f000 f833 	bl	800d1fe <_malloc_usable_size_r>
 800d198:	4284      	cmp	r4, r0
 800d19a:	4606      	mov	r6, r0
 800d19c:	d802      	bhi.n	800d1a4 <_realloc_r+0x34>
 800d19e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d1a2:	d8f4      	bhi.n	800d18e <_realloc_r+0x1e>
 800d1a4:	4621      	mov	r1, r4
 800d1a6:	4638      	mov	r0, r7
 800d1a8:	f7fe fdec 	bl	800bd84 <_malloc_r>
 800d1ac:	4680      	mov	r8, r0
 800d1ae:	b908      	cbnz	r0, 800d1b4 <_realloc_r+0x44>
 800d1b0:	4645      	mov	r5, r8
 800d1b2:	e7ec      	b.n	800d18e <_realloc_r+0x1e>
 800d1b4:	42b4      	cmp	r4, r6
 800d1b6:	4622      	mov	r2, r4
 800d1b8:	4629      	mov	r1, r5
 800d1ba:	bf28      	it	cs
 800d1bc:	4632      	movcs	r2, r6
 800d1be:	f7fd fbba 	bl	800a936 <memcpy>
 800d1c2:	4629      	mov	r1, r5
 800d1c4:	4638      	mov	r0, r7
 800d1c6:	f7fe fa2f 	bl	800b628 <_free_r>
 800d1ca:	e7f1      	b.n	800d1b0 <_realloc_r+0x40>

0800d1cc <fiprintf>:
 800d1cc:	b40e      	push	{r1, r2, r3}
 800d1ce:	b503      	push	{r0, r1, lr}
 800d1d0:	4601      	mov	r1, r0
 800d1d2:	ab03      	add	r3, sp, #12
 800d1d4:	4805      	ldr	r0, [pc, #20]	@ (800d1ec <fiprintf+0x20>)
 800d1d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1da:	6800      	ldr	r0, [r0, #0]
 800d1dc:	9301      	str	r3, [sp, #4]
 800d1de:	f7ff fd23 	bl	800cc28 <_vfiprintf_r>
 800d1e2:	b002      	add	sp, #8
 800d1e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1e8:	b003      	add	sp, #12
 800d1ea:	4770      	bx	lr
 800d1ec:	20000184 	.word	0x20000184

0800d1f0 <abort>:
 800d1f0:	b508      	push	{r3, lr}
 800d1f2:	2006      	movs	r0, #6
 800d1f4:	f000 f834 	bl	800d260 <raise>
 800d1f8:	2001      	movs	r0, #1
 800d1fa:	f7f6 fd2f 	bl	8003c5c <_exit>

0800d1fe <_malloc_usable_size_r>:
 800d1fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d202:	1f18      	subs	r0, r3, #4
 800d204:	2b00      	cmp	r3, #0
 800d206:	bfbc      	itt	lt
 800d208:	580b      	ldrlt	r3, [r1, r0]
 800d20a:	18c0      	addlt	r0, r0, r3
 800d20c:	4770      	bx	lr

0800d20e <_raise_r>:
 800d20e:	291f      	cmp	r1, #31
 800d210:	b538      	push	{r3, r4, r5, lr}
 800d212:	4605      	mov	r5, r0
 800d214:	460c      	mov	r4, r1
 800d216:	d904      	bls.n	800d222 <_raise_r+0x14>
 800d218:	2316      	movs	r3, #22
 800d21a:	6003      	str	r3, [r0, #0]
 800d21c:	f04f 30ff 	mov.w	r0, #4294967295
 800d220:	bd38      	pop	{r3, r4, r5, pc}
 800d222:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d224:	b112      	cbz	r2, 800d22c <_raise_r+0x1e>
 800d226:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d22a:	b94b      	cbnz	r3, 800d240 <_raise_r+0x32>
 800d22c:	4628      	mov	r0, r5
 800d22e:	f000 f831 	bl	800d294 <_getpid_r>
 800d232:	4622      	mov	r2, r4
 800d234:	4601      	mov	r1, r0
 800d236:	4628      	mov	r0, r5
 800d238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d23c:	f000 b818 	b.w	800d270 <_kill_r>
 800d240:	2b01      	cmp	r3, #1
 800d242:	d00a      	beq.n	800d25a <_raise_r+0x4c>
 800d244:	1c59      	adds	r1, r3, #1
 800d246:	d103      	bne.n	800d250 <_raise_r+0x42>
 800d248:	2316      	movs	r3, #22
 800d24a:	6003      	str	r3, [r0, #0]
 800d24c:	2001      	movs	r0, #1
 800d24e:	e7e7      	b.n	800d220 <_raise_r+0x12>
 800d250:	2100      	movs	r1, #0
 800d252:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d256:	4620      	mov	r0, r4
 800d258:	4798      	blx	r3
 800d25a:	2000      	movs	r0, #0
 800d25c:	e7e0      	b.n	800d220 <_raise_r+0x12>
	...

0800d260 <raise>:
 800d260:	4b02      	ldr	r3, [pc, #8]	@ (800d26c <raise+0xc>)
 800d262:	4601      	mov	r1, r0
 800d264:	6818      	ldr	r0, [r3, #0]
 800d266:	f7ff bfd2 	b.w	800d20e <_raise_r>
 800d26a:	bf00      	nop
 800d26c:	20000184 	.word	0x20000184

0800d270 <_kill_r>:
 800d270:	b538      	push	{r3, r4, r5, lr}
 800d272:	4d07      	ldr	r5, [pc, #28]	@ (800d290 <_kill_r+0x20>)
 800d274:	2300      	movs	r3, #0
 800d276:	4604      	mov	r4, r0
 800d278:	4608      	mov	r0, r1
 800d27a:	4611      	mov	r1, r2
 800d27c:	602b      	str	r3, [r5, #0]
 800d27e:	f7f6 fcdd 	bl	8003c3c <_kill>
 800d282:	1c43      	adds	r3, r0, #1
 800d284:	d102      	bne.n	800d28c <_kill_r+0x1c>
 800d286:	682b      	ldr	r3, [r5, #0]
 800d288:	b103      	cbz	r3, 800d28c <_kill_r+0x1c>
 800d28a:	6023      	str	r3, [r4, #0]
 800d28c:	bd38      	pop	{r3, r4, r5, pc}
 800d28e:	bf00      	nop
 800d290:	20000f6c 	.word	0x20000f6c

0800d294 <_getpid_r>:
 800d294:	f7f6 bcca 	b.w	8003c2c <_getpid>

0800d298 <_init>:
 800d298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d29a:	bf00      	nop
 800d29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d29e:	bc08      	pop	{r3}
 800d2a0:	469e      	mov	lr, r3
 800d2a2:	4770      	bx	lr

0800d2a4 <_fini>:
 800d2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2a6:	bf00      	nop
 800d2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2aa:	bc08      	pop	{r3}
 800d2ac:	469e      	mov	lr, r3
 800d2ae:	4770      	bx	lr
